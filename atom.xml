<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dai zhe&#39;s notes</title>
  
  <subtitle>Just Du It</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://daizhe.net.cn/"/>
  <updated>2019-02-10T12:30:59.280Z</updated>
  <id>https://daizhe.net.cn/</id>
  
  <author>
    <name>哆啦A梦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zabbix自定义监控项</title>
    <link href="https://daizhe.net.cn/2019/02/10/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BE%AE%E4%BF%A1%E6%8A%A5%E8%AD%A6/"/>
    <id>https://daizhe.net.cn/2019/02/10/zabbix自定义监控之自定义微信报警/</id>
    <published>2019-02-10T12:30:33.873Z</published>
    <updated>2019-02-10T12:30:59.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：zabbix自定义监控之自定义微信报警"><a href="#第二章：zabbix自定义监控之自定义微信报警" class="headerlink" title="第二章：zabbix自定义监控之自定义微信报警"></a>第二章：zabbix自定义监控之自定义微信报警</h1><p><img src="/2019/02/10/zabbix自定义监控之自定义微信报警/标题.gif" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章：zabbix自定义监控之自定义微信报警&quot;&gt;&lt;a href=&quot;#第二章：zabbix自定义监控之自定义微信报警&quot; class=&quot;headerlink&quot; title=&quot;第二章：zabbix自定义监控之自定义微信报警&quot;&gt;&lt;/a&gt;第二章：zabbix自定义监控之自定义微信报警&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/10/zabbix自定义监控之自定义微信报警/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix" scheme="https://daizhe.net.cn/categories/zabbix/"/>
    
    
      <category term="zabbix" scheme="https://daizhe.net.cn/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>zabbix自定义监控项</title>
    <link href="https://daizhe.net.cn/2019/02/10/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6/"/>
    <id>https://daizhe.net.cn/2019/02/10/zabbix自定义监控之自定义邮件报警/</id>
    <published>2019-02-10T12:26:05.446Z</published>
    <updated>2019-02-10T12:26:24.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：zabbix自定义监控之自定义邮件报警"><a href="#第二章：zabbix自定义监控之自定义邮件报警" class="headerlink" title="第二章：zabbix自定义监控之自定义邮件报警"></a>第二章：zabbix自定义监控之自定义邮件报警</h1><p><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/标题.gif" alt=""><br><a id="more"></a></p><h2 id="自定义邮件报警信息"><a href="#自定义邮件报警信息" class="headerlink" title="自定义邮件报警信息"></a>自定义邮件报警信息</h2><ul><li>当监控项超过触发器设定的阈值–&gt;触发动作–&gt;发送消息|执行动作</li><li>需要考虑到的问题<ul><li>1.怎么报警</li><li>2.报警怎么发</li><li>3.发什么内容</li><li>4.报警发给谁</li></ul></li></ul><p>1.打开动作选项（入门：定义的监控项的数值达到阈值时仅发生 wen界面的报警但并未有处理动作）<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/1.png" alt=""></p><p>2.设定消息发送的介质（邮件/微信）<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/2.png" alt=""><br>3.配置发件人的账号和授权码(注意：不是收件人)<br>使用qq邮箱接收信息开启邮箱一下功能<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/3.png" alt=""><br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/4.png" alt=""><br>4.配置收件人接收的邮箱地址<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/5.png" alt=""><br>5.添加收件人的邮箱，以及接受报警的等级<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/6.png" alt=""><br>6.一定要点击更新按钮<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/7.png" alt=""><br>7.测试触发邮箱报警<br>  继续使用入门级的监控agent客户端系统连接数<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/8.png" alt=""><br>  agent端开启三个窗口连接<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/9.png" alt=""><br>  已经触发报警<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/10.png" alt=""><br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/12.png" alt=""><br>  邮箱收到报警邮箱<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/11.png" alt="">  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章：zabbix自定义监控之自定义邮件报警&quot;&gt;&lt;a href=&quot;#第二章：zabbix自定义监控之自定义邮件报警&quot; class=&quot;headerlink&quot; title=&quot;第二章：zabbix自定义监控之自定义邮件报警&quot;&gt;&lt;/a&gt;第二章：zabbix自定义监控之自定义邮件报警&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/10/zabbix自定义监控之自定义邮件报警/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix" scheme="https://daizhe.net.cn/categories/zabbix/"/>
    
    
      <category term="zabbix" scheme="https://daizhe.net.cn/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>zabbix入门</title>
    <link href="https://daizhe.net.cn/2019/02/10/zabbix%E5%85%A5%E9%97%A8/"/>
    <id>https://daizhe.net.cn/2019/02/10/zabbix入门/</id>
    <published>2019-02-10T08:42:36.036Z</published>
    <updated>2019-02-10T08:50:03.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章：zabbix入门"><a href="#第一章：zabbix入门" class="headerlink" title="第一章：zabbix入门"></a>第一章：zabbix入门</h1><p><img src="/2019/02/10/zabbix入门/标题.gif" alt=""><br><a id="more"></a></p><h2 id="监控机基础知识概况"><a href="#监控机基础知识概况" class="headerlink" title="监控机基础知识概况"></a>监控机基础知识概况</h2><ul><li>zabbix并非监控，而是实现监控的工具</li><li>Zabbix-server是一个c/s和b/s结构</li><li>安装zabbbix的服务器安装时和php7.1有冲突：若此机器上已经安装php7.1就安装不上zabbix</li></ul><hr><h2 id="监控知识体系"><a href="#监控知识体系" class="headerlink" title="监控知识体系"></a>监控知识体系</h2><ul><li><p>为什么要使用监控</p><ul><li>1.对系统不间断实时监控</li><li>2.实时反馈系统当前状态</li><li>3.保证服务可靠性安全性</li><li>4.保证业务持续稳定运行</li></ul></li><li><p>监控怎么用，比如我们需要监控磁盘的使用率</p><ul><li>1.如何查看磁盘使用率 （df -h）</li><li>2.监控磁盘的哪些指标 （block、inode）</li><li>3.如何获取具体的信息 （df -h | awk ‘/\/$/{print $(NF-1)}’）</li><li>4.获取的数值到达多少报警 小于等于80%</li></ul></li><li><p>有哪些监控软件</p><ul><li>cacti、nagios、zabbix</li><li>lepus(天兔)数据库监控系统</li><li>open-falcon 小米</li><li>prometheus (普罗米修斯，dcker，k8s)</li></ul></li><li><p>如果去到一家新的公司，如何入手？</p><ul><li>1.硬件监控——路由器、交换机、防火墙</li><li>2.系统监控——cpu、内存、磁盘、网络、进程、tcp</li><li>3.服务监控——nginx、php、tomcat、redis、memcache、mysql</li><li>4.web监控——响应时间、加载时间、渲染时间</li><li>5.日志监控——ELK、（收集、存储、分析、展示）日志</li><li>6.安全监控——firewalld、WAF(nginx+lua)、安全宝、牛盾云、安全狗</li></ul></li></ul><hr><hr><h2 id="zabbix大纲"><a href="#zabbix大纲" class="headerlink" title="zabbix大纲"></a>zabbix大纲</h2><ul><li>0.单机监控</li><li>1.安装zabbix</li><li>2.zabbix基础架构</li><li>3.监控一台主机</li><li>4.自定义监控项  （自己编写脚本-&gt;zabbix）</li><li>5.自定义阈值    （达到预设的瓶颈）</li><li>6.自定义动作  （发邮件|执行命令）</li><li>7.自定义报警</li></ul><hr><hr><h2 id="单机监控"><a href="#单机监控" class="headerlink" title="单机监控"></a>单机监控</h2><ul><li>单机进程cpu查看负载和使用率<ul><li>uptime</li><li>top</li><li>htop</li><li>主要重要的查看项(调度用户&lt;——&gt;系统 ：上下文切换)<ul><li>us:用户空间的使用（小于等于35%）</li><li>sy：内核空间的使用（小于等于35%）<ul><li>查看此进程的用户/内核的使用 <ul><li>time ls</li></ul></li></ul></li><li>id cpu：空闲的cpu使用率（最低不得小于5%）</li></ul></li></ul></li><li>单机内存查看<ul><li>free -m</li></ul></li><li>单机磁盘查看<ul><li>df</li><li>iotop</li><li>iostat</li></ul></li><li><p>单机查看网络</p><ul><li>ifconfig</li><li>iftop -n<ul><li>界面显示的是类似刻度的范围，为显示流量图的长条作标尺用的</li><li>中间的&lt;= =&gt;这两个左右的箭头表示的是流量的方向<ul><li>TX：发送流量</li><li>RX：接收的流量</li><li>TOTAL: 总流量</li><li>Cumm: 运行iftop到目前时间的总流量</li><li>peak: 流量峰值</li><li>rates： 分别表示过去2s 10s 40s 的平均流量</li></ul></li></ul></li><li>nethogs</li><li>netstat <ul><li>-tnlp</li><li>-na</li><li>-rn</li></ul></li></ul></li><li><p><code>glances(可以查看全局的命令)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@example.com ~]<span class="comment"># yum install -y epel-release</span></span><br><span class="line">[root@example.com ~]<span class="comment"># yum install -y glances</span></span><br></pre></td></tr></table></figure></li><li><p>Mbps:  1000Mbps       Mbps / 8 = MB</p></li><li>MB:    12MB</li></ul><hr><h2 id="引入zabbix分布式监控系统"><a href="#引入zabbix分布式监控系统" class="headerlink" title="引入zabbix分布式监控系统"></a>引入zabbix分布式监控系统</h2><p>1.使用shell脚本来监控服务器</p><ul><li>内存：每隔1分钟，当你的可用内存低于100m,发送邮件报警，要求显示剩余内存<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">模拟可用内存低于100m</span><br><span class="line">        临时管理swap（swap硬盘模拟内存）</span><br><span class="line">            swapoff -a （关闭）</span><br><span class="line">            swapon -a (开启)</span><br><span class="line">        消耗内存</span><br><span class="line">            dd <span class="keyword">if</span>=/dev/ser0 of=/dev/null bs=800M</span><br><span class="line">            此时内存全部使用，但是系统不会崩溃，因为linux系当检测到内存全部用完的时候，为了保障系统不会崩溃，从而将使用内存最多的进程杀死（oom）。</span><br><span class="line"></span><br><span class="line">实现步骤：</span><br><span class="line">    1.怎么获取内存的可用值</span><br><span class="line">        ~]<span class="comment"># free -m | awk '/^Mem/&#123;print $NF&#125;'</span></span><br><span class="line">    2.获取到内存可用的值如何设定阈值进行比较</span><br><span class="line">    3.比较如果大于100m则不处理，如果小于100m则报警</span><br><span class="line"></span><br><span class="line">    编写脚本实现取出内存当前的阈值进行比较</span><br><span class="line">    ~]<span class="comment"># !vim</span></span><br><span class="line">    HostName=$(hostname)_$(hostname -i)</span><br><span class="line">    Date=$(date +%F)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">    Free=$(free -m|awk <span class="string">'/^Mem/&#123;print $NF&#125;'</span>)</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$Free</span> -le 100 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$Date</span> <span class="variable">$HostName</span> Mem Is &lt; <span class="variable">$&#123;Free&#125;</span>MB"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    4.如何每隔1分钟执行一次</span><br></pre></td></tr></table></figure></li></ul><hr><p>范例：</p><ul><li>公司未启用swap（swap也是公司中服务器不建议启用的，因为swap是将磁盘模拟内存使用，消耗cpu的性能，建议关闭swap。加大内存），随着客户的流量日益增大，导致将zabbix服务进程强制OOM，<br>Zabbix服务进程被kill，有两种解决的方法，如果公司为了性能着想加大内存，如果公司资有限添加swap,如果是为了服务的效率建议使用添加内存的方式，</li></ul><hr><ul><li>Zabbix-server是一个c/s和b/s结构</li></ul><h2 id="安装zabbix（单机）"><a href="#安装zabbix（单机）" class="headerlink" title="安装zabbix（单机）"></a>安装zabbix（单机）</h2><ul><li><p>官方安装使用手册：<a href="https://www.zabbix.com/documentation/4.0/zh/manual/installation" target="_blank" rel="noopener">https://www.zabbix.com/documentation/4.0/zh/manual/installation</a></p></li><li><p>服务端安装：端口10051 </p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">1.安装</span><br><span class="line">  ~]<span class="comment"># rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">2.安装Zabbix服务器，前端，代理（zabbix要连接数据库）解决的依赖关系，安装了php、httpd</span><br><span class="line">zabbix-agent ： zabbix客户端</span><br><span class="line">  ~]<span class="comment"># yum install zabbix-server-mysql zabbix-web-mysql zabbix-agent -y</span></span><br><span class="line"></span><br><span class="line">3.安装数据库</span><br><span class="line">  ~]<span class="comment"># yum install mariadb-server -y</span></span><br><span class="line"></span><br><span class="line">4.创建zabbix数据库以及用户</span><br><span class="line">  <span class="comment">#启动数据库，加入开机启动项</span></span><br><span class="line">  ~]<span class="comment"># systemctl start mariadb</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable mariadb</span></span><br><span class="line">  <span class="comment">#创建数据库并授权</span></span><br><span class="line">  ~]<span class="comment"># mysql -uroot</span></span><br><span class="line">  mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">  mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">'centos'</span>;</span><br><span class="line">  mysql&gt; quit;</span><br><span class="line"></span><br><span class="line">5.导入初始架构和数据。系统将提示您输入新创建的密码（）</span><br><span class="line">  ~]<span class="comment"># cd /usr/share/doc/zabbix-server-mysql-4.0.4/</span></span><br><span class="line">  <span class="comment">#查看压缩包的内容不解压zcat</span></span><br><span class="line">  <span class="comment">#导入到zabbix库中</span></span><br><span class="line">  zabbix-server-mysql-4.0.4]<span class="comment">#  zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uroot zabbix(zabbix为前面创建的数据库名称)</span></span><br><span class="line"></span><br><span class="line">6.启动zabbix server进程</span><br><span class="line">  <span class="comment">#在zabbix_server.conf中编辑配置数据库配置</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/zabbix/zabbix_server.conf </span></span><br><span class="line">  91行</span><br><span class="line">  <span class="comment"># DBHost=localhost    </span></span><br><span class="line">  <span class="comment">#数据库的地址，这里演示的为单机模式，默认也是localhost</span></span><br><span class="line">  100行</span><br><span class="line">  DBName=zabbix   </span><br><span class="line">  <span class="comment">#数据库的名称，这里演示创建的数据库的名称也为zabbix</span></span><br><span class="line">  116行</span><br><span class="line">  DBUser=zabbix</span><br><span class="line">  <span class="comment">#授权的数据库的用户</span></span><br><span class="line">  124行</span><br><span class="line">  DBPassword=centos</span><br><span class="line">  <span class="comment">#数据库的密码</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#启动前关闭selinux</span></span><br><span class="line">  ~]<span class="comment"># systemctl start zabbix-server</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable zabbix-server</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#保证80端口为安装zabbix时安装的依赖的httpd使用</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    *:10051 </span><br><span class="line">    *:3306</span><br><span class="line">    *:80</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">7.编辑zabbix前端的PHP配置</span><br><span class="line">  <span class="comment">#zabbix前端的apache配置文件位于/etc/httpd/conf.d/zabbix.conf 一些php设置已经完成了配置</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#依据所在的时区，设置时间，更改配置文件后，重启Apache服务器</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/httpd/conf.d/zabbix.conf </span></span><br><span class="line">  Alias /zabbix /usr/share/zabbix   <span class="comment">#如果访问uri路径为/zabbix 则调度到/usr/share/zabbix 路径下，别名意思</span></span><br><span class="line">  &lt;Directory <span class="string">"/usr/share/zabbix"</span>&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line"></span><br><span class="line">    &lt;IfModule mod_php5.c&gt;</span><br><span class="line">    ...</span><br><span class="line">  20行修改为(仅一次修改即可)</span><br><span class="line">        php_value date.timezone Asia/Shanghai</span><br><span class="line">    &lt;/IfModule&gt;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart httpd</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable httpd</span></span><br></pre></td></tr></table></figure><p>8.访问zabbix页面<br><img src="/2019/02/10/zabbix入门/1.png" alt=""><br>健康检测<br><img src="/2019/02/10/zabbix入门/1.png" alt=""><br>zabbix_web连接数据库<br><img src="/2019/02/10/zabbix入门/3.png" alt=""><br>zabbix_web连接zabbix_server<br><img src="/2019/02/10/zabbix入门/4.png" alt=""><br>确认配置<br><img src="/2019/02/10/zabbix入门/5.png" alt=""><br>生成的安装配置<br><img src="/2019/02/10/zabbix入门/6.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以在生成的此文件中，以后更改配置</span></span><br><span class="line"> ~]<span class="comment"># cat /etc/zabbix/web/zabbix.conf.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">// Zabbix GUI configuration file.</span><br><span class="line">global <span class="variable">$DB</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'TYPE'</span>]     = <span class="string">'MYSQL'</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'SERVER'</span>]   = <span class="string">'localhost'</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'PORT'</span>]     = <span class="string">'0'</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'DATABASE'</span>] = <span class="string">'zabbix'</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'USER'</span>]     = <span class="string">'zabbix'</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'PASSWORD'</span>] = <span class="string">'centos'</span>;</span><br><span class="line"></span><br><span class="line">// Schema name. Used <span class="keyword">for</span> IBM DB2 and PostgreSQL.</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'SCHEMA'</span>] = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ZBX_SERVER</span>      = <span class="string">'localhost'</span>;</span><br><span class="line"><span class="variable">$ZBX_SERVER_PORT</span> = <span class="string">'10051'</span>;</span><br><span class="line"><span class="variable">$ZBX_SERVER_NAME</span> = <span class="string">'代哲的zabbix'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$IMAGE_FORMAT_DEFAULT</span> = IMAGE_FORMAT_PNG;</span><br></pre></td></tr></table></figure></p><p>登陆</p><p><img src="/2019/02/10/zabbix入门/7.png" alt=""></p><p>初始登陆界面<br><img src="/2019/02/10/zabbix入门/8.png" alt=""><br>修改语言<br><img src="/2019/02/10/zabbix入门/9.png" alt=""></p><hr><h2 id="zabbix快速监控一台服务器"><a href="#zabbix快速监控一台服务器" class="headerlink" title="zabbix快速监控一台服务器"></a>zabbix快速监控一台服务器</h2><ul><li><p>监控一台服务器</p><ul><li>此被监控的主机必须安装客户端</li></ul></li><li><p>客户端安装：端口10050</p></li><li><p>zabbix客户端aliyun下载站点：<a href="https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/" target="_blank" rel="noopener">https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.被监控的主机安装客户端（zabbix-agent）</span><br><span class="line">  <span class="comment">#被监控的主机，安装zabbix客户端：zabbix-agent</span></span><br><span class="line">  ~]<span class="comment"># rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/zabbix-agent-3.4.3-1.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line">2.配置客户端（设置允许zabbix_server端的地址，声明此客户端允许那台服务端进行监控）</span><br><span class="line">  ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">  97行（填写server端的ip/主机名）</span><br><span class="line">  Server=192.168.52.202</span><br><span class="line"></span><br><span class="line">3.启动zabbix-agent客户端</span><br><span class="line">  ~]<span class="comment"># systemctl start zabbix-agent</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable zabbix-agent</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  :::10050</span><br></pre></td></tr></table></figure><hr><h3 id="服务端添加监控项，来监控已经安装zabbix-agent的客户端"><a href="#服务端添加监控项，来监控已经安装zabbix-agent的客户端" class="headerlink" title="服务端添加监控项，来监控已经安装zabbix-agent的客户端"></a>服务端添加监控项，来监控已经安装zabbix-agent的客户端</h3><ul><li>1.添加监控的主机</li></ul><p><img src="/2019/02/10/zabbix入门/10.png" alt=""></p><p><img src="/2019/02/10/zabbix入门/11.png" alt=""></p><ul><li>2.查看监控的</li></ul><p><img src="/2019/02/10/zabbix入门/12.png" alt=""></p><hr><h2 id="zabbix基础架构与分离数据库实战"><a href="#zabbix基础架构与分离数据库实战" class="headerlink" title="zabbix基础架构与分离数据库实战"></a>zabbix基础架构与分离数据库实战</h2><h4 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h4><ul><li><p>zbbix监控工具的基本架构<br>zabbix-agent—-&gt;zabbix-server—-&gt;数据库&lt;—– zabbix-web<br>数据采集 &ensp;&ensp;&ensp;  &ensp;             数据分析|报警  &ensp;  &ensp;   &ensp;  &ensp;     数据存储   &ensp;  &ensp;  &ensp;      数据展示</p></li><li><p>server端去主动向agent端收取数据</p></li></ul><p><img src="/2019/02/10/zabbix入门/13.png" alt=""></p><h4 id="分离数据实战"><a href="#分离数据实战" class="headerlink" title="分离数据实战"></a>分离数据实战</h4><ul><li>单台：<ul><li>LAMP</li></ul></li><li><p>拆分-架构</p><ul><li>LAP + Mysql</li></ul></li><li><p>单台主机监控性能是有瓶颈的，可以检测的主机也是有限的。</p></li></ul><p>单台–&gt;架构拆分的修改项</p><ul><li>zabbix-server<ul><li>修改zabbix-server连接数据库的连接信息<ul><li>/etc/zabbix/zabbix_server.conf</li></ul></li></ul></li><li>zabbix-web<ul><li>修改zabbix-web连接数据库的连接信息(web界面创建数据库连接界面点击生成)  <ul><li>/etc/zabbix/web/zabbix.conf.php</li></ul></li></ul></li></ul><p>范例：单机–&gt;架构拆分 LAP + MYSQL<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">将原有建立在zabbix-servers上的mariadb的数据库进行打包导入分离开来的新的数据库中</span><br><span class="line"></span><br><span class="line">1.在新的数据库上创建zabbix数据库</span><br><span class="line">    mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">    mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">'%'</span> identified by <span class="string">'centos'</span>;</span><br><span class="line"></span><br><span class="line">2.在旧的zabbix服务器上备份数据库文件，然后导入至新的数据库中</span><br><span class="line">    ~]<span class="comment"># mysqldump -uroot --databases zabbix --single-transaction &gt; `date +%F%H`-zabbix.sql</span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># cat 2019-02-1013-zabbix.sql | mysql -h 新的数据库的地址 -uzabbix -pcentos zabbix</span></span><br><span class="line"></span><br><span class="line">3.验证新的数据库是否已经备份旧的数据库的数据</span><br><span class="line">    ~]<span class="comment"># mysql -e "show databases;"</span></span><br><span class="line">    +--------------------+</span><br><span class="line">     Database           |</span><br><span class="line">    +--------------------+</span><br><span class="line">    | information_schema |</span><br><span class="line">    | mysql              |</span><br><span class="line">    | performance_schema |</span><br><span class="line">    | <span class="built_in">test</span>               |</span><br><span class="line">    | zabbix             |</span><br><span class="line">    +--------------------+</span><br><span class="line"></span><br><span class="line">4.修改zabbix-server的数据库连接的配置文件</span><br><span class="line">    ~]<span class="comment"># grep '^[a-Z]' /etc/zabbix/zabbix_server.conf</span></span><br><span class="line">    LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_server.log</span><br><span class="line">    LogFileSize=0</span><br><span class="line">    PidFile=/var/run/zabbix/zabbix_server.pid</span><br><span class="line">    SocketDir=/var/run/zabbix</span><br><span class="line">    DBHost=新的数据库的ip地址</span><br><span class="line">    DBName=zabbix   <span class="comment">#新的数据库的数据库名称</span></span><br><span class="line">    DBUser=zabbix   <span class="comment">#新的数据库上授权的账号的信息</span></span><br><span class="line">    SNMPTrapperFile=/var/<span class="built_in">log</span>/snmptrap/snmptrap.log</span><br><span class="line">    Timeout=4</span><br><span class="line">    AlertScriptsPath=/usr/lib/zabbix/alertscripts</span><br><span class="line">    ExternalScripts=/usr/lib/zabbix/externalscripts</span><br><span class="line">    LogSlowQueries=3000</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart zabbix-server</span></span><br><span class="line"></span><br><span class="line">5.修改zabbix-web连接数据库信息的配置文件</span><br><span class="line">    ~]<span class="comment"># vim /etc/zabbix/web/zabbix.conf.php</span></span><br><span class="line">    ~]<span class="comment"># systemctl restart httpd</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="zabbix自定义监控实战"><a href="#zabbix自定义监控实战" class="headerlink" title="zabbix自定义监控实战"></a>zabbix自定义监控实战</h2><ul><li><p>iostat</p><ul><li>命令可以对系统的磁盘IO和CPU使用情况进行监控。iostat属于sysstat软件包</li><li><p>常见的选项</p><ul><li>-c 显示CPU使用情况</li><li>-d 显示磁盘使用情况</li><li>-k 以 KB 为单位显示</li><li>-m 以 M 为单位显示</li><li>-N 显示磁盘阵列(LVM) 信息</li><li>-n 显示NFS 使用情况</li><li>-p[磁盘] 显示磁盘和分区的情况</li><li>-t 显示终端和CPU的信息</li><li>-x 显示详细信息</li><li>-V 显示版本信息</li></ul></li><li><p>执行命令可查看的字段信息解释</p><ul><li>%user：用户进程消耗cpu的比例</li><li>%nice：用户进程优先级调整消耗的cpu比例</li><li>%sys：系统内核消耗的cpu比例</li><li>%iowait：等待磁盘io所消耗的cpu比例</li><li>%idle：闲置cpu的比例（不包括等待磁盘io的s）</li><li>tps：该设备每秒的传输次数。“一次传输”意思是“一次I/O请求”。多个逻辑请求被合并为“一次I/O请求”。“一次传输”请求的大小是未知的。</li><li>kB_read/s：每秒从设备（drive expressed）读取的数据量</li><li>kB_wrtn/s：每秒向设备（drive expressed）写入的数据量</li><li>kB_read：读取的总数据量</li><li>kB_wrtn：写入的总数量数据量<ul><li>这些单位都为Kilobytes。</li></ul></li></ul></li><li>常用组合：<ul><li>iostat -k 1 10 或 iostat -m 1 10</li><li>iostat -d -x -k 1 10</li><li>iostart -c 1 10</li></ul></li></ul></li><li><p>定义监控项的要点</p><ul><li><p>1.监控的系统中的对象</p><ul><li>iostat | awk ‘/^sda/{print $2}’</li></ul></li><li><p>2.如何增加监控项</p><ul><li><code>Userparameter=&lt;监控项名称&gt;,&lt;监控项所指定的命令&gt;</code>(固定格式)</li></ul></li><li><p>3.agetnt如何验证自己是否有对应的监控项并取值</p><ul><li>~]# zabbix_agentd -p | grep</li></ul></li><li><p>4.zabbix-server如何验证zabbix-agent是否有对应的监控项</p><ul><li>zabbix-get</li></ul></li><li>5.zabbixweb界面进行关联zabbix-agent监控项</li></ul></li></ul><h5 id="范例：自定义监控的磁盘IO的，每秒传输次数"><a href="#范例：自定义监控的磁盘IO的，每秒传输次数" class="headerlink" title="范例：自定义监控的磁盘IO的，每秒传输次数"></a>范例：自定义监控的磁盘IO的，每秒传输次数</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">要想使得zabbix-server端主动去收集zabbix-agent端的指定的数据信息，需要在zabbix-agent定义监控的系统对象</span><br><span class="line"></span><br><span class="line">zabbix-agnet端的配置文件中包含了一些定义的配置文件的位置可以将监控的系统对象写在此包含的文件中</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">Include=/etc/zabbix/zabbix_agentd.d/*.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.zabbix-agent监控的系统中的对象</span><br><span class="line">        - iostat | awk <span class="string">'/^sda/&#123;print $2&#125;'</span></span><br><span class="line"></span><br><span class="line">2.在zabbix-agent端定义监控磁盘IO每秒传输的速率</span><br><span class="line">    ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.d/iostart.conf</span></span><br><span class="line">    UserParameter=IO,iostat | awk <span class="string">'/^sda/&#123;print $2&#125;'</span></span><br><span class="line"></span><br><span class="line">3.重启agent客户端，验证是否已经添加到监控项</span><br><span class="line">    ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br><span class="line">    ~]<span class="comment"># zabbix_agentd -p | grep IO</span></span><br><span class="line">        IO       [t|2.53]       <span class="comment">#如果此处出现IO       [t| IO commond not found] 表示这个iostat命令未安装</span></span><br><span class="line"></span><br><span class="line">4.zabbix-server验证zabbix-agent是否有对应的监控项</span><br><span class="line">    ~]<span class="comment"># yum install zabbix-get -y</span></span><br><span class="line">    zabbix-get</span><br><span class="line">        -s 指定agent ip地址</span><br><span class="line">        -k 指定定义在agent监控项的名称</span><br><span class="line">        -p 指定agent 端口 ，默认为10050</span><br><span class="line">    ~]<span class="comment"># zabbix_get -s 172.20.139.70 -k IO</span></span><br><span class="line">        2.25</span><br></pre></td></tr></table></figure><p>5.zabbixweb界面进行关联zabbix-agent监控项<br>图1<br><img src="/2019/02/10/zabbix入门/14.png" alt=""><br>图2<br><img src="/2019/02/10/zabbix入门/15.png" alt=""><br>图3<br><img src="/2019/02/10/zabbix入门/16.png" alt=""></p><h2 id="zabbix自定义监控阈值实战"><a href="#zabbix自定义监控阈值实战" class="headerlink" title="zabbix自定义监控阈值实战"></a>zabbix自定义监控阈值实战</h2><ul><li>监控项检测到监控的数据达到一个阈值则触发报警信息</li></ul><hr><h3 id="系统默认监控agent中-etc-passwd文件发生变化报警"><a href="#系统默认监控agent中-etc-passwd文件发生变化报警" class="headerlink" title="系统默认监控agent中/etc/passwd文件发生变化报警"></a><code>系统默认监控agent中/etc/passwd文件发生变化报警</code></h3><p>1.缩短检测/etc/passwd文件的时长方便检测<br><img src="/2019/02/10/zabbix入门/17.png" alt=""><br>2.开启报警<br><img src="/2019/02/10/zabbix入门/18.png" alt=""><br>3.在客户端修改/etc/passwd文件触发报警（web页面报警）<br><img src="/2019/02/10/zabbix入门/19.png" alt=""><br><img src="/2019/02/10/zabbix入门/20.png" alt=""></p><hr><h3 id="针对系统默认监控的系统主机登陆的终端个数来定义报警"><a href="#针对系统默认监控的系统主机登陆的终端个数来定义报警" class="headerlink" title="针对系统默认监控的系统主机登陆的终端个数来定义报警"></a><code>针对系统默认监控的系统主机登陆的终端个数来定义报警</code></h3><p><img src="/2019/02/10/zabbix入门/21.png" alt=""></p><p>1.定义触发器，如果系统登陆的终端如果大于2则触发报警信息<br><img src="/2019/02/10/zabbix入门/22.png" alt=""><br><img src="/2019/02/10/zabbix入门/23.png" alt=""></p><p>2.查看定义的监控项<br><img src="/2019/02/10/zabbix入门/24.png" alt=""><br>3.触发监控的报警<br><img src="/2019/02/10/zabbix入门/25.png" alt=""><br>4.已经收到报警<br><img src="/2019/02/10/zabbix入门/26.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章：zabbix入门&quot;&gt;&lt;a href=&quot;#第一章：zabbix入门&quot; class=&quot;headerlink&quot; title=&quot;第一章：zabbix入门&quot;&gt;&lt;/a&gt;第一章：zabbix入门&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/10/zabbix入门/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix" scheme="https://daizhe.net.cn/categories/zabbix/"/>
    
    
      <category term="zabbix" scheme="https://daizhe.net.cn/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>keepalived使用基础</title>
    <link href="https://daizhe.net.cn/2019/02/04/keepalived%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
    <id>https://daizhe.net.cn/2019/02/04/keepalived使用基础/</id>
    <published>2019-02-04T08:37:37.710Z</published>
    <updated>2019-02-04T09:02:13.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keepalived使用基础"><a href="#keepalived使用基础" class="headerlink" title="keepalived使用基础"></a>keepalived使用基础</h1><p><img src="/2019/02/04/keepalived使用基础/标题.gif" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;keepalived使用基础&quot;&gt;&lt;a href=&quot;#keepalived使用基础&quot; class=&quot;headerlink&quot; title=&quot;keepalived使用基础&quot;&gt;&lt;/a&gt;keepalived使用基础&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/04/keepalived使用基础/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="keepalived" scheme="https://daizhe.net.cn/categories/keepalived/"/>
    
    
      <category term="keepalived" scheme="https://daizhe.net.cn/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>keepalived简介</title>
    <link href="https://daizhe.net.cn/2019/01/28/keepalived%E7%AE%80%E4%BB%8B/"/>
    <id>https://daizhe.net.cn/2019/01/28/keepalived简介/</id>
    <published>2019-01-28T08:36:32.931Z</published>
    <updated>2019-02-04T09:26:18.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keepalived简介"><a href="#keepalived简介" class="headerlink" title="keepalived简介"></a>keepalived简介</h1><p><img src="/2019/01/28/keepalived简介/标题.gif" alt=""><br><a id="more"></a></p><ul><li>HA 即（high available）高可用，又被叫做双机热备，用于关键性业务（冗余）。</li></ul><h2 id="高可用集群概念"><a href="#高可用集群概念" class="headerlink" title="高可用集群概念"></a>高可用集群概念</h2><ul><li>集群类型：<ul><li>LB     lvs/nginx（http/upstream, stream/upstream）</li><li>HA     高可用性（多适用于接入层的高可用）<ul><li>SPoF: Single Point of Failure，单点故障</li></ul></li><li>HPC    高性能集群(High Performance Computing)</li></ul></li><li><code>系统可用性：SLA(Service-Level Agreement)</code><ul><li>95%=(60<em>24</em>30)*(1-0.9995)</li><li>（指标）=99%, …, 99.999%，99.9999%</li></ul></li><li><p>系统故障：</p><ul><li>硬件故障：设计缺陷、wear out（损耗）、自然灾害……</li><li>软件故障：设计缺陷</li></ul></li><li><p>提升系统高用性的解决方案之降低MTTR(平均故障时间)</p><ul><li>解决方案：建立冗余机制<ul><li>active/passive    主/备</li><li>active/active    双主 </li><li>active –&gt; HEARTBEAT（心跳检测机制判断对方是否存活） –&gt; passive </li><li>active <--> HEARTBEAT <--> active</--></--></li></ul></li></ul></li><li><p>高可用的是“服务”</p><ul><li>HA nginx service：<ul><li>vip/nginx process[/shared storage]</li></ul></li><li>资源：组成一个高可用服务的“组件”<ul><li>(1) passive node的数量（从节点的数量）</li><li>(2) 资源切换（ip地址的切换或者说是服务的切换）</li></ul></li></ul></li><li><p>shared storage：共享存储</p><ul><li>NAS(Network Attached Storage)：网络附加存储，基于网络的共享文件系统。<ul><li>SAN(Storage Area Network)：存储区域网络，基于网络的块级别的共享    </li></ul></li></ul></li><li><p>Network partition：网络分区</p><ul><li>quorum：法定人数<ul><li>with quorum： &gt; total/2（剩余存活的节点一定是大于总节点的一半的）<ul><li>without quorum: &lt;= total/2（故障节点的数量，一定要小于总节点的一半）    </li></ul></li></ul></li><li>隔离设备： fence <ul><li>node：STONITH = Shooting The Other Node In The Head<ul><li>断电重启</li></ul></li><li>资源：断开存储的连接    </li></ul></li></ul></li><li><p>双节点集群(TWO nodes Cluster)</p><ul><li>辅助设备：ping node, quorum disk(仲裁设备)</li><li>Failover：故障切换，即某资源的主节点故障时，将资源转移至其它节点的操作</li><li>Failback：故障移回，即某资源的主节点故障后重新修改上线后，将之前已转移至其它节点的资源重新切回的过程</li></ul></li><li><p>HA Cluster实现方案:</p><ul><li>AIS(Applicaiton Interface Specification)应用程序接口规范        <ul><li>RHCS：Red Hat Cluster Suite红帽集群套件<ul><li>heartbeat：基于心跳监测实现服务高可用</li><li>pacemaker+corosync：资源管理与故障转移</li></ul></li><li><code>vrrp(Virtual Router Redundancy Protocol)：虚拟路由冗余协议,解决静态网关单点风险</code><ul><li>软件层—keepalived</li><li>物理层—路由器、三层交换机、防火墙</li></ul></li></ul></li></ul></li></ul><hr><h2 id="高可用集群-gt-后端存储"><a href="#高可用集群-gt-后端存储" class="headerlink" title="高可用集群-&gt;后端存储"></a>高可用集群-&gt;后端存储</h2><p><img src="/2019/01/28/keepalived简介/存储.png" alt=""></p><hr><h2 id="高可用集群-gt-后端存储-1"><a href="#高可用集群-gt-后端存储-1" class="headerlink" title="高可用集群-&gt;后端存储"></a>高可用集群-&gt;后端存储</h2><ul><li>JBOD （ Just a Bunch Of Disks ）不是标准的 RAID 等级，它通常用来表示一个没有控制软件提供协调控制的磁盘集合， JBOD 将多个物理磁盘串联起来，提供一个巨大的逻辑磁盘， JBOD 的数据存放机制是由第一块磁盘开始按顺序往后存储，当前磁盘存储空间用完后，再依次往后面的磁盘存储数据， JBOD 存储性能完全等同于单块磁盘，而且也不提供数据安全保护，它只是简单提供一种扩展存储空间的机制， JBOD 可用存储容量等于所有成员磁盘的存储空间之和。</li></ul><p><img src="/2019/01/28/keepalived简介/1.png" alt=""></p><h2 id="高可用集群-gt-网络层实现高可用（VRRP）"><a href="#高可用集群-gt-网络层实现高可用（VRRP）" class="headerlink" title="高可用集群-&gt;网络层实现高可用（VRRP）"></a>高可用集群-&gt;网络层实现高可用（VRRP）</h2><p><img src="/2019/01/28/keepalived简介/4.png" alt=""></p><h2 id="Keepalived简介"><a href="#Keepalived简介" class="headerlink" title="Keepalived简介"></a>Keepalived简介</h2><ul><li><code>Keepalived软件主要是通过VRRP协议实现高可用功能的。VRRP是Virtual Router RedundancyProtocol(虚拟路由器冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。</code></li><li>重要作用<ul><li>管理LVS负载均衡软件</li><li>实现LVS集群节点的健康检查中</li><li>作为系统网络服务的高可用性（failover）</li></ul></li></ul><hr><ul><li>keepalived:<ul><li>vrrp协议的软件实现，原生设计目的为了高可用ipvs服务</li></ul></li><li>功能：<ul><li>基于vrrp协议完成地址流动</li><li>为vip地址所在的节点生成ipvs规则(在配置文件中预先定义)</li><li>为ipvs集群的各RS做健康状态检测</li><li>基于脚本调用接口通过执行脚本完成脚本中定义的功能，进而影响集群事务，以此支持nginx、haproxy等服务</li></ul></li><li>组件：<ul><li>用户空间核心组件：<ul><li>vrrp stack-VIP消息通告</li><li>checkers-监测real server</li><li>system call-标记real server权重</li><li>SMTP-邮件组件</li><li>ipvs wrapper-生成IPVS规则</li><li>Netlink Reflector-网络接口<ul><li>WatchDog-监控进程</li></ul></li></ul></li><li>控制组件：配置文件分析器</li><li>IO复用器</li><li>内存管理组件</li></ul></li></ul><p><img src="/2019/01/28/keepalived简介/3.png" alt=""></p><ul><li>官方站点：<a href="http://keepalived.org/index.html" target="_blank" rel="noopener">http://keepalived.org/index.html</a></li><li>官方参考手册：<a href="http://keepalived.org/documentation.html" target="_blank" rel="noopener">http://keepalived.org/documentation.html</a></li><li>DOWNLOAD:<a href="http://keepalived.org/download.html" target="_blank" rel="noopener">http://keepalived.org/download.html</a></li></ul><hr><h2 id="keepalived："><a href="#keepalived：" class="headerlink" title="keepalived："></a>keepalived：</h2><ul><li>vrrp协议：Virtual Router Redundancy Protocol（keepalived基于此协议实现ip地址的高可用）</li></ul><ul><li>术语：<ul><li>虚拟路由器：Virtual Router </li><li>虚拟路由器标识：VRID(0-255)优先级，唯一标识虚拟路由器</li><li>物理路由器：<ul><li>master：主设备</li><li>backup：备用设备</li><li>priority：优先级（优先级数值越大，优先级越高）</li></ul></li><li>VIP：Virtual IP </li><li>VMAC：Virutal MAC (00-00-5e-00-01-VRID)：虚拟mac地址</li></ul></li></ul><hr><ul><li>通告：心跳，优先级等，周期性</li><li>工作方式：抢占式，非抢占式</li><li><p>安全工作：</p><ul><li>认证：<ul><li>无认证</li><li>简单字符认证：预共享密钥</li></ul></li></ul></li><li><p>工作模式：</p><ul><li>主/备：单虚拟路由器</li><li>主/主：主/备（虚拟路由器1），备/主（虚拟路由器2）</li></ul></li></ul><hr><h2 id="vrrp协议的工作流程"><a href="#vrrp协议的工作流程" class="headerlink" title="vrrp协议的工作流程"></a>vrrp协议的工作流程</h2><ul><li><p>vrrp（虚拟路由冗余协议）是一种容错协议，他保证当主机的吓一跳路由器出现故障时，由另一台路由器来代替出现故障的路由器进行工作，从而保持网络通讯的连续性和可靠性。</p></li><li><p>vrrp具有如下优点：</p><ul><li>简化网络管理。在具有多播或广播能力的局域网（如以太网）中，借助vrrp能在某台设备出现故障时仍然提供高可靠的缺省链路，有效避免单一链路发生的故障后网络终端的问题，而无需修改动态路由协议，路由发现协议等配置信息，也无需修改主机的默认的网关配置。</li><li>适应性强。vrrp报文封装在ip报文中，支持各种上层协议。</li><li>网络开销小，vrrp只定义了一种报文—vrrp通告报文，并且只有处于master状态的路由器可以发送vrrp报文</li></ul></li></ul><h2 id="vrrp协议中的相关的术语"><a href="#vrrp协议中的相关的术语" class="headerlink" title="vrrp协议中的相关的术语"></a>vrrp协议中的相关的术语</h2><ul><li>虚拟路由器：由一个master路由器和多个backup路由器组成，主机将虚拟路由器当作默认网关。</li><li>vrid：虚拟路由器的标识，有相同vrid的一组路由器构成一个虚拟路由器。</li><li>master路由器：虚拟路由器中承担报文转发任务的路由器。</li><li>backup路由器：master路由器出现故障时，能够代替master路由器工作的路由器。</li><li>虚拟ip地址：虚拟路由器的ip地址，一个虚拟路由器可以拥有一个或者多个ip地址。</li><li>ip地址拥有者：接口ip地址与虚拟ip地址相同的路由器被称之为ip地址拥有者。</li><li>虚拟mac地址：一个虚拟路由器拥有一个虚拟mac地址。虚拟mac地址的合适为00-00-5E-00-01-{VRID}。通常情况下，虚拟路由器回应ARP请求使用的时虚拟MAC地址，只有虚拟路由器做特殊配置的时候，才会赢接口的真实的MAC地址。</li><li>优先级：VRRP根据优先级来确定虚拟路由器中每台路由器的地位。</li><li>非抢占方式：如果backup路由器工作在非抢占方式下，则只要master路由器没有出现故障，backup路由器即使随后被配置了更高的优先级也不会为master路由器。</li><li>抢占方式：如果backup路由器工作在抢占方式下，当它收到vrrp报文后，会将自己的优先级与通告报文中的优先级进行比较。如果自己的优先级比当前master路由器的优先级高，就会主动抢占成为master路由器；否则，将保持backup状态。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;keepalived简介&quot;&gt;&lt;a href=&quot;#keepalived简介&quot; class=&quot;headerlink&quot; title=&quot;keepalived简介&quot;&gt;&lt;/a&gt;keepalived简介&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/28/keepalived简介/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="keepalived" scheme="https://daizhe.net.cn/categories/keepalived/"/>
    
    
      <category term="keepalived" scheme="https://daizhe.net.cn/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>HAproxyACL</title>
    <link href="https://daizhe.net.cn/2019/01/24/HAproxyACL/"/>
    <id>https://daizhe.net.cn/2019/01/24/HAproxyACL/</id>
    <published>2019-01-24T04:12:51.101Z</published>
    <updated>2019-02-02T08:18:37.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy的ACL过滤器及自定义错误页"><a href="#HAproxy的ACL过滤器及自定义错误页" class="headerlink" title="HAproxy的ACL过滤器及自定义错误页"></a>HAproxy的ACL过滤器及自定义错误页</h1><p><img src="/2019/01/24/HAproxyACL/标题.gif" alt=""><br><a id="more"></a></p><h2 id="一、ACL过滤器（七层http模式下）"><a href="#一、ACL过滤器（七层http模式下）" class="headerlink" title="一、ACL过滤器（七层http模式下）"></a>一、ACL过滤器（七层http模式下）</h2><ul><li><p>acl：对接收到的报文进行匹配和过滤，基于请求报文头部中的源地址、源端口、目标地址、目标端口、请求方法、URL、文件后缀等信息内容进行匹配并执行进一步操作（基于类型的调度决策）。</p><ul><li><code>acl &lt;aclname&gt;  &lt;criterion&gt;   [flags]           [operator]        [&lt;value&gt;]</code></li><li>acl   &ensp;&ensp;   名称    &ensp;&ensp;&ensp;&ensp;          过滤条件   &ensp;&ensp; &ensp;&ensp;     条件标记位   &ensp;&ensp;   具体操作符   &ensp;&ensp;   操作对象类型</li></ul></li><li><p>acl   image_service hdr_dom(host)   -i   img.daizhe.net.cn</p><ul><li>hdr_dom(host)：客户端请求的头部的域名<ul><li>用hots做匹配条件的好处，可以将ip地址复用，对一个ip进行监听，当用户请求进行请求时，可以将一个地址对应多个A记录解析的域名（一个ip地址监听多个公网的域名）。</li></ul></li><li>hdr_dom(User-Agent) ：客户端请求使用的浏览器的类型<ul><li>可以根据客户使用的类型，将客户发来的请求做处理转发。调度器转发后其他后端的提供服务的服务器上。</li></ul></li></ul></li><li>ACL名称，可以使用大字母A-Z、小写字母a-z、数字0-9、冒号：、点.、中横线和下划线，并且严格区分大小写，必须Image_site和image_site完全是两个acl(严格区分大小写)。</li></ul><h4 id="Criterion-ACL-定义ACL标准"><a href="#Criterion-ACL-定义ACL标准" class="headerlink" title="Criterion_ACL(定义ACL标准)"></a>Criterion_ACL(定义ACL标准)</h4><ul><li><p><code>&lt;criterion&gt; ：匹配条件</code></p><ul><li><code>dst         目标IP</code></li><li><code>dst_port       目标PORT</code></li><li><code>src            源IP</code></li><li><code>src_port      源PORT</code></li></ul></li><li><p><code>hdr &lt;string&gt;用于测试请求头部首部指定内容</code></p><ul><li><code>hdr_dom(host)  请求的host名称，如 www.daizhe.net.cn</code></li><li><code>hdr_beg(host)  请求的host开头，如 www. img. video. download. ftp.</code></li><li><code>hdr_end(host)  请求的host结尾，如 .com .net .cn</code></li><li><code>path_beg   请求的URL开头，如/static、/images、/img、/css</code></li><li><code>path_end   请求的URL中资源的结尾，如 .gif  .png  .css  .js .jpg .jpeg</code></li></ul></li></ul><h4 id="flags（条件标记位）"><a href="#flags（条件标记位）" class="headerlink" title="flags（条件标记位）"></a>flags（条件标记位）</h4><ul><li><code>&lt;flags&gt;-条件标记</code><ul><li>-i 不区分大小写(域名经过haproxy调度时不区分域名的字符大小写)</li><li>-m 使用指定的pattern匹配方法</li><li>-n 不做DNS解析<ul><li>-u 禁止acl重名，否则多个同名ACL匹配或关系(调度器上定义acl的名称尽量不要重名，如果有重名，默认隐含的是或的关系)</li><li>–  强制flag结束. 当字符串和某个flag相似时使用</li></ul></li></ul></li></ul><h4 id="operator（具体操作符）"><a href="#operator（具体操作符）" class="headerlink" title="operator（具体操作符）"></a>operator（具体操作符）</h4><ul><li>[operator]-操作符：<ul><li>整数比较：eq、ge、gt、le、lt<br>字符比较：</li><li>exact match     (-m str) :字符串必须完全匹配模式</li><li>substring match (-m sub) :在提取的字符串中查找模式，如果其中任何一个被发现，ACL将匹配</li><li>prefix match    (-m beg) :在提取的字符串首部中查找模式，如果其中任何一个被发现，ACL将匹配</li><li>suffix match    (-m end) :将模式与提取字符串的尾部进行比较，如果其中任何一个匹配，则ACL进行匹配</li><li>subdir match    (-m dir) :查看提取出来的用斜线分隔（“/”）的字符串，如果其中任何一个匹配，则ACL进行匹配</li><li>domain match    (-m dom) :查找提取的用点（“.”）分隔字符串，如果其中任何一个匹配，则ACL进行匹配    </li></ul></li></ul><h4 id="value（操作对象类型）"><a href="#value（操作对象类型）" class="headerlink" title="value（操作对象类型）"></a>value（操作对象类型）</h4><ul><li><code>&lt;value&gt;的类型：</code><ul><li>Boolean #布尔值</li><li>integer or integer range #整数或整数范围，比如用于匹配端口范围</li><li>IP address / network #IP地址或IP范围</li><li>string    （字符串的方式制定域名）</li><li>exact –精确比较</li><li>substring—子串    </li><li>prefix-前缀比较</li><li>subdir-路径， /wp-includes/js/jquery/jquery.js    #匹配子路径</li><li>domain-域名，daizhe.net.cn</li><li>regular expression  #正则表达式</li><li>hex block   #16进制</li></ul></li></ul><h2 id="Acl定义与调用"><a href="#Acl定义与调用" class="headerlink" title="Acl定义与调用"></a>Acl定义与调用</h2><ul><li><p>acl作为条件时的逻辑关系：</p><ul><li>与：隐式（默认）使用</li><li>或：使用“or” 或 “||”表示</li><li>否定：使用“!“ 表示    </li></ul></li><li><p>示例：</p><ul><li>if   invalid_src invalid_port      与关系</li><li>if invalid_src || invalid_port      或<ul><li>if ! invalid_src             非</li></ul></li></ul></li></ul><p><code>范例：调度器拒绝192.16.52.175的主机访问即调度器检测到此地址段的主机则不今次那个调度到后端的主机上</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">haproxy_server</span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        acl huaidan src 192.168.52.175  <span class="comment">####</span></span><br><span class="line">        block <span class="keyword">if</span> huaidan            <span class="comment">####</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        option forwardfor        server web1 192.168.52.162:80 cookie web1 check inter 2000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">     ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line"></span><br><span class="line">使用192.16.52.175的主机充当客户端访问调度器验证是否可进行后端服务器的调度</span><br><span class="line">    ~]<span class="comment"># curl 192.168.52.175:8888</span></span><br><span class="line">    &lt;html&gt;&lt;body&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;</span><br><span class="line">    Request forbidden by administrative rules.</span><br><span class="line">    &lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><hr><p>范例：acl中与关系的体现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#acl bad_curl hdr_sub(User-Agent) -i curl</span></span><br><span class="line"><span class="comment">#block if bad_curl</span></span><br><span class="line">定义客户端的请求报文中如果首部User-Agent的值有一个子字串，中是否存在curl命令，</span><br><span class="line"></span><br><span class="line">这里是两个条件一起判断则两个acl是与的关系，表示为来自192.16.52.175地址的主机并且是用curl命令请求数据，通过调度器转后端服务器时才被拒绝</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        acl huaidan src 192.168.52.175  <span class="comment">####</span></span><br><span class="line">        acl bad_curl hdr_sub(User-Agent) -i curl    <span class="comment">####</span></span><br><span class="line">        block <span class="keyword">if</span> huaidan bad_curl   <span class="comment">####</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line"></span><br><span class="line">使用192.16.52.175的主机充当客户端访问调度器验证是否可进行后端服务器的调度</span><br><span class="line">    <span class="comment"># 使用wget命令测试</span></span><br><span class="line">    ~]<span class="comment"># wget -O - -q http://192.168.52.175:8888</span></span><br><span class="line">    web1</span><br><span class="line">    <span class="comment"># 使用curl命令测试</span></span><br><span class="line">    ~]<span class="comment"># curl 192.168.52.175:8888</span></span><br><span class="line">    &lt;html&gt;&lt;body&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;</span><br><span class="line">    Request forbidden by administrative rules.</span><br><span class="line">    &lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>范例：acl中或关系的体现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">frontend web-port-80</span><br><span class="line">    mode http</span><br><span class="line">    rspadd X-Via:\ HAPorxy</span><br><span class="line">    <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">    default_backend websrvs</span><br><span class="line">    acl huaidan src 192.168.52.175</span><br><span class="line">    acl bad_curl hdr_sub(User-Agent) -i curl</span><br><span class="line">    block <span class="keyword">if</span> huaidan || bad_curl    <span class="comment">####</span></span><br><span class="line">backend websrvs</span><br><span class="line">    cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">    server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">    server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure></p><hr><h2 id="二、自定义错误页"><a href="#二、自定义错误页" class="headerlink" title="二、自定义错误页"></a>二、自定义错误页</h2><ul><li><p><code>errorfile &lt;code&gt; &lt;file&gt;</code></p><ul><li><p>返回文件内容，而不是HAProxy生成的错误</p></li><li><p><code>&lt;code&gt;:HTTP状态代码。目前，HAProxy能够生成代码200、400、403、408、500、502、503和504。</code></p></li><li><code>&lt;file&gt;:指定一个文件包含完整的HTTP响应。</code></li></ul></li></ul><p>范例：自定义错误页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">haproxy设置acl过滤器</span><br><span class="line"></span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        acl huaidan src 192.168.0.106</span><br><span class="line">        acl huandan1 hdr(User-Agent) -m sub -i chrome       <span class="comment">#定义客户段请求是通过chrome浏览器进行访问则拒绝</span></span><br><span class="line">        block <span class="keyword">if</span> huaidan || huaidan1        <span class="comment">#或的关系</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure></p><p>192.168.0.106客户端的windows主机进行访问测试<br>显示的为内建默认的错误页<br><img src="/2019/01/24/HAproxyACL/1.png" alt=""></p><p>自己定义错误页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">创建存放错误页面的路径</span><br><span class="line">    ~]<span class="comment"># mkdir /etc/haproxy/err_pages</span></span><br><span class="line"></span><br><span class="line">创建一个错误响应403调用的页面</span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/err_pages/403.forbiddeng.html</span></span><br><span class="line">    &lt;h1&gt;403&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">haproxy_server</span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        acl huaidan src 192.168.0.106</span><br><span class="line">        acl huandan1 hdr(User-Agent) -m sub -i chrome</span><br><span class="line">        block <span class="keyword">if</span> huaidan || huaidan1</span><br><span class="line">        errorfile 403 /etc/haproxy/err_pages/403.forbiddeng.html    <span class="comment">####</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure></p><hr><p>定义将错误的页面进行其他网站或者其他的url的跳转<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">   frontend web-port-80</span><br><span class="line">       mode http</span><br><span class="line">       rspadd X-Via:\ HAPorxy</span><br><span class="line">       <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">       default_backend websrvs</span><br><span class="line">       acl huaidan src 192.168.0.106</span><br><span class="line">       acl huandan1 hdr(User-Agent) -m sub -i chrome</span><br><span class="line">       block <span class="keyword">if</span> huaidan || huaidan1</span><br><span class="line">       errorloc302 403 https://www.daizhe.net.cn/    <span class="comment">####</span></span><br><span class="line">   backend websrvs</span><br><span class="line">       cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">       server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">       server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure></p><h2 id="三、acl-根据客户端请求的资源path进行acl过滤-user-backend"><a href="#三、acl-根据客户端请求的资源path进行acl过滤-user-backend" class="headerlink" title="三、acl (根据客户端请求的资源path进行acl过滤  user_backend)"></a>三、acl (根据客户端请求的资源path进行acl过滤  user_backend)</h2><ul><li>path     : exact string match</li><li>path_beg : prefix match</li><li>path_dir : subdir match</li><li>path_dom : domain match</li><li>path_end : suffix match</li><li>path_len : length match</li><li>path_reg : regex match</li><li>path_sub : substring match</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">定义客户的请求path中路径的内容，来进行调度</span><br><span class="line"></span><br><span class="line">frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs     <span class="comment">#默认的后端主机组</span></span><br><span class="line">        acl images path -m end -i .jpg .jpeg .png .gif      </span><br><span class="line">        <span class="comment">#如果客户请求的url资源是以这些文件类型结尾的</span></span><br><span class="line">        acl images path -m beg /images  </span><br><span class="line">        <span class="comment">#且请求的文件的路径是来自后端服务器中/images文件夹中</span></span><br><span class="line">        user_backend imagsrvs <span class="keyword">if</span> images   </span><br><span class="line">        <span class="comment">#如果满足上所述两个条则则全部归类到images，如果客户端请求的是images这类的文件则使用后端的imagsrvs 中的后端服务器组响应，反之则使用默认的服务器响应</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">    backend imagsrvs</span><br><span class="line">        server web3 192.168.62.88:80 check</span><br></pre></td></tr></table></figure><h2 id="四、http-request-七层负载acl"><a href="#四、http-request-七层负载acl" class="headerlink" title="四、http-request 七层负载acl"></a>四、http-request 七层负载acl</h2><ul><li><code>http-request { allow | deny } [ { if | unless } &lt;condition&gt; ]</code><ul><li>7层请求的访问控制<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">haproxy_server</span><br><span class="line"></span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        acl haoren src 192.168.52.100   <span class="comment">####</span></span><br><span class="line">        http-request allow <span class="keyword">if</span> haoren  <span class="comment">####  </span></span><br><span class="line">        <span class="comment">#定义了一个白名单仅允许192.168.52.100主机通过调度器访问后端的主机，来自其他源地址的主机则拒绝访问后端的主机</span></span><br><span class="line">        http-request deny   <span class="comment">####</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="五、tcp-request-四层负载acl"><a href="#五、tcp-request-四层负载acl" class="headerlink" title="五、tcp-request 四层负载acl"></a>五、tcp-request 四层负载acl</h2><ul><li><code>tcp-request connection {accept|reject}  [{if | unless} &lt;condition&gt;]</code><ul><li>根据第4层条件对传入连接执行操作</li></ul></li></ul><h2 id="六、url-（根据客户端请求的资源url进行acl过滤）"><a href="#六、url-（根据客户端请求的资源url进行acl过滤）" class="headerlink" title="六、url （根据客户端请求的资源url进行acl过滤）"></a>六、url （根据客户端请求的资源url进行acl过滤）</h2><ul><li>url     : exact string match</li><li>url_beg : prefix match</li><li>url_dir : subdir match</li><li>url_dom : domain match</li><li>url_end : suffix match</li><li>url_len : length match</li><li>url_reg : regex match</li><li><p>url_sub : substring match</p></li><li><p>url包括：</p><ul><li>协议</li><li>服务器</li><li>地址</li><li>端口</li><li>path</li></ul></li><li><p>url的范围要比path限制acl更广泛</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">定义合法的引用，如果为合法的引用则调度器则将客户端的请求调度到后端的服务器上，如果不为合法的引用则不进行调度</span><br><span class="line"></span><br><span class="line"><span class="comment">#仅允许来自daizhe字段的域名的外链的地址用户可以访问后端的服务器</span></span><br><span class="line"><span class="comment">#如果不符合此条件直接拒绝</span></span><br><span class="line"></span><br><span class="line">hproxy_server</span><br><span class="line">    </span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        acl hefadeyinyong（定义的acl名称） hdr(Referer) -m dom -i daizhe</span><br><span class="line">        block <span class="keyword">if</span> ! hefayinyong</span><br><span class="line"></span><br><span class="line">    backend websrvs</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">访问测试</span><br><span class="line">    直接访问调度器</span><br><span class="line">    ~]<span class="comment"># curl http: http://haproxy ip</span></span><br><span class="line">    403</span><br><span class="line">    模拟外链跳转来的访问</span><br><span class="line">    ~]<span class="comment"># curl -e "http://www.daizhe.net.cn http://haproxy ip"</span></span><br><span class="line">    200</span><br></pre></td></tr></table></figure><h2 id="七、内建的acl"><a href="#七、内建的acl" class="headerlink" title="七、内建的acl"></a>七、内建的acl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Pre-defined ACLs</span><br><span class="line">ACL nameEquivalent toUsage</span><br><span class="line">FALSEalways_falsenever match</span><br><span class="line">HTTPreq_proto_httpmatch <span class="keyword">if</span> protocol is valid HTTP</span><br><span class="line">HTTP_1.0req_ver 1.0match HTTP version 1.0</span><br><span class="line">HTTP_1.1req_ver 1.1match HTTP version 1.1</span><br><span class="line">HTTP_CONTENThdr_val(content-length) gt 0match an existing content-length</span><br><span class="line">HTTP_URL_ABSurl_reg ^[^/:]*://match absolute URL with scheme</span><br><span class="line">HTTP_URL_SLASHurl_beg /match URL beginning with <span class="string">"/"</span></span><br><span class="line">HTTP_URL_STARurl *match URL equal to <span class="string">"*"</span></span><br><span class="line">LOCALHOSTsrc 127.0.0.1/8match connection from <span class="built_in">local</span> host</span><br><span class="line">METH_CONNECTmethod CONNECTmatch HTTP CONNECT method</span><br><span class="line">METH_GETmethod GET HEADmatch HTTP GET or HEAD method</span><br><span class="line">METH_HEADmethod HEADmatch HTTP HEAD method</span><br><span class="line">METH_OPTIONSmethod OPTIONSmatch HTTP OPTIONS method</span><br><span class="line">METH_POSTmethod POSTmatch HTTP POST method</span><br><span class="line">METH_TRACEmethod TRACEmatch HTTP TRACE method</span><br><span class="line">RDP_COOKIEreq_rdp_cookie_cnt gt 0match presence of an RDP cookie</span><br><span class="line">REQ_CONTENTreq_len gt 0match data <span class="keyword">in</span> the request buffer</span><br><span class="line">TRUEalways_truealways match</span><br><span class="line">WAIT_ENDwait_end<span class="built_in">wait</span> <span class="keyword">for</span> end of content analysis</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy的ACL过滤器及自定义错误页&quot;&gt;&lt;a href=&quot;#HAproxy的ACL过滤器及自定义错误页&quot; class=&quot;headerlink&quot; title=&quot;HAproxy的ACL过滤器及自定义错误页&quot;&gt;&lt;/a&gt;HAproxy的ACL过滤器及自定义错误页&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/24/HAproxyACL/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>HAproxy日志配置及报文操作</title>
    <link href="https://daizhe.net.cn/2019/01/23/HAproxy%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%8A%A5%E6%96%87%E6%93%8D%E4%BD%9C/"/>
    <id>https://daizhe.net.cn/2019/01/23/HAproxy日志配置及报文操作/</id>
    <published>2019-01-23T12:49:55.592Z</published>
    <updated>2019-02-01T05:34:48.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy日志配置及报文操作"><a href="#HAproxy日志配置及报文操作" class="headerlink" title="HAproxy日志配置及报文操作"></a>HAproxy日志配置及报文操作</h1><p><img src="/2019/01/23/HAproxy日志配置及报文操作/标题.gif" alt=""><br><a id="more"></a></p><h2 id="一、配置HAProxy状态页"><a href="#一、配置HAProxy状态页" class="headerlink" title="一、配置HAProxy状态页"></a>一、配置HAProxy状态页</h2><h3 id="1-haproxy状态页面开启"><a href="#1-haproxy状态页面开启" class="headerlink" title="1.haproxy状态页面开启"></a>1.haproxy状态页面开启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">paproxy_server</span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">    listen stats</span><br><span class="line">    mode http</span><br><span class="line">    <span class="built_in">bind</span> 172.18.135.2:9999     <span class="comment">#默认监听的地址为0.0.0.0,最好不要监听本机的所有地址。监听的端口不要和现有的业务冲突</span></span><br><span class="line">    stats <span class="built_in">enable</span></span><br><span class="line">    <span class="built_in">log</span> global</span><br><span class="line">    stats uri     /haproxy-status       <span class="comment">#默认访问状态页面的uri（可以自己定义）</span></span><br><span class="line">    stats auth    haadmin:q1w2e3r4ys    <span class="comment">#默认访问uri的用户名和密码</span></span><br><span class="line">    stats auth    daizhe:123456        <span class="comment">#指定用户访问此uri提供的用户名和密码</span></span><br><span class="line">    stats realm HAPorxy\ Stats\ Page      <span class="comment">#设置用户访问uri时提示输入密码的提示信息</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    ~]<span class="comment"># systemctl restart haproxy</span></span><br></pre></td></tr></table></figure><p>web界面访问查看此状态页面</p><p><img src="/2019/01/23/HAproxy日志配置及报文操作/1.png" alt=""></p><p><img src="/2019/01/23/HAproxy日志配置及报文操作/2.png" alt=""></p><hr><h3 id="2-开启管理状态页面"><a href="#2-开启管理状态页面" class="headerlink" title="2.开启管理状态页面"></a>2.开启管理状态页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">    listen stats</span><br><span class="line">    mode http</span><br><span class="line">    <span class="built_in">bind</span> 172.18.135.2:9999</span><br><span class="line">    stats <span class="built_in">enable</span></span><br><span class="line">    <span class="built_in">log</span> global</span><br><span class="line">    stats uri     /haproxy-status</span><br><span class="line">    stats auth    haadmin:q1w2e3r4ys</span><br><span class="line">    stats auth    admin:123456</span><br><span class="line">    stats realm HAPorxy\ Stats\ Page</span><br><span class="line">    stats admin <span class="keyword">if</span> TRUE       <span class="comment">#如果登陆的是daizhe这个用户则打开状态管理页面（或者也可写为 stats admin if LOCAHOST 表示为如果访问的为本机的主机则允许验证账号授权登陆）</span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart haproxy</span></span><br></pre></td></tr></table></figure><p>web界面访问查看此状态页面</p><p><img src="/2019/01/23/HAproxy日志配置及报文操作/3.png" alt=""></p><hr><h3 id="3-隐藏管理状态页面的haproxy的版本号"><a href="#3-隐藏管理状态页面的haproxy的版本号" class="headerlink" title="3.隐藏管理状态页面的haproxy的版本号"></a>3.隐藏管理状态页面的haproxy的版本号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">    listen stats</span><br><span class="line">    mode http</span><br><span class="line">    <span class="built_in">bind</span> 172.18.135.2:9999</span><br><span class="line">    stats <span class="built_in">enable</span></span><br><span class="line">    <span class="built_in">log</span> global</span><br><span class="line">    stats uri     /haproxy-status</span><br><span class="line">    stats auth    haadmin:q1w2e3r4ys</span><br><span class="line">    stats auth    admin:123456</span><br><span class="line">    stats realm HAPorxy\ Stats\ Page</span><br><span class="line">    stats admin <span class="keyword">if</span> TRUE      </span><br><span class="line">    stats hide-version  <span class="comment">#隐藏版本号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart haproxy</span></span><br></pre></td></tr></table></figure><p>web界面访问查看此状态页面</p><p><img src="/2019/01/23/HAproxy日志配置及报文操作/4.png" alt=""></p><hr><h2 id="二、HAproxy修改报文首部-http模式"><a href="#二、HAproxy修改报文首部-http模式" class="headerlink" title="二、HAproxy修改报文首部(http模式)"></a>二、HAproxy修改报文首部(http模式)</h2><ul><li><h4 id="在请求报文尾部添加指定首部"><a href="#在请求报文尾部添加指定首部" class="headerlink" title="在请求报文尾部添加指定首部"></a>在请求报文尾部添加指定首部</h4><ul><li><code>reqadd  &lt;string&gt; [{if | unless} &lt;cond&gt;]</code></li></ul></li><li><h4 id="在响应报文尾部添加指定首部"><a href="#在响应报文尾部添加指定首部" class="headerlink" title="在响应报文尾部添加指定首部"></a>在响应报文尾部添加指定首部</h4><ul><li><code>rspadd &lt;string&gt; [{if | unless} &lt;cond&gt;]</code><ul><li>示例：rspadd X-Via:\ HAPorxy    </li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">客户端中可以查看到响应是通过haproxy调度器调度响应的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listen web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy      <span class="comment">####</span></span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        option forwardfor</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 172.18.135.5:8080 cookie web1 check inter 2000 fall 3 rise 5</span><br><span class="line">        server 172.18.135.5 172.18.135.1:8080 cookie web2 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure><p><img src="/2019/01/23/HAproxy日志配置及报文操作/5.png" alt=""></p><ul><li><h4 id="从请求报文中删除匹配正则表达式的首部"><a href="#从请求报文中删除匹配正则表达式的首部" class="headerlink" title="从请求报文中删除匹配正则表达式的首部"></a>从请求报文中删除匹配正则表达式的首部</h4><ul><li><code>reqdel  &lt;search&gt; [{if | unless} &lt;cond&gt;]</code></li><li><code>reqidel &lt;search&gt; [{if | unless} &lt;cond&gt;] 不分大小写</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">删除响应报文中的server字段的信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listen web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        rspdel Server:*</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        option forwardfor</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 172.18.135.5:8080 cookie web1 check inter 2000 fall 3 rise 5</span><br></pre></td></tr></table></figure><p><img src="/2019/01/23/HAproxy日志配置及报文操作/6.png" alt=""></p><ul><li><h4 id="从响应报文中删除匹配正则表达式的首部"><a href="#从响应报文中删除匹配正则表达式的首部" class="headerlink" title="从响应报文中删除匹配正则表达式的首部"></a>从响应报文中删除匹配正则表达式的首部</h4><ul><li><code>rspdel  &lt;search&gt; [{if | unless} &lt;cond&gt;]</code></li><li><code>rspidel &lt;search&gt; [{if | unless} &lt;cond&gt;]</code><ul><li>示例： rspidel  server.* #从相应报文删除server信息<ul><li>rspidel X-Powered-By:.*  #从响应报文删除X-Powered-By信息</li></ul></li></ul></li></ul></li></ul><h2 id="三、HAProxy-日志配置"><a href="#三、HAProxy-日志配置" class="headerlink" title="三、HAProxy 日志配置"></a>三、HAProxy 日志配置</h2><ul><li>在default配置项定义：<ul><li>log 127.0.0.1  local{1-7} info #基于syslog记录日志到指定设备，级别有(err、warning、info、debug)</li></ul></li></ul><p>范例：基于rsyslog配置收集haproxy日志信息(udp)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">开启haproxy服务器上的rsyslog功能</span><br><span class="line">     ~]<span class="comment"># vim /etc/rsyslog.conf </span></span><br><span class="line">    15~16行</span><br><span class="line">    <span class="variable">$ModLoad</span> imudp</span><br><span class="line">    <span class="variable">$UDPServerRun</span> 514</span><br><span class="line"></span><br><span class="line">    74行</span><br><span class="line">    local3.*    /var/<span class="built_in">log</span>/haproxy.log</span><br><span class="line"></span><br><span class="line">配置haproxy配置文件</span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">    global</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">log</span> 127.0.0.1 local3 info</span><br><span class="line"></span><br><span class="line">重启服务</span><br><span class="line">    ~]<span class="comment"># systemctl restart rsyslog haproxy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">客户访问后端web_server 查看haproxy日志</span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/23/HAproxy日志配置及报文操作/7.png" alt=""></p><p>范例：可以将haproxy日志格式使用tcp/http记录在rsyslog日志中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">配置HAProxy：</span><br><span class="line">listen  web_port</span><br><span class="line"> <span class="built_in">bind</span> 127.0.0.1:80</span><br><span class="line"> mode http</span><br><span class="line"> <span class="built_in">log</span> global</span><br><span class="line">option tcplog</span><br><span class="line"> server web1  127.0.0.1:8080  check inter 3000 fall 2 rise 5</span><br></pre></td></tr></table></figure></p><p>详细日志参考手册：<a href="http://cbonte.github.io/haproxy-dconv/1.8/configuration.html#8.1" target="_blank" rel="noopener">http://cbonte.github.io/haproxy-dconv/1.8/configuration.html#8.1</a></p><h2 id="四、自定义paproxy记录日志"><a href="#四、自定义paproxy记录日志" class="headerlink" title="四、自定义paproxy记录日志"></a>四、自定义paproxy记录日志</h2><ul><li><p>将特定信息记录在日志中</p><ul><li><code>capture cookie &lt;name&gt; len &lt;length&gt; #捕获请求和响应报文中的 cookie并记录日志</code></li><li><code>capture request header &lt;name&gt; len &lt;length&gt; #捕获请求报文中指定的首部内容和长度并记录日志</code></li><li><code>capture response header &lt;name&gt; len &lt;length&gt; #捕获响应报文中指定的内容和长度首部并记录日志</code></li></ul></li><li><p>示例：配置haproxy配置文件，注意配置字段和生效的位置（最好设置单独的listen中，仅对一组server生效）</p><ul><li>capture request  header Host len  256 </li><li>capture request header User-Agent len 512     <h2 id="五、压缩功能"><a href="#五、压缩功能" class="headerlink" title="五、压缩功能"></a>五、压缩功能</h2></li></ul></li><li>compression algo   #启用http协议中的压缩机制，常用算法有gzip deflate</li><li><p>compression type  #要压缩的类型</p></li><li><p>示例：</p><ul><li>compression algo gzip</li><li>compression type compression type text/plain text/html text/css text/xml text/javascript application/javascript</li></ul></li></ul><p><img src="/2019/01/23/HAproxy日志配置及报文操作/8.png" alt=""></p><h2 id="Web服务器状态监测"><a href="#Web服务器状态监测" class="headerlink" title="Web服务器状态监测"></a>Web服务器状态监测</h2><ul><li>option httpchk</li><li><code>option httpchk &lt;uri&gt;</code></li><li><code>option httpchk &lt;method&gt; &lt;uri&gt;</code></li><li><code>option httpchk &lt;method&gt; &lt;uri&gt; &lt;version&gt;</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">listen  web_prot_http_nodes</span><br><span class="line">    <span class="built_in">bind</span>  192.168.7.102:80</span><br><span class="line">    mode  http</span><br><span class="line">    <span class="built_in">log</span> global</span><br><span class="line">    option httpchk GET /wp-includes/js/jquery/jquery.js?ver=1.12.4 HTTP/1.0  <span class="comment">#基于指定URL</span></span><br><span class="line">    <span class="comment">#option httpchk HEAD /wp-includes/js/jquery/jquery.js?ver=1.12.4 HTTP/1.0\r\nHost:\ 192.168.7.102 #通过request获取的头部信息进行匹配进行健康检测</span></span><br><span class="line">     server 192.168.7.102  blogs.studylinux.net:80   check inter 3000 fall 3 rise 5</span><br><span class="line">     server 192.168.7.101 192.168.7.101:8080  cookie web1 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy日志配置及报文操作&quot;&gt;&lt;a href=&quot;#HAproxy日志配置及报文操作&quot; class=&quot;headerlink&quot; title=&quot;HAproxy日志配置及报文操作&quot;&gt;&lt;/a&gt;HAproxy日志配置及报文操作&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/23/HAproxy日志配置及报文操作/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>HAproxy基于cookie会话保持</title>
    <link href="https://daizhe.net.cn/2019/01/23/HAproxy%E5%9F%BA%E4%BA%8Ecookie%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/"/>
    <id>https://daizhe.net.cn/2019/01/23/HAproxy基于cookie会话保持/</id>
    <published>2019-01-23T12:18:29.061Z</published>
    <updated>2019-01-23T12:54:56.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy基于cookie会话保持"><a href="#HAproxy基于cookie会话保持" class="headerlink" title="HAproxy基于cookie会话保持"></a>HAproxy基于cookie会话保持</h1><p><img src="/2019/01/23/HAproxy基于cookie会话保持/标题.gif" alt=""><br><a id="more"></a></p><h2 id="Cookie-配置"><a href="#Cookie-配置" class="headerlink" title="Cookie 配置"></a>Cookie 配置</h2><ul><li><p><code>cookie &lt;value&gt;：为当前server指定cookie值，实现基于cookie的会话黏性</code></p><ul><li><code>cookie &lt;name&gt; [ rewrite | insert | prefix ] [ indirect ] [ nocache ]  [ postonly ] [ preserve ] [ httponly ] [ secure ]  [ domain &lt;domain&gt; ]* [ maxidle &lt;idle&gt; ] [ maxlife &lt;life&gt; ]</code></li></ul></li><li><p><code>&lt;name&gt;：cookie名称，用于实现持久连接</code></p><ul><li>rewrite：重写</li><li>insert：插入</li><li>prefix：前缀</li><li>nocache：当client和hapoxy之间有缓存时，不缓存cookie</li></ul></li></ul><h2 id="范例：使用haproxy实现基于cookie会话保持（haproxy必须在http协议的模式下实现）"><a href="#范例：使用haproxy实现基于cookie会话保持（haproxy必须在http协议的模式下实现）" class="headerlink" title="范例：使用haproxy实现基于cookie会话保持（haproxy必须在http协议的模式下实现）"></a>范例：使用haproxy实现基于cookie会话保持（haproxy必须在http协议的模式下实现）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟httpd_server不直接对外服务，通过haproxy负载对外进程调度服务</span></span><br><span class="line"><span class="comment">#范例：使用haproxy实现基于cookie会话保持（haproxy必须在http协议的模式下实现）也彻底解决会话调度不均衡</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实验准备</span><br><span class="line">  四台主机：</span><br><span class="line">    haproxy_server :  yum install haproxy -y</span><br><span class="line">    httpd_serverA : yum install httpd -y</span><br><span class="line">    httpd_serverB : yum install httpd -y</span><br><span class="line">    windows_firefox</span><br><span class="line"></span><br><span class="line">配置httpd_server测试页面</span><br><span class="line">  httpd_serverA</span><br><span class="line">  ~]<span class="comment"># echo "172.18.135.1" &gt; /var/www/html/index.html</span></span><br><span class="line">  ~]<span class="comment"># systemctl start httpd</span></span><br><span class="line">  修改端口8080</span><br><span class="line"></span><br><span class="line">  httpd_serverB</span><br><span class="line">  ~]<span class="comment"># echo "172.18.135.5" &gt; /var/www/html/index.html</span></span><br><span class="line">  ~]<span class="comment"># systemctl start httpd</span></span><br><span class="line">  修改端口8080</span><br><span class="line"></span><br><span class="line">配置haproxy负载</span><br><span class="line">  ~]<span class="comment"># yum install haproxy -y</span></span><br><span class="line">  ~]<span class="comment"># cat  /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  global</span><br><span class="line">  maxconn 100000</span><br><span class="line">  chroot /usr/<span class="built_in">local</span>/haproxy</span><br><span class="line">  <span class="comment">#stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin</span></span><br><span class="line">  uid 1111</span><br><span class="line">  gid 1111</span><br><span class="line">  daemon</span><br><span class="line">  nbproc 4</span><br><span class="line">  cpu-map 1 0</span><br><span class="line">  cpu-map 2 1</span><br><span class="line">  pidfile /usr/<span class="built_in">local</span>/haproxy/run/haproxy.pid</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 info</span><br><span class="line"></span><br><span class="line">  defaults</span><br><span class="line">  option http-keep-alive</span><br><span class="line">  option  forwardfor</span><br><span class="line">  maxconn 100000</span><br><span class="line">  mode http</span><br><span class="line">  timeout connect 300000ms</span><br><span class="line">  timeout client  300000ms</span><br><span class="line">  timeout server  300000ms</span><br><span class="line"></span><br><span class="line">  listen stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:9999</span><br><span class="line">  stats <span class="built_in">enable</span></span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats auth    haadmin:q1w2e3r4ys</span><br><span class="line"></span><br><span class="line">  <span class="comment">#httpd_server基于cookie实现调度</span></span><br><span class="line">  listen web-port-80                  <span class="comment">#web-port-80指定的此分组的名称</span></span><br><span class="line">        mode http                     <span class="comment">#必须为http</span></span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        option forwardfor</span><br><span class="line">        cookie SERVER-COOKIE  insert indirect nocache   <span class="comment">#不缓存</span></span><br><span class="line">        server web1 172.18.135.5:8080 cookie web1 check inter 2000 fall 3 rise 5    <span class="comment"># 172.18.135.5为定义的主机的名称，172.18.135.5:8080 定义的后端的主机的地址及服务的端口</span></span><br><span class="line">        server 172.18.135.5 172.18.135.1:8080 cookie web2 check inter 3000 fall 3 rise 5        <span class="comment">#cookie    指定cookie的值，实现区分不同的web_server,也可在请求的头部看到此信息</span></span><br><span class="line"></span><br><span class="line">  启动查看端口 </span><br><span class="line">    ~]<span class="comment"># systemctl start haproxy</span></span><br><span class="line">    ~]<span class="comment"># ss -tnl</span></span><br><span class="line">   9999   </span><br><span class="line">    172.18.135.2:80</span><br></pre></td></tr></table></figure><ul><li>windows_firefox测试</li></ul><p>客户端访问查看请求的头部（请求不跳转，实现基于cookie的会话保持和负载不均衡的情况）<br><img src="/2019/01/23/HAproxy基于cookie会话保持/1.png" alt=""></p><ul><li>也可以使用curl命令验证</li></ul><p><img src="/2019/01/23/HAproxy基于cookie会话保持/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy基于cookie会话保持&quot;&gt;&lt;a href=&quot;#HAproxy基于cookie会话保持&quot; class=&quot;headerlink&quot; title=&quot;HAproxy基于cookie会话保持&quot;&gt;&lt;/a&gt;HAproxy基于cookie会话保持&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/23/HAproxy基于cookie会话保持/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>HAproxy IP地址透传</title>
    <link href="https://daizhe.net.cn/2019/01/22/HAproxyIP%E5%9C%B0%E5%9D%80%E9%80%8F%E4%BC%A0/"/>
    <id>https://daizhe.net.cn/2019/01/22/HAproxyIP地址透传/</id>
    <published>2019-01-22T10:00:18.113Z</published>
    <updated>2019-01-23T12:18:58.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy-IP地址透传（七层-四层）"><a href="#HAproxy-IP地址透传（七层-四层）" class="headerlink" title="HAproxy IP地址透传（七层/四层）"></a>HAproxy IP地址透传（七层/四层）</h1><p><img src="/2019/01/22/HAproxyIP地址透传/标题.gif" alt=""><br><a id="more"></a></p><ul><li>四层负载<ul><li>mode http</li></ul></li><li>七层负载<ul><li>mode tcp</li></ul></li></ul><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">```bash</span><br><span class="line"><span class="comment">#如果客户端访问的地址为公网地址上的一个网站，如果客户端用的是NAT方式出去上网的，则后端的nginx查看的日志信息源ip地址应该是客户端通过NAT方式出去的地址</span></span><br><span class="line"></span><br><span class="line">实验准备：</span><br><span class="line">  haproxy_server   172.18.135.2模拟私网地址</span><br><span class="line">  nginx_server     172.18.135.5模拟公网地址</span><br><span class="line">  windows_firefox  172.18.88.88模拟客户端浏览器</span><br><span class="line"></span><br><span class="line">模拟：</span><br><span class="line">  haproxy_server和windows_firefox  为私网地址</span><br><span class="line">  nginx_server 为公网地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#windows_firefox通过haporxy_server的地址透传（NAT）,实现windows_firefox通过访问haporxy_server的地址从跳转至私网地址nginx_server服务器上进行访问</span></span><br></pre></td></tr></table></figure><h3 id="七层地址透传-http"><a href="#七层地址透传-http" class="headerlink" title="七层地址透传(http)"></a>七层地址透传(http)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">haproxy_server</span><br><span class="line">配置haproxy实现透传</span><br><span class="line">  ~]<span class="comment"># yum install haproxy -y</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">  <span class="comment">#七层地址透传</span></span><br><span class="line">  listen web-port-80</span><br><span class="line">        mode http         <span class="comment">#此透传仅支持http协议，在tcp协议上不影响haproxy启动，但是nginx日志中会写出记录不到真实访问的地址</span></span><br><span class="line">        option forwardfor   <span class="comment">#如果后端服务器需要获得客户端的真实IP需要配置此参数，将可以从HttpHeader中获得客户端IP</span></span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80    <span class="comment">#此地址为调度器的地址</span></span><br><span class="line">        server web1 172.18.135.5:80 weight 2 check inter 2000 fall 3 rise 5   <span class="comment">#web1为定义后端主机的名称</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line">  ~]<span class="comment"># curl -I 172.18.135.2:80</span></span><br><span class="line"></span><br><span class="line">windown_firefox客户端浏览器访问haproxy_server地址</span><br><span class="line">  http://172.18.135.2/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nginx_server</span><br><span class="line">查看web服务器的访问日志</span><br><span class="line">  ~]<span class="comment"># yum install nginx -y</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf     #定义nginx的日志文件为json格式输出，并可以查看到真实的客户端的地址（这里值得是windows_firefox）</span></span><br><span class="line">  http &#123;</span><br><span class="line">  log_format json <span class="string">'&#123;"@timestamp":"$time_iso8601",'</span></span><br><span class="line">                 <span class="string">'"host":"$server_addr",'</span></span><br><span class="line">                 <span class="string">'"clientip":"$remote_addr",'</span></span><br><span class="line">                 <span class="string">'"size":$body_bytes_sent,'</span></span><br><span class="line">                 <span class="string">'"responsetime":$request_time,'</span></span><br><span class="line">                 <span class="string">'"upstreamtime":"$upstream_response_time",'</span></span><br><span class="line">                 <span class="string">'"upstreamhost":"$upstream_addr",'</span></span><br><span class="line">                 <span class="string">'"http_host":"$host",'</span></span><br><span class="line">                 <span class="string">'"url":"$uri",'</span></span><br><span class="line">                 <span class="string">'"referer":"$http_referer",'</span></span><br><span class="line">                 <span class="string">'"agent":"$http_user_agent",'</span></span><br><span class="line">                 <span class="string">'"xff":"$http_x_forwarded_for",'</span></span><br><span class="line">                 <span class="string">'"status":"$status"&#125;'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access_json  json;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start nginx  </span></span><br><span class="line">   ~]<span class="comment"># cat /var/log/nginx/access_json </span></span><br><span class="line">   &#123;<span class="string">"@timestamp"</span>:<span class="string">"2019-01-22T22:00:54+08:00"</span>,<span class="string">"host"</span>:<span class="string">"172.18.135.5"</span>,<span class="string">"clientip"</span>:<span class="string">"172.18.135.2"</span>,<span class="string">"size"</span>:0,<span class="string">"responsetime"</span>:0.000,<span class="string">"upstreamtime"</span>:<span class="string">"-"</span>,<span class="string">"upstreamhost"</span>:<span class="string">"-"</span>,<span class="string">"http_host"</span>:<span class="string">"172.18.135.2"</span>,<span class="string">"url"</span>:<span class="string">"/poweredby.png"</span>,<span class="string">"referer"</span>:<span class="string">"http://172.18.135.2/"</span>,<span class="string">"agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0"</span>,<span class="string">"xff"</span>:<span class="string">"172.18.88.88"</span>,<span class="string">"status"</span>:<span class="string">"304"</span>&#125;   <span class="comment">#可以查看到真实访问的windiws_firefox的真实地址</span></span><br></pre></td></tr></table></figure><p><img src="/2019/01/22/HAproxyIP地址透传/七层.png" alt=""></p><h3 id="四层地址透传-tcp"><a href="#四层地址透传-tcp" class="headerlink" title="四层地址透传(tcp)"></a>四层地址透传(tcp)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">haproxy_server</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  <span class="comment">#httpd_server调度</span></span><br><span class="line">  listen web-port-80</span><br><span class="line">        mode tcp</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        option forwardfor</span><br><span class="line">        server web1 172.18.135.5:80 send-proxy weight 2 check inter 2000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line"></span><br><span class="line">nginx_server</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">      server &#123;</span><br><span class="line">        listen       80 proxy_protocol;   <span class="comment">#TCP获取客户端真实IP日志格式</span></span><br><span class="line">  <span class="comment">#        listen       [::]:80 default_server;</span></span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart nginx </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">客户端访查看nginx日志</span><br></pre></td></tr></table></figure><p><img src="/2019/01/22/HAproxyIP地址透传/四层.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy-IP地址透传（七层-四层）&quot;&gt;&lt;a href=&quot;#HAproxy-IP地址透传（七层-四层）&quot; class=&quot;headerlink&quot; title=&quot;HAproxy IP地址透传（七层/四层）&quot;&gt;&lt;/a&gt;HAproxy IP地址透传（七层/四层）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/22/HAproxyIP地址透传/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>HAproxy调度算法</title>
    <link href="https://daizhe.net.cn/2019/01/22/HAproxy%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>https://daizhe.net.cn/2019/01/22/HAproxy调度算法/</id>
    <published>2019-01-22T05:55:02.863Z</published>
    <updated>2019-01-28T08:26:33.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy调度算法（四层）"><a href="#HAproxy调度算法（四层）" class="headerlink" title="HAproxy调度算法（四层）"></a>HAproxy调度算法（四层）</h1><p><img src="/2019/01/22/HAproxy调度算法/标题.gif" alt=""><br><a id="more"></a></p><h2 id="HAProxy-调度算法使用的生效字段："><a href="#HAProxy-调度算法使用的生效字段：" class="headerlink" title="HAProxy 调度算法使用的生效字段："></a>HAProxy 调度算法使用的生效字段：</h2><ul><li>defaults</li><li>listen</li><li>backend</li></ul><hr><h2 id="动态算法和静态算法"><a href="#动态算法和静态算法" class="headerlink" title="动态算法和静态算法"></a>动态算法和静态算法</h2><ul><li>静态算法（算法仅根据算法本身与请求报文特征进行调度 起点公平）<ul><li>不支持运行时动态调整，不支持慢启动</li></ul></li><li>动态算法（额外考虑后端各RS的当前的负载的状态 结果公平）<ul><li>支持运行时调整，支持慢启动</li></ul></li></ul><hr><h2 id="HAProxy-静态调度算法"><a href="#HAProxy-静态调度算法" class="headerlink" title="HAProxy 静态调度算法"></a>HAProxy 静态调度算法</h2><ul><li>balance： 指明对后端服务器的调度算法，配置在listen或backend<br>静态算法：按照事先定义好的规则轮询公平调度，不关心后端服务器的当前负载、链接数和相应速度等，且无法实时修改权重，只能重启后生效。<ul><li>static-rr：基于权重的轮询调度，不支持权重的运行时调整及后端服务器慢启动，其后端主机数量没有限制</li><li>first：根据服务器在列表中的位置，自上而下进行调度，但是其只会当第一台服务器的连接数达到上限，新请求才会分配给下一台服务，因此会忽略服务器的权重设置。</li></ul></li></ul><p><code>范例：静态调度--&gt;static-rr:基于权重的轮询调度</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">roundrobin最大后端主机为4096</span><br><span class="line">static-rr 最大后端主机不上限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#weight 设置权重</span></span><br><span class="line"><span class="comment">#这里设置的172.18.135.1权重为2，172.18.135.5权重为1</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line"><span class="comment">#httpd_server调度</span></span><br><span class="line">frontend web-port-80</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        use_backend web_host</span><br><span class="line"></span><br><span class="line">backend web_host</span><br><span class="line">        balance static-rr</span><br><span class="line">        server 172.18.135.1 172.18.135.1:8080 weight 2 check inter 2000 fall 3 rise 5</span><br><span class="line">        server 172.18.135.5 172.18.135.5:8080 weight 1</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># systemctl restart haproxy</span></span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/22/HAproxy调度算法/static1.png" alt=""><br><img src="/2019/01/22/HAproxy调度算法/static1.png" alt=""><br><img src="/2019/01/22/HAproxy调度算法/static2.png" alt=""></p><p><code>范例：静态调度--&gt;first:根据服务器在列表中的位置，自上而下进行调度即优先使用第一台，当第一台的连接数上限时，才会调度到其他的主机上</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># maxconn 10  设置主机的最大连接数</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line"><span class="comment">#httpd_server调度</span></span><br><span class="line">frontend web-port-80</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        use_backend web_host</span><br><span class="line"></span><br><span class="line">backend web_host</span><br><span class="line">        balance first</span><br><span class="line">        server 172.18.135.1 172.18.135.1:8080 maxconn 10 check inter 2000 fall 3 rise 5</span><br><span class="line">        server 172.18.135.5 172.18.135.5:8080</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># systemctl restart haproxy</span></span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/22/HAproxy调度算法/first.png" alt=""></p><hr><h2 id="HAProxy-动态调度算法"><a href="#HAProxy-动态调度算法" class="headerlink" title="HAProxy 动态调度算法"></a>HAProxy 动态调度算法</h2><ul><li>动态算法：基于后端服务器 状态进行调度适当调整，比如优先调度至当前负载较低的服务器，且权重可以在haproxy运行时动态调整无需重启(支持缓慢启动，实现慢慢的将流量均匀的分配到其他的后端服务器上,也支持运行时重载配置文件)。<ul><li>roundrobin：基于权重的轮询动态调度算法，支持权重的运行时调整，不等于lvs 的rr，支持慢启动即新加的服务器会逐渐增加转发数，每个后端backend中最多支持4095个server，此为默认调度算法，server 权重设置 weight</li><li>leastconn： 加权的最少连接的动态，支持权重的运行时调整和慢启动，即当前后端服务器连接最少的优先调度，比较适合长连接的场景使用，比如MySQL等场景。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认动态算法roundrobin：基于权重的轮询动态调度算法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#roundrobin 适用于无状态的连接，如果做过session会话共享或者会话绑定也可以使用</span></span><br></pre></td></tr></table></figure><hr><h2 id="HAProxy-调度算法-source"><a href="#HAProxy-调度算法-source" class="headerlink" title="HAProxy 调度算法-source"></a>HAProxy 调度算法-source</h2><ul><li>source：源地址hash，基于用户源地址hash并将请求转发到后端服务器，默认为静态即取模方式，但是可以通过hash-type支持的选项更改，后续同一个源地址请求将被转发至同一个后端web服务器，比较适用于session保持等场景。<ul><li>map-based：取模法，基于服务器权重的hash数组取模，该hash是静态的即不支持在线调整权重，不支持慢启动，其对后端服务器调度均衡，缺点是当服务器的总权重发生变化时，即有服务器上线或下线，都会因权重发生变化而导致调度结果整体改变。</li><li>consistent：一致性哈希，该hash是动态的，支持在线调整权重，支持慢启动，优点在于当服务器的总权重发生变化时，对调度结果影响是局部的，不会引起大的变动，该算法很容易导致后端服务器负载不均衡，但是比较适合session保持。</li></ul></li></ul><hr><h2 id="HAproxy-服务器动态上下线"><a href="#HAproxy-服务器动态上下线" class="headerlink" title="HAproxy 服务器动态上下线"></a>HAproxy 服务器动态上下线</h2><ul><li>静态算法：无法动态上下线</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">  ~]<span class="comment"># useradd  haproxy -s /sbin/nologin  #编译安装的需要创建账号，yum安装的则不需要创建账号</span></span><br><span class="line">  ~]<span class="comment"># mkdir  /var/lib/haproxy</span></span><br><span class="line">  ~]<span class="comment"># chown  haproxy.haproxy /var/lib/haproxy/ -R</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  global</span><br><span class="line">  4行</span><br><span class="line">  stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin   <span class="comment">#主要是基于socket文件对服务器进行动态修改</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">#httpd_server调度</span></span><br><span class="line">  frontend web-port-80</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        use_backend web_host</span><br><span class="line"></span><br><span class="line">  backend web_host</span><br><span class="line">        balance static-rr</span><br><span class="line">        server 172.18.135.1 172.18.135.1:8080 weight 2 check inter 2000 fall 3 rise 5</span><br><span class="line">        server 172.18.135.5 172.18.135.5:8080 weight 1</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line"></span><br><span class="line">负载上安装支持的依赖包</span><br><span class="line">  ~]<span class="comment"># yum install socat -y    #输入重定向的工具</span></span><br><span class="line"></span><br><span class="line">查看使用帮助</span><br><span class="line">  ~]<span class="comment"># echo "show info" | socat stdio /var/lib/haproxy/haproxy.sock</span></span><br><span class="line">  ~]<span class="comment"># echo "help" | socat stdio /var/lib/haproxy/haproxy.sock</span></span><br><span class="line"></span><br><span class="line">基于socat动态对话负载haproxy</span><br><span class="line">  <span class="comment">#动态修改主机的权重</span></span><br><span class="line">  ~]<span class="comment"># echo "set weight " | socat stdio /var/lib/haproxy/haproxy.sock</span></span><br><span class="line">  Require <span class="string">'backend/server'</span>.   <span class="comment">#指明backend名称以及server名称</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># echo "set weight web_host/172.18.135.1 4" | socat stdio /var/lib/haproxy/haproxy.sock</span></span><br><span class="line">  Backend is using a static LB algorithm and only accepts weights <span class="string">'0%'</span> and <span class="string">'100%'</span>.</span><br><span class="line"></span><br><span class="line">  <span class="comment">#提示不可以设置为4的权重，因为是使用的静态的算法只能设置为0%或者为100%（在线或者下线）</span></span><br><span class="line"></span><br><span class="line">查看权重</span><br><span class="line">  ~]<span class="comment"># echo "get weight web_host/172.18.135.1" | socat stdio /var/lib/haproxy/haproxy.sock</span></span><br><span class="line">  2 (initial 2)</span><br></pre></td></tr></table></figure><hr><ul><li>动态算法：支持动态上下线<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用consistent：一致性哈希</span></span><br><span class="line"></span><br><span class="line">方式1：</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line"><span class="comment">#httpd_server调度</span></span><br><span class="line">frontend web-port-80</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        use_backend web_host</span><br><span class="line"></span><br><span class="line">backend web_host</span><br><span class="line">        balance <span class="built_in">source</span></span><br><span class="line">        <span class="built_in">hash</span>-type consistent</span><br><span class="line">        server 172.18.135.1 172.18.135.1:8080 weight 2 check inter 2000 fall 3 rise 5</span><br><span class="line">        server 172.18.135.5 172.18.135.5:8080 weight 1</span><br><span class="line"></span><br><span class="line">方式2：listen</span><br><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line"><span class="comment">#httpd_server调度</span></span><br><span class="line">listen web-port-80</span><br><span class="line">  <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">  balance <span class="built_in">source</span></span><br><span class="line">  <span class="built_in">hash</span>-type consistent</span><br><span class="line">  server 172.18.135.1 172.18.135.1:8080 weight 2 check inter 2000 fall 3 rise 5</span><br><span class="line">  server 172.18.135.5 172.18.135.5:8080 weight 1</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line"></span><br><span class="line">动态修改权重（1.8版本的那个太修改权重有BUG，1.5版本就没问题）</span><br><span class="line">  ~]<span class="comment"># echo "set weight web_host/172.18.135.5 3" | socat stdio /var/lib/haproxy/haproxy.sock</span></span><br><span class="line">  ~]<span class="comment"># echo "get weight web_host/172.18.135.5 3" | socat stdio /var/lib/haproxy/haproxy.sock</span></span><br><span class="line">  2019/01/22 16:42:40 socat[15995] E connect(5, AF=1 <span class="string">"/var/lib/haproxy/haproxy.sock"</span>, 31): Connection refused</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="HAProxy-调度算法-uri"><a href="#HAProxy-调度算法-uri" class="headerlink" title="HAProxy 调度算法-uri"></a>HAProxy 调度算法-uri</h2><ul><li>uri：基于对用户请求的uri做hash并将请求转发到后端指定服务器(多适用于缓存服务器，会使得后端的服务器更好的命中缓存的结果例如缓存服务器 Varnish)<ul><li>map-based：取模法</li><li>consistent：一致性哈希<ul><li><a href="http://example.org/absolute/URI/with/absolute/path/to/resource.txt" target="_blank" rel="noopener">http://example.org/absolute/URI/with/absolute/path/to/resource.txt</a>  #URI/URL</li><li><a href="ftp://example.org/resource.txt" target="_blank" rel="noopener">ftp://example.org/resource.txt</a>   #URI/URL</li><li>/relative/URI/with/absolute/path/to/resource.txt   #URI</li></ul></li></ul></li><li>uri: uniform resource identifier，统一资源标识符,是一个用于标识某一互联网资源名称的字符串</li></ul><p><img src="/2019/01/22/HAproxy调度算法/url.png" alt=""></p><p>范例：uri调度算法示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">前提：</span><br><span class="line">  <span class="comment">#协议必须是http，不支持tcp，会切换到tcp的roundrobin负载模式</span></span><br><span class="line">  <span class="comment">#七层调度：应用层</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  <span class="comment">#httpd_server调度</span></span><br><span class="line">  listen web-port-80</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        balance uri</span><br><span class="line">        <span class="built_in">hash</span>-type consistent</span><br><span class="line">        server 172.18.135.1 172.18.135.1:8080 weight 2 check inter 2000 fall 3 rise 5</span><br><span class="line">        server 172.18.135.5 172.18.135.5:8080 weight 1</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line"></span><br><span class="line">客户端请求测试（已经实现基于uri绑定调度）</span><br><span class="line">  ~]<span class="comment"># curl http://172.18.135.2/</span></span><br><span class="line">  172.18.135.1</span><br><span class="line">   ~]<span class="comment"># curl http://172.18.135.2/index1.html</span></span><br><span class="line">  172.18.135.2/2</span><br></pre></td></tr></table></figure></p><hr><h2 id="HAProxy-调度算法-url-param"><a href="#HAProxy-调度算法-url-param" class="headerlink" title="HAProxy 调度算法-url_param"></a>HAProxy 调度算法-url_param</h2><ul><li>url_param：<ul><li><code>对用户请求的url中的&lt;params&gt;部分中的参数name作hash计算，并由服务器总权重相除以后派发至某挑出的服务器；通常用于追踪用户，以确保来自同一个用户的请求始终发往同一个Backend Server</code></li><li>假设url = <a href="http://www.magedu.com/foo/bar/index.php?k1=v1&amp;k2=v2" target="_blank" rel="noopener">http://www.magedu.com/foo/bar/index.php?k1=v1&amp;k2=v2</a> </li></ul></li></ul><p>范例：根据用户请求的url_param做调度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line"><span class="comment">#httpd_server调度</span></span><br><span class="line">listen web-port-80</span><br><span class="line">      <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">      balance url-param name</span><br><span class="line">      <span class="built_in">hash</span>-type consistent</span><br><span class="line">      server 172.18.135.1 172.18.135.1:8080 weight 2 check inter 2000 fall 3 rise 5</span><br><span class="line">      server 172.18.135.5 172.18.135.5:8080 weight 1</span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/22/HAproxy调度算法/url1.png" alt=""></p><hr><h2 id="HAProxy-调度算法-hdr"><a href="#HAProxy-调度算法-hdr" class="headerlink" title="HAProxy 调度算法-hdr"></a>HAProxy 调度算法-hdr</h2><ul><li><code>hdr(&lt;name&gt;)：针对用户每个http头部(header)请求中的指定信息做hash，此处由&lt;name&gt;指定的http首部将会被取出并做hash计算，然后由服务器总权重相除以后派发至某挑出的服务器，假如无有效的值，则会被轮询调度</code><ul><li>hdr( Cookie、 User-Agent、host )</li></ul></li></ul><p>范例：调度算法-hdr：针对用户每个http头部<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以获取报文头部的所有数据因为实在应用层</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  <span class="comment">#httpd_server调度</span></span><br><span class="line">  listen web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        balance hdr(User-Agent)</span><br><span class="line">        <span class="built_in">hash</span>-type consistent</span><br><span class="line">        server 172.18.135.1 172.18.135.1:8080 weight 2 check inter 2000 fall 3 rise 5</span><br><span class="line">        server 172.18.135.5 172.18.135.5:8080 weight 1</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart haproxy</span></span><br></pre></td></tr></table></figure></p><p>测试：基于不同的浏览器做访问</p><p><img src="/2019/01/22/HAproxy调度算法/头部.png" alt=""><br><img src="/2019/01/22/HAproxy调度算法/头部2.png" alt=""></p><hr><h2 id="HAProxy-调度算法-rdp-cookie-几乎不用"><a href="#HAProxy-调度算法-rdp-cookie-几乎不用" class="headerlink" title="HAProxy 调度算法- rdp-cookie(几乎不用)"></a>HAProxy 调度算法- rdp-cookie(几乎不用)</h2><ul><li>rdp-cookie对远程桌面的负载，使用cookie保持会话</li><li><code>rdp-cookie(&lt;name&gt;)</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#haproxy</span></span><br><span class="line">listen RDP</span><br><span class="line"><span class="built_in">bind</span>  192.168.7.101:3389</span><br><span class="line">balance rdp-cookie</span><br><span class="line">mode tcp</span><br><span class="line">server rdp0 172.18.139.20:3389 check fall 3 rise 5 inter 2000 weight 1</span><br><span class="line">server rdp1 172.18.139.21:3389 check fall 3 rise 5 inter 2000 weight 1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于iptables实现目标地址转换：</span></span><br><span class="line"><span class="comment">#开启内核的转发功能：</span></span><br><span class="line">iptables -t nat -A PREROUTING -d 目标主机地址 -p tcp --dport 目标端口 -j DNAT --to-destination 转换哪个主机的：哪个端口</span><br><span class="line">iptables -t nat -A POSTROUTING -s 此网段的地址 -j SNAT --to-source  转换为哪个地址</span><br></pre></td></tr></table></figure><p><img src="/2019/01/22/HAproxy调度算法/rdb.png" alt=""></p><hr><h2 id="算法总结及适用场景"><a href="#算法总结及适用场景" class="headerlink" title="算法总结及适用场景"></a>算法总结及适用场景</h2><ul><li>static-rr</li><li>first</li><li><code>source:会话保持，小型业务或者用户源地址非集中访问</code></li><li>uri:缓存</li><li>roundrobin:无状态，session共享或者会话保持</li><li><code>leastconn:数据库，长连接</code></li><li>url_param</li><li><code>hdr:多适用于域名转发，将多个域名转发到同一个地址中</code></li></ul><hr><ul><li>roundrobin——–&gt;tcp/http 动态</li><li>leastconn———–&gt;tcp/http 动态</li><li>static-rr————–&gt;tcp/http  静态</li><li>first——————–&gt;tcp/http  静态</li><li>source—————-&gt;tcp/http     #</li><li>uri———————-&gt;http      #</li><li>url_param———-&gt;http            #   #取决于hash_type是否consistent</li><li>hdr———————&gt;http       #</li><li>rdp-cookie———&gt;tcp             #</li></ul><hr><h2 id="四层与七层的区别："><a href="#四层与七层的区别：" class="headerlink" title="四层与七层的区别："></a>四层与七层的区别：</h2><ul><li>四层：<ul><li>在四层负载设备中，把client发送的报文目标地址(原来是负载均衡设备的IP地址)，根据均衡设备设置的选择web服务器的规则选择对应的web服务器IP地址，这样client就可以直接跟此服务器建立TCP连接并发送数据。</li></ul></li></ul><p><img src="/2019/01/22/HAproxy调度算法/区别.png" alt=""></p><ul><li>七层：<ul><li>七层负载均衡服务器起了一个代理服务器的作用，服务器建立一次TCP连接要三次握手，而client要访问webserver要先与七层负载设备进行三次握手后建立TCP连接，把要访问的报文信息发送给七层负载均衡；然后七层负载均衡再根据设置的均衡规则选择特定的webserver，然后通过三次握手与此台webserver建立TCP连接，然后webserver把需要的数据发送给七层负载均衡设备，负载均衡设备再把数据发送给client；所以，七层负载均衡设备起到了代理服务器的作用。</li></ul></li></ul><p><img src="/2019/01/22/HAproxy调度算法/抓包.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy调度算法（四层）&quot;&gt;&lt;a href=&quot;#HAproxy调度算法（四层）&quot; class=&quot;headerlink&quot; title=&quot;HAproxy调度算法（四层）&quot;&gt;&lt;/a&gt;HAproxy调度算法（四层）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/22/HAproxy调度算法/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>HAproxy基本配置</title>
    <link href="https://daizhe.net.cn/2019/01/22/HAproxy%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>https://daizhe.net.cn/2019/01/22/HAproxy基本配置/</id>
    <published>2019-01-22T01:48:00.524Z</published>
    <updated>2019-01-28T02:55:25.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy基本配置"><a href="#HAproxy基本配置" class="headerlink" title="HAproxy基本配置"></a>HAproxy基本配置</h1><p><img src="/2019/01/22/HAproxy基本配置/标题.gif" alt=""><br><a id="more"></a></p><h2 id="一、源码编译安装haproxy"><a href="#一、源码编译安装haproxy" class="headerlink" title="一、源码编译安装haproxy"></a>一、源码编译安装haproxy</h2><p>haproxy 1.8版本：新特性</p><ul><li>多进程：可以最大限度的利用cpu多核心的特性，开启多个工作进程实现最大限度响应用户的目的。</li></ul><p>安装包下载路径：<a href="https://www.haproxy.org/download/1.8/src/" target="_blank" rel="noopener">https://www.haproxy.org/download/1.8/src/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">安装依赖包</span><br><span class="line">  ~]<span class="comment"># yum install gcc gcc-c++ glibc glibc-devel pcre pcre-devel openssl  openssl-devel systemd-devel net-tools vim iotop bc  zip unzip zlib-devel lrzsz tree screen lsof tcpdump wget ntpdate -y</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">  src]<span class="comment"># ls</span></span><br><span class="line">  haproxy-1.8.16.tar.gz</span><br><span class="line"></span><br><span class="line">  src]<span class="comment"># tar xvf haproxy-1.8.16.tar.gz </span></span><br><span class="line">  src]<span class="comment"># cd haproxy-1.8.16/</span></span><br><span class="line"></span><br><span class="line">  haproxy-1.8.16]<span class="comment"># pwd</span></span><br><span class="line">  /usr/<span class="built_in">local</span>/src/haproxy-1.8.16</span><br><span class="line"></span><br><span class="line">编译安装</span><br><span class="line">   haproxy-1.8.16]<span class="comment"># make  ARCH=x86_64 TARGET=linux2628 USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1  USE_CPU_AFFINITY=1  PREFIX=/usr/local/haproxy</span></span><br><span class="line">   haproxy-1.8.16]<span class="comment"># make install PREFIX=/usr/local/haproxy </span></span><br><span class="line"></span><br><span class="line">  haproxy-1.8.16]<span class="comment"># cp haproxy  /usr/sbin/</span></span><br><span class="line"></span><br><span class="line">创建启动脚本</span><br><span class="line">  ~]<span class="comment"># vim /usr/lib/systemd/system/haproxy.service </span></span><br><span class="line">  [Unit]</span><br><span class="line">  Description=HAProxy Load Balancer</span><br><span class="line">  After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">  [Service]</span><br><span class="line">  ExecStartPre=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg  -c -q</span><br><span class="line">  ExecStart=/usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg  -p /run/haproxy.pid</span><br><span class="line">  ExecReload=/bin/<span class="built_in">kill</span> -USR2 <span class="variable">$MAINPID</span></span><br><span class="line">  [Install]</span><br><span class="line">  WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">查看haproxy 版本</span><br><span class="line">  ~]<span class="comment"># haproxy -v</span></span><br><span class="line">  HA-Proxy version 1.8.16-5c3f237 2018/12/21</span><br><span class="line">  Copyright 2000-2018 Willy Tarreau &lt;willy@haproxy.org&gt;</span><br><span class="line"></span><br><span class="line">创建目录和用户(默认启动的用户为nobody)</span><br><span class="line">  ~]<span class="comment"># mkdir  /etc/haproxy</span></span><br><span class="line">  ~]<span class="comment"># useradd haproxy -s /sbin/nologin -u 1111</span></span><br><span class="line">  ~]<span class="comment"># id haproxy</span></span><br><span class="line">  uid=1111(haproxy) gid=1111(haproxy) groups=1111(haproxy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建配置文件</span><br><span class="line">  ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  global</span><br><span class="line">  maxconn 100000</span><br><span class="line">  chroot /usr/<span class="built_in">local</span>/haproxy</span><br><span class="line">  <span class="comment">#stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin</span></span><br><span class="line">  uid 1000</span><br><span class="line">  gid 1000</span><br><span class="line">  daemon</span><br><span class="line">  <span class="comment">#nbproc 4</span></span><br><span class="line">  <span class="comment">#cpu-map 1 0</span></span><br><span class="line">  <span class="comment">#cpu-map 2 1</span></span><br><span class="line">  pidfile /usr/<span class="built_in">local</span>/haproxy/run/haproxy.pid</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 info</span><br><span class="line"></span><br><span class="line">  defaults</span><br><span class="line">  option http-keep-alive</span><br><span class="line">  option  forwardfor</span><br><span class="line">  maxconn 100000</span><br><span class="line">  mode http</span><br><span class="line">  timeout connect 300000ms</span><br><span class="line">  timeout client  300000ms</span><br><span class="line">  timeout server  300000ms</span><br><span class="line"></span><br><span class="line">  listen stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:9999</span><br><span class="line">  stats <span class="built_in">enable</span></span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats auth    haadmin:q1w2e3r4ys</span><br><span class="line"></span><br><span class="line">  listen  web_port</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:80</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  server web1  127.0.0.1:8080  check inter 3000 fall 2 rise 5</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">  ~]<span class="comment"># systemctl start haproxy</span></span><br><span class="line"></span><br><span class="line">进程查看</span><br><span class="line">  ~]<span class="comment"># ps -ef | grep haproxy</span></span><br><span class="line">  root       5883      1  0 09:36 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">  haproxy     5886   5883  0 09:36 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">  root       5907   5491  0 09:37 pts/0    00:00:00 grep --color=auto haproxy</span><br></pre></td></tr></table></figure></p><h2 id="二、HAProxy组成"><a href="#二、HAProxy组成" class="headerlink" title="二、HAProxy组成"></a>二、HAProxy组成</h2><ul><li>程序环境：<ul><li>主程序：/usr/sbin/haproxy</li><li>配置文件：/etc/haproxy/haproxy.cfg</li><li>Unit file：/usr/lib/systemd/system/haproxy.service</li></ul></li><li>配置段：<ul><li>global：全局配置段<ul><li>进程及安全配置相关的参数</li><li>性能调整相关参数</li><li>Debug参数</li></ul></li><li>proxy：代理配置段<ul><li>defaults：为frontend, backend, listen提供默认配置 </li><li>frontend：前端，相当于nginx中的server {}    #指明监听的地址和端口不要写*</li><li>backend：后端，相当于nginx中的upstream {}</li><li>listen：同时拥有前端和后端,适用于一对一环境</li></ul></li></ul></li></ul><h3 id="Haproxy-配置-global（全局配置端）"><a href="#Haproxy-配置-global（全局配置端）" class="headerlink" title="Haproxy 配置-global（全局配置端）"></a><code>Haproxy 配置-global（全局配置端）</code></h3><ul><li>global配置参数：</li><li><p><a href="https://cbonte.github.io/haproxy-dconv/1.8/configuration.html#3" target="_blank" rel="noopener">https://cbonte.github.io/haproxy-dconv/1.8/configuration.html#3</a></p><ul><li>chroot #锁定运行目录，当haproxy本身出现漏洞被攻击时，工作目录仅限于此运行目录</li><li>deamon #以守护进程运行</li><li>#stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin #本地通讯的socket文件</li><li>user, group, uid, gid  #运行haproxy的用户身份（可以设置用户的id或者用户名称）</li><li>nbproc  #开启的haproxy进程数，与CPU保持一致</li><li>nbthread  #指定每个haproxy进程开启的线程数，默认为每个进程一个线程</li><li><p>cpu-map 1 0 #绑定haproxy 进程至指定CPU</p></li><li><p>maxconn  #每个haproxy进程的最大并发连接数</p></li><li>maxsslconn     #SSL每个haproxy进程ssl最大连接数</li><li>maxconnrate  #每个进程每秒最大连接数</li><li>spread-checks   #后端server状态check随机提前或延迟百分比时间，建议2-5(20%-50%)之间</li><li>pidfile #指定pid文件路径</li><li>log 127.0.0.1  local3 info #定义全局的syslog服务器；最多可以定义两个</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">...</span><br><span class="line">nbproc 4    <span class="comment">#指定haproxy的进程数</span></span><br><span class="line">cpu-map 1 0 <span class="comment">#将第一进程绑定在第0颗cpu</span></span><br><span class="line">cpu-map 2 1 <span class="comment">#将第二进程绑定在第1颗cpu</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">#实现了一个主进程多个子进程</span></span><br><span class="line">~]<span class="comment"># ps -ef | grep haproxy</span></span><br><span class="line">root      11803      1  0 10:34 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">haproxy   11805  11803  0 10:34 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">haproxy   11806  11803  0 10:34 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">haproxy   11807  11803  0 10:34 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">haproxy   11808  11803  0 10:34 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">root      11811   5491  0 10:35 pts/0    00:00:00 grep --color=auto haproxy</span><br></pre></td></tr></table></figure><h3 id="HAProxy-Proxies配置（代理配置段）"><a href="#HAProxy-Proxies配置（代理配置段）" class="headerlink" title="HAProxy Proxies配置（代理配置段）"></a><code>HAProxy Proxies配置（代理配置段）</code></h3><ul><li><code>defaults [&lt;name&gt;]  #默认配置项，针对以下的frontend、backend和lsiten生效，可以多个name</code></li><li><code>frontend &lt;name&gt;  #前端servername，类似于Nginx的一个虚拟主机 server</code></li><li><p><code>backend  &lt;name&gt; #后端服务器组，等于nginx的upstreamlisten   &lt;name&gt;      #将frontend和backend合并在一起配置</code></p></li><li><p><code>注：name字段只能使用”-”、”_”、”.”、和”:”，并且严格区分大小写，例如：Web和web是完全不同的两组服务器即是区分大小写的</code></p></li></ul><h4 id="Proxies配置-defaults（默认配置项）"><a href="#Proxies配置-defaults（默认配置项）" class="headerlink" title="Proxies配置- defaults（默认配置项）"></a>Proxies配置- defaults（默认配置项）</h4><ul><li>option redispatch    #当server Id对应的服务器挂掉后，强制定向到其他健康的服务器  </li><li>option abortonclose   #当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接</li><li>option http-keep-alive #开启会话保持</li><li>option  forwardfor #开启IP透传</li><li>mode http #默认工作类型</li><li>timeout connect 120s  #连接到一台后端server的最长时间</li><li>timeout client  600s  #与客户端的最长空闲时间</li><li>timeout server  600s  #等待服务端的超时时长</li><li>timeout http-keep-alive 120s #session 会话保持时间</li><li>#timeout check   5s   #对后端服务器的检测超时时间</li></ul><h4 id="Proxies配置-frontend配置参数-前端servername"><a href="#Proxies配置-frontend配置参数-前端servername" class="headerlink" title="Proxies配置- frontend配置参数(前端servername)"></a>Proxies配置- frontend配置参数(前端servername)</h4><ul><li>bind：指定HAProxy的监听地址，可以是IPV4或IPV6，可以同时监听多个IP或端口，可同时用于listen字段中</li><li><code>bind [&lt;address&gt;]:&lt;port_range&gt; [, ...] [param*]</code></li><li>mode  http/tcp      #指定负载协议类型</li><li><p>use_backend  backend_name   #调用的后端服务器组名称</p></li><li><p>示例：</p><ul><li>frontend  WEB_PORT<ul><li>bind :80,:8080    #支持以逗号分隔的列表格式指定监听的地址以及端口多个套接字</li><li>bind 192.168.7.102:10080,192.168.7.102:10043</li><li>use_backend backend_name </li></ul></li></ul></li></ul><h2 id="范例：使用haproxy实现调度apache"><a href="#范例：使用haproxy实现调度apache" class="headerlink" title="范例：使用haproxy实现调度apache"></a>范例：使用haproxy实现调度apache</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟httpd_server不直接对外服务，通过haproxy负载对外进程调度服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置haproxy实现基客户端第一次请求服务端保留的cookie进行调度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实验准备</span><br><span class="line">  三台主机：</span><br><span class="line">    haproxy_server :  yum install haproxy -y</span><br><span class="line">    httpd_serverA : yum install httpd -y</span><br><span class="line">    httpd_serverB : yum install httpd -y</span><br><span class="line"></span><br><span class="line">配置httpd_server测试页面</span><br><span class="line">  httpd_serverA</span><br><span class="line">  ~]<span class="comment"># echo "172.18.135.1" &gt; /var/www/html/index.html</span></span><br><span class="line">  ~]<span class="comment"># systemctl start httpd</span></span><br><span class="line">  修改端口8080</span><br><span class="line"></span><br><span class="line">  httpd_serverB</span><br><span class="line">  ~]<span class="comment"># echo "172.18.135.5" &gt; /var/www/html/index.html</span></span><br><span class="line">  ~]<span class="comment"># systemctl start httpd</span></span><br><span class="line">  修改端口8080</span><br><span class="line"></span><br><span class="line">配置haproxy负载</span><br><span class="line">  ~]<span class="comment"># yum install haproxy -y</span></span><br><span class="line">  ~]<span class="comment"># cat  /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  global</span><br><span class="line">  maxconn 100000</span><br><span class="line">  chroot /usr/<span class="built_in">local</span>/haproxy</span><br><span class="line">  <span class="comment">#stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin</span></span><br><span class="line">  uid 1111</span><br><span class="line">  gid 1111</span><br><span class="line">  daemon</span><br><span class="line">  nbproc 4</span><br><span class="line">  cpu-map 1 0</span><br><span class="line">  cpu-map 2 1</span><br><span class="line">  pidfile /usr/<span class="built_in">local</span>/haproxy/run/haproxy.pid</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 info</span><br><span class="line"></span><br><span class="line">  defaults</span><br><span class="line">  option http-keep-alive</span><br><span class="line">  option  forwardfor</span><br><span class="line">  maxconn 100000</span><br><span class="line">  mode http</span><br><span class="line">  timeout connect 300000ms</span><br><span class="line">  timeout client  300000ms</span><br><span class="line">  timeout server  300000ms</span><br><span class="line"></span><br><span class="line">  listen stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:9999</span><br><span class="line">  stats <span class="built_in">enable</span></span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats auth    haadmin:q1w2e3r4ys</span><br><span class="line"></span><br><span class="line">  <span class="comment">#httpd_server调度</span></span><br><span class="line">  frontend web-port-80                      <span class="comment">#web-port-80指定的此分组的名称</span></span><br><span class="line">  <span class="built_in">bind</span> 172.18.135.2:80                    <span class="comment">#绑定在调度器本地的地址和端口</span></span><br><span class="line">  use_backend web_host                    <span class="comment">#web_hos 定义的服务的主机组</span></span><br><span class="line"></span><br><span class="line">  backend web_host                          <span class="comment">#调用web_hos主机组</span></span><br><span class="line">  server 172.18.135.1 172.18.135.1:80     <span class="comment"># 172.18.135.1为定义的主机的名称，172.18.135.1:80 定义的后端的主机的地址及服务的端口</span></span><br><span class="line">  server 172.18.135.5 172.18.135.5:80</span><br><span class="line"></span><br><span class="line">启动查看端口 </span><br><span class="line">  ~]<span class="comment"># systemctl start haproxy</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  9999   </span><br><span class="line">  172.18.135.2:80 </span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">haproxy的配置文件中调用主机中也可以写为 <span class="comment">#此处制定默认的backend，适用于backend少的情况下使用</span></span><br><span class="line">frontend myweb *:80</span><br><span class="line">  default_backend webserver</span><br><span class="line"></span><br><span class="line">backend webserver</span><br><span class="line">  server web1 后端主机地址A check</span><br><span class="line">  server web1 后端主机地址B check</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">也可以使用listen的方式指定</span><br><span class="line">listen myweb </span><br><span class="line">  <span class="built_in">bind</span></span><br><span class="line">  server web1 后端主机的地址A check</span><br><span class="line">  server web2 后端主机的地址B check</span><br></pre></td></tr></table></figure><p>测试：访问调度器地址验证是否调度成功</p><ul><li>默认的调度算法为轮询</li></ul><p><img src="/2019/01/22/HAproxy基本配置/2.png" alt=""><br><img src="/2019/01/22/HAproxy基本配置/3.png" alt=""></p><ul><li>也可以使用下面命令的用法来验证调度是否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># while true; do curl http://172.18.135.2/; sleep .5; done</span></span><br></pre></td></tr></table></figure><h4 id="Proxies配置-backend配置参数"><a href="#Proxies配置-backend配置参数" class="headerlink" title="Proxies配置- backend配置参数"></a>Proxies配置- backend配置参数</h4><ul><li>mode  http/tcp/health     #指定负载协议类型</li><li>option  #配置选项</li><li><p>server   #定义后端real server</p></li><li><p>注意：option后面加httpchk，smtpchk, mysql-check, pgsql-check，ssl-hello-chk方法，可用于实现更多应用层检测功能。</p></li></ul><h2 id="三、后端服务器状态监测及相关配置"><a href="#三、后端服务器状态监测及相关配置" class="headerlink" title="三、后端服务器状态监测及相关配置"></a>三、后端服务器状态监测及相关配置</h2><ul><li>check #对指定real进行健康状态检查，默认不开启<ul><li>addr IP    #可指定的健康状态监测IP</li><li>port num  #指定的健康状态监测端口</li><li>inter num #健康状态检查间隔时间，默认2000 ms(2秒)</li><li>fall  num   #后端服务器失效检查次数，默认为3</li><li>rise num    #后端服务器从下线恢复检查次数，默认为2</li><li><code>weight  #默认为1，最大值为256，0表示不参与负载均衡 (默认轮询、加权)</code></li><li>backup #将后端服务器标记为备份状态</li><li>disabled #将后端服务器标记为不可用状态</li><li>redir <a href="http://www.magedu.com/" target="_blank" rel="noopener">http://www.magedu.com/</a> #将请求临时重定向至其它URL，只适用于http模式</li><li><code>maxconn &lt;maxconn&gt;：当前后端server的最大并发连接数</code></li><li><code>backlog &lt;backlog&gt;：当server的连接数达到上限后的后援队列长度</code></li></ul></li></ul><h2 id="范例：对调度器调度的后端服务器开启健康状态检测"><a href="#范例：对调度器调度的后端服务器开启健康状态检测" class="headerlink" title="范例：对调度器调度的后端服务器开启健康状态检测"></a>范例：对调度器调度的后端服务器开启健康状态检测</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">生产中的定义恢复的次数要比下线的次数要长</span><br><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line"><span class="comment">#httpd_server调度</span></span><br><span class="line">frontend web-port-80</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        use_backend web_host</span><br><span class="line"></span><br><span class="line">backend web_host</span><br><span class="line">        server 172.18.135.1 172.18.135.1:8080 check addr 172.18.135.1 port 8080 inter 2000 fall 3 rise 5</span><br><span class="line">        server 172.18.135.5 172.18.135.5:8080</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># systemctl restart haproxy</span></span><br></pre></td></tr></table></figure><h2 id="frontend和backend-字段也可以写为listen（适用于配置较多的场景）"><a href="#frontend和backend-字段也可以写为listen（适用于配置较多的场景）" class="headerlink" title="frontend和backend 字段也可以写为listen（适用于配置较多的场景）"></a>frontend和backend 字段也可以写为listen（适用于配置较多的场景）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line"></span><br><span class="line">listen的配置当时</span><br><span class="line"></span><br><span class="line"><span class="comment">#httpd_server调度</span></span><br><span class="line">listen web-port-80</span><br><span class="line"><span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        server 172.18.135.5 172.18.135.5:8080</span><br><span class="line">        server 172.18.135.1 172.18.135.1:8080 check inter 2000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">frontend和backend配置方式</span><br><span class="line"></span><br><span class="line"><span class="comment">#httpd_server调度</span></span><br><span class="line">frontend web-port-80</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        use_backend web_host</span><br><span class="line"></span><br><span class="line">backend web_host</span><br><span class="line">        server 172.18.135.1 172.18.135.1:8080 check  inter 2000 fall 3 rise 5</span><br><span class="line">        server 172.18.135.5 172.18.135.5:8080</span><br></pre></td></tr></table></figure><h2 id="范例：redir将请求临时重定向至其它URL，只适用于http模式"><a href="#范例：redir将请求临时重定向至其它URL，只适用于http模式" class="headerlink" title="范例：redir将请求临时重定向至其它URL，只适用于http模式"></a>范例：redir将请求临时重定向至其它URL，只适用于http模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">编辑paproxy调度器的配置文件</span><br><span class="line">  ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  <span class="comment">#httpd_server调度</span></span><br><span class="line">  frontend web-port-80</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        use_backend web_host</span><br><span class="line"></span><br><span class="line">  backend web_host</span><br><span class="line">        redirect prefix http://www.daizhe.net.cn/</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line"></span><br><span class="line">客户端访问负载的地址</span><br><span class="line">  ~]<span class="comment"># curl -I  172.18.135.2:80</span></span><br><span class="line">  HTTP/1.1 302 Found</span><br><span class="line">  Cache-Control: no-cache</span><br><span class="line">  Content-length: 0</span><br><span class="line">  Location: http://www.daizhe.net.cn//</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#302临时重定向</span></span><br><span class="line"><span class="comment">#301永久重定向</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy基本配置&quot;&gt;&lt;a href=&quot;#HAproxy基本配置&quot; class=&quot;headerlink&quot; title=&quot;HAproxy基本配置&quot;&gt;&lt;/a&gt;HAproxy基本配置&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/22/HAproxy基本配置/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>HAproxy简介</title>
    <link href="https://daizhe.net.cn/2019/01/21/HAproxy%E7%AE%80%E4%BB%8B/"/>
    <id>https://daizhe.net.cn/2019/01/21/HAproxy简介/</id>
    <published>2019-01-21T11:14:16.592Z</published>
    <updated>2019-01-29T03:42:46.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy简介"><a href="#HAproxy简介" class="headerlink" title="HAproxy简介"></a>HAproxy简介</h1><p><img src="/2019/01/21/HAproxy简介/标题.gif" alt=""><br><a id="more"></a></p><ul><li>LB（负载均衡）集群</li></ul><p>公有云Web架构<br><img src="/2019/01/21/HAproxy简介/web.png" alt=""></p><p><img src="/2019/01/21/HAproxy简介/公有云架构.png" alt=""></p><h2 id="一、什么是负载均衡："><a href="#一、什么是负载均衡：" class="headerlink" title="一、什么是负载均衡："></a>一、什么是负载均衡：</h2><ul><li><p>负载均衡(Load Balance，简称LB)是一种服务或基于硬件设备等实现的高可用反向代理技术，负载均衡将特定的业务(web服务、网络流量等)分担给指定的一个或多个后端特定的服务器或设备，从而提高了公司业务的并发处理能力、保证了业务的高可用性、方便了业务后期的水平动态扩展。</p></li><li><p>阿里云SLB介绍 <a href="https://yq.aliyun.com/articles/1803" target="_blank" rel="noopener">https://yq.aliyun.com/articles/1803</a> </p></li></ul><p><img src="/2019/01/21/HAproxy简介/LB.png" alt=""></p><h2 id="二、为什么使用负载均衡"><a href="#二、为什么使用负载均衡" class="headerlink" title="二、为什么使用负载均衡"></a>二、为什么使用负载均衡</h2><ul><li>Web服务器的动态水平扩展<ul><li>对用户无感知</li></ul></li><li>增加业务并发访问及处理能力<ul><li>解决单服务器瓶颈问题</li></ul></li><li>节约公网IP地址<ul><li>降低IT支出成本</li></ul></li><li>隐藏内部服务器IP<ul><li>提高内部服务器安全性</li></ul></li><li>配置简单<ul><li>固定格式的配置文件</li></ul></li><li>功能丰富<ul><li>支持四层和七层，支持动态下线主机</li></ul></li><li>性能较强<ul><li>并发数万甚至数十万</li></ul></li></ul><h2 id="三、常见的负载均衡"><a href="#三、常见的负载均衡" class="headerlink" title="三、常见的负载均衡"></a>三、常见的负载均衡</h2><ul><li><p>软件负载：</p><ul><li><p>四层：</p><ul><li>LVS(Linux Virtual Server)：工作在内核当中</li><li>HAProxy(High Availability Proxy)</li><li>Nginx （1.9.0 以上版本 stream功能）</li></ul></li><li><p>七层：</p><ul><li>HAProxy </li><li>Nginx</li></ul></li></ul></li><li><p>硬件负载：</p><ul><li>F5</li><li>Netscaler</li></ul></li><li><p>应用场景：</p><ul><li>四层：Redis、Mysql、RabbitMQ、Memcache等</li><li>七层：Nginx、Tomcat、Apache、PHP 、图片、动静分离、API等</li></ul></li></ul><h2 id="四、HAProxy介绍"><a href="#四、HAProxy介绍" class="headerlink" title="四、HAProxy介绍"></a>四、HAProxy介绍</h2><ul><li>HAProxy: 是法国开发者Willy Tarreau开发的一个开源软件，是一款具备高并发、高性能的TCP和HTTP负载均衡器，支持基于cookie的持久性，自动故障切换，支持正则表达式为基础的控制运行时间基本web的报表，高级日志记录以帮助排除故障的应用或网络及其他功能。</li><li><p><code>LB Cluster:</code></p><ul><li><code>四层：lvs, nginx(stream模式且nginx1.9.0或更新版本)，haproxy(mode tcp)</code></li><li><code>七层：http: nginx(http), haproxy(mode http), httpd...</code></li></ul></li><li><p>官网：</p><ul><li><a href="http://www.haproxy.org" target="_blank" rel="noopener">http://www.haproxy.org</a></li><li><a href="https://www.haproxy.com" target="_blank" rel="noopener">https://www.haproxy.com</a></li></ul></li><li><p>githun上的文档：<a href="https://cbonte.github.io/haproxy-dconv/" target="_blank" rel="noopener">https://cbonte.github.io/haproxy-dconv/</a> </p></li></ul><h2 id="五、HAProxy功能"><a href="#五、HAProxy功能" class="headerlink" title="五、HAProxy功能"></a>五、HAProxy功能</h2><ul><li><p>HAProxy是TCP / HTTP反向代理服务器，尤其适合于高可用性高并发环境</p><ul><li>可以针对HTTP请求添加cookie，进行路由后端服务器</li><li>可平衡负载至后端服务器，并支持持久连接</li><li>支持基于cookie进行调度</li><li>支持所有主服务器故障切换至备用服务器</li><li>支持专用端口实现监控服务</li><li>支持不影响现有连接情况下停止接受新连接请求</li><li>可以在双向添加，修改或删除HTTP报文首部</li><li>支持基于pattern实现连接请求的访问控制</li><li>通过特定的URI为授权用户提供详细的状态信息</li></ul></li><li><p>HAproxy工作场景：七层http/四层tcp</p><ul><li>工作于七层:解析http请求，可以完成对用户请求的按照内容的类型进行分别调度</li><li>工作于四层：模拟对其他tcp/udp协议传输的应用层服务的调度转发</li><li>工作于前端: 作为https的卸载器</li></ul></li></ul><p>应用场景<br><img src="/2019/01/21/HAproxy简介/应用场景.png" alt=""></p><h2 id="六、安装HAproxy"><a href="#六、安装HAproxy" class="headerlink" title="六、安装HAproxy"></a>六、安装HAproxy</h2><p>1、yum 方式安装haproxy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">默认base源中HAproxy 1.5版本</span><br><span class="line">  ~]<span class="comment"># yum list haproxy</span></span><br><span class="line">  haproxy.x86_64    1.5.18-8.el7     base</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install haproxy -y</span></span><br><span class="line"></span><br><span class="line">分析haproxy安装的程序文件</span><br><span class="line">   ~]<span class="comment"># rpm -ql haproxy</span></span><br><span class="line">  /etc/haproxy/haproxy.cfg  <span class="comment">#主配置文件</span></span><br><span class="line">  /etc/sysconfig/haproxy    <span class="comment">#环境变量的配置文件，用途少，主要用于传递参数</span></span><br><span class="line">  /usr/lib/systemd/system/haproxy.service   <span class="comment">#程序的启动脚本</span></span><br><span class="line">  <span class="comment">#1.7版本之前启动调用的二进制文件，1.8以后则不使用了（ExecStart=/usr/sbin/haproxy-systemd-wrapper -f /etc/haproxy/haproxy）</span></span><br><span class="line">  /usr/sbin/haproxy</span><br><span class="line">  /usr/sbin/haproxy-systemd-wrapper</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">  ~]<span class="comment"># systemctl start haproxy</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  *:5000  </span><br><span class="line"></span><br><span class="line">查看1.5版本实现的伪多进程</span><br><span class="line">  ~]<span class="comment"># ps -ef | grep haproxy</span></span><br><span class="line">  root       3856      1  0 21:00 ?        00:00:00 /usr/sbin/haproxy-systemd-wrapper -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid <span class="comment">#主进程</span></span><br><span class="line">  haproxy    3857   3856  0 21:00 ?        00:00:00 /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -Ds</span><br><span class="line">  haproxy    3858   3857  0 21:00 ?        00:00:00 /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -Ds</span><br><span class="line">  root       4097   2822  0 21:02 pts/0    00:00:00 grep --color=auto haproxy</span><br></pre></td></tr></table></figure></p><p>2、源码编译安装haproxy<br>haproxy 1.8版本：新特性</p><ul><li>多进程：可以最大限度的利用cpu多核心的特性，开启多个工作进程实现最大限度响应用户的目的。</li></ul><p>安装包下载路径：<a href="https://www.haproxy.org/download/1.8/src/" target="_blank" rel="noopener">https://www.haproxy.org/download/1.8/src/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">安装依赖包</span><br><span class="line">  ~]<span class="comment"># yum install gcc gcc-c++ glibc glibc-devel pcre pcre-devel openssl  openssl-devel systemd-devel net-tools vim iotop bc  zip unzip zlib-devel lrzsz tree screen lsof tcpdump wget ntpdate -y</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">  src]<span class="comment"># ls</span></span><br><span class="line">  haproxy-1.8.16.tar.gz</span><br><span class="line"></span><br><span class="line">  src]<span class="comment"># tar xvf haproxy-1.8.16.tar.gz </span></span><br><span class="line">  src]<span class="comment"># cd haproxy-1.8.16/</span></span><br><span class="line"></span><br><span class="line">  haproxy-1.8.16]<span class="comment"># pwd</span></span><br><span class="line">  /usr/<span class="built_in">local</span>/src/haproxy-1.8.16</span><br><span class="line"></span><br><span class="line">编译安装</span><br><span class="line">   haproxy-1.8.16]<span class="comment"># make  ARCH=x86_64 TARGET=linux2628 USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1  USE_CPU_AFFINITY=1  PREFIX=/usr/local/haproxy</span></span><br><span class="line">   haproxy-1.8.16]<span class="comment"># make install PREFIX=/usr/local/haproxy </span></span><br><span class="line"></span><br><span class="line">  haproxy-1.8.16]<span class="comment"># cp haproxy  /usr/sbin/</span></span><br><span class="line"></span><br><span class="line">创建启动脚本</span><br><span class="line">  ~]<span class="comment"># vim /usr/lib/systemd/system/haproxy.service </span></span><br><span class="line">  [Unit]</span><br><span class="line">  Description=HAProxy Load Balancer</span><br><span class="line">  After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">  [Service]</span><br><span class="line">  ExecStartPre=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg  -c -q</span><br><span class="line">  ExecStart=/usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg  -p /run/haproxy.pid</span><br><span class="line">  ExecReload=/bin/<span class="built_in">kill</span> -USR2 <span class="variable">$MAINPID</span></span><br><span class="line">  [Install]</span><br><span class="line">  WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">查看haproxy 版本</span><br><span class="line">  ~]<span class="comment"># haproxy -v</span></span><br><span class="line">  HA-Proxy version 1.8.16-5c3f237 2018/12/21</span><br><span class="line">  Copyright 2000-2018 Willy Tarreau &lt;willy@haproxy.org&gt;</span><br><span class="line"></span><br><span class="line">创建目录和用户</span><br><span class="line">  ~]<span class="comment"># mkdir  /etc/haproxy</span></span><br><span class="line"></span><br><span class="line">创建配置文件</span><br><span class="line">  ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  global</span><br><span class="line">  maxconn 100000</span><br><span class="line">  chroot /usr/<span class="built_in">local</span>/haproxy</span><br><span class="line">  <span class="comment">#stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin</span></span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  daemon</span><br><span class="line">  <span class="comment">#nbproc 4</span></span><br><span class="line">  <span class="comment">#cpu-map 1 0</span></span><br><span class="line">  <span class="comment">#cpu-map 2 1</span></span><br><span class="line">  pidfile /usr/<span class="built_in">local</span>/haproxy/run/haproxy.pid</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 info</span><br><span class="line"></span><br><span class="line">  defaults</span><br><span class="line">  option http-keep-alive</span><br><span class="line">  option  forwardfor</span><br><span class="line">  maxconn 100000</span><br><span class="line">  mode http</span><br><span class="line">  timeout connect 300000ms</span><br><span class="line">  timeout client  300000ms</span><br><span class="line">  timeout server  300000ms</span><br><span class="line"></span><br><span class="line">  listen stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:9999</span><br><span class="line">  stats <span class="built_in">enable</span></span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats auth    haadmin:q1w2e3r4ys</span><br><span class="line"></span><br><span class="line">  listen  web_port</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:80</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  server web1  127.0.0.1:8080  check inter 3000 fall 2 rise 5</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">  ~]<span class="comment"># systemctl start haproxy</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable haproxy</span></span><br><span class="line"></span><br><span class="line">进程查看</span><br><span class="line">  ~]<span class="comment"># ps -ef | grep haproxy</span></span><br><span class="line">  root       5883      1  0 09:36 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">  nobody     5886   5883  0 09:36 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">  root       5907   5491  0 09:37 pts/0    00:00:00 grep --color=auto haproxy</span><br></pre></td></tr></table></figure></p><ul><li>启动验证haproxy状态：<ul><li>以下是1.8.3版本的单主进程多子进程模式：</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">haproxy-1.8.3]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">haproxy-1.8.3]<span class="comment"># systemctl  restart haproxy</span></span><br><span class="line">haproxy-1.8.3]<span class="comment"># cat /run/haproxy.pid </span></span><br><span class="line">41998</span><br><span class="line">haproxy-1.8.3]<span class="comment"># ps -ef | grep haproxy</span></span><br><span class="line">root      41998      1  0 16:27 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">nobody    41999  41998  0 16:27 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">nobody    42000  41998  0 16:27 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">nobody    42001  41998  0 16:27 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">nobody    42002  41998  0 16:27 ?        00:00:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">root      42186  10580  0 16:28 pts/14   00:00:00 grep --color=auto haproxy</span><br></pre></td></tr></table></figure><ul><li>以下是1.7版本的传统多进程的haproxy模式：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># ps -ef | grep haproxy</span></span><br><span class="line">root     118786      1  0 17:10 ?        00:00:00 /usr/sbin/haproxy-systemd-wrapper -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid</span><br><span class="line">root     118787 118786  0 17:10 ?        00:00:00 [haproxy] &lt;defunct&gt;</span><br><span class="line">nobody   118788      1  6 17:10 ?        00:00:00 /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -Ds</span><br><span class="line">nobody   118789      1  6 17:10 ?        00:00:00 /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -Ds</span><br><span class="line">nobody   118790      1  3 17:10 ?        00:00:00 /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -Ds</span><br><span class="line">nobody   118791      1  5 17:10 ?        00:00:00 /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -Ds</span><br><span class="line">root     118814  99636  0 17:10 pts/0    00:00:00 grep --color=auto haproxy</span><br></pre></td></tr></table></figure><ul><li>以下是Nginx的单主进程多子进程模式，此模式和1.8.3版本的haproxy工作模式是类似的：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root     13399     1  0 Jan06 ?        00:00:01 nginx: master process /apps/tengine/sbin/nginx -s start</span><br><span class="line">devops   22165 22122  0 16:20 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line">zceo     22915 13399  0 Jan13 ?        00:41:41 nginx: worker process</span><br><span class="line">zceo     22916 13399  0 Jan13 ?        00:41:59 nginx: worker process</span><br><span class="line">zceo     22917 13399  0 Jan13 ?        00:41:38 nginx: worker process</span><br><span class="line">zceo     22918 13399  0 Jan13 ?        00:41:32 nginx: worker process</span><br><span class="line">zceo     22919 13399  0 Jan13 ?        00:41:22 nginx: worker process</span><br><span class="line">zceo     22920 13399  0 Jan13 ?        00:41:40 nginx: worker process</span><br><span class="line">zceo     22921 13399  0 Jan13 ?        00:42:07 nginx: worker process</span><br><span class="line">zceo     22922 13399  0 Jan13 ?        00:41:40 nginx: worker process</span><br></pre></td></tr></table></figure><ul><li>以下是apache的单主进程多子进程模式，也和1.8.3版本的haproxy工作模式类似：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># ps -ef | grep apache</span></span><br><span class="line">root      6758     1  0 11:01 ?        00:00:00 /usr/<span class="built_in">local</span>/apache2.2.17/bin/httpd -k start</span><br><span class="line">webshop   6760  6758  0 11:01 ?        00:00:00 /usr/<span class="built_in">local</span>/apache2.2.17/bin/httpd -k start</span><br><span class="line">webshop   6761  6758  0 11:01 ?        00:00:02 /usr/<span class="built_in">local</span>/apache2.2.17/bin/httpd -k start</span><br><span class="line">webshop   6762  6758  0 11:01 ?        00:00:03 /usr/<span class="built_in">local</span>/apache2.2.17/bin/httpd -k start</span><br><span class="line">webshop   6764  6758  0 11:01 ?        00:00:03 /usr/<span class="built_in">local</span>/apache2.2.17/bin/httpd -k start</span><br><span class="line">webshop   6770  6758  0 11:01 ?        00:00:03 /usr/<span class="built_in">local</span>/apache2.2.17/bin/httpd -k start</span><br><span class="line">webshop   6771  6758  0 11:01 ?        00:00:03 /usr/<span class="built_in">local</span>/apache2.2.17/bin/httpd -k start</span><br><span class="line">webshop   6780  6758  0 11:01 ?        00:00:02 /usr/<span class="built_in">local</span>/apache2.2.17/bin/httpd -k start</span><br><span class="line">root      8076  8038  0 11:50 pts/2    00:00:00 grep apache</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy简介&quot;&gt;&lt;a href=&quot;#HAproxy简介&quot; class=&quot;headerlink&quot; title=&quot;HAproxy简介&quot;&gt;&lt;/a&gt;HAproxy简介&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/21/HAproxy简介/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>session一致性架构设计实践</title>
    <link href="https://daizhe.net.cn/2019/01/20/session%E4%B8%80%E8%87%B4%E6%80%A7%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/"/>
    <id>https://daizhe.net.cn/2019/01/20/session一致性架构设计实践/</id>
    <published>2019-01-20T11:44:12.413Z</published>
    <updated>2019-01-20T12:53:20.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="session一致性架构设计实践"><a href="#session一致性架构设计实践" class="headerlink" title="session一致性架构设计实践"></a>session一致性架构设计实践</h1><p><img src="/2019/01/20/session一致性架构设计实践/标题.gif" alt=""><br><a id="more"></a></p><h2 id="一、缘起"><a href="#一、缘起" class="headerlink" title="一、缘起"></a>一、缘起</h2><p>什么是session？</p><ul><li>服务器为每个用户创建一个会话，存储用户的相关信息，以便多次请求能够定位到同一个上下文。</li><li>Web开发中，web-server可以自动为同一个浏览器的访问用户自动创建session，提供数据存储功能。最常见的，会把用户的登录信息、用户信息存储在session中，以保持登录状态。</li></ul><p>什么是session一致性问题？</p><ul><li>只要用户不重启浏览器，每次http短连接请求，理论上服务端都能定位到session，保持会话。</li></ul><p><img src="/2019/01/20/session一致性架构设计实践/1.png" alt=""></p><ul><li><p>当只有一台web-server提供服务时，每次http短连接请求，都能够正确路由到存储session的对应web-server（废话，因为只有一台）。</p></li><li><p>此时的web-server是无法保证高可用的，采用“冗余+故障转移”的多台web-server来保证高可用时，每次http短连接请求就不一定能路由到正确的session了。</p></li></ul><p><img src="/2019/01/20/session一致性架构设计实践/2.png" alt=""></p><ul><li><p>如上图，假设用户包含登录信息的session都记录在第一台web-server上，反向代理如果将请求路由到另一台web-server上，可能就找不到相关信息，而导致用户需要重新登录。</p></li><li><p>在web-server高可用时，如何保证session路由的一致性，是今天将要讨论的问题。</p></li></ul><h2 id="二、session同步法"><a href="#二、session同步法" class="headerlink" title="二、session同步法"></a>二、session同步法</h2><p><img src="/2019/01/20/session一致性架构设计实践/3.png" alt=""></p><ul><li><p>思路：多个web-server之间相互同步session，这样每个web-server之间都包含全部的session</p></li><li><p>优点：web-server支持的功能，应用程序不需要修改代码</p></li><li><p>不足：</p><ul><li>session的同步需要数据传输，占内网带宽，有时延</li><li>所有web-server都包含所有session数据，数据量受内存限制，无法水平扩展</li><li>有更多web-server时要歇菜</li></ul></li></ul><h2 id="三、客户端存储法"><a href="#三、客户端存储法" class="headerlink" title="三、客户端存储法"></a>三、客户端存储法</h2><p><img src="/2019/01/20/session一致性架构设计实践/4.png" alt=""></p><ul><li>思路：服务端存储所有用户的session，内存占用较大，可以将session存储到浏览器cookie中，每个端只要存储一个用户的数据了</li><li>优点：服务端不需要存储</li><li>缺点：<ul><li>每次http请求都携带session，占外网带宽</li><li>数据存储在端上，并在网络传输，存在泄漏、篡改、窃取等安全隐患</li><li>session存储的数据大小受cookie限制</li></ul></li><li>“端存储”的方案虽然不常用，但确实是一种思路。</li></ul><h2 id="四、反向代理hash一致性"><a href="#四、反向代理hash一致性" class="headerlink" title="四、反向代理hash一致性"></a>四、反向代理hash一致性</h2><ul><li>思路：web-server为了保证高可用，有多台冗余，反向代理层能不能做一些事情，让同一个用户的请求保证落在一台web-server上呢？</li></ul><p><img src="/2019/01/20/session一致性架构设计实践/5.png" alt=""></p><h3 id="方案一：四层代理hash"><a href="#方案一：四层代理hash" class="headerlink" title="方案一：四层代理hash"></a>方案一：四层代理hash</h3><ul><li>反向代理层使用用户ip来做hash，以保证同一个ip的请求落在同一个web-server上</li></ul><p><img src="/2019/01/20/session一致性架构设计实践/6.png" alt=""></p><h3 id="方案二：七层代理hash"><a href="#方案二：七层代理hash" class="headerlink" title="方案二：七层代理hash"></a>方案二：七层代理hash</h3><ul><li>反向代理使用http协议中的某些业务属性来做hash，例如sid，city_id，user_id等，能够更加灵活的实施hash策略，以保证同一个浏览器用户的请求落在同一个web-server上</li><li><p>优点：</p><ul><li>只需要改nginx配置，不需要修改应用代码</li><li>负载均衡，只要hash属性是均匀的，多台web-server的负载是均衡的</li><li>可以支持web-server水平扩展（session同步法是不行的，受内存限制）</li></ul></li><li><p>不足：</p><ul><li>如果web-server重启，一部分session会丢失，产生业务影响，例如部分用户重新登录</li><li><p>如果web-server水平扩展，rehash后session重新分布，也会有一部分用户路由不到正确的session</p></li><li><p>session一般是有有效期的，所有不足中的两点，可以认为等同于部分session失效，一般问题不大。</p></li><li>对于四层hash还是七层hash，个人推荐前者：让专业的软件做专业的事情，反向代理就负责转发，尽量不要引入应用层业务属性，除非不得不这么做（例如，有时候多机房多活需要按照业务属性路由到不同机房的web-server）。</li></ul></li></ul><h2 id="四、后端统一存储"><a href="#四、后端统一存储" class="headerlink" title="四、后端统一存储"></a>四、后端统一存储</h2><p><img src="/2019/01/20/session一致性架构设计实践/7.png" alt=""></p><ul><li>思路：将session存储在web-server后端的存储层，数据库或者缓存</li><li><p>优点：</p><ul><li>没有安全隐患</li><li>可以水平扩展，数据库/缓存水平切分即可</li><li>web-server重启或者扩容都不会有session丢失</li></ul></li><li><p>不足：增加了一次网络调用，并且需要修改应用代码</p><ul><li>对于db存储还是cache，个人推荐后者：session读取的频率会很高，数据库压力会比较大。如果有session高可用需求，cache可以做高可用，但大部分情况下session可以丢失，一般也不需要考虑高可用。</li></ul></li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><p>保证session一致性的架构设计常见方法：</p><ul><li>session同步法：多台web-server相互同步数据</li><li>客户端存储法：一个用户只存储自己的数据</li><li>反向代理hash一致性：四层hash和七层hash都可以做，保证一个用户的请求落在一台web-server上</li><li>后端统一存储：web-server重启和扩容，session也不会丢失</li></ul></li><li><p>对于方案3和方案4，个人建议推荐后者：</p><ul><li>web层、service层无状态是大规模分布式系统设计原则之一，session属于状态，不宜放在web层</li><li>让专业的软件做专业的事情，web-server存session？还是让cache去做这样的事情吧</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;session一致性架构设计实践&quot;&gt;&lt;a href=&quot;#session一致性架构设计实践&quot; class=&quot;headerlink&quot; title=&quot;session一致性架构设计实践&quot;&gt;&lt;/a&gt;session一致性架构设计实践&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/20/session一致性架构设计实践/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="outside class" scheme="https://daizhe.net.cn/categories/outside-class/"/>
    
    
      <category term="outside class" scheme="https://daizhe.net.cn/tags/outside-class/"/>
    
  </entry>
  
  <entry>
    <title>tomcat会话服务</title>
    <link href="https://daizhe.net.cn/2019/01/20/tomcat%E4%BC%9A%E8%AF%9D%E6%9C%8D%E5%8A%A1/"/>
    <id>https://daizhe.net.cn/2019/01/20/tomcat会话服务/</id>
    <published>2019-01-20T03:35:27.812Z</published>
    <updated>2019-01-22T12:09:44.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat-Session-Server"><a href="#Tomcat-Session-Server" class="headerlink" title="Tomcat Session Server"></a>Tomcat Session Server</h1><p><img src="/2019/01/20/tomcat会话服务/标题.gif" alt=""><br><a id="more"></a></p><h2 id="session会话"><a href="#session会话" class="headerlink" title="session会话"></a>session会话</h2><ul><li>session(会话保持)<ul><li>session stick:调度器<ul><li>使用调度器的调度算法来解决问题，损害调度器的负载均衡效果，引入session单点即有一台服务器宕机都会造成数据的丢失。</li></ul></li><li>session replication cluster (sesssion复制集群)：后端服务器组织成集群<ul><li>将后端的服务器组织起来（单播，多播，广播等方式）将单个服务器的会话同步给集群中的其他服务器，从而使得用户的请求被调度到任何一个服务器上得到的session都是相同的（实现调度的服务器到后端被调度的服务器之间的解耦，实现将有状态变成了无状态实现按需进行调度）</li><li>劣势：每个节点都会持有集群中的所有的session信息，对内存资源的消耗非常大，同时对网络资源的占用也非常严重</li></ul></li><li>session server:后端服务器之后即存储服务器</li></ul></li></ul><hr><h3 id="session-server-后端服务器之后即存储服务器"><a href="#session-server-后端服务器之后即存储服务器" class="headerlink" title="session server:后端服务器之后即存储服务器"></a>session server:后端服务器之后即存储服务器</h3><ul><li><p>存储系统种类繁多</p><ul><li>Session Manager 需要专门添加并非内建</li></ul></li><li><p>存储系统性能高</p><ul><li>存储系统要保存session ，而session通常都是简单的数据，但是必须要具有流逝化的特性</li><li>session变化特别的频繁所以存储系统必须要做到快速的存取</li></ul></li><li><p>存储系统要有冗余能力</p><ul><li>存储系统一旦成为一个集中的session server后，将成为整个系统的单点</li></ul></li></ul><hr><ul><li>Cache 缓存：无持久能力（memcached）<ul><li>一般而言都是在内存当中或者即便实在磁盘上，通常系统重启后数据则将丢失，无法完成重构。</li></ul></li><li>Store 存储 (redis)<ul><li>数据的读写有可能是在内存中完成，但是本身却拥有持久存储功能即持久是必备功能</li></ul></li></ul><hr><p>memcached（缓存服务）</p><ul><li>缓存的数据的大小不可大于1M，如果数据大于1M则不被缓存</li><li>完全基于内存工作</li></ul><p>缓存系统使用场景</p><ul><li>服务器存储的系统存在热区</li><li>服务器的数据读多写少</li></ul><p>memcached特证</p><ul><li>协议简单</li><li>基于libevent的事件处理（单进程处理多路请求）</li><li>内置内存存储方式</li><li>memcached不互通信额分布式</li></ul><hr><p>范例：基于nginx实现负载均衡，实现mamcache会话缓存</p><p><img src="/2019/01/20/tomcat会话服务/tomcat负载均衡/负载.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">实验准备</span><br><span class="line">  三台主机</span><br><span class="line">    nginx_server      yum install nginx -y</span><br><span class="line">    tomcat_serverA    yum install java-11-openjdk-devel -y  &amp;&amp; yum install tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp -y  yum install memcached -y</span><br><span class="line">    tomcat_serverB    yum install java-11-openjdk-devel -y  &amp;&amp; yum install tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp -y  yum install memcached -y</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">在两台tomcat上分别创建测试页面并定制虚拟主机</span><br><span class="line"></span><br><span class="line">tomcatA</span><br><span class="line">  ~]<span class="comment"># mkdir /data/webapps/myapp-v0.1</span></span><br><span class="line">  ~]<span class="comment"># cd /data/webapps/myapp-v0.1</span></span><br><span class="line">  myapp-v0.1]<span class="comment"># mkdir classes lib WEB-INF WETA-INF</span></span><br><span class="line">  myapp-v0.1]<span class="comment">#  vi index.jsp</span></span><br><span class="line">  &lt;%@ page language=<span class="string">"java"</span> %&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;title&gt;TomcatA&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">       &lt;body&gt;</span><br><span class="line">         &lt;h1&gt;&lt;font color=<span class="string">"purple"</span>&gt;TomcatA.daizhe.com&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">            &lt;table align=<span class="string">"centre"</span> border=<span class="string">"1"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(<span class="string">"a.com"</span>,<span class="string">"a.com"</span>); %&gt;</span><br><span class="line">              &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">             &lt;/tr&gt;</span><br><span class="line">             &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">  webapps]<span class="comment"># ln -sv myapp-v0.1 myapp</span></span><br><span class="line">   ~]<span class="comment"># tree /data</span></span><br><span class="line">  /data</span><br><span class="line">  └── webapps</span><br><span class="line">     ├── myapp -&gt; myapp-v0.1</span><br><span class="line">     └── myapp-v0.1</span><br><span class="line">          ├── classes</span><br><span class="line">          ├── index.jsp</span><br><span class="line">          ├── lib</span><br><span class="line">          ├── WEB-INF</span><br><span class="line">          └── WETA-INF</span><br><span class="line"><span class="comment">#定义虚拟主机使用别名访问</span></span><br><span class="line">   ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">   <span class="comment">#140行</span></span><br><span class="line">  &lt;Context path=<span class="string">"/myapp"</span> docBase=<span class="string">"/data/webapps/myapp"</span> reloadable=<span class="string">""</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开页面管理接口（manager app和 host manager）</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/tomcat/tomcat-users.xml </span></span><br><span class="line">  &lt;tomcat-users&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"manager-gui"</span>/&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"admin-gui"</span>/&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"manager-script"</span>/&gt; </span><br><span class="line">  &lt;user username=<span class="string">"tomcat"</span> password=<span class="string">"centos"</span> roles=<span class="string">"manager-gui,manager-script,admin-gui,admin-script"</span>/&gt;</span><br><span class="line">  &lt;/tomcat-users&gt;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start tomcat</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line"></span><br><span class="line">tomcatB</span><br><span class="line">  ~]<span class="comment"># tree /data</span></span><br><span class="line">  /data</span><br><span class="line">  └── webapps</span><br><span class="line">      └── myapp-v0.1</span><br><span class="line">          ├── classes</span><br><span class="line">          ├── index.jsp</span><br><span class="line">          ├── lib</span><br><span class="line">          ├── WEB-INF</span><br><span class="line">          └── WETA-INF</span><br><span class="line">  ~]<span class="comment"># vim /data/webapps/myapp-v0.1/index.jsp </span></span><br><span class="line">  &lt;%@ page language=<span class="string">"java"</span> %&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;title&gt;TomcatA&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">       &lt;body&gt;</span><br><span class="line">         &lt;h1&gt;&lt;font color=<span class="string">"red"</span>&gt;TomcatB.daizhe.com&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">            &lt;table align=<span class="string">"centre"</span> border=<span class="string">"1"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(<span class="string">"a.com"</span>,<span class="string">"a.com"</span>); %&gt;</span><br><span class="line">              &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">             &lt;/tr&gt;</span><br><span class="line">             &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">  webapps]<span class="comment"># ln -sv myapp-v0.1 myapp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义虚拟主机使用别名访问</span></span><br><span class="line">   ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">   <span class="comment">#140行</span></span><br><span class="line">  &lt;Context path=<span class="string">"/myapp"</span> docBase=<span class="string">"/data/webapps/myapp"</span> reloadable=<span class="string">""</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开页面管理接口（manager app和 host manager）</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/tomcat/tomcat-users.xml </span></span><br><span class="line">  &lt;tomcat-users&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"manager-gui"</span>/&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"admin-gui"</span>/&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"manager-script"</span>/&gt; </span><br><span class="line">  &lt;user username=<span class="string">"tomcat"</span> password=<span class="string">"centos"</span> roles=<span class="string">"manager-gui,manager-script,admin-gui,admin-script"</span>/&gt;</span><br><span class="line">  &lt;/tomcat-users&gt;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start tomcat</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br></pre></td></tr></table></figure><ul><li>访问测试是否配置成功</li></ul><p><img src="/2019/01/20/tomcat会话服务/tomcat负载均衡/1.png" alt=""><br><img src="/2019/01/20/tomcat会话服务/tomcat负载均衡/5.png" alt=""></p><ul><li><p>tomcat默认不支持将session会话信息放进memcached中，需要借助第三方MSM（memcached session manager）,意思是将memcached当作session会话的后端的session管理器</p><ul><li><p>支持的存储程序</p><ul><li>memcached</li><li>redis</li><li>couchbase</li></ul></li><li><p>托管在github上地址：<a href="https://github.com/magro/memcached-session-manager" target="_blank" rel="noopener">https://github.com/magro/memcached-session-manager</a></p></li><li>配置参考手册：<a href="https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration" target="_blank" rel="noopener">https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration</a></li></ul></li></ul><p>配置tomcatA和tomcatB 可以实现两个tomcat可以使用两个memcached 实现两台memcached各存储部分session 会话信息，实现双活机制</p><p><img src="/2019/01/20/tomcat会话服务/1.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">tomcatA 安装memcached (base仓库)    监听的端口 tcp 11211 / udp 11211</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install memcached -y</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># rpm -ql memcached</span></span><br><span class="line">  /etc/sysconfig/memcached  <span class="comment">#配置文件</span></span><br><span class="line">  /usr/bin/memcached        <span class="comment">#命令执行文件</span></span><br><span class="line">  usr/lib/systemd/system/memcached.service  <span class="comment">#启动程序文件</span></span><br><span class="line"></span><br><span class="line">  查看memcached命令帮助</span><br><span class="line">  ~]<span class="comment"># memcached -h</span></span><br><span class="line">  -p &lt;num&gt;     <span class="comment"># 监听tcp 11211端口</span></span><br><span class="line">  -U &lt;num&gt;     <span class="comment"># 监听UDP 11211端口 ， 设置upd协议为0 表示关闭udp协议的端口</span></span><br><span class="line">  -l &lt;addr&gt;    <span class="comment"># 指定监听的地址</span></span><br><span class="line">  -d           <span class="comment"># 运行为守护进程  </span></span><br><span class="line">  -u &lt;username&gt; <span class="comment"># 指定运行的身份</span></span><br><span class="line">  -m &lt;num&gt;      <span class="comment"># 使用多大的内存空间当作缓存 ，默认为64M ，必须调大</span></span><br><span class="line">  -M            <span class="comment"># 内存耗尽禁用LRU 表示内存耗尽禁止新存储的数据存储</span></span><br><span class="line">  -c &lt;num&gt;      <span class="comment"># 最大并发连接数，默认为1024          </span></span><br><span class="line">  -v            <span class="comment"># 输出信息到前台</span></span><br><span class="line">  -vv           <span class="comment"># 详细</span></span><br><span class="line">  -vvv          <span class="comment"># 详详细   </span></span><br><span class="line">  -f &lt;factor&gt;   <span class="comment"># 增长因子 默认为1.25</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment">#查看增长因子</span></span><br><span class="line">  <span class="comment">#~]# su - daizhe</span></span><br><span class="line">  <span class="comment">#~]$ memcached -vvv -m 256m -f 1.25</span></span><br><span class="line">  <span class="comment">#slab class   1: chunk size        96 perslab   10922</span></span><br><span class="line">  <span class="comment">#slab class   2: chunk size       120 perslab    8738</span></span><br><span class="line">  <span class="comment">#slab class   3: chunk size       152 perslab    6898</span></span><br><span class="line">  <span class="comment">#slab class   4: chunk size       192 perslab    5461</span></span><br><span class="line">  <span class="comment">#slab class   5: chunk size       240 perslab    4369</span></span><br><span class="line"></span><br><span class="line">编辑memcache的配置文件启动</span><br><span class="line"> ~]<span class="comment"># vim /etc/sysconfig/memcached </span></span><br><span class="line">  PORT=<span class="string">"11211"</span>      <span class="comment">#端口</span></span><br><span class="line">  USER=<span class="string">"memcached"</span>  <span class="comment">#运行身份</span></span><br><span class="line">  MAXCONN=<span class="string">"1024"</span>  </span><br><span class="line">  CACHESIZE=<span class="string">"256"</span>   <span class="comment">#内存空间</span></span><br><span class="line">  OPTIONS=<span class="string">"-f 1.1 -M"</span>  <span class="comment">#指定增长因子</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start memcached</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  11211</span><br><span class="line"></span><br><span class="line">安装c程序调用memcache依赖的库</span><br><span class="line"><span class="comment"># php程序员： php-pecl-memcache</span></span><br><span class="line"><span class="comment"># python程序员： python-memcached.noarch</span></span><br><span class="line"><span class="comment"># c程序员: libmemcached</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install libmemcached -y </span></span><br><span class="line"></span><br><span class="line">  使用telnet连接（memcached支持文本协议即纯文本的字符串）</span><br><span class="line">  ~]<span class="comment"># yum install telnet -y</span></span><br><span class="line">  ~]<span class="comment"># telnet 127.0.0.1 11211  </span></span><br><span class="line">  <span class="comment">#stats查看状态使用信息</span></span><br><span class="line"></span><br><span class="line">  设置一个键</span><br><span class="line">  <span class="built_in">set</span> mykey 123 60 6</span><br><span class="line">  daizhe</span><br><span class="line">  STORED</span><br><span class="line">  <span class="comment"># 键名：mykey</span></span><br><span class="line">  <span class="comment"># 值：123</span></span><br><span class="line">  <span class="comment"># 超时时长：60内有效</span></span><br><span class="line">  <span class="comment"># 指定字节数</span></span><br><span class="line"></span><br><span class="line">  查看已经存储的键值</span><br><span class="line">  get mykey</span><br><span class="line"></span><br><span class="line">获取memcached的信息</span><br><span class="line">  ~]<span class="comment"># memstat -h</span></span><br><span class="line">  --servers= <span class="comment">#指定服务器地址</span></span><br><span class="line">  ~]<span class="comment"># memstat --servers=127.0.0.1:11211</span></span><br><span class="line"></span><br><span class="line">dump出所有存储的键</span><br><span class="line">  ~]<span class="comment"># memdump --servers=127.0.0.1:11211</span></span><br><span class="line"></span><br><span class="line">清空所有的键</span><br><span class="line">  ~]<span class="comment"># memflush</span></span><br><span class="line"></span><br><span class="line">删除所有的键</span><br><span class="line">  ~]<span class="comment"># memrm</span></span><br><span class="line"></span><br><span class="line">更新键的时间戳</span><br><span class="line">  ~]<span class="comment"># memtouch</span></span><br><span class="line"></span><br><span class="line">判断存在性</span><br><span class="line">  ~]<span class="comment"># memexist</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tomcatA 安装memcached</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install memcached -y</span></span><br><span class="line"></span><br><span class="line">编辑memcache的配置文件启动</span><br><span class="line"> ~]<span class="comment"># vim /etc/sysconfig/memcached </span></span><br><span class="line">  PORT=<span class="string">"11211"</span>      <span class="comment">#端口</span></span><br><span class="line">  USER=<span class="string">"memcached"</span>  <span class="comment">#运行身份</span></span><br><span class="line">  MAXCONN=<span class="string">"1024"</span>  </span><br><span class="line">  CACHESIZE=<span class="string">"256"</span>   <span class="comment">#内存空间</span></span><br><span class="line">  OPTIONS=<span class="string">"-f 1.1 -M"</span>  <span class="comment">#指定增长因子</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start memcached</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  11211</span><br></pre></td></tr></table></figure><hr><p>jar文件下载路径：<a href="http://repo1.maven.org/maven2/de/javakaffee/msm/memcached-session-manager/" target="_blank" rel="noopener">http://repo1.maven.org/maven2/de/javakaffee/msm/memcached-session-manager/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为tomcatA 节点和 tomcatB 节点的tomcat准备 jar文件</span><br><span class="line">  查看默认的tomcat的jar文件的存放路径</span><br><span class="line">  ~]<span class="comment"># rpm -ql tomcat-lib</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /usr/share/java/tomcat/    #所有的tomcat节点上都要放置jar文件</span></span><br><span class="line">  将所有的jar文件防止在此路径下</span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/20/tomcat会话服务/2.png" alt=""><br><img src="/2019/01/20/tomcat会话服务/3.png" alt=""><br><img src="/2019/01/20/tomcat会话服务/4.png" alt=""></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">配置tomcatA和tomcatB 节点的tomcat的配置文件（不要和tomcat_session 会话集群同时使用）</span><br><span class="line"></span><br><span class="line">tomcatA和tomcatB</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line"><span class="comment">#105</span></span><br><span class="line">      &lt;Engine name=<span class="string">"Catalina"</span> defaultHost=<span class="string">"localhost"</span> jvmRoute=<span class="string">"tcA"</span>&gt; <span class="comment">#两个节点做区分 tcA / tcB</span></span><br><span class="line"><span class="comment">#140行</span></span><br><span class="line">  &lt;Context path=<span class="string">"/myapp"</span> docBase=<span class="string">"/data/webapps/myapp"</span> reloadable=<span class="string">""</span>&gt;</span><br><span class="line">  &lt;Manager className=<span class="string">"de.javakaffee.web.msm.MemcachedBackupSessionManager"</span>    memcachedNodes=<span class="string">"172.18.135.1:11211,172.18.135.5:11211"</span></span><br><span class="line">    failoverNodes=<span class="string">"n1"</span></span><br><span class="line">    requestUriIgnorePattern=<span class="string">".*\.(ico|png|gif|jpg|css|js)$"</span>    transcoderFactoryClass=<span class="string">"de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory"</span></span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动节点中所有tamcat服务器并监控日志信息</span><br><span class="line">  ~]<span class="comment"># systemctl restart tomcat</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment">#tail -f /var/log/tomcat/catalina.2019-01-20.log</span></span><br></pre></td></tr></table></figure><p>使用nginx调度测试</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Tomcat-Session-Server&quot;&gt;&lt;a href=&quot;#Tomcat-Session-Server&quot; class=&quot;headerlink&quot; title=&quot;Tomcat Session Server&quot;&gt;&lt;/a&gt;Tomcat Session Server&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/20/tomcat会话服务/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://daizhe.net.cn/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://daizhe.net.cn/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat会话集群</title>
    <link href="https://daizhe.net.cn/2019/01/19/tomcat%E4%BC%9A%E8%AF%9D%E9%9B%86%E7%BE%A4/"/>
    <id>https://daizhe.net.cn/2019/01/19/tomcat会话集群/</id>
    <published>2019-01-19T09:56:29.471Z</published>
    <updated>2019-01-22T12:09:09.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat-Session-Cluster"><a href="#Tomcat-Session-Cluster" class="headerlink" title="Tomcat Session Cluster"></a>Tomcat Session Cluster</h1><p><img src="/2019/01/19/tomcat会话集群/标题.gif" alt=""><br><a id="more"></a></p><h2 id="session会话"><a href="#session会话" class="headerlink" title="session会话"></a>session会话</h2><ul><li>session(会话保持)<ul><li>session stick:调度器<ul><li>使用调度器的调度算法来解决问题，损害调度器的负载均衡效果，引入session单点即有一台服务器宕机都会造成数据的丢失。</li></ul></li><li>session replication cluster (sesssion复制集群)：后端服务器组织成集群<ul><li>将后端的服务器组织起来（单播，多播，广播等方式）将单个服务器的会话同步给集群中的其他服务器，从而使得用户的请求被调度到任何一个服务器上得到的session都是相同的（实现调度的服务器到后端被调度的服务器之间的解耦，实现将有状态变成了无状态实现按需进行调度）</li><li>劣势：每个节点都会持有集群中的所有的session信息，对内存资源的消耗非常大，同时对网络资源的占用也非常严重</li></ul></li><li>session server:后端服务器之后即存储服务器</li></ul></li></ul><h3 id="session-replication-cluster-sesssion复制集群-：后端服务器组织成集群"><a href="#session-replication-cluster-sesssion复制集群-：后端服务器组织成集群" class="headerlink" title="session replication cluster (sesssion复制集群)：后端服务器组织成集群"></a>session replication cluster (sesssion复制集群)：后端服务器组织成集群</h3><ul><li><p>tomcat中自身就带有了一种cluster机制（集群仅是针对于保持用户session会话问题上实现集群）</p><ul><li>将后端多个正常工作的主机在session管理问题上将其基于专有的网络接口或者面向客户端的通用网络接口构建出一个会话集群，此集群可以实现让每一个节点获得会话信息后通过所谓通讯当中的多播机制或者称之为组播机制（Multicast），将自己所获得的会话信息多播到事先约定的多播信道上，实现在同一多播网络中的其他主机获取到相关的会话信息，并将其合并到本地已有的会话信息中。<ul><li>构建通讯集群的方式<ul><li>单播：效率最低</li><li>多播：多播方式最优，可以配置同一集群中的主机，大家共同使用同一个多播地址（多播域），而后在规定的多播第之内发送多播信息，只有同一多播地址上的主机才可以收到此会话信息。</li><li>广播：后端主机获得会话信息后直接以广播的方式发送到其他后端主机上（但是播及面太大，造成影响范围太大）。</li></ul></li></ul></li></ul></li><li><p>tomcat本身就是java语言编写，所以具有完全面向对象的特性，必须使用类来完成任何功能，包括会话管理，在tomcat上会话管理组件称为session manager (会话管理器)，在tomcat上有好几种会话管理机制，统称为会话管理器</p><ul><li><p>默认使用的是持久会话管理</p><ul><li>tomcat接收到客户的session会话信息，是先保存在内存中，会周期性的同步在磁盘上进行数据的保存（所以将tomcat重启后，被正常存储好的会话信息会被将回复回来，但是在未到周期同步在磁盘上的session会话信息，也就是存在内存中的会话尚未同步在磁盘上的会话信息在tomcat宕机时会丢失session会话信息）</li><li>持久会话管理，一定会影响磁盘的IO性能（受本地的磁盘IO限制）</li></ul></li><li><p><code>Delta Session Manager 会话管理器</code></p><ul><li>增量变动之意</li><li>每一个节点自己后来生成的session会话增量变量的信息，将增量的会话变动通过多播方式，多播到多播域内，同一多播域中的其他主机也存在相同的Delta Session Manager 接收其他主机在多播域内变动的session会话信息，并且合并在本地的session存储中</li><li>劣势：session manager 中的每个节点都要保存所有的会话信息并且通常是保存在内存中，一旦客户端访问的数量增多时会使得后端session manager存储会话的节点中都存在大量的会话信息，会使得会话无法被扩展。</li></ul></li><li><p>Backup Session Manager 备份会话管理器</p><ul><li>每一个会话节点（session manager）在保存会话和生成会话时，会将会话同传给集群中的其他一个节点或者说是有限节点，而不是所有会话集群中的所有节点，因为每个节点禁止有所有会话节点中一定比例的会话信息。</li><li>此类会话管理须实现前端调度的会话绑定，且保持会话管理的节点一但宕机后可以将此会话信息保持 发送到另一台备份会话信息的会话管理器上（而不是任何一个会话管理节点）。此类会话管理，需要管理员精心介入到调度拓扑结构中。</li><li>也就是此类会话管理无会话动态性需要管理员明确管理指定，如有宕机需精确的重定向，那台会话管理节点备份了哪台会话节点的会话信息。</li><li>打破了不会让每一个节点持有整个集群的session会话的信息</li></ul></li><li><p><code>自定义会话管理器</code></p><ul><li>将tomcat生成的会话信息不记录在服务器的内存中，而是将会话信息存储到外部适配的缓存的服务器上比如mamcached、redis</li><li>一旦有session会话保持时通过是配置直接保存在外部存储上，这样则使得tomcat可以是同Session_server保存用户的会话信息</li></ul></li></ul></li></ul><p>范例：Delta Session Manager 会话管理器<br>参考文档：<a href="http://tomcat.apache.org/tomcat-7.0-doc/cluster-howto.html" target="_blank" rel="noopener">http://tomcat.apache.org/tomcat-7.0-doc/cluster-howto.html</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">配置启用集群，将下列配置放置于&lt;engine&gt;或&lt;host&gt;中；</span><br><span class="line"></span><br><span class="line">&lt;Cluster className=<span class="string">"org.apache.catalina.ha.tcp.SimpleTcpCluster"</span>  <span class="comment">#属性指明使用的类</span></span><br><span class="line">channelSendOptions=<span class="string">"8"</span>&gt;   </span><br><span class="line"></span><br><span class="line">&lt;Manager className=<span class="string">"org.apache.catalina.ha.session.DeltaManager"</span>   <span class="comment">#指定使用的会话管理器</span></span><br><span class="line">expireSessionsOnShutdown=<span class="string">"false"</span>          <span class="comment">#DeltaManager 用到的属性</span></span><br><span class="line">notifyListenersOnReplication=<span class="string">"true"</span>/&gt;     <span class="comment">#DeltaManager 用到的属性</span></span><br><span class="line"></span><br><span class="line">&lt;Channel className=<span class="string">"org.apache.catalina.tribes.group.GroupChannel"</span>&gt;     <span class="comment">#定义多播信息及集群通讯信道</span></span><br><span class="line"> &lt;Membership className=<span class="string">"org.apache.catalina.tribes.membership.McastService"</span> <span class="comment">#定义集群成员的关系</span></span><br><span class="line">address=<span class="string">"228.0.0.4"</span>   <span class="comment">#多播地址，D类地址用来组播（224~239），多播即大家使用同一个D类中相同的一个地址</span></span><br><span class="line">port=<span class="string">"45564"</span>          <span class="comment">#多播端口</span></span><br><span class="line">frequency=<span class="string">"500"</span>       <span class="comment">#每个多长时间发一次心跳 默认500毫秒</span></span><br><span class="line">dropTime=<span class="string">"3000"</span>/&gt;     <span class="comment">#多长时间内收不到节点的心跳 判断为超时，从而从集群成员中剔除</span></span><br><span class="line"> &lt;Receiver className=<span class="string">"org.apache.catalina.tribes.transport.nio.NioReceiver"</span> <span class="comment">#定义如何接收传递的session会话信息</span></span><br><span class="line">  address=<span class="string">"auto"</span></span><br><span class="line">  port=<span class="string">"4000"</span>         <span class="comment">#监听的端口，如果有冲突，自动切换（4000~4100）</span></span><br><span class="line">  autoBind=<span class="string">"100"</span>      <span class="comment">#自动绑定，如有错误自动重新绑定</span></span><br><span class="line">  selectorTimeout=<span class="string">"5000"</span><span class="comment">#选择器的超时时长默认5秒</span></span><br><span class="line">  maxThreads=<span class="string">"6"</span>/&gt;      <span class="comment">#最大线程数，默认值为6，已经足够使用</span></span><br><span class="line">     &lt;Sender className=<span class="string">"org.apache.catalina.tribes.transport.ReplicationTransmitter"</span>&gt;   <span class="comment">#向外发送心跳以及session会话信息</span></span><br><span class="line"> &lt;Transport className=<span class="string">"org.apache.catalina.tribes.transport.nio.PooledParallelSender"</span>/&gt; <span class="comment">#心跳大佛那个的方式轮询</span></span><br><span class="line"> &lt;/Sender&gt;</span><br><span class="line"> &lt;Interceptor className=<span class="string">"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector"</span>/&gt;  <span class="comment">#探测器校验信息是否出错</span></span><br><span class="line"> &lt;Interceptor className=<span class="string">"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor"</span>/&gt;</span><br><span class="line">&lt;/Channel&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Valve className=<span class="string">"org.apache.catalina.ha.tcp.ReplicationValve"</span>    <span class="comment">#定义过滤器，过滤复制集群相关的信息</span></span><br><span class="line">filter=<span class="string">""</span>/&gt;</span><br><span class="line">&lt;Valve className=<span class="string">"org.apache.catalina.ha.session.JvmRouteBinderValve"</span>/&gt;   <span class="comment">#绑定JVM的路由信息</span></span><br><span class="line"></span><br><span class="line">   &lt;Deployer className=<span class="string">"org.apache.catalina.ha.deploy.FarmWarDeployer"</span></span><br><span class="line">tempDir=<span class="string">"/tmp/war-temp/"</span></span><br><span class="line">  deployDir=<span class="string">"/tmp/war-deploy/"</span></span><br><span class="line">watchDir=<span class="string">"/tmp/war-listen/"</span></span><br><span class="line">watchEnabled=<span class="string">"false"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;ClusterListener className=<span class="string">"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener"</span>/&gt;   <span class="comment">#集群侦听器，确保集群相关的资源仅被集群中的成员所使用</span></span><br><span class="line">&lt;ClusterListener className=<span class="string">"org.apache.catalina.ha.session.ClusterSessionListener"</span>/&gt;</span><br><span class="line">&lt;/Cluster&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">会话集群配置</span><br><span class="line"></span><br><span class="line">第一步：</span><br><span class="line">配置session集群(修改所有的tomcat服务器会话集群的配置文件)</span><br><span class="line"> ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">105行 添加标注信息</span><br><span class="line">    &lt;Engine name=<span class="string">"Catalina"</span> defaultHost=<span class="string">"localhost"</span> jvmRoute=<span class="string">"tcA"</span>&gt;<span class="comment">#每个节点上的标识不要相同</span></span><br><span class="line">128行</span><br><span class="line"> &lt;Host name=<span class="string">"localhost"</span>  appBase=<span class="string">"webapps"</span></span><br><span class="line">            unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</span><br><span class="line">        &lt;Cluster className=<span class="string">"org.apache.catalina.ha.tcp.SimpleTcpCluster"</span></span><br><span class="line">                channelSendOptions=<span class="string">"8"</span>&gt;</span><br><span class="line">        &lt;Manager className=<span class="string">"org.apache.catalina.ha.session.DeltaManager"</span></span><br><span class="line">                expireSessionsOnShutdown=<span class="string">"false"</span></span><br><span class="line">                notifyListenersOnReplication=<span class="string">"true"</span>/&gt;</span><br><span class="line">        &lt;Channel className=<span class="string">"org.apache.catalina.tribes.group.GroupChannel"</span>&gt;</span><br><span class="line">        &lt;Membership className=<span class="string">"org.apache.catalina.tribes.membership.McastService"</span></span><br><span class="line">                address=<span class="string">"228.0.100.10"</span></span><br><span class="line">                port=<span class="string">"45564"</span></span><br><span class="line">                frequency=<span class="string">"500"</span></span><br><span class="line">                dropTime=<span class="string">"3000"</span>/&gt;</span><br><span class="line">        &lt;Receiver className=<span class="string">"org.apache.catalina.tribes.transport.nio.NioReceiver"</span></span><br><span class="line">                address=<span class="string">"auto"</span></span><br><span class="line">                port=<span class="string">"4000"</span></span><br><span class="line">                autoBind=<span class="string">"100"</span></span><br><span class="line">                selectorTimeout=<span class="string">"5000"</span>  </span><br><span class="line">                maxThreads=<span class="string">"6"</span>/&gt;</span><br><span class="line">        &lt;Sender className=<span class="string">"org.apache.catalina.tribes.transport.ReplicationTransmitter"</span>&gt;</span><br><span class="line">        &lt;Transport className=<span class="string">"org.apache.catalina.tribes.transport.nio.PooledParallelSender"</span>/&gt;</span><br><span class="line">        &lt;/Sender&gt;</span><br><span class="line">        &lt;Interceptor className=<span class="string">"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector"</span>/&gt;</span><br><span class="line">        &lt;Interceptor className=<span class="string">"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor"</span>/&gt;</span><br><span class="line">   &lt;/Channel&gt;</span><br><span class="line">        &lt;Valve className=<span class="string">"org.apache.catalina.ha.tcp.ReplicationValve"</span></span><br><span class="line">                filter=<span class="string">""</span>/&gt;</span><br><span class="line">        &lt;Valve className=<span class="string">"org.apache.catalina.ha.session.JvmRouteBinderValve"</span>/&gt;</span><br><span class="line">        &lt;Deployer className=<span class="string">"org.apache.catalina.ha.deploy.FarmWarDeployer"</span></span><br><span class="line">                tempDir=<span class="string">"/tmp/war-temp/"</span></span><br><span class="line">                deployDir=<span class="string">"/tmp/war-deploy/"</span></span><br><span class="line">                watchDir=<span class="string">"/tmp/war-listen/"</span></span><br><span class="line">                watchEnabled=<span class="string">"false"</span>/&gt;</span><br><span class="line">        &lt;ClusterListener className=<span class="string">"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener"</span>/&gt;</span><br><span class="line">        &lt;ClusterListener className=<span class="string">"org.apache.catalina.ha.session.ClusterSessionListener"</span>/&gt;</span><br><span class="line">        &lt;/Cluster&gt;</span><br><span class="line"></span><br><span class="line">第二步：</span><br><span class="line">拷贝 web.xml文件到自己定义的路径别名的虚拟主机中</span><br><span class="line">(修改所有的tomcat服务器会话集群虚拟主机的web.xml)</span><br><span class="line">~]<span class="comment"># cp /etc/tomcat/web.xml /data/webapps/myapp/WEB-INF/</span></span><br><span class="line">WEB-INF]<span class="comment"># pwd</span></span><br><span class="line">/data/webapps/myapp/WEB-INF</span><br><span class="line">23行</span><br><span class="line">&lt;distributable/&gt;<span class="comment">#必须虚拟主机路经下存在web.xml 并且改文件中存在&lt;distributable/&gt; 才可使用会话集群</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三步：</span><br><span class="line">集群成员间的时间必须同步</span><br><span class="line">~] <span class="comment"># ntpdate</span></span><br><span class="line"></span><br><span class="line">注意：此时调度器应该继续使用会话粘性，保证客户端请求都调度到一台服务器，因为后端的会话集群服务器同步会话信息并非实时同步。这样可以确保当给客户端提供会话的主机宕机后也可以让令外会话集权中的服务器继续保持会话</span><br><span class="line"></span><br><span class="line">第四步：</span><br><span class="line">重新启动会话集群中的tomcat服务器</span><br><span class="line">~]<span class="comment"># systemctl start tomcat</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># tail -f /var/log/tomcat/catalina.2019-01-20.log </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调度器</span><br><span class="line">使用nginx调度测试</span><br><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line"> upstream tcserver &#123;</span><br><span class="line">        server 172.18.135.1:8080;</span><br><span class="line">        server 172.18.135.5:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://tcserver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># nginx -t</span></span><br><span class="line">~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><p>测试(已经实现会话保持和nginx默认的轮询调度)<br><img src="/2019/01/19/tomcat会话集群/1.png" alt=""><br><img src="/2019/01/19/tomcat会话集群/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Tomcat-Session-Cluster&quot;&gt;&lt;a href=&quot;#Tomcat-Session-Cluster&quot; class=&quot;headerlink&quot; title=&quot;Tomcat Session Cluster&quot;&gt;&lt;/a&gt;Tomcat Session Cluster&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/19/tomcat会话集群/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://daizhe.net.cn/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://daizhe.net.cn/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat负载均衡--nginx | httpd</title>
    <link href="https://daizhe.net.cn/2019/01/19/tomcat%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://daizhe.net.cn/2019/01/19/tomcat负载均衡/</id>
    <published>2019-01-19T04:03:46.328Z</published>
    <updated>2019-01-22T12:10:29.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat负载均衡及会话保持–nginx-httpd"><a href="#tomcat负载均衡及会话保持–nginx-httpd" class="headerlink" title="tomcat负载均衡及会话保持–nginx | httpd"></a>tomcat负载均衡及会话保持–nginx | httpd</h1><p><img src="/2019/01/19/tomcat负载均衡/标题.gif" alt=""><br><a id="more"></a></p><h2 id="session会话"><a href="#session会话" class="headerlink" title="session会话"></a>session会话</h2><ul><li>session(会话保持)<ul><li>session stick:调度器<ul><li>使用调度器的调度算法来解决问题，损害调度器的负载均衡效果，引入session单点即有一台服务器宕机都会造成数据的丢失。</li></ul></li><li>session replication cluster (sesssion复制集群)：后端服务器组织成集群<ul><li>将后端的服务器组织起来（单播，多播，广播等方式）将单个服务器的会话同步给集群中的其他服务器，从而使得用户的请求被调度到任何一个服务器上得到的session都是相同的（实现调度的服务器到后端被调度的服务器之间的解耦，实现将有状态变成了无状态实现按需进行调度）</li><li>劣势：每个节点都会持有集群中的所有的session信息，对内存资源的消耗非常大，同时对网络资源的占用也非常严重</li></ul></li><li>session server:后端服务器之后即存储服务器</li></ul></li></ul><p>如果对tomcat实现负载均衡调度，一定要考虑到会话保持</p><h2 id="如何对tomcat实现负载均衡（-session-stick-调度器）"><a href="#如何对tomcat实现负载均衡（-session-stick-调度器）" class="headerlink" title="如何对tomcat实现负载均衡（ session stick:调度器）"></a>如何对tomcat实现负载均衡（ session stick:调度器）</h2><p><img src="/2019/01/19/tomcat负载均衡/负载.png" alt=""></p><h3 id="范例：使用nginx实现负载均衡"><a href="#范例：使用nginx实现负载均衡" class="headerlink" title="范例：使用nginx实现负载均衡"></a><code>范例：使用nginx实现负载均衡</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">实验准备</span><br><span class="line">  三台主机</span><br><span class="line">    nginx_server      yum install nginx -y</span><br><span class="line">    tomcat_serverA    yum install java-11-openjdk-devel -y  &amp;&amp; yum install tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp -y </span><br><span class="line">    tomcat_serverB    yum install java-11-openjdk-devel -y  &amp;&amp; yum install tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp -y </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">在两台tomcat上分别创建测试页面并定制虚拟主机</span><br><span class="line"></span><br><span class="line">tomcatA</span><br><span class="line">  ~]<span class="comment"># mkdir /data/webapps/myapp-v0.1</span></span><br><span class="line">  ~]<span class="comment"># cd /data/webapps/myapp-v0.1</span></span><br><span class="line">  myapp-v0.1]<span class="comment"># mkdir classes lib WEB-INF WETA-INF</span></span><br><span class="line">  myapp-v0.1]<span class="comment">#  vi index.jsp</span></span><br><span class="line">  &lt;%@ page language=<span class="string">"java"</span> %&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;title&gt;TomcatA&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">       &lt;body&gt;</span><br><span class="line">         &lt;h1&gt;&lt;font color=<span class="string">"purple"</span>&gt;TomcatA.daizhe.com&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">            &lt;table align=<span class="string">"centre"</span> border=<span class="string">"1"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(<span class="string">"a.com"</span>,<span class="string">"a.com"</span>); %&gt;</span><br><span class="line">              &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">             &lt;/tr&gt;</span><br><span class="line">             &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">  webapps]<span class="comment"># ln -sv myapp-v0.1 myapp</span></span><br><span class="line">   ~]<span class="comment"># tree /data</span></span><br><span class="line">  /data</span><br><span class="line">  └── webapps</span><br><span class="line">     ├── myapp -&gt; myapp-v0.1</span><br><span class="line">     └── myapp-v0.1</span><br><span class="line">          ├── classes</span><br><span class="line">          ├── index.jsp</span><br><span class="line">          ├── lib</span><br><span class="line">          ├── WEB-INF</span><br><span class="line">          └── WETA-INF</span><br><span class="line"><span class="comment">#定义虚拟主机使用别名访问</span></span><br><span class="line">   ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">   <span class="comment">#140行</span></span><br><span class="line">  &lt;Context path=<span class="string">"/myapp"</span> docBase=<span class="string">"/data/webapps/myapp"</span> reloadable=<span class="string">""</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开页面管理接口（manager app和 host manager）</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/tomcat/tomcat-users.xml </span></span><br><span class="line">  &lt;tomcat-users&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"manager-gui"</span>/&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"admin-gui"</span>/&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"manager-script"</span>/&gt; </span><br><span class="line">  &lt;user username=<span class="string">"tomcat"</span> password=<span class="string">"centos"</span> roles=<span class="string">"manager-gui,manager-script,admin-gui,admin-script"</span>/&gt;</span><br><span class="line">  &lt;/tomcat-users&gt;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start tomcat</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line"></span><br><span class="line">tomcatB</span><br><span class="line">  ~]<span class="comment"># tree /data</span></span><br><span class="line">  /data</span><br><span class="line">  └── webapps</span><br><span class="line">      └── myapp-v0.1</span><br><span class="line">          ├── classes</span><br><span class="line">          ├── index.jsp</span><br><span class="line">          ├── lib</span><br><span class="line">          ├── WEB-INF</span><br><span class="line">          └── WETA-INF</span><br><span class="line">  ~]<span class="comment"># vim /data/webapps/myapp-v0.1/index.jsp </span></span><br><span class="line">  &lt;%@ page language=<span class="string">"java"</span> %&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;title&gt;TomcatA&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">       &lt;body&gt;</span><br><span class="line">         &lt;h1&gt;&lt;font color=<span class="string">"red"</span>&gt;TomcatB.daizhe.com&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">            &lt;table align=<span class="string">"centre"</span> border=<span class="string">"1"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(<span class="string">"a.com"</span>,<span class="string">"a.com"</span>); %&gt;</span><br><span class="line">              &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">             &lt;/tr&gt;</span><br><span class="line">             &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">  webapps]<span class="comment"># ln -sv myapp-v0.1 myapp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义虚拟主机使用别名访问</span></span><br><span class="line">   ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">   <span class="comment">#140行</span></span><br><span class="line">  &lt;Context path=<span class="string">"/myapp"</span> docBase=<span class="string">"/data/webapps/myapp"</span> reloadable=<span class="string">""</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开页面管理接口（manager app和 host manager）</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/tomcat/tomcat-users.xml </span></span><br><span class="line">  &lt;tomcat-users&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"manager-gui"</span>/&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"admin-gui"</span>/&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"manager-script"</span>/&gt; </span><br><span class="line">  &lt;user username=<span class="string">"tomcat"</span> password=<span class="string">"centos"</span> roles=<span class="string">"manager-gui,manager-script,admin-gui,admin-script"</span>/&gt;</span><br><span class="line">  &lt;/tomcat-users&gt;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start tomcat</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br></pre></td></tr></table></figure><ul><li>访问测试是否配置成功</li></ul><p><img src="/2019/01/19/tomcat负载均衡/1.png" alt=""><br><img src="/2019/01/19/tomcat负载均衡/5.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">使用nginx实现客户端的请求完全向后端代理</span><br><span class="line">nginx_server</span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  upstream tcserver &#123;</span><br><span class="line">        server 172.18.135.1:8080; <span class="comment">#tomcat A 地址</span></span><br><span class="line">        server 172.18.135.5:8080; <span class="comment">#tomcat B 地址</span></span><br><span class="line">        &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://tcserver/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br></pre></td></tr></table></figure><ul><li>客户端测试查看（此时是不能保持session会话,服务器认为是不同的session）</li></ul><p><img src="/2019/01/19/tomcat负载均衡/3.png" alt=""><br><img src="/2019/01/19/tomcat负载均衡/4.png" alt=""><br><img src="/2019/01/19/tomcat负载均衡/6.png" alt=""><br><img src="/2019/01/19/tomcat负载均衡/7.png" alt=""></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">利用nginx的<span class="built_in">hash</span>算法实现会话绑定</span><br><span class="line"><span class="comment">#基于一致性BASH算法实现会话绑定</span></span><br><span class="line">nginx_server</span><br><span class="line">   upstream tcserver &#123;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line">        server 172.18.135.1:8080;</span><br><span class="line">        server 172.18.135.5:8080;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure><ul><li>客户端测试（怎么刷新都会是一个tomcat服务器响应，认为是一个客户端）<ul><li>但是这用基于bash的机制是存在劣势的，万一响应的服务器宕机则客户端则无法接收到响应</li></ul></li></ul><p><img src="/2019/01/19/tomcat负载均衡/8.png" alt=""><br><img src="/2019/01/19/tomcat负载均衡/8.png" alt=""></p><hr><h3 id="范例：使用http实现负载均衡"><a href="#范例：使用http实现负载均衡" class="headerlink" title="范例：使用http实现负载均衡"></a><code>范例：使用http实现负载均衡</code></h3><ul><li>httpd也可以实现负载均衡以及会话保持，甚至支持coocki级别的会话保持<ul><li>持续支持的调度算法（lbmethod）<ul><li>bytraffic:后端服务器流量大小承载调度（流量小被调度）</li><li>byrequests:根据请求调度，不考虑后端服务器的繁忙程度（轮询）</li><li>bybusyness ：根据后端繁忙服务器程度进行调度，永不排队（商业版本支持）</li></ul></li></ul></li></ul><p>参考手册：<a href="http://httpd.apache.org/docs/2.4/howto/reverse_proxy.html" target="_blank" rel="noopener">http://httpd.apache.org/docs/2.4/howto/reverse_proxy.html</a></p><h4 id="方式1-http协议"><a href="#方式1-http协议" class="headerlink" title="方式1:http协议"></a>方式1:http协议</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#httpd做tomcat前端调度支持的协议（http\ajp 8009）</span></span><br><span class="line"><span class="comment">#nginx做tomcat前端调度支持的协议（http）</span></span><br><span class="line">httpd_server httpd协议</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/httpd/conf.d/tomcat-cluster.conf</span></span><br><span class="line"></span><br><span class="line">  &lt;proxy balancer://tcsrvs&gt;</span><br><span class="line">  BalancerMember http://172.18.135.1:8080 loadfactor=2  <span class="comment">#定义负载因子如果不定义默认都为1</span></span><br><span class="line">  BalancerMember http://172.18.135.5:8080</span><br><span class="line">  ProxySet lbmethod=byrequests</span><br><span class="line">  &lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">  &lt;VirtualHost *:80&gt;</span><br><span class="line">        ServerName www.centos.com    <span class="comment">#nginx主机名   </span></span><br><span class="line">        ProxyVia On</span><br><span class="line">        ProxyRequests Off</span><br><span class="line">        ProxyPreserveHost On</span><br><span class="line">  &lt;Proxy *&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">  &lt;/Proxy&gt;</span><br><span class="line">        ProxyPass / balancer://tcsrvs/</span><br><span class="line">        ProxyPassReverse / balancer://tcsrvs/</span><br><span class="line">  &lt;Location /&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">  &lt;/Location&gt;</span><br><span class="line">  &lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># httpd -t</span></span><br><span class="line">  ~]<span class="comment"># systemctl start httpd</span></span><br></pre></td></tr></table></figure><ul><li>访问测试（此时保证不了会话绑定）</li></ul><p><img src="/2019/01/19/tomcat负载均衡/9.png" alt=""><br><img src="/2019/01/19/tomcat负载均衡/10.png" alt=""><br><img src="/2019/01/19/tomcat负载均衡/11.png" alt=""><br><img src="/2019/01/19/tomcat负载均衡/12.png" alt=""></p><h4 id="方式2：ajp协议"><a href="#方式2：ajp协议" class="headerlink" title="方式2：ajp协议"></a>方式2：ajp协议</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">httpd_server ajp协议</span><br><span class="line">&lt;proxy balancer://tcsrvs&gt;</span><br><span class="line">BalancerMember ajp://172.18.100.67:8009</span><br><span class="line">BalancerMember ajp://172.18.100.68:8009</span><br><span class="line">ProxySet lbmethod=byrequests</span><br><span class="line">&lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">ServerName lb.magedu.com</span><br><span class="line">ProxyVia On</span><br><span class="line">ProxyRequests Off</span><br><span class="line">ProxyPreserveHost On</span><br><span class="line">&lt;Proxy *&gt;</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Proxy&gt;</span><br><span class="line">ProxyPass / balancer://tcsrvs/</span><br><span class="line">ProxyPassReverse / balancer://tcsrvs/</span><br><span class="line">&lt;Location /&gt;</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line">&lt;Location /balancer-manager&gt;</span><br><span class="line">SetHandler balancer-manager</span><br><span class="line">ProxyPass !</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><h3 id="会话粘性（httpd基于cookie的会话粘性）"><a href="#会话粘性（httpd基于cookie的会话粘性）" class="headerlink" title="会话粘性（httpd基于cookie的会话粘性）"></a>会话粘性（httpd基于cookie的会话粘性）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#httpd不支持客户端地址的粘性</span></span><br><span class="line"><span class="comment">#httpd是根据客户端的cookie做会话粘性</span></span><br><span class="line">httpd服务保持会话粘性：</span><br><span class="line">  <span class="comment">#当服务器第一次收到客户端的请求给他设定cookie时候，在这个cookie中把原有值之外额外设置添加一个对应的键（键名可以自己定义），值则是调度器第一次挑选要负载用户请求的后端服务器的名称，随后用户每后来的访问一定默认会带着cookie,而人为定义之后cookie之中是带有人为设置的键和值的对应信息的（不是基于原ip绑定，而是实现人为的会话中的cookie中插入的键值一致性实现的）</span></span><br><span class="line"></span><br><span class="line">Header add Set-Cookie <span class="string">"ROUTEID=.%&#123;BALANCER_WORKER_ROUTE&#125;e; path=/"</span> env=BALANCER_ROUTE_CHANGED</span><br><span class="line"></span><br><span class="line">Header add Set-Cookie <span class="comment">#给客户端设置的cookie</span></span><br><span class="line">  ROUTEID= <span class="comment">#键名</span></span><br><span class="line">  .%&#123;BALANCER_WORKER_ROUTE&#125;e  <span class="comment">#调度服务器挑选出后端服务器</span></span><br><span class="line">  path= <span class="comment">#指定会话cookie的适用范围</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">编辑调度器httpd_server设置会话粘性</span><br><span class="line">  ~]<span class="comment"># vim /etc/httpd/conf.d/tomcat-cluster.conf </span></span><br><span class="line">  Header add Set-Cookie <span class="string">"ROUTEID=.%&#123;BALANCER_WORKER_ROUTE&#125;e; path=/"</span> env=BALANCER_ROUTE_CHANGED</span><br><span class="line">  &lt;proxy balancer://tcsrvs&gt;BalancerMember http://172.18.135.1:8080 loadfactor=2 route=TomcatA </span><br><span class="line">  BalancerMember http://172.18.135.5:8080 route=TomcatA loadfactor=1</span><br><span class="line">  ProxySet lbmethod=byrequests</span><br><span class="line">  ProxySet stickysession=ROUTEID</span><br><span class="line">  &lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">  &lt;VirtualHost *:80&gt;</span><br><span class="line">        ServerName www.centos.com</span><br><span class="line">        ProxyVia On</span><br><span class="line">        ProxyRequests Off</span><br><span class="line">        ProxyPreserveHost On</span><br><span class="line">  &lt;Proxy *&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">  &lt;/Proxy&gt;</span><br><span class="line">        ProxyPass / balancer://tcsrvs/</span><br><span class="line">        ProxyPassReverse / balancer://tcsrvs/</span><br><span class="line">  &lt;Location /&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">  &lt;/Location&gt;</span><br><span class="line">  &lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># httpd -t</span></span><br><span class="line">  ~]<span class="comment"># systemctl restart httpd</span></span><br></pre></td></tr></table></figure><p>客户端测试（已经实现基于cookie的会话粘性。可以使用Chrome开发者模式F12查看）<br><img src="/2019/01/19/tomcat负载均衡/13.png" alt=""><br><img src="/2019/01/19/tomcat负载均衡/13.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tomcat负载均衡及会话保持–nginx-httpd&quot;&gt;&lt;a href=&quot;#tomcat负载均衡及会话保持–nginx-httpd&quot; class=&quot;headerlink&quot; title=&quot;tomcat负载均衡及会话保持–nginx | httpd&quot;&gt;&lt;/a&gt;tomcat负载均衡及会话保持–nginx | httpd&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/19/tomcat负载均衡/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://daizhe.net.cn/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://daizhe.net.cn/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat配置进阶--反代</title>
    <link href="https://daizhe.net.cn/2019/01/18/tomcat%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B62/"/>
    <id>https://daizhe.net.cn/2019/01/18/tomcat配置进阶2/</id>
    <published>2019-01-18T13:07:51.842Z</published>
    <updated>2019-01-22T12:06:51.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat配置进阶–反代"><a href="#tomcat配置进阶–反代" class="headerlink" title="tomcat配置进阶–反代"></a>tomcat配置进阶–反代</h1><p><img src="/2019/01/18/tomcat配置进阶2/标题.gif" alt=""><br><a id="more"></a></p><h2 id="tomcat配置进阶–反代-1"><a href="#tomcat配置进阶–反代-1" class="headerlink" title="tomcat配置进阶–反代"></a>tomcat配置进阶–反代</h2><h3 id="nginx反代配置方式"><a href="#nginx反代配置方式" class="headerlink" title="nginx反代配置方式"></a>nginx反代配置方式</h3><h4 id="完全代理"><a href="#完全代理" class="headerlink" title="完全代理"></a><code>完全代理</code></h4><ul><li>客户端请求的所有资源都经由nginx反代给后端tomcat</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#完全向后反代</span></span><br><span class="line">nginx配置文件</span><br><span class="line"></span><br><span class="line">location  / &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动静分离（动静分离的前提是应用程序支持动态页面和静态页面分开也可以达到客户端请求资源的一致性）"><a href="#动静分离（动静分离的前提是应用程序支持动态页面和静态页面分开也可以达到客户端请求资源的一致性）" class="headerlink" title="动静分离（动静分离的前提是应用程序支持动态页面和静态页面分开也可以达到客户端请求资源的一致性）"></a><code>动静分离（动静分离的前提是应用程序支持动态页面和静态页面分开也可以达到客户端请求资源的一致性）</code></h4><p><img src="/2019/01/18/tomcat配置进阶2/分离.png" alt=""></p><ul><li><p>nginx配置中指明客户端请求的闻不见类型为jsp或do结尾才代理给后端的tomcat服务器，除了此类型的文件外都经由nginx处理响应客户端的请求</p></li><li><p>为什么要实现动静分离</p><ul><li>nginx的处理静态资源能力超强<ul><li>主要是nginx处理静态页面的效率远高于tomcat的处理能力，如果tomcat的请求量为1000次，则nginx的请求量为6000次，tomcat每秒的吞吐量为0.6M，nginx的每秒吞吐量为3.6M，可以说，nginx处理静态资源的能力是tomcat处理能力的6倍，优势可见一斑。</li></ul></li><li><p>动态资源和静态资源分开，使服务器结构更清晰。</p></li><li><p>动静分离原理：</p><ul><li>服务端接收来自客户端的请求中，有一部分是静态资源的请求，例如html,css,js和图片资源等等，有一部分是动态数据的请求。因为tomcat处理静态资源的速度比较慢，所以我们可以考虑把所有静态资源独立开来，交给处理静态资源更快的服务器例如nginx处理，而把动态请求交给tomcat处理。<br>如下图所示，我们在机器上同时安装了nginx和tomcat,把所有的静态资源都放置在nginx的webroot目录下面，把动态请求的程序都放在tomcat的webroot目录下面，当客户端访问服务端的时候，如果是静态资源的请求，就直接到nginx的webroot目录下面获取资源，如果是动态资源的请求，nginx利用反向代理的原理，把请求转发给tomcat进行处理，这样就实现了动静分离，提高了服务器处理请求的性能。</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#有选择的进行反代以便实现动静分离</span></span><br><span class="line">nginx 配置文件</span><br><span class="line"></span><br><span class="line">location ~* \.(jsp|<span class="keyword">do</span>)$ &#123;</span><br><span class="line">  proxy_pass www.tomcat.com:8080; <span class="comment">#此处最好使用后端tomcat主机名，如果tomcat在本地，则使用localhost</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">  root /data/myapp/ROOT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现nginx反向代理"><a href="#实现nginx反向代理" class="headerlink" title="实现nginx反向代理"></a>实现nginx反向代理</h2><p><img src="/2019/01/18/tomcat配置进阶2/nginx代理.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里使用了docker容器化技术，将tomcat运行在docker容器中运行，运行的容器默认使用docker0桥与宿主机建立关联关系,并在宿主机上安装nginx接受客户端的请求代理给运行在docker容器中的tomcat</span></span><br><span class="line"></span><br><span class="line">安装docker</span><br><span class="line">  ~]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">  yum.repos.d]<span class="comment"># wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line">  ~]<span class="comment"># yum install docker-ce -y</span></span><br><span class="line">  ~]<span class="comment"># systemctl start docker</span></span><br><span class="line"></span><br><span class="line">获取tomcat镜像</span><br><span class="line">  https://hub.docker.com/_/tomcat?tab=tags</span><br><span class="line"></span><br><span class="line">下载tomcat镜像</span><br><span class="line">  ~]<span class="comment"># docker pull tomcat:8.5-alpine</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后启动容器（指定容器中tomcat的工作目录与宿主机的目录生成docker管理的卷的存储卷关系）</span><br><span class="line">  ~]<span class="comment"># docker run --name tc1 -d -v /usr/local/tomcat/webapps tomcat:8.5-alpine </span></span><br><span class="line">  ~]<span class="comment"># docker container inspect tc1</span></span><br><span class="line">  ~]<span class="comment"># cd /var/lib/docker/volumes/12d5e74a0cc8e916b7545898b41d802f85fed1cd0a5996fe7f74582245a8b2a3/_data</span></span><br><span class="line">  _data]<span class="comment"># ls</span></span><br><span class="line">  docs  examples  host-manager  manager  ROOT</span><br><span class="line"></span><br><span class="line">宿主机上测试访问</span><br><span class="line">  ~]<span class="comment"># curl 172.17.0.2:8080</span></span><br><span class="line"></span><br><span class="line">宿主机上安装nginx并配置实现代理</span><br><span class="line">  ~]<span class="comment"># yum install nginx -y</span></span><br><span class="line">  ~]<span class="comment"># systemctl start nginx</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://172.17.0.1:8080/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">客户端访问宿主机地址(此时nginx已经实现反向代理到tomcat)</span><br><span class="line">   ~]<span class="comment"># curl 172.18.135.1  #访问宿主机地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实现nginx反代tomcat动静分离（仅查看一下动静分离查看效果）</span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">      server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        index index.jsp index.html;</span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://172.17.0.2:8080;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~* \.(jsp|<span class="keyword">do</span>)$ &#123;</span><br><span class="line">        root <span class="string">"映射在宿主机上的存储的卷"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="实现httpd反向代理"><a href="#实现httpd反向代理" class="headerlink" title="实现httpd反向代理"></a>实现httpd反向代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里使用了docker容器化技术，将tomcat运行在docker容器中运行，运行的容器默认使用docker0桥与宿主机建立关联关系,并在宿主机上安装httpd接受客户端的请求代理给运行在docker容器中的tomcat</span></span><br><span class="line"></span><br><span class="line">proxy_ajp_module代理配置示例：</span><br><span class="line"><span class="comment">#&lt;VirtualHost *:80&gt;</span></span><br><span class="line"><span class="comment">#ServerName      tc1.centos.com</span></span><br><span class="line"><span class="comment">#ProxyRequests Off   #关闭正向代理</span></span><br><span class="line"><span class="comment">#ProxyVia        On  # 对每一个响应报文都添加一个via首部（可以查看代理的主机地址）</span></span><br><span class="line"><span class="comment">#ProxyPreserveHost On #用户请求的主机向后端代理时要不要保留代理服务器使用的主机名</span></span><br><span class="line"><span class="comment">#&lt;Proxy *&gt;           #定义代理服务</span></span><br><span class="line"><span class="comment">#Require all granted #允许任何请求使用代理服务</span></span><br><span class="line"><span class="comment">#&lt;/Proxy&gt;</span></span><br><span class="line"><span class="comment">#ProxyPass / ajp://tc1.centos.com:8009/  #将用户请求的根代理到服务器端真正的根</span></span><br><span class="line"><span class="comment">#ProxyPassReverse / ajp://tc1.centos.com:8009/   #如果tomcat服务器返回一个重写的法则，也将此法则返回给客户端</span></span><br><span class="line"><span class="comment">#&lt;Location /&gt;    #客户端请求rul根，设置权限</span></span><br><span class="line"><span class="comment">#Require all granted #接受所有请求</span></span><br><span class="line"><span class="comment">#&lt;/Location&gt;</span></span><br><span class="line"><span class="comment">#&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line">proxy_http_module代理配置示例：</span><br><span class="line"><span class="comment">#&lt;VirtualHost *:80&gt;</span></span><br><span class="line"><span class="comment">#ServerName      tc1.centos.com</span></span><br><span class="line"><span class="comment">#ProxyRequests Off</span></span><br><span class="line"><span class="comment">#ProxyVia        On</span></span><br><span class="line"><span class="comment">#ProxyPreserveHost On</span></span><br><span class="line"><span class="comment">#&lt;Proxy *&gt;</span></span><br><span class="line"><span class="comment">#Require all granted</span></span><br><span class="line"><span class="comment">#&lt;/Proxy&gt;</span></span><br><span class="line"><span class="comment">#ProxyPass / http://tc1.centos.com:8080/</span></span><br><span class="line"><span class="comment">#ProxyPassReverse / http://tc1.centos.com:8080/ </span></span><br><span class="line"><span class="comment">#&lt;Location /&gt;</span></span><br><span class="line"><span class="comment">#Require all granted</span></span><br><span class="line"><span class="comment">#&lt;/Location&gt;</span></span><br><span class="line"><span class="comment">#&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#      &lt;LocationMatch "\.(jsp|do)$&gt;   #基于正则表达式匹配检查</span></span><br><span class="line"><span class="comment">#       ProxyPass / http://tc1.centos.com:8080/    #定义反代的url，客户请求的其他的url则不进行反代</span></span><br><span class="line"><span class="comment">#    &lt;/LocationMatch&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">宿主上安装httpd（完全代理）</span><br><span class="line">  ~]<span class="comment"># yum install httpd -y </span></span><br><span class="line">  ~]<span class="comment"># httpd -M    #确认proxy_module反代模块存在，否则不支持httpd反向代理</span></span><br><span class="line">  proxy_module (shared)</span><br><span class="line">  proxy_ajp_module (shared) <span class="comment">#反代支持ajp协议</span></span><br><span class="line">  proxy_http_module (shared)  <span class="comment">#httpd协议反代</span></span><br><span class="line">  proxy_fcgi_module (shared)  </span><br><span class="line"></span><br><span class="line">配置httpd</span><br><span class="line">  ~]<span class="comment"># vim /etc/httpd/conf.d/tomcat-http.conf</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/httpd/conf.d/tomcat-http.conf</span></span><br><span class="line">    &lt;VirtualHost *:80&gt;</span><br><span class="line">     ServerName   www.centos.com</span><br><span class="line">     ProxyRequests Off</span><br><span class="line">     ProxyVia        On   <span class="comment">#对每一个响应报文都添加一个via首部</span></span><br><span class="line">     ProxyPreserveHost On</span><br><span class="line">     &lt;Proxy *&gt;</span><br><span class="line">     Require all granted</span><br><span class="line">     &lt;/Proxy&gt;</span><br><span class="line">     ProxyPass / http://172.17.0.2:8080/    <span class="comment">#后端tomcat地址</span></span><br><span class="line">     ProxyPassReverse / http://172.17.0.2:8080/   </span><br><span class="line">     &lt;Location /&gt;</span><br><span class="line">      Require all granted</span><br><span class="line">      &lt;/Location&gt;</span><br><span class="line">      &lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># httpd -t</span></span><br><span class="line">  Syntax OK</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># systemctl start httpd</span></span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line">  ~]<span class="comment"># curl 172.18.135.1</span></span><br></pre></td></tr></table></figure><p>配置文件中添加  ProxyVia  On  可以使用浏览器开发者接口查看到<br><img src="/2019/01/18/tomcat配置进阶2/接口.png" alt=""></p><hr><p>http基于ajp协议实现反代<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &lt;VirtualHost *:80&gt;</span><br><span class="line">  ServerName   www.centos.com</span><br><span class="line">  ProxyRequests Off</span><br><span class="line">  ProxyVia        On</span><br><span class="line">  ProxyPreserveHost On</span><br><span class="line"> &lt;Proxy *&gt;</span><br><span class="line">  Require all granted</span><br><span class="line"> &lt;/Proxy&gt;</span><br><span class="line">  ProxyPass / ajp://172.17.0.2:8009/</span><br><span class="line">  ProxyPassReverse / ajp://172.17.0.2:8009/</span><br><span class="line">&lt;Location /&gt;</span><br><span class="line">  Require all granted</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tomcat配置进阶–反代&quot;&gt;&lt;a href=&quot;#tomcat配置进阶–反代&quot; class=&quot;headerlink&quot; title=&quot;tomcat配置进阶–反代&quot;&gt;&lt;/a&gt;tomcat配置进阶–反代&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/18/tomcat配置进阶2/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://daizhe.net.cn/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://daizhe.net.cn/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat配置进阶--热部署</title>
    <link href="https://daizhe.net.cn/2019/01/16/tomcat%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6/"/>
    <id>https://daizhe.net.cn/2019/01/16/tomcat配置进阶/</id>
    <published>2019-01-16T12:49:16.599Z</published>
    <updated>2019-01-25T13:06:21.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat配置进阶–热部署"><a href="#tomcat配置进阶–热部署" class="headerlink" title="tomcat配置进阶–热部署"></a>tomcat配置进阶–热部署</h1><p><img src="/2019/01/16/tomcat配置进阶/标题.gif" alt=""><br><a id="more"></a></p><h2 id="tomcat配置进阶–热部署-1"><a href="#tomcat配置进阶–热部署-1" class="headerlink" title="tomcat配置进阶–热部署"></a>tomcat配置进阶–热部署</h2><p><code>范例：Valve组件（过滤器）</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">一、</span><br><span class="line">  ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">  &lt;Valve className=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> directory=<span class="string">"logs"</span></span><br><span class="line">      prefix=<span class="string">"localhost_access_log."</span> suffix=<span class="string">".txt"</span></span><br><span class="line">      pattern=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#AccessLogValve 定义记录访问日志</span></span><br><span class="line"><span class="comment">#directory  日志记录的路径，默认使用的是相对路径</span></span><br><span class="line"><span class="comment">#prefix 日志文件的前缀，默认情况下，一天滚动一次（日志的前后缀可以按需求定义）</span></span><br><span class="line"><span class="comment">#suffix 日志文件的后缀    （yum安装的生成的日志存放路径： /var/log/tomcat/）</span></span><br><span class="line"><span class="comment">#pattern  日志文件所记录的日志格式</span></span><br><span class="line">  <span class="comment">#%h远程客户端地址</span></span><br><span class="line">  <span class="comment">#%l登陆的用户名</span></span><br><span class="line">  <span class="comment">#%t访问时间</span></span><br><span class="line">  <span class="comment">#%r请求报文的起始行（请求方法，请求的url,协议报文）</span></span><br><span class="line">  <span class="comment">#%s响应码</span></span><br><span class="line">  <span class="comment">#%b响应的版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一般而言Valve日志是host级别的，每一个虚拟主机有一个单独专用的日志</span></span><br><span class="line"></span><br><span class="line">将自己定义的主机也有自己单独的日志</span><br><span class="line">  ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">  &lt;/Host&gt;</span><br><span class="line">  &lt;Host name=<span class="string">"www.centos.com"</span> appBase=<span class="string">"/data/webapps/"</span> unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</span><br><span class="line">  &lt;Valve className=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> directory=<span class="string">"logs"</span></span><br><span class="line">               prefix=<span class="string">"centos.com_log."</span> suffix=<span class="string">".log"</span></span><br><span class="line">               pattern=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/Host&gt;</span><br><span class="line"></span><br><span class="line">查看是否生成单独的虚拟主机的日志文件</span><br><span class="line">  ~]<span class="comment"># systemctl restart tomcat</span></span><br><span class="line">  ~]<span class="comment"># ls /var/log/tomcat/</span></span><br><span class="line">  a_log.2019-01-16.txt   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、</span><br><span class="line">将tomcat的访问日志转化为json格式 </span><br><span class="line">  修改tomcat的server.xml文件</span><br><span class="line">    &lt;Valve className=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> directory=<span class="string">"logs"</span></span><br><span class="line">      prefix=<span class="string">"localhost_access_log"</span> suffix=<span class="string">".log"</span></span><br><span class="line">      pattern=<span class="string">"&#123;&amp;quot;client&amp;quot;:&amp;quot;%h&amp;quot;,  &amp;quot;client user&amp;quot;:&amp;quot;%l&amp;quot;,   &amp;quot;authenticated&amp;quot;:&amp;quot;%u&amp;quot;,   &amp;quot;access time&amp;quot;:&amp;quot;%t&amp;quot;,     &amp;quot;method&amp;quot;:&amp;quot;%r&amp;quot;,   &amp;quot;status&amp;quot;:&amp;quot;%s&amp;quot;,  &amp;quot;send bytes&amp;quot;:&amp;quot;%b&amp;quot;,  &amp;quot;Query?string&amp;quot;:&amp;quot;%q&amp;quot;,  &amp;quot;partner&amp;quot;:&amp;quot;%&#123;Referer&#125;i&amp;quot;,  &amp;quot;Agent version&amp;quot;:&amp;quot;%&#123;User-Agent&#125;i&amp;quot;&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">三、</span><br><span class="line">Valve存在多种类型：（根据客户端原地址做访问控制）</span><br><span class="line">定义访问日志：org.apache.catalina.valves.AccessLogValve</span><br><span class="line">定义访问控制：org.apache.catalina.valves.RemoteAddrValve </span><br><span class="line"></span><br><span class="line">&lt;Valve className=<span class="string">"org.apache.catalina.valves.RemoteAddrValve"</span> deny=<span class="string">"172\.16\.100\.67"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁止172.16.100.67此台主机对tomcat的访问（黑名单）</span></span><br><span class="line"><span class="comment">#可以使用deny与allow做访问控制，可以只用同配符</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="默认界面分析"><a href="#默认界面分析" class="headerlink" title="默认界面分析"></a>默认界面分析</h2><p><img src="/2019/01/16/tomcat配置进阶/界面.png" alt=""></p><p>点击接口进入：但是需要认证进入，点击取消可以查看如何授权用户访问此管理接口<br><img src="/2019/01/16/tomcat配置进阶/认证.png" alt=""></p><p><img src="/2019/01/16/tomcat配置进阶/访问.png" alt=""></p><p>授权用户一下几种权限：</p><ul><li>manager-gui - allows access to the HTML GUI and the status pages（授权的用户可以通过web界面访问）</li><li>manager-script - allows access to the text interface and the status pages（授权的用户可以通过命令行的界面访问）</li><li>manager-jmx - allows access to the JMX proxy and the status pages（可以只用java管理扩展来进行操作，多用于监控）</li><li>manager-status - allows access to the status pages only（仅可以用于状态查看的用户即只读用户）</li></ul><h2 id="一、部署-manager"><a href="#一、部署-manager" class="headerlink" title="一、部署(manager)"></a>一、部署(manager)</h2><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h4><p><code>范例：授权账号可以访问web界面的manager的控制接口</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/tomcat/tomcat-users.xml </span></span><br><span class="line">  &lt;tomcat-users&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"manager-gui"</span>/&gt; --&gt;</span><br><span class="line">  &lt;user username=<span class="string">"tomcat"</span> password=<span class="string">"centos"</span> roles=<span class="string">"manager-gui,manager-script"</span>/&gt;</span><br><span class="line">  &lt;/tomcat-users&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#此文件是tomcat启动时加载到内存中的所以要重新启动tomcat</span></span><br><span class="line">~]<span class="comment"># systemctl restart tomcat</span></span><br></pre></td></tr></table></figure></p><p>已经授权账号，登陆查看</p><p><img src="/2019/01/16/tomcat配置进阶/manager.png" alt=""></p><ul><li>在图形化管理界面stop一个应用程序并非清除内存，代表着类实例化出的对象还都在JVM的内存区段当中相当于暂停状态。</li><li>Undeplay意思为写在完全清除，达到真正的释放资源。</li></ul><p><img src="/2019/01/16/tomcat配置进阶/热部署.png" alt=""></p><hr><p>Deploy:部署方式</p><ul><li>热部署：（manager部署工具）在tomcat不停机的状态下部署，可以实现客户端访问。</li><li>冷部署：先停掉tomcat进程，放上应用程序，启动tomcat加载应用程序。</li><li>自动部署：直接将应用程序放进tomcat,自动实现部署。</li><li>手动部署：将依赖的类库一个个的装载上。</li></ul><p><code>范例:实现Deploy热部署</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">创建目录结构及jsp文件</span><br><span class="line">  ~]<span class="comment"># mkdir /data/mywebs</span></span><br><span class="line">  ~]<span class="comment"># mkdir /data/mywebs</span></span><br><span class="line">  ~]<span class="comment"># cd /data/mywebs/</span></span><br><span class="line">  mywebs]<span class="comment"># mkdir classes lib WEB-INF WETA-INF</span></span><br><span class="line"></span><br><span class="line">mywebs]<span class="comment"># vi index.jsp</span></span><br><span class="line">   &lt;%@ page language=<span class="string">"java"</span> %&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;title&gt;TomcatA&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">       &lt;body&gt;</span><br><span class="line">         &lt;h1&gt;&lt;font color=<span class="string">"red"</span>&gt;TomcatA.daizhe.com&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">            &lt;table align=<span class="string">"centre"</span> border=<span class="string">"1"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(<span class="string">"a.com"</span>,<span class="string">"a.com"</span>); %&gt;</span><br><span class="line">              &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">             &lt;/tr&gt;</span><br><span class="line">             &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><code>热部署(重启tomcat也不会配置有影响，虽然不会出现在配置文件中，但是也是持久有效的)</code></p><p><img src="/2019/01/16/tomcat配置进阶/部署1.png" alt=""><br><img src="/2019/01/16/tomcat配置进阶/部署2.png" alt=""><br><img src="/2019/01/16/tomcat配置进阶/部署3.png" alt=""></p><hr><h4 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h4><p><img src="/2019/01/16/tomcat配置进阶/自动部署.png" alt=""></p><h3 id="诊断（极少用到）"><a href="#诊断（极少用到）" class="headerlink" title="诊断（极少用到）"></a>诊断（极少用到）</h3><p><img src="/2019/01/16/tomcat配置进阶/诊断.png" alt=""></p><h3 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h3><p><img src="/2019/01/16/tomcat配置进阶/诊断.png" alt=""></p><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><p><img src="/2019/01/16/tomcat配置进阶/帮助.png" alt=""></p><h2 id="二、运行状态-（server-status"><a href="#二、运行状态-（server-status" class="headerlink" title="二、运行状态 （server status)"></a>二、运行状态 （server status)</h2><p><img src="/2019/01/16/tomcat配置进阶/status.png" alt=""></p><h2 id="三、管理虚拟主机（Host-manager）"><a href="#三、管理虚拟主机（Host-manager）" class="headerlink" title="三、管理虚拟主机（Host manager）"></a>三、管理虚拟主机（Host manager）</h2><h3 id="授权用户访问此虚拟主机类管理界面"><a href="#授权用户访问此虚拟主机类管理界面" class="headerlink" title="授权用户访问此虚拟主机类管理界面"></a>授权用户访问此虚拟主机类管理界面</h3><p>启用方式和manager相同<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/tomcat/tomcat-users.xml </span></span><br><span class="line">  &lt;tomcat-users&gt;</span><br><span class="line">  &lt;role rolename=<span class="string">"manager-gui"</span>/&gt; </span><br><span class="line">  &lt;role rolename=<span class="string">"admin-gui"</span>/&gt;&lt;user username=<span class="string">"tomcat"</span> password=<span class="string">"centos"</span> roles=<span class="string">"manager-gui,manager-script,admin-gui,admin-script"</span>/&gt;</span><br><span class="line">  &lt;/tomcat-users&gt;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># systemctl restart tomcat</span></span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/16/tomcat配置进阶/虚拟主机.png" alt=""></p><h3 id="创建新的虚拟主机"><a href="#创建新的虚拟主机" class="headerlink" title="创建新的虚拟主机"></a>创建新的虚拟主机</h3><p><img src="/2019/01/16/tomcat配置进阶/虚拟主机1.png" alt=""><br><img src="/2019/01/16/tomcat配置进阶/虚拟主机2.png" alt=""></p><p>注意：因为以上如部署权限过大，所以谨慎做好安全控制<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以对用户访问的http://172.18.135.1:8080/host-manager/或者http://172.18.135.1:8080/manager/html 做安装访问控制</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/tomcat/tomcat-users.xml </span></span><br><span class="line"></span><br><span class="line">&lt;Valve className=<span class="string">"org.apache.catalina.valves.RemoteAddrValve"</span> allow=<span class="string">"172\.16\.100\.67"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#/host-manager/和/manager/html两个目录仅允许本机客户端地址进行访问连接</span></span><br><span class="line"><span class="comment">#或者用不到的话安装tomcat就不要安装这两个组件</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tomcat配置进阶–热部署&quot;&gt;&lt;a href=&quot;#tomcat配置进阶–热部署&quot; class=&quot;headerlink&quot; title=&quot;tomcat配置进阶–热部署&quot;&gt;&lt;/a&gt;tomcat配置进阶–热部署&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/16/tomcat配置进阶/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://daizhe.net.cn/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://daizhe.net.cn/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>配置tomcat</title>
    <link href="https://daizhe.net.cn/2019/01/16/%E9%85%8D%E7%BD%AEtomcat/"/>
    <id>https://daizhe.net.cn/2019/01/16/配置tomcat/</id>
    <published>2019-01-16T08:01:08.881Z</published>
    <updated>2019-01-22T12:05:24.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h1><p><img src="/2019/01/16/配置tomcat/标题.gif" alt=""><br><a id="more"></a></p><h2 id="部署Tomcat-JDK-Tomcat"><a href="#部署Tomcat-JDK-Tomcat" class="headerlink" title="部署Tomcat(JDK+Tomcat)"></a>部署Tomcat(JDK+Tomcat)</h2><ul><li>运行者身份不能为root(user:tomcat)端口默认为8080/tcp</li></ul><p><code>部署方式1：OpenJDK(openjdk 11 + tomcat 7.0)</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rel兼容多个版本JDK并存，可以设置默认的JDK版本</span></span><br><span class="line"><span class="comment">#    ~]# alternatives --install JDK</span></span><br><span class="line"><span class="comment">#    ~]# alternatives --config java</span></span><br><span class="line"></span><br><span class="line">yum安装OpenJDK</span><br><span class="line">    ~]<span class="comment"># yum install java-11-openjdk-devel -y</span></span><br><span class="line">    ~]<span class="comment"># java -version </span></span><br><span class="line">    openjdk version <span class="string">"11.0.1"</span> 2018-10-16 LTS(长期支持版)</span><br><span class="line">    OpenJDK Runtime Environment 18.9 (build 11.0.1+13-LTS)</span><br><span class="line">    OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13-LTS, mixed mode, sharing)</span><br><span class="line">    ~]<span class="comment"># which java</span></span><br><span class="line">    /usr/bin/java</span><br><span class="line">    ~]<span class="comment"># ll /usr/bin/java</span></span><br><span class="line">    /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line">    ~]<span class="comment"># ll /etc/alternatives/java</span></span><br><span class="line">    /etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64/bin/java</span><br><span class="line"></span><br><span class="line">安装tomcat(7.0)</span><br><span class="line">    tomcat-admin-webapps.noarch <span class="comment">#tomcat的web界面的管理的接口</span></span><br><span class="line">    tomcat-docs-webapp.noarch   <span class="comment">#参考文档</span></span><br><span class="line">    ~]<span class="comment"># yum install tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp -y </span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart tomcat</span></span><br><span class="line">    <span class="comment">#运行身份为Java虚拟机运行</span></span><br><span class="line">    ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    LISTEN      0      100             :::8009  (ajp)                                 </span><br><span class="line">    LISTEN      0      100             127.0.0.1:8005  (管理接口)    </span><br><span class="line">    LISTEN      0      100             :::8080 （http）</span><br></pre></td></tr></table></figure></p><p><code>部署方式2：Oracle JDK(oracle jdk 8u191 + tomcat 8.5)</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">oracle jdk 下载地址：https://www.oracle.com/technetwork/java/javase/downloads/index.html</span><br><span class="line">    ~]<span class="comment"># ls</span></span><br><span class="line">    jdk-8u191-linux-x64.rpm </span><br><span class="line">    ~]<span class="comment"># rpm -ivh jdk-8u191-linux-x64.rpm </span></span><br><span class="line">    默认安装路径</span><br><span class="line">    ~]<span class="comment"># ls /usr/java/</span></span><br><span class="line">    default  jdk1.8.0_191-amd64  latest</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ll /usr/java/</span></span><br><span class="line">    default -&gt; /usr/java/latest     <span class="comment">#支持设置默认的版本</span></span><br><span class="line">    jdk1.8.0_191-amd64  <span class="comment">#同样支持多版本共存</span></span><br><span class="line">    latest -&gt; /usr/java/jdk1.8.0_191-amd64  <span class="comment">#支持设置最新的版本</span></span><br><span class="line"></span><br><span class="line">    验证是否安装成功（直接运行java程序）</span><br><span class="line">    查看版本信息</span><br><span class="line">    amd64]<span class="comment"># pwd</span></span><br><span class="line">    /usr/java/jdk1.8.0_191-amd64</span><br><span class="line">    amd64]<span class="comment"># /bin/java -version</span></span><br><span class="line">        java version <span class="string">"1.8.0_191"</span></span><br><span class="line">        Java(TM) SE Runtime Environment (build 1.8.0_191-b12)</span><br><span class="line">        Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)</span><br><span class="line"></span><br><span class="line">    修改PATH变量</span><br><span class="line">    ~]<span class="comment"># vim /etc/profile.d/java.sh</span></span><br><span class="line">    JAVA_HOME=/usr/java/default</span><br><span class="line">    PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME PATH</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># source /etc/profile.d/java.sh </span></span><br><span class="line">    ~]<span class="comment"># printenv </span></span><br><span class="line"></span><br><span class="line">tomcat 8.5安装</span><br><span class="line">下载路径：http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz</span></span><br><span class="line">    ~]<span class="comment"># tar xvf apache-tomcat-8.5.37.tar.gz -C /usr/local/</span></span><br><span class="line">    ~]<span class="comment"># ln -vs /usr/local/apache-tomcat-8.5.37 /usr/local/tomcat （链接形式方便升级）</span></span><br><span class="line"></span><br><span class="line">    tomcat不可使用root用户运行</span><br><span class="line">    ~]<span class="comment"># useradd tomcat</span></span><br><span class="line">    ~]<span class="comment"># chown -R tomcat.tomcat /usr/local/tomcat/</span></span><br><span class="line">    ~]<span class="comment"># chown -R tomcat.tomcat /usr/local/tomcat/*</span></span><br><span class="line">     ~]<span class="comment"># su - tomcat -c "/usr/local/tomcat/bin/catalina.sh start"</span></span><br><span class="line">    Using CATALINA_BASE:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">    Using CATALINA_HOME:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">    Using CATALINA_TMPDIR: /usr/<span class="built_in">local</span>/tomcat/temp</span><br><span class="line">    Using JRE_HOME:        /usr/bin/default</span><br><span class="line">    Using CLASSPATH:       /usr/<span class="built_in">local</span>/tomcat/bin/bootstrap.jar:/u</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    LISTEN      0      100             :::8009  (ajp)                                 </span><br><span class="line">    LISTEN      0      100            127.0.0.1:8005  (管理接口)    </span><br><span class="line">    LISTEN      0      100             :::8080 （http）</span><br></pre></td></tr></table></figure></p><hr><h2 id="server-xml默认配置"><a href="#server-xml默认配置" class="headerlink" title="server.xml默认配置"></a>server.xml默认配置</h2><ul><li><p>Tomcat：</p><ul><li>使用java语言编写：</li></ul></li><li><p>java程序运行环境</p><ul><li>运行在JVM虚拟机上</li><li>jvm虚拟机组成部分<ul><li>类加载器</li><li>程序运行引擎</li></ul></li></ul></li></ul><ul><li><code>tomcat的配置文件构成：</code><ul><li><code>server.xml：</code>主配置文件；</li><li><code>web.xml：</code>每个webapp只有“部署”后才能被访问，它的部署方式通常由web.xml进行定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认部署相关的配置；</li><li><code>context.xml：</code>每个webapp都可以专用的配置文件，它通常由专用的配置文件context.xml来定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认配置；</li><li><code>tomcat-users.xml：</code>用户认证的账号和密码文件；</li><li><code>catalina.policy：</code>当使用-security选项启动tomcat时，用于为tomcat设置安全策略； </li><li><code>catalina.properties：</code>Java属性的定义文件，用于设定类加载器路径，以及一些与JVM调优相关参数；</li><li><code>logging.properties：</code>日志系统相关的配置；    log4j    （目前已经在第二版）    </li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Tomcat的核心组件：server.xml</span><br><span class="line">&lt;Server&gt;</span><br><span class="line">&lt;Service&gt;</span><br><span class="line">&lt;connector/&gt;</span><br><span class="line">&lt;connector/&gt;</span><br><span class="line">...</span><br><span class="line">&lt;Engine&gt;</span><br><span class="line">&lt;Host&gt;</span><br><span class="line">&lt;Context/&gt;</span><br><span class="line">&lt;Context/&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">&lt;Host&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Engine&gt;</span><br><span class="line">&lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><hr><ul><li>每一个组件都由一个Java“类”实现，这些组件大体可分为以下几个类型：<ul><li>顶级组件：Server</li><li>服务类组件：Service</li><li>连接器组件：http, https, ajp（apache jserv protocol）</li><li>容器类：Engine, Host, Context</li><li>被嵌套类：valve, logger, realm, loader, manager, …</li><li>集群类组件：listener, cluster, …</li></ul></li></ul><h2 id="基本web服务器的组成"><a href="#基本web服务器的组成" class="headerlink" title="基本web服务器的组成"></a>基本web服务器的组成</h2><ul><li><p><code>JSP WebAPP的组织结构：（WEB-INF/和WEB-INF/是当前程序专有的且不可被其他程序所使用，也不能让用户通过互联网路径来访问，因为此文件用于参考部署启动应用程序）</code></p><ul><li>/: webapps的根目录</li><li>index.jsp, index.html：主页；</li><li>WEB-INF/：当前webapp的私有资源路径；通常用于存储当前webapp的web.xml和context.xml配置文件；</li><li>WEB-INF/：类似于WEB-INF/；</li><li>classes/：类文件，当前webapp所提供的类 .java格式；</li><li>lib/：类文件，当前webapp所提供的类，被打包为jar格式；</li></ul></li><li><p>webapp归档格式：</p><ul><li>.war：webapp（web_server的应用程序归档文件）</li><li>.jar：EJB的类打包文件；</li><li>.rar：资源适配器类打包文件；</li><li>.ear：企业级webapp；</li></ul></li></ul><h2 id="部署-deploy-webapp的相关操作："><a href="#部署-deploy-webapp的相关操作：" class="headerlink" title="部署(deploy)webapp的相关操作："></a><code>部署(deploy)webapp的相关操作：</code></h2><ul><li>deploy：将webapp的源文件放置于目标目录(网页程序文件存放目录)，配置tomcat服务器能够基于web.xml和context.xml文件中定义的路径来访问此webapp；将其特有的类和依赖的类通过class loader装载至JVM；<ul><li>部署有两种方式：<ul><li>自动部署：auto deploy<ul><li>手动部署:</li><li>冷部署：把webapp复制到指定的位置，而后才启动tomcat；<pre><code>- 热部署：在不停止tomcat的前提下进行部署；    - 部署工具：manager、ant脚本、tcd(tomcat client deployer)等；                    </code></pre></li></ul></li></ul></li></ul></li><li>undeploy：反部署，停止webapp，并从tomcat实例上卸载webapp；</li><li>start：启动处于停止状态的webapp；</li><li>stop：停止webapp，不再向用户提供服务；其类依然在jvm上；</li><li>redeploy：重新部署；        </li></ul><p><code>范例：手动提供一测试类应用，并冷部署</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># mkdir testapp/</span></span><br><span class="line">~]<span class="comment"># cd testapp/</span></span><br><span class="line"></span><br><span class="line">创建程序运行的相关的文件格式</span><br><span class="line">  testapp]<span class="comment"># mkdir classes lib WEB-INF WETA-INF</span></span><br><span class="line">  testapp]<span class="comment"># ls</span></span><br><span class="line">  classes  lib  WEB-INF  WETA-INF</span><br><span class="line"></span><br><span class="line">创建网页文件</span><br><span class="line">  testapp]<span class="comment"># vi index.jsp</span></span><br><span class="line">  &lt;%@ page language=<span class="string">"java"</span> %&gt;</span><br><span class="line">   &lt;%@ page import=<span class="string">"java.util.*"</span> %&gt;</span><br><span class="line">     &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">          &lt;title&gt;Test Page&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">       &lt;% out.println(<span class="string">"hello world"</span>);</span><br><span class="line">         %&gt;</span><br><span class="line">         &lt;/body&gt;</span><br><span class="line">         &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cp testapp testapp-v0.1</span></span><br><span class="line"></span><br><span class="line">将此文件复制到网页文件根目录（/usr/share/tomcat/webapps）</span><br><span class="line">  ~]<span class="comment"># cd /usr/share/tomcat/webapps</span></span><br><span class="line">  webapps]<span class="comment"># ls</span></span><br><span class="line">  docs  examples  host-manager  manager  ROOT  sample</span><br><span class="line">  <span class="comment">#ROOT 默认主站文件目录</span></span><br><span class="line"></span><br><span class="line">  webapps]<span class="comment"># cp -r /root/testapp /usr/share/tomcat/webapps/</span></span><br><span class="line">  webapps]<span class="comment"># ls</span></span><br><span class="line">  docs  examples  host-manager  manager  ROOT  sample  testapp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">访问测试</span><br><span class="line">   ~]<span class="comment"># curl 172.20.101.228:8080/testapp/</span></span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/16/配置tomcat/测试1.png" alt=""></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">查看tomcat的工作目录</span><br><span class="line">   ~]<span class="comment"># cd /usr/share/tomcat/work</span></span><br><span class="line">   work]<span class="comment"># tree</span></span><br><span class="line">   .</span><br><span class="line">   └── Catalina</span><br><span class="line">       └── localhost  <span class="comment">#当前虚拟主机的名称</span></span><br><span class="line">           ├── _</span><br><span class="line">           │   └── org</span><br><span class="line">           │       └── apache</span><br><span class="line">           │           └── jsp</span><br><span class="line">           │               ├── index_jsp.class</span><br><span class="line">           │               └── index_jsp.java</span><br><span class="line">           ├── docs</span><br><span class="line">           ├── examples</span><br><span class="line">           ├── host-manager</span><br><span class="line">           ├── manager</span><br><span class="line">           ├── sample</span><br><span class="line">           └── testapp</span><br><span class="line">              └── org</span><br><span class="line">                  └── apache</span><br><span class="line">                      └── jsp</span><br><span class="line">                           ├── index_jsp.class</span><br><span class="line">                           └── index_jsp.java</span><br><span class="line"></span><br><span class="line"><span class="comment">#将自己定义放置在/usr/share/tomcat/webapps目录下testapp/index.jsp文件转换为java代码，再次编译成.class类文件</span></span><br><span class="line"><span class="comment">#将来在生产中部署完应用程序，应该对每个url先自己访问一次，编译完成，然后再上线</span></span><br></pre></td></tr></table></figure><h2 id="tomcat的常用组件配置："><a href="#tomcat的常用组件配置：" class="headerlink" title="tomcat的常用组件配置："></a>tomcat的常用组件配置：</h2><ul><li><p>Server：代表tomcat instance，即表现出的一个java进程；监听在8005端口，只接收“SHUTDOWN”。各server监听的端口不能相同，因此，在同一物理主机启动多个实例时，需要修改其监听端口为不同的端口； </p></li><li><p>Service：用于实现将一个或多个connector组件关联至一个engine组件；</p></li><li><p>Connector组件：端点</p><ul><li>负责接收请求，常见的有三类http/https/ajp；</li><li>进入tomcat的请求可分为两类：<ul><li>(1) standalone : 请求来自于客户端浏览器；</li><li>(2) 由其它的web server反代：来自前端的反代服务器；<ul><li>nginx –&gt; http connector –&gt; tomcat </li><li>httpd(proxy_http_module) –&gt; http connector –&gt; tomcat</li><li>httpd(proxy_ajp_module) –&gt; ajp connector –&gt; tomcat </li><li>httpd(mod_jk) –&gt; ajp connector –&gt; tomcat </li></ul></li></ul></li><li><p>属性：</p><ul><li>port=”8080” </li><li>protocol=”HTTP/1.1”</li><li><p>connectionTimeout=”20000”</p></li><li><p>address：监听的IP地址；默认为本机所有可用地址；</p></li><li>maxThreads：最大并发连接数，默认为200；</li><li>enableLookups：是否启用DNS查询功能；</li><li>acceptCount：等待队列的最大长度；</li><li>secure：</li><li>sslProtocol：</li></ul></li></ul></li></ul><p><code>范例：Server组件（顶级组件）</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">  &lt;Server port=<span class="string">"8005"</span> shutdown=<span class="string">"SHUTDOWN"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Server中两个属性需要定义</span></span><br><span class="line"><span class="comment">#  - port="8080" #端口</span></span><br><span class="line"><span class="comment">#  - shutdown="SHUTDOWN"</span></span><br><span class="line"><span class="comment">#    - 内建的管理接口，只要给SHUTDOWN字串则相当与停止整个tomcat进程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install telnet -y</span></span><br><span class="line">  ~]<span class="comment"># telnet 127.0.0.1 8005</span></span><br><span class="line">  Trying 127.0.0.1...</span><br><span class="line">  Connected to 127.0.0.1.</span><br><span class="line">  Escape character is <span class="string">'^]'</span>.</span><br><span class="line">  SHUTDOWN</span><br><span class="line">  Connection closed by foreign host.</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line"><span class="comment">#此时tomcat已经停止，所以tomcat的8005端口默认监听在本机的127.0.0.1</span></span><br><span class="line"></span><br><span class="line">所以为了安全起见，建议关闭</span><br><span class="line">方法1：修改密码</span><br><span class="line">&lt;Server port=<span class="string">"8005"</span> shutdown=<span class="string">"可以将命令修改的复杂"</span>&gt;</span><br><span class="line"></span><br><span class="line">方法2：关闭监听端口</span><br><span class="line">&lt;Server port=<span class="string">"-1"</span> shutdown=<span class="string">"SHUTDOWN"</span>&gt;</span><br></pre></td></tr></table></figure></p><p><code>范例：Service组件（类连接器）</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">  &lt;Service name=<span class="string">"Catalina"</span>&gt;</span><br><span class="line"></span><br><span class="line">........................http协议............................</span><br><span class="line"><span class="comment">#Service中一个组件</span></span><br><span class="line"><span class="comment">#将connector与Engine建立关联关系</span></span><br><span class="line"></span><br><span class="line">  &lt;Connector port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span>  <span class="comment">#端口、协议版本（1.1主流协议）</span></span><br><span class="line">    connectionTimeout=<span class="string">"20000"</span>                 <span class="comment">#超时时长20秒（单位毫秒）</span></span><br><span class="line">    redirectPort=<span class="string">"8443"</span> /&gt;          </span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;!--</span></span><br><span class="line"><span class="comment">#&lt;Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol"</span></span><br><span class="line"><span class="comment">#maxThreads="150" SSLEnabled="true" scheme="https" secure="true"</span></span><br><span class="line"><span class="comment">#clientAuth="false" sslProtocol="TLS" /&gt;</span></span><br><span class="line"><span class="comment">#--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果启用8443端口表示TLS加密传输，注释行表示如果用户访问的端口为http则重写到https（但是tomcat一般不直接作为web_server运行，tomcat运行jsp本身就很消耗cpu，一般也不使用ssl）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">........................ajp协议............................</span><br><span class="line">  &lt;Connector port=<span class="string">"8009"</span> protocol=<span class="string">"AJP/1.3"</span> redirectPort=<span class="string">"8443"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p><code>范例：Engine组件（容器组件）</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">  &lt;Engine name=<span class="string">"Catalina"</span> defaultHost=<span class="string">"localhost"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#name="Catalina"   Engine名称，多个不可同名</span></span><br><span class="line"><span class="comment">#defaultHost       默认的虚拟主机</span></span><br><span class="line"><span class="comment">#jvmRoute          创建tomcat集群时用到</span></span><br></pre></td></tr></table></figure></p><p><code>范例：Host（Host虚拟主机组件）</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">    &lt;Host name=<span class="string">"localhost"</span>  appBase=<span class="string">"webapps"</span></span><br><span class="line">      unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#appBase 定义网页文件根目录(可以使用相对路径即相对于tomcat的根，最好使用绝对路径)</span></span><br><span class="line"><span class="comment">#unpackWARs 如果用户提供的就是.war格式的文件要不要自动展开</span></span><br><span class="line"><span class="comment">#autoDeploy 是否支持自动部署(必要时可以关闭，自己手动部署)</span></span><br><span class="line"></span><br><span class="line">自己定义新的Host</span><br><span class="line">  ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">  141行</span><br><span class="line">  &lt;/Host&gt;        </span><br><span class="line">  &lt;Host name=<span class="string">"www.centos.com"</span> appBase=<span class="string">"/data/webapps/"</span> unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</span><br><span class="line">  &lt;/Host&gt;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># mkdir -pv /data/webapps</span></span><br><span class="line">  ~]<span class="comment"># cp -r /root/testapp /data/webspps/</span></span><br><span class="line">  webapps]<span class="comment"># mv testapp ROOT     </span></span><br><span class="line">  webapps]<span class="comment"># ls</span></span><br><span class="line">  ROOT        <span class="comment">#ROOT不可使用链接</span></span><br><span class="line"></span><br><span class="line">重启验证</span><br><span class="line">  ~]<span class="comment"># systemctl restart tomcat</span></span><br><span class="line">  ~]<span class="comment"># curl www.centos.com:8080</span></span><br></pre></td></tr></table></figure></p><p><code>范例：Context组件</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line">  &lt;Context path=<span class="string">"/PATH"</span> docBase=<span class="string">"/PATH/TO/SOMEDIR"</span> reloadable=<span class="string">""</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Context       path 指明url</span></span><br><span class="line"><span class="comment">#docBase       本地文件系统路径</span></span><br><span class="line"><span class="comment">#reloadable    支不支持重新载入</span></span><br><span class="line"></span><br><span class="line">  webapps]<span class="comment"># pwd</span></span><br><span class="line">  /data/webapps</span><br><span class="line">  webapps]<span class="comment"># ls</span></span><br><span class="line">  ROOT</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># mkdir /myweb</span></span><br><span class="line">  ~]<span class="comment"># cd /myweb/</span></span><br><span class="line"></span><br><span class="line">  myweb]<span class="comment"># vim testapp-v0.1</span></span><br><span class="line">   &lt;%@ page language=<span class="string">"java"</span> %&gt;</span><br><span class="line">     &lt;%@ page import=<span class="string">"java.util.*"</span> %&gt;</span><br><span class="line">      &lt;html&gt;</span><br><span class="line">          &lt;head&gt;</span><br><span class="line">            &lt;title&gt;Test Page&lt;/title&gt;</span><br><span class="line">         &lt;/head&gt;</span><br><span class="line">       &lt;body&gt;</span><br><span class="line">        &lt;% out.println(<span class="string">"hello aaaaaaaaaa"</span>);</span><br><span class="line">          %&gt;</span><br><span class="line">           &lt;/body&gt;</span><br><span class="line">           &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">  myweb]<span class="comment"># ls</span></span><br><span class="line">  testapp-v0.1</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ln -sv /myweb/testapp-v0.1 /myweb/testapp</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/tomcat/server.xml </span></span><br><span class="line"></span><br><span class="line">     &lt;/Host&gt;</span><br><span class="line">    &lt;Host name=<span class="string">"www.centos.com"</span> appBase=<span class="string">"/data/webapps/"</span> unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</span><br><span class="line">          &lt;Context path=<span class="string">"/mymyapp"</span> docBase=<span class="string">"/myweb/testapp"</span> reloadable=<span class="string">""</span>/&gt; </span><br><span class="line">    &lt;/Host&gt;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart tomcat</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">测试访问：</span><br><span class="line">  ~]<span class="comment"># curl www.centos.com:8080/mymyapp</span></span><br><span class="line">  hello aaaaaaaaaa</span><br><span class="line"></span><br><span class="line"><span class="comment">#Context 类似于http的路径别名 ：alias</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tomcat配置&quot;&gt;&lt;a href=&quot;#tomcat配置&quot; class=&quot;headerlink&quot; title=&quot;tomcat配置&quot;&gt;&lt;/a&gt;tomcat配置&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/16/配置tomcat/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://daizhe.net.cn/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://daizhe.net.cn/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat基础与组件</title>
    <link href="https://daizhe.net.cn/2019/01/14/tomcat%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>https://daizhe.net.cn/2019/01/14/tomcat基础与部署/</id>
    <published>2019-01-14T12:47:14.983Z</published>
    <updated>2019-01-25T13:06:19.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat基础与组件"><a href="#tomcat基础与组件" class="headerlink" title="tomcat基础与组件"></a>tomcat基础与组件</h1><p><img src="/2019/01/14/tomcat基础与部署/标题.gif" alt=""><br><a id="more"></a></p><h2 id="关于Tomcat"><a href="#关于Tomcat" class="headerlink" title="关于Tomcat"></a>关于Tomcat</h2><ul><li><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p></li><li><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat 部分是Apache 服务器的扩展，但它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p></li></ul><ul><li>官网地址：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></li></ul><h2 id="部署Tomcat-JDK-Tomcat"><a href="#部署Tomcat-JDK-Tomcat" class="headerlink" title="部署Tomcat(JDK+Tomcat)"></a>部署Tomcat(JDK+Tomcat)</h2><ul><li>Tomcat也是java编程语言编写的，是运行在JVM中的一个进程。它定义为【中间件】，顾名思义，是一个在Java项目与JVM之间的中间容器。</li><li><p>java程序写的网站用Tomcat+JDK来运行，Tomcat是一个中间件，真正起作用的，解析Java脚本的是JDK。JDK（Java development kit）是整个Java的核心，它包含了Java运行环境和一堆Java相关的工具以及Java基础库。<br>最主流的JDK是由sun公司发布的JDK，除此之外，IBM公司也有发布JDK，centos上也可以使用yum安装openjdk<br>Java写的网页后缀名是.jsp。</p></li><li><p>运行者身份不能为root(user:tomcat)端口默认为8080/tcp</p></li></ul><p><code>部署方式1：OpenJDK(openjdk 11 + tomcat 7.0)</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rel兼容多个版本JDK并存，可以设置默认的JDK版本</span></span><br><span class="line"><span class="comment">#    ~]# alternatives --install JDK</span></span><br><span class="line"><span class="comment">#    ~]# alternatives --config java     #设置默认的jdk版本</span></span><br><span class="line"></span><br><span class="line">yum安装OpenJDK</span><br><span class="line">    ~]<span class="comment"># yum install java-11-openjdk-devel -y</span></span><br><span class="line">    ~]<span class="comment"># java -version </span></span><br><span class="line">    openjdk version <span class="string">"11.0.1"</span> 2018-10-16 LTS(长期支持版)</span><br><span class="line">    OpenJDK Runtime Environment 18.9 (build 11.0.1+13-LTS)</span><br><span class="line">    OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13-LTS, mixed mode, sharing)</span><br><span class="line">    ~]<span class="comment"># which java</span></span><br><span class="line">    /usr/bin/java</span><br><span class="line">    ~]<span class="comment"># ll /usr/bin/java</span></span><br><span class="line">    /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line">    ~]<span class="comment"># ll /etc/alternatives/java</span></span><br><span class="line">    /etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64/bin/java</span><br><span class="line"></span><br><span class="line">安装tomcat(7.0)</span><br><span class="line">    tomcat-admin-webapps.noarch <span class="comment">#tomcat的web界面的管理的接口</span></span><br><span class="line">    tomcat-docs-webapp.noarch   <span class="comment">#参考文档</span></span><br><span class="line">    ~]<span class="comment"># yum install tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp -y </span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart tomcat</span></span><br><span class="line">    <span class="comment">#运行身份为Java虚拟机运行</span></span><br><span class="line">    ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    LISTEN      0      100             :::8009  (ajp)                                 </span><br><span class="line">    LISTEN      0      100             127.0.0.1:8005  (管理接口)    </span><br><span class="line">    LISTEN      0      100             :::8080 （http）</span><br></pre></td></tr></table></figure></p><p><code>部署方式2：Oracle JDK(oracle jdk 8u191 + tomcat 8.5)</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">oracle jdk 下载地址：https://www.oracle.com/technetwork/java/javase/downloads/index.html</span><br><span class="line">    ~]<span class="comment"># ls</span></span><br><span class="line">    jdk-8u191-linux-x64.rpm </span><br><span class="line">    ~]<span class="comment"># rpm -ivh jdk-8u191-linux-x64.rpm </span></span><br><span class="line">    默认安装路径</span><br><span class="line">    ~]<span class="comment"># ls /usr/java/</span></span><br><span class="line">    default  jdk1.8.0_191-amd64  latest</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ll /usr/java/</span></span><br><span class="line">    default -&gt; /usr/java/latest     <span class="comment">#支持设置默认的版本</span></span><br><span class="line">    jdk1.8.0_191-amd64  <span class="comment">#同样支持多版本共存</span></span><br><span class="line">    latest -&gt; /usr/java/jdk1.8.0_191-amd64  <span class="comment">#支持设置最新的版本</span></span><br><span class="line"></span><br><span class="line">    验证是否安装成功（直接运行java程序）</span><br><span class="line">    查看版本信息</span><br><span class="line">    amd64]<span class="comment"># pwd</span></span><br><span class="line">    /usr/java/jdk1.8.0_191-amd64</span><br><span class="line">    amd64]<span class="comment"># /bin/java -version</span></span><br><span class="line">        java version <span class="string">"1.8.0_191"</span></span><br><span class="line">        Java(TM) SE Runtime Environment (build 1.8.0_191-b12)</span><br><span class="line">        Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)</span><br><span class="line"></span><br><span class="line">    修改PATH变量</span><br><span class="line">    ~]<span class="comment"># vim /etc/profile.d/java.sh</span></span><br><span class="line">    JAVA_HOME=/usr/java/default</span><br><span class="line">    PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME PATH</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># source /etc/profile.d/java.sh </span></span><br><span class="line">    ~]<span class="comment"># printenv </span></span><br><span class="line"></span><br><span class="line">tomcat 8.5安装</span><br><span class="line">下载路径：http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz</span></span><br><span class="line">    ~]<span class="comment"># tar xvf apache-tomcat-8.5.37.tar.gz -C /usr/local/</span></span><br><span class="line">    ~]<span class="comment"># ln -vs /usr/local/apache-tomcat-8.5.37 /usr/local/tomcat （链接形式方便升级）</span></span><br><span class="line"></span><br><span class="line">    tomcat不可使用root用户运行</span><br><span class="line">    ~]<span class="comment"># useradd tomcat</span></span><br><span class="line">    ~]<span class="comment"># chown -R tomcat.tomcat /usr/local/tomcat/</span></span><br><span class="line">    ~]<span class="comment"># chown -R tomcat.tomcat /usr/local/tomcat/*</span></span><br><span class="line">     ~]<span class="comment"># su - tomcat -c "/usr/local/tomcat/bin/catalina.sh start"</span></span><br><span class="line">    Using CATALINA_BASE:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">    Using CATALINA_HOME:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">    Using CATALINA_TMPDIR: /usr/<span class="built_in">local</span>/tomcat/temp</span><br><span class="line">    Using JRE_HOME:        /usr/bin/default</span><br><span class="line">    Using CLASSPATH:       /usr/<span class="built_in">local</span>/tomcat/bin/bootstrap.jar:/u</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    LISTEN      0      100             :::8009  (ajp)                                 </span><br><span class="line">    LISTEN      0      100            127.0.0.1:8005  (管理接口)    </span><br><span class="line">    LISTEN      0      100             :::8080 （http）</span><br></pre></td></tr></table></figure></p><p>欢迎页：</p><ul><li>Manager App(应用程序管理器、web界面部署其他应用程序) 与 Host Manager 部署的管理程序</li></ul><p><img src="/2019/01/14/tomcat基础与部署/tomcat.png" alt=""></p><h2 id="Tomcat基本框架及相关配置"><a href="#Tomcat基本框架及相关配置" class="headerlink" title="Tomcat基本框架及相关配置"></a>Tomcat基本框架及相关配置</h2><p><img src="/2019/01/14/tomcat基础与部署/基础架构.png" alt=""></p><ul><li>如上图，Tomcat可以按功能划分许多不同的组件，这些组件都可以通过/conf/server.xml(部署描述符文件)文件中可定义和配置，包括Server, Service, Connector, Engine, Cluster, Host, Alias, Context, Realm, Valve, Manager, Listener, Resources, ResourceEnvRef, WatchedResource, Store, Transaction, Channel, Membership, Transport, Member, ClusterListener等，一般可分为以下四类：<ul><li>1、<code>Server顶级组件：</code>位于配置层次的顶级，并且彼此间有着严格的对应关系，有Server组件、Service组件；</li><li>2、<code>Connector连接器：</code>连接客户端（可以是浏览器或Web服务器）请求至Servlet容器，只有Connector组件（Connector才是一个具体特定、真正的程序，可以被单独部署和管理、启动停止暂停等。）</li><li>3、<code>Engine容器：</code>表示其功能是处理传入请求的组件，并创建相应的响应。如Engine处理对一个Service的所有请求，Host处理对特定虚拟主机的所有请求，并且Context处理对特定web应用的所有请求（容器类容器组件，可以容纳JSP应用程序的顶级组件）；</li><li>4、<code>Context被嵌套的组件：</code>位于一个容器当中，但不能包含其它组件；一些组件可以嵌套在任何Container中，而另一些只能嵌套在Context中。</li></ul></li></ul><hr><h2 id="server-xml默认配置"><a href="#server-xml默认配置" class="headerlink" title="server.xml默认配置"></a>server.xml默认配置</h2><ul><li><p>Tomcat：</p><ul><li>使用java语言编写：</li></ul></li><li><p><code>tomcat的配置文件构成：</code></p><ul><li><code>server.xml：</code>主配置文件；</li><li><code>web.xml：</code>每个webapp只有“部署”后才能被访问，它的部署方式通常由web.xml进行定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认部署相关的配置；</li><li><code>context.xml：</code>每个webapp都可以专用的配置文件，它通常由专用的配置文件context.xml来定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认配置；</li><li><code>tomcat-users.xml：</code>用户认证的账号和密码文件；</li><li><code>catalina.policy：</code>当使用-security选项启动tomcat时，用于为tomcat设置安全策略； </li><li><code>catalina.properties：</code>Java属性的定义文件，用于设定类加载器路径，以及一些与JVM调优相关参数；</li><li><code>logging.properties：</code>日志系统相关的配置；    log4j        </li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Tomcat的核心组件：server.xml</span><br><span class="line">&lt;Server&gt;</span><br><span class="line">&lt;Service&gt;</span><br><span class="line">&lt;connector/&gt;</span><br><span class="line">&lt;connector/&gt;</span><br><span class="line">...</span><br><span class="line">&lt;Engine&gt;</span><br><span class="line">&lt;Host&gt;</span><br><span class="line">&lt;Context/&gt;</span><br><span class="line">&lt;Context/&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">&lt;Host&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Engine&gt;</span><br><span class="line">&lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><hr><ul><li>更多Server配置信息请参考：《Apache Tomcat 8 Configuration Reference》 The Server Component<h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2></li><li><code>1、Server组件</code><ul><li>erver（服务器）表示Tomcat的一个实例，因此，它必须是/conf / server.xml配置文件中的单个最外层元素，它的属性表示servlet容器的整体特性。通常一个JVM只能包含一个Tomcat实例。</li><li>默认配置表示监听在8005端口以接收shutdown命令，默认仅允许通过本机访问。</li></ul></li></ul><hr><ul><li><code>2、Service组件</code><ul><li>Service（服务）主要用于关联一个Engine和与此Engine相关的Connector，每个Connector通过一个特定的端口和协议接收请求，并将其转发至关联的Engine进行处理。</li><li>因此，Service可以包含一个Engine、以有一个或多个Connector；而一个Server可以包含多个Service组件，但通常情下只为一个Server指派一个Service。通常需要给Service命名，可以方便管理员在日志文件中识别不同Service产生的日志。</li><li>如默认配置中server只包含一个名为”Catalina”的service，而service里包含两个Connector，其中一个监听8080端口接收HTTP请求，另一个监听8009端口接收AJP协议的请求。</li></ul></li></ul><hr><ul><li><p><code>3、Connector组件</code></p><ul><li><p>如上面所述，Connector（连接器）通过一个特定的端口接收特定协议的客户端请求，并将其转发至关联的Engine进行处理。一个Engine可以配置多个连接器，但这些连接器必须使用不同的端口。</p></li><li><p>定义连接器可以使用多种属性，有些属性也只适用于某特定的连接器类型。一般说来，连接器类型可以分为两种：</p><ul><li><p>（1）、HTTP连接器</p><ul><li>HTTP连接器元素表示支持HTTP / 1.1协议的连接器组件，它能使Tomcat能够作为独立的Web服务器。此组件的特定实例侦听服务器上特定TCP端口号上的连接，每个转发到相关联的Engine以执行请求处理并创建响应。</li><li>默认配置文件，定义了一个连接器为protocol=”HTTP/1.1” 表示的是使用自动切换机制来选择基于Java NIOConnector或基于APR /Native Connector（需要设置），也可以手动指定</li></ul></li><li><p>2）、AJP 1.3连接器</p><ul><li>AJP连接器元素表示通过AJP(Apache JServ Protocol)协议与Web连接器通信的连接器组件。</li><li>AJP协议是基于二进制的格式在Web服务器和Tomcat之间传输数据，这比HTTPP获得更好的效率，但比较复杂不通用。</li><li>通常用于将Tomcat集成到现有Apache服务器中，并且希望Apache处理Web应用程序中包含的静态内容或SSL连接处理的情况，即Apache服务器作为代理服务器。Apache与Tomcat结合可以由mod_jk或mod_proxy模块来实现，但它们的使用范围不同：mod_jk支持apache/1.3,apache/2.0，mod_proxy支持apache/2.2+。</li><li>默认配置文件中定义了一个监听8009端口的AJP连接器，其实官方文档说明这种连接器不久后不再支持，一般用得不多，就不再多介绍了。</li><li>定义连接器时可以配置的属性非常多，但通常定义HTTP连接器时必须定义的属性只有”port”，定义AJP连接器时必须定义的属性只有”protocol”，因为默认的协议为HTTP。以下为常用属性的说明（更多请参考前面给出的文档）：   <ul><li>1、address：指定连接器监听的地址，默认为所有地址，即0.0.0.0；</li><li>2、maxThreads：支持的最大并发连接数，默认为200；</li><li>3、port：监听的端口，默认为0；</li><li>4、protocol：连接器使用的协议，默认为HTTP/1.1，定义AJP协议时通常为AJP/1.3；</li><li>5、redirectPort：如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口；</li><li>6、connectionTimeout：等待客户端发送请求的超时时间，单位为毫秒，默认为60000，即1分钟；</li><li>7、enableLookups：是否通过request.getRemoteHost()进行DNS查询以获取客户端的主机名；默认为true；</li><li>8、acceptCount：设置等待队列的最大长度；通常在tomcat所有处理线程均处于繁忙状态时，新发来的请求将被放置于等待队列中；</li></ul></li></ul></li></ul></li></ul></li></ul><hr><ul><li><code>4、Engine组件</code><ul><li>Engine（引擎）表示与特定Service相关联的整个请求处理机制，即Servlet容器引擎。它接收和处理来自一个或多个连接器的所有请求，并检查每一个请求的HTTP首部信息以辨别此请求应该发往哪个Host或Context，并将完成的响应返回到连接器，以便最终传输回客户端。</li><li>一个Engine元素必须嵌套在Service元素内，它可以包含多个host组件，还可以包含Realm、Listener和Valve等子容器。<ul><li>常用的属性定义：<ul><li>1、defaultHost：Tomcat支持基于FQDN的虚拟主机，这些虚拟主机可以通过在Engine容器中定义多个不同的Host组件来实现；但如果此引擎的连接器收到一个发往非非明确定义虚拟主机的请求时则需要将此请求发往一个默认的虚拟主机进行处理，因此，在Engine中定义的多个虚拟主机的主机名称中至少要有一个跟defaultHost定义的主机名称同名。</li><li>2、name：Engine组件的名称，用于日志和错误信息记录时区别不同的引擎。<ul><li>如默认配置中定义了一个名为”Catalina”的Engine，而Engine里包含一个Hots，并被配置为默认的虚拟主机。</li></ul></li></ul></li></ul></li></ul></li></ul><hr><ul><li><code>5、Host组件</code><ul><li>Host（虚拟主机）类似于Apache中的虚拟主机，但在Tomcat中只支持基于FQDN的”虚拟主机”。Host位于Engine容器中用于接收请求并进行相应处理，它是服务器（例如”<a href="http://www.mycompany.com&quot;）的网络名称与运行Tomcat的特定服务器的关联。" target="_blank" rel="noopener">www.mycompany.com&quot;）的网络名称与运行Tomcat的特定服务器的关联。</a></li><li>客户端通常使用主机名来标识他们希望连接的服务器，但要使客户端能够使用其网络名称连接到Tomcat服务器，此名称必须在管理所属的Internet域的域名服务（DNS）服务器中注册。此主机名也包含在HTTP请求标头中，Tomcat从HTTP头中提取主机名，并查找具有匹配名称的主机；如果未找到匹配项，请求将路由到默认主机。</li><li>一个Engine至少要包含一个Host组件，而在Host元素内可以嵌入与此虚拟主机关联的Web应用程序的Context等元素。<ul><li>常用属性说明：<ul><li>1、name：此Host的FQDN虚拟主机名称；</li><li>2、appBase：此Host的webapps目录，即存放非归档的web应用程序的目录或归档后的WAR文件的目录路径；可以使用基于$CATALINA_HOME的相对路径；</li><li>3、autoDeploy：在Tomcat处于运行状态时放置于appBase目录中的应用程序文件是否自动进行deploy；默认为true；</li><li>4、unpackWars：在启用此webapps时是否对WAR格式的归档文件先进行展开；默认为true。<ul><li>如默认配置中定义了一个主机名为”localhost”的Host，而webapps目录为$ CATALINA_BASE相对的”webapps”，即前面说到的默认目录，也可用绝对路径来配置其他目录。</li></ul></li></ul></li></ul></li></ul></li></ul><hr><ul><li><code>6、Context组件</code><ul><li>Context（上下文）表示在特定虚拟主机中运行的Web应用程序，一个Context对应一个Web应用程序，而里面的Wrapper可以理解为一个个Servlet程序。</li><li>Context需要根据其定义的上下文路径（path）匹配请求URI的最长前缀（除主机名外）来选择。一旦选择，可以由docBase来找到该上下文将对应的web应用程序部署目录，由目录中web.xml定义的servlet映射选择一个合适的servlet来处理传入的请求。</li><li>一个Host可以有多个Context，通常不建议定义在server.xml文件中，而是每一个context定义使用一个单独的XML文件进行，<code>其文件的目录为$CATALINA_HOME/conf/&lt;engine name&gt;/&lt;host name&gt;</code></li><li>可以看到server.xml中默认没有定义Context，但存在/conf/context.xml，在前面说Tomcat配置文件时曾介绍过，context.xml为部署与此Tomcat实例上所有的web应用程序提供的默认配置文件，</li><li>通过它可以找到默认的和各web应用程序提供部署描述符文件web.xml，/conf/web.xml定义了Tomcat提供的默认Servlet处理程序，主要用来处理静态资源请求；而各webapp的web.xml可以定义其他的动态请求url映射到不同Servlet程序处理。<ul><li>常用的属性定义有：<ul><li>1、docBase：相应的Web应用程序的存放位置；也可以使用相对路径，起始路径为此Context所属Host中appBase定义的路径；切记，docBase的路径名不能与相应的Host中appBase中定义的路径名有包含关系，比如，如果appBase为deploy，而docBase绝不能为deploy-bbs类的名字；</li><li>2、path：相对于Web服务器根路径而言的URI；如果为空””，则表示为此webapp的根路径；如果context定义在一个单独的xml文件中，此属性不需要定义；</li><li>3、reloadable：是否允许重新加载此context相关的Web应用程序的类；默认为false；</li></ul></li></ul></li></ul></li></ul><hr><ul><li><code>7、Realm组件</code><ul><li>Realm（领域）表示分配给这些用户的用户名，密码和角色（类似于Unix组）的”数据库”。一个Realm（领域）表示一个安全上下文，它是一个授权访问某个给定Context的用户列表和某用户所允许切换的角色相关定义的列表。</li><li>Catalina容器（Engine，Host或Context）可以包含不超过一个Realm元素（但自身可以嵌套）。此外，与引擎或主机关联的领域由低级容器自动继承，除非下级容器显式定义了自己的领域。如果没有为引擎配置领域，将自动为引擎配置空领域的实例。</li><li>定义Realm时惟一必须要提供的属性是classname，它是Realm的多个不同实现，用于表示此Realm认证的用户及角色等认证信息的存放位置，Tomcat中实现了多种不同的Realm，如下：<ul><li>UserDatabaseRealm：基于UserDatabase文件(通常是tomcat-user.xml)实现用户认证，它实现是一个完全可更新和持久有效的MemoryRealm，因此能够跟标准的MemoryRealm兼容；它通过JNDI实现；</li><li>LockOutRealm：提供锁定功能，以便在给定时间段内出现过多的失败认证尝试时提供用户锁定机制；</li><li>JAASRealm：基于Java Authintication and Authorization Service实现用户认证；</li><li>JDBCRealm：通过JDBC访问某关系型数据库表实现用户认证；</li><li>JNDIRealm：基于JNDI使用目录服务实现认证信息的获取；</li><li>MemoryRealm：查找tomcat-user.xml文件实现用户信息的获取。<ul><li>可以看到默认配置文件中定义了一个LockOutRealm并嵌套一个UserDatabaseRealm的Realm来通过tomcat-user.xml文件实现用户认证。</li></ul></li></ul></li></ul></li></ul><hr><ul><li><code>8、Valve组件</code><ul><li>Valve（阀门）类似于过滤器，用来拦截请求并在将其转至目标之前进行某种处理操作；它可以工作于Engine和Host/Context之间、Host和Context之间以及Context和Web应用程序的某资源之间。</li><li>Valve常被用来记录客户端请求、客户端IP地址和服务器等信息，这种处理技术通常被称作请求转储(request dumping)。请求转储valve记录请求客户端请求数据包中的HTTP首部信息和cookie信息文件中，响应转储valve则记录响应数据包首部信息和cookie信息至文件中。</li><li>一个容器内可以建立多个Valve，而且Valve定义的次序也决定了它们生效的次序。不同类型的Value具有不同的处理能力，Tomcat中实现了多种不同的Valve：<ul><li>AccessLogValve：访问日志Valve</li><li>ExtendedAccessValve：扩展功能的访问日志Valve</li><li>RequestDumperValve：请求转储Valve；</li><li>RemoteAddrValve：基于远程地址的访问控制；</li><li>RemoteHostValve：基于远程主机名称的访问控制；</li><li>SemaphoreValve：用于控制Tomcat主机上任何容器上的并发访问数量；</li><li>ReplicationValve：专用于Tomcat集群架构中，可以在某个请求的session信息发生更改时触发session数据在各节点间进行复制；</li><li>SingleSignOn：将两个或多个需要对用户进行认证webapp在认证用户时连接在一起，即一次认证即可访问所有连接在一起的webapp；</li><li>ClusterSingleSingOn：对SingleSignOn的扩展，专用于Tomcat集群当中，需要结合ClusterSingleSignOnListener进行工作。<ul><li>通过属性className定义相关的java实现的类名来选择Value。如默认配置文件中定义了一个AccessLogValve的Value来记录访问日志到文件中。</li></ul></li></ul></li></ul></li></ul><hr><h2 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h2><ul><li>1、Logger<ul><li>日志记录器(Logger)：用于记录组件内部的状态信息，可被用于除Context之外的任何容器中。日志记录的功能可被继承，因此，一个引擎级别的Logger将会记录引擎内部所有组件相关的信息，除非某内部组件定义了自己的Logger组件（前面介绍的AccessLogValve使用自包含的逻辑来写它的日志文件，以获得更好的效率）。</li></ul></li></ul><hr><ul><li>2、Listener<ul><li>Listener用于创建和配置LifecycleListener对象，而LifecycleListener通常被开发人员用来创建和删除容器。</li></ul></li></ul><hr><ul><li>3、Loader<ul><li>Java的动态装载功能是其语言功能强大表现之一，Servlet容器使用此功能在运行时动态装载servlet和它们所依赖的类。Loader可以用于Context中控制java类的加载，即WebApp类加载器。</li></ul></li></ul><hr><ul><li>4、Resources<ul><li>经常用于实现在Context中指定需要装载的但不在Tomcat本地磁盘上的应用资源，如Java类，HTML页面，JSP文件等。</li></ul></li></ul><hr><ul><li>5、GlobalNamingResources<ul><li>应用于整个服务器的JNDI映射，此可以避免每个Web应用程序都需要在各自的web.xml创建，这在web应用程序以WAR的形式存在时尤为有用。它通常可以包含三个子元素：Environment、Resource和ResourceEnvRef。</li></ul></li></ul><hr><ul><li>6、WatchedResource<ul><li>WatchedResource可以用于Context中监视指定的webapp程序文件的改变，并且能够在监视到文件内容发生改变时重新装载此文件。</li></ul></li></ul><hr><ul><li><p>7、Manager</p><ul><li><p>Manger对象用于实现HTTP会话管理的功能，Tomcat中有5种Manger的实现：</p><ul><li>1)StandardManager<ul><li>Tomcat6的默认会话管理器，用于非集群环境中对单个处于运行状态的Tomcat实例会话进行管理。当Tomcat关闭时，这些会话相关的数据会被写入磁盘上的一个名叫SESSION.ser的文件，并在Tomcat下次启动时读取此文件。</li></ul></li><li><p>2) PersistentManager</p><ul><li>当一个会话长时间处于空闲状态时会被写入到swap会话对象，这对于内存资源比较吃紧的应用环境来说比较有用。</li></ul></li><li><p>3)DeltaManager</p><ul><li>属于ClusterManager，用于Tomcat集群的会话管理器，它通过将改变了会话数据同步给集群中的其它节点实现会话复制。这种实现会将所有会话的改变同步给集群中的每一个节点，也是在集群环境中用得最多的一种实现方式。</li><li>但集群节点较多时，会消耗大量的网络资源，一般适用于3、4个节点的集群。</li></ul></li><li>4)BackupManager<ul><li>属于ClusterManager，用于Tomcat集群的会话管理器，与DeltaManager不同的是，某节点会话的改变只会同步给集群中的另一个而非所有节点。</li></ul></li><li>5)SimpleTcpReplicationManager<ul><li>Tomcat4时用到的版本，过于老旧了。</li></ul></li></ul></li></ul></li></ul><hr><ul><li>8、Stores<ul><li>PersistentManager必须包含一个Store元素以指定将会话数据存储至何处。这通常有两种实现方式：FileStore和JDBCStore。</li></ul></li></ul><hr><ul><li>9、Cluster<ul><li>专用于配置Tomcat集群的元素，可用于Engine和Host容器中。在用于Engine容器中时，Engine中的所有Host均支持集群功能。在Cluster元素中，需要直接定义一个Manager元素，这个Manager元素有一个其值为org.apache.catalina.ha.session.DeltaManager或org.apache.catalina.ha.session.BackupManager的className属性。同时，Cluster中还需要分别定义一个Channel和ClusterListener元素。</li></ul></li></ul><hr><ul><li>10、Channel<ul><li>用于Cluster中给集群中同一组中的节点定义通信”信道”。Channel中需要至少定义Membership、Receiver和Sender三个元素，此外还有一个可选元素Interceptor。</li></ul></li></ul><hr><ul><li>11、Membership<ul><li>用于Channel中配置同一通信信道上节点集群组中的成员情况，即监控加入当前集群组中的节点并在各节点间传递心跳信息，而且可以在接收不到某成员的心跳信息时将其从集群节点中移除。Tomcat6中Membership的实现是org.apache.catalina.tribes.membership.McastService。</li></ul></li></ul><hr><ul><li>12、Sender<ul><li>用于Channel中配置”复制信息”的发送器，实现发送需要同步给其它节点的数据至集群中的其它节点。发送器不需要属性的定义，但可以在其内部定义一个Transport元素。</li></ul></li></ul><hr><ul><li><p>13、Transport</p><ul><li><p>用于Sender内部，配置数据如何发送至集群中的其它节点。Tomcat有两种Transport的实现：</p></li><li><p>1) PooledMultiSender</p><ul><li>基于Java阻塞式IO，可以将一次将多个信息并发发送至其它节点，但一次只能传送给一个节点。</li></ul></li><li>2)PooledParallelSener<ul><li>基于Java非阻塞式IO，即NIO，可以一次发送多个信息至一个或多个节点。</li></ul></li></ul></li></ul><hr><ul><li>14、Receiver</li><li>用于Channel定义某节点如何从其它节点的Sender接收复制数据，Tomcat中实现的接收方式有两种BioReceiver和NioReceiver。</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tomcat基础与组件&quot;&gt;&lt;a href=&quot;#tomcat基础与组件&quot; class=&quot;headerlink&quot; title=&quot;tomcat基础与组件&quot;&gt;&lt;/a&gt;tomcat基础与组件&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/14/tomcat基础与部署/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://daizhe.net.cn/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://daizhe.net.cn/tags/tomcat/"/>
    
  </entry>
  
</feed>
