<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dai zhe&#39;s notes</title>
  
  <subtitle>Just Du It</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://9527dz.top/"/>
  <updated>2019-01-16T08:04:47.321Z</updated>
  <id>https://9527dz.top/</id>
  
  <author>
    <name>哆啦A梦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置tomcat</title>
    <link href="https://9527dz.top/2019/01/16/%E9%85%8D%E7%BD%AEtomcat/"/>
    <id>https://9527dz.top/2019/01/16/配置tomcat/</id>
    <published>2019-01-16T08:01:08.881Z</published>
    <updated>2019-01-16T08:04:47.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h1><p><img src="/2019/01/16/配置tomcat/标题.png" alt=""><br><a id="more"></a></p><h2 id="部署Tomcat-JDK-Tomcat"><a href="#部署Tomcat-JDK-Tomcat" class="headerlink" title="部署Tomcat(JDK+Tomcat)"></a>部署Tomcat(JDK+Tomcat)</h2><ul><li>运行者身份不能为root(user:tomcat)端口默认为8080/tcp</li></ul><p><code>部署方式1：OpenJDK(openjdk 11 + tomcat 7.0)</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rel兼容多个版本JDK并存，可以设置默认的JDK版本</span></span><br><span class="line"><span class="comment">#    ~]# alternatives --install JDK</span></span><br><span class="line">yum安装OpenJDK</span><br><span class="line">    ~]<span class="comment"># yum install java-11-openjdk-devel -y</span></span><br><span class="line">    ~]<span class="comment"># java -version </span></span><br><span class="line">    openjdk version <span class="string">"11.0.1"</span> 2018-10-16 LTS(长期支持版)</span><br><span class="line">    OpenJDK Runtime Environment 18.9 (build 11.0.1+13-LTS)</span><br><span class="line">    OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13-LTS, mixed mode, sharing)</span><br><span class="line">    ~]<span class="comment"># which java</span></span><br><span class="line">    /usr/bin/java</span><br><span class="line">    ~]<span class="comment"># ll /usr/bin/java</span></span><br><span class="line">    /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line">    ~]<span class="comment"># ll /etc/alternatives/java</span></span><br><span class="line">    /etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64/bin/java</span><br><span class="line"></span><br><span class="line">安装tomcat(7.0)</span><br><span class="line">    tomcat-admin-webapps.noarch <span class="comment">#tomcat的web界面的管理的接口</span></span><br><span class="line">    tomcat-docs-webapp.noarch   <span class="comment">#参考文档</span></span><br><span class="line">    ~]<span class="comment"># yum install tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp -y </span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart tomcat</span></span><br><span class="line">    <span class="comment">#运行身份为Java虚拟机运行</span></span><br><span class="line">    ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    LISTEN      0      100             :::8009  (ajp)                                 </span><br><span class="line">    LISTEN      0      100             127.0.0.1:8005  (管理接口)    </span><br><span class="line">    LISTEN      0      100             :::8080 （http）</span><br></pre></td></tr></table></figure></p><p><code>部署方式2：Oracle JDK(oracle jdk 8u191 + tomcat 8.5)</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">oracle jdk 下载地址：https://www.oracle.com/technetwork/java/javase/downloads/index.html</span><br><span class="line">    ~]<span class="comment"># ls</span></span><br><span class="line">    jdk-8u191-linux-x64.rpm </span><br><span class="line">    ~]<span class="comment"># rpm -ivh jdk-8u191-linux-x64.rpm </span></span><br><span class="line">    默认安装路径</span><br><span class="line">    ~]<span class="comment"># ls /usr/java/</span></span><br><span class="line">    default  jdk1.8.0_191-amd64  latest</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ll /usr/java/</span></span><br><span class="line">    default -&gt; /usr/java/latest     <span class="comment">#支持设置默认的版本</span></span><br><span class="line">    jdk1.8.0_191-amd64  <span class="comment">#同样支持多版本共存</span></span><br><span class="line">    latest -&gt; /usr/java/jdk1.8.0_191-amd64  <span class="comment">#支持设置最新的版本</span></span><br><span class="line"></span><br><span class="line">    验证是否安装成功（直接运行java程序）</span><br><span class="line">    查看版本信息</span><br><span class="line">    amd64]<span class="comment"># pwd</span></span><br><span class="line">    /usr/java/jdk1.8.0_191-amd64</span><br><span class="line">    amd64]<span class="comment"># /bin/java -version</span></span><br><span class="line">        java version <span class="string">"1.8.0_191"</span></span><br><span class="line">        Java(TM) SE Runtime Environment (build 1.8.0_191-b12)</span><br><span class="line">        Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)</span><br><span class="line"></span><br><span class="line">    修改PATH变量</span><br><span class="line">    ~]<span class="comment"># vim /etc/profile.d/java.sh</span></span><br><span class="line">    JAVA_HOME=/usr/java/default</span><br><span class="line">    PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME PATH</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># source /etc/profile.d/java.sh </span></span><br><span class="line">    ~]<span class="comment"># printenv </span></span><br><span class="line"></span><br><span class="line">tomcat 8.5安装</span><br><span class="line">下载路径：http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz</span></span><br><span class="line">    ~]<span class="comment"># tar xvf apache-tomcat-8.5.37.tar.gz -C /usr/local/</span></span><br><span class="line">    ~]<span class="comment"># ln -vs /usr/local/apache-tomcat-8.5.37 /usr/local/tomcat （链接形式方便升级）</span></span><br><span class="line"></span><br><span class="line">    tomcat不可使用root用户运行</span><br><span class="line">    ~]<span class="comment"># useradd tomcat</span></span><br><span class="line">    ~]<span class="comment"># chown -R tomcat.tomcat /usr/local/tomcat/</span></span><br><span class="line">    ~]<span class="comment"># chown -R tomcat.tomcat /usr/local/tomcat/*</span></span><br><span class="line">     ~]<span class="comment"># su - tomcat -c "/usr/local/tomcat/bin/catalina.sh start"</span></span><br><span class="line">    Using CATALINA_BASE:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">    Using CATALINA_HOME:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">    Using CATALINA_TMPDIR: /usr/<span class="built_in">local</span>/tomcat/temp</span><br><span class="line">    Using JRE_HOME:        /usr/bin/default</span><br><span class="line">    Using CLASSPATH:       /usr/<span class="built_in">local</span>/tomcat/bin/bootstrap.jar:/u</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    LISTEN      0      100             :::8009  (ajp)                                 </span><br><span class="line">    LISTEN      0      100            127.0.0.1:8005  (管理接口)    </span><br><span class="line">    LISTEN      0      100             :::8080 （http）</span><br></pre></td></tr></table></figure></p><hr><h2 id="server-xml默认配置"><a href="#server-xml默认配置" class="headerlink" title="server.xml默认配置"></a>server.xml默认配置</h2><ul><li><p>Tomcat：</p><ul><li>使用java语言编写：</li></ul></li><li><p><code>tomcat的配置文件构成：</code></p><ul><li><code>server.xml：</code>主配置文件；</li><li><code>web.xml：</code>每个webapp只有“部署”后才能被访问，它的部署方式通常由web.xml进行定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认部署相关的配置；</li><li><code>context.xml：</code>每个webapp都可以专用的配置文件，它通常由专用的配置文件context.xml来定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认配置；</li><li><code>tomcat-users.xml：</code>用户认证的账号和密码文件；</li><li><code>catalina.policy：</code>当使用-security选项启动tomcat时，用于为tomcat设置安全策略； </li><li><code>catalina.properties：</code>Java属性的定义文件，用于设定类加载器路径，以及一些与JVM调优相关参数；</li><li><code>logging.properties：</code>日志系统相关的配置；    log4j        </li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Tomcat的核心组件：server.xml</span><br><span class="line">&lt;Server&gt;</span><br><span class="line">&lt;Service&gt;</span><br><span class="line">&lt;connector/&gt;</span><br><span class="line">&lt;connector/&gt;</span><br><span class="line">...</span><br><span class="line">&lt;Engine&gt;</span><br><span class="line">&lt;Host&gt;</span><br><span class="line">&lt;Context/&gt;</span><br><span class="line">&lt;Context/&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">&lt;Host&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Engine&gt;</span><br><span class="line">&lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;配置tomcat&quot;&gt;&lt;a href=&quot;#配置tomcat&quot; class=&quot;headerlink&quot; title=&quot;配置tomcat&quot;&gt;&lt;/a&gt;配置tomcat&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/16/配置tomcat/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://9527dz.top/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://9527dz.top/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat基础与组件</title>
    <link href="https://9527dz.top/2019/01/14/tomcat%E5%9F%BA%E7%A1%80%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>https://9527dz.top/2019/01/14/tomcat基础与部署/</id>
    <published>2019-01-14T12:47:14.983Z</published>
    <updated>2019-01-16T08:00:37.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat基础与组件"><a href="#tomcat基础与组件" class="headerlink" title="tomcat基础与组件"></a>tomcat基础与组件</h1><p><img src="/2019/01/14/tomcat基础与部署/标题.png" alt=""><br><a id="more"></a></p><h2 id="关于Tomcat"><a href="#关于Tomcat" class="headerlink" title="关于Tomcat"></a>关于Tomcat</h2><ul><li><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p></li><li><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat 部分是Apache 服务器的扩展，但它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p></li></ul><ul><li>官网地址：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></li></ul><h2 id="部署Tomcat-JDK-Tomcat"><a href="#部署Tomcat-JDK-Tomcat" class="headerlink" title="部署Tomcat(JDK+Tomcat)"></a>部署Tomcat(JDK+Tomcat)</h2><ul><li>Tomcat也是java编程语言编写的，是运行在JVM中的一个进程。它定义为【中间件】，顾名思义，是一个在Java项目与JVM之间的中间容器。</li><li><p>java程序写的网站用Tomcat+JDK来运行，Tomcat是一个中间件，真正起作用的，解析Java脚本的是JDK。JDK（Java development kit）是整个Java的核心，它包含了Java运行环境和一堆Java相关的工具以及Java基础库。<br>最主流的JDK是由sun公司发布的JDK，除此之外，IBM公司也有发布JDK，centos上也可以使用yum安装openjdk<br>Java写的网页后缀名是.jsp。</p></li><li><p>运行者身份不能为root(user:tomcat)端口默认为8080/tcp</p></li></ul><p><code>部署方式1：OpenJDK(openjdk 11 + tomcat 7.0)</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rel兼容多个版本JDK并存，可以设置默认的JDK版本</span></span><br><span class="line"><span class="comment">#    ~]# alternatives --install JDK</span></span><br><span class="line">yum安装OpenJDK</span><br><span class="line">    ~]<span class="comment"># yum install java-11-openjdk-devel -y</span></span><br><span class="line">    ~]<span class="comment"># java -version </span></span><br><span class="line">    openjdk version <span class="string">"11.0.1"</span> 2018-10-16 LTS(长期支持版)</span><br><span class="line">    OpenJDK Runtime Environment 18.9 (build 11.0.1+13-LTS)</span><br><span class="line">    OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13-LTS, mixed mode, sharing)</span><br><span class="line">    ~]<span class="comment"># which java</span></span><br><span class="line">    /usr/bin/java</span><br><span class="line">    ~]<span class="comment"># ll /usr/bin/java</span></span><br><span class="line">    /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line">    ~]<span class="comment"># ll /etc/alternatives/java</span></span><br><span class="line">    /etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64/bin/java</span><br><span class="line"></span><br><span class="line">安装tomcat(7.0)</span><br><span class="line">    tomcat-admin-webapps.noarch <span class="comment">#tomcat的web界面的管理的接口</span></span><br><span class="line">    tomcat-docs-webapp.noarch   <span class="comment">#参考文档</span></span><br><span class="line">    ~]<span class="comment"># yum install tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp -y </span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart tomcat</span></span><br><span class="line">    <span class="comment">#运行身份为Java虚拟机运行</span></span><br><span class="line">    ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    LISTEN      0      100             :::8009  (ajp)                                 </span><br><span class="line">    LISTEN      0      100             127.0.0.1:8005  (管理接口)    </span><br><span class="line">    LISTEN      0      100             :::8080 （http）</span><br></pre></td></tr></table></figure></p><p><code>部署方式2：Oracle JDK(oracle jdk 8u191 + tomcat 8.5)</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">oracle jdk 下载地址：https://www.oracle.com/technetwork/java/javase/downloads/index.html</span><br><span class="line">    ~]<span class="comment"># ls</span></span><br><span class="line">    jdk-8u191-linux-x64.rpm </span><br><span class="line">    ~]<span class="comment"># rpm -ivh jdk-8u191-linux-x64.rpm </span></span><br><span class="line">    默认安装路径</span><br><span class="line">    ~]<span class="comment"># ls /usr/java/</span></span><br><span class="line">    default  jdk1.8.0_191-amd64  latest</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ll /usr/java/</span></span><br><span class="line">    default -&gt; /usr/java/latest     <span class="comment">#支持设置默认的版本</span></span><br><span class="line">    jdk1.8.0_191-amd64  <span class="comment">#同样支持多版本共存</span></span><br><span class="line">    latest -&gt; /usr/java/jdk1.8.0_191-amd64  <span class="comment">#支持设置最新的版本</span></span><br><span class="line"></span><br><span class="line">    验证是否安装成功（直接运行java程序）</span><br><span class="line">    查看版本信息</span><br><span class="line">    amd64]<span class="comment"># pwd</span></span><br><span class="line">    /usr/java/jdk1.8.0_191-amd64</span><br><span class="line">    amd64]<span class="comment"># /bin/java -version</span></span><br><span class="line">        java version <span class="string">"1.8.0_191"</span></span><br><span class="line">        Java(TM) SE Runtime Environment (build 1.8.0_191-b12)</span><br><span class="line">        Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)</span><br><span class="line"></span><br><span class="line">    修改PATH变量</span><br><span class="line">    ~]<span class="comment"># vim /etc/profile.d/java.sh</span></span><br><span class="line">    JAVA_HOME=/usr/java/default</span><br><span class="line">    PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME PATH</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># source /etc/profile.d/java.sh </span></span><br><span class="line">    ~]<span class="comment"># printenv </span></span><br><span class="line"></span><br><span class="line">tomcat 8.5安装</span><br><span class="line">下载路径：http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz</span></span><br><span class="line">    ~]<span class="comment"># tar xvf apache-tomcat-8.5.37.tar.gz -C /usr/local/</span></span><br><span class="line">    ~]<span class="comment"># ln -vs /usr/local/apache-tomcat-8.5.37 /usr/local/tomcat （链接形式方便升级）</span></span><br><span class="line"></span><br><span class="line">    tomcat不可使用root用户运行</span><br><span class="line">    ~]<span class="comment"># useradd tomcat</span></span><br><span class="line">    ~]<span class="comment"># chown -R tomcat.tomcat /usr/local/tomcat/</span></span><br><span class="line">    ~]<span class="comment"># chown -R tomcat.tomcat /usr/local/tomcat/*</span></span><br><span class="line">     ~]<span class="comment"># su - tomcat -c "/usr/local/tomcat/bin/catalina.sh start"</span></span><br><span class="line">    Using CATALINA_BASE:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">    Using CATALINA_HOME:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">    Using CATALINA_TMPDIR: /usr/<span class="built_in">local</span>/tomcat/temp</span><br><span class="line">    Using JRE_HOME:        /usr/bin/default</span><br><span class="line">    Using CLASSPATH:       /usr/<span class="built_in">local</span>/tomcat/bin/bootstrap.jar:/u</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    LISTEN      0      100             :::8009  (ajp)                                 </span><br><span class="line">    LISTEN      0      100            127.0.0.1:8005  (管理接口)    </span><br><span class="line">    LISTEN      0      100             :::8080 （http）</span><br></pre></td></tr></table></figure></p><p>欢迎页：</p><ul><li>Manager App(应用程序管理器、web界面部署其他应用程序) 与 Host Manager 部署的管理程序</li></ul><p><img src="/2019/01/14/tomcat基础与部署/tomcat.png" alt=""></p><h2 id="Tomcat基本框架及相关配置"><a href="#Tomcat基本框架及相关配置" class="headerlink" title="Tomcat基本框架及相关配置"></a>Tomcat基本框架及相关配置</h2><p><img src="/2019/01/14/tomcat基础与部署/基础架构.png" alt=""></p><ul><li>如上图，Tomcat可以按功能划分许多不同的组件，这些组件都可以通过/conf/server.xml(部署描述符文件)文件中可定义和配置，包括Server, Service, Connector, Engine, Cluster, Host, Alias, Context, Realm, Valve, Manager, Listener, Resources, ResourceEnvRef, WatchedResource, Store, Transaction, Channel, Membership, Transport, Member, ClusterListener等，一般可分为以下四类：<ul><li>1、<code>Server顶级组件：</code>位于配置层次的顶级，并且彼此间有着严格的对应关系，有Server组件、Service组件；</li><li>2、<code>Connector连接器：</code>连接客户端（可以是浏览器或Web服务器）请求至Servlet容器，只有Connector组件（Connector才是一个具体特定、真正的程序，可以被单独部署和管理、启动停止暂停等。）</li><li>3、<code>Engine容器：</code>表示其功能是处理传入请求的组件，并创建相应的响应。如Engine处理对一个Service的所有请求，Host处理对特定虚拟主机的所有请求，并且Context处理对特定web应用的所有请求（容器类容器组件，可以容纳JSP应用程序的顶级组件）；</li><li>4、<code>Context被嵌套的组件：</code>位于一个容器当中，但不能包含其它组件；一些组件可以嵌套在任何Container中，而另一些只能嵌套在Context中。</li></ul></li></ul><hr><h2 id="server-xml默认配置"><a href="#server-xml默认配置" class="headerlink" title="server.xml默认配置"></a>server.xml默认配置</h2><ul><li><p>Tomcat：</p><ul><li>使用java语言编写：</li></ul></li><li><p><code>tomcat的配置文件构成：</code></p><ul><li><code>server.xml：</code>主配置文件；</li><li><code>web.xml：</code>每个webapp只有“部署”后才能被访问，它的部署方式通常由web.xml进行定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认部署相关的配置；</li><li><code>context.xml：</code>每个webapp都可以专用的配置文件，它通常由专用的配置文件context.xml来定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认配置；</li><li><code>tomcat-users.xml：</code>用户认证的账号和密码文件；</li><li><code>catalina.policy：</code>当使用-security选项启动tomcat时，用于为tomcat设置安全策略； </li><li><code>catalina.properties：</code>Java属性的定义文件，用于设定类加载器路径，以及一些与JVM调优相关参数；</li><li><code>logging.properties：</code>日志系统相关的配置；    log4j        </li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Tomcat的核心组件：server.xml</span><br><span class="line">&lt;Server&gt;</span><br><span class="line">&lt;Service&gt;</span><br><span class="line">&lt;connector/&gt;</span><br><span class="line">&lt;connector/&gt;</span><br><span class="line">...</span><br><span class="line">&lt;Engine&gt;</span><br><span class="line">&lt;Host&gt;</span><br><span class="line">&lt;Context/&gt;</span><br><span class="line">&lt;Context/&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">&lt;Host&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Engine&gt;</span><br><span class="line">&lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><hr><ul><li>更多Server配置信息请参考：《Apache Tomcat 8 Configuration Reference》 The Server Component<h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2></li><li><code>1、Server组件</code><ul><li>erver（服务器）表示Tomcat的一个实例，因此，它必须是/conf / server.xml配置文件中的单个最外层元素，它的属性表示servlet容器的整体特性。通常一个JVM只能包含一个Tomcat实例。</li><li>默认配置表示监听在8005端口以接收shutdown命令，默认仅允许通过本机访问。</li></ul></li></ul><hr><ul><li><code>2、Service组件</code><ul><li>Service（服务）主要用于关联一个Engine和与此Engine相关的Connector，每个Connector通过一个特定的端口和协议接收请求，并将其转发至关联的Engine进行处理。</li><li>因此，Service可以包含一个Engine、以有一个或多个Connector；而一个Server可以包含多个Service组件，但通常情下只为一个Server指派一个Service。通常需要给Service命名，可以方便管理员在日志文件中识别不同Service产生的日志。</li><li>如默认配置中server只包含一个名为”Catalina”的service，而service里包含两个Connector，其中一个监听8080端口接收HTTP请求，另一个监听8009端口接收AJP协议的请求。</li></ul></li></ul><hr><ul><li><p><code>3、Connector组件</code></p><ul><li><p>如上面所述，Connector（连接器）通过一个特定的端口接收特定协议的客户端请求，并将其转发至关联的Engine进行处理。一个Engine可以配置多个连接器，但这些连接器必须使用不同的端口。</p></li><li><p>定义连接器可以使用多种属性，有些属性也只适用于某特定的连接器类型。一般说来，连接器类型可以分为两种：</p><ul><li><p>（1）、HTTP连接器</p><ul><li>HTTP连接器元素表示支持HTTP / 1.1协议的连接器组件，它能使Tomcat能够作为独立的Web服务器。此组件的特定实例侦听服务器上特定TCP端口号上的连接，每个转发到相关联的Engine以执行请求处理并创建响应。</li><li>默认配置文件，定义了一个连接器为protocol=”HTTP/1.1” 表示的是使用自动切换机制来选择基于Java NIOConnector或基于APR /Native Connector（需要设置），也可以手动指定</li></ul></li><li><p>2）、AJP 1.3连接器</p><ul><li>AJP连接器元素表示通过AJP(Apache JServ Protocol)协议与Web连接器通信的连接器组件。</li><li>AJP协议是基于二进制的格式在Web服务器和Tomcat之间传输数据，这比HTTPP获得更好的效率，但比较复杂不通用。</li><li>通常用于将Tomcat集成到现有Apache服务器中，并且希望Apache处理Web应用程序中包含的静态内容或SSL连接处理的情况，即Apache服务器作为代理服务器。Apache与Tomcat结合可以由mod_jk或mod_proxy模块来实现，但它们的使用范围不同：mod_jk支持apache/1.3,apache/2.0，mod_proxy支持apache/2.2+。</li><li>默认配置文件中定义了一个监听8009端口的AJP连接器，其实官方文档说明这种连接器不久后不再支持，一般用得不多，就不再多介绍了。</li><li>定义连接器时可以配置的属性非常多，但通常定义HTTP连接器时必须定义的属性只有”port”，定义AJP连接器时必须定义的属性只有”protocol”，因为默认的协议为HTTP。以下为常用属性的说明（更多请参考前面给出的文档）：   <ul><li>1、address：指定连接器监听的地址，默认为所有地址，即0.0.0.0；</li><li>2、maxThreads：支持的最大并发连接数，默认为200；</li><li>3、port：监听的端口，默认为0；</li><li>4、protocol：连接器使用的协议，默认为HTTP/1.1，定义AJP协议时通常为AJP/1.3；</li><li>5、redirectPort：如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口；</li><li>6、connectionTimeout：等待客户端发送请求的超时时间，单位为毫秒，默认为60000，即1分钟；</li><li>7、enableLookups：是否通过request.getRemoteHost()进行DNS查询以获取客户端的主机名；默认为true；</li><li>8、acceptCount：设置等待队列的最大长度；通常在tomcat所有处理线程均处于繁忙状态时，新发来的请求将被放置于等待队列中；</li></ul></li></ul></li></ul></li></ul></li></ul><hr><ul><li><code>4、Engine组件</code><ul><li>Engine（引擎）表示与特定Service相关联的整个请求处理机制，即Servlet容器引擎。它接收和处理来自一个或多个连接器的所有请求，并检查每一个请求的HTTP首部信息以辨别此请求应该发往哪个Host或Context，并将完成的响应返回到连接器，以便最终传输回客户端。</li><li>一个Engine元素必须嵌套在Service元素内，它可以包含多个host组件，还可以包含Realm、Listener和Valve等子容器。<ul><li>常用的属性定义：<ul><li>1、defaultHost：Tomcat支持基于FQDN的虚拟主机，这些虚拟主机可以通过在Engine容器中定义多个不同的Host组件来实现；但如果此引擎的连接器收到一个发往非非明确定义虚拟主机的请求时则需要将此请求发往一个默认的虚拟主机进行处理，因此，在Engine中定义的多个虚拟主机的主机名称中至少要有一个跟defaultHost定义的主机名称同名。</li><li>2、name：Engine组件的名称，用于日志和错误信息记录时区别不同的引擎。<ul><li>如默认配置中定义了一个名为”Catalina”的Engine，而Engine里包含一个Hots，并被配置为默认的虚拟主机。</li></ul></li></ul></li></ul></li></ul></li></ul><hr><ul><li><code>5、Host组件</code><ul><li>Host（虚拟主机）类似于Apache中的虚拟主机，但在Tomcat中只支持基于FQDN的”虚拟主机”。Host位于Engine容器中用于接收请求并进行相应处理，它是服务器（例如”<a href="http://www.mycompany.com&quot;）的网络名称与运行Tomcat的特定服务器的关联。" target="_blank" rel="noopener">www.mycompany.com&quot;）的网络名称与运行Tomcat的特定服务器的关联。</a></li><li>客户端通常使用主机名来标识他们希望连接的服务器，但要使客户端能够使用其网络名称连接到Tomcat服务器，此名称必须在管理所属的Internet域的域名服务（DNS）服务器中注册。此主机名也包含在HTTP请求标头中，Tomcat从HTTP头中提取主机名，并查找具有匹配名称的主机；如果未找到匹配项，请求将路由到默认主机。</li><li>一个Engine至少要包含一个Host组件，而在Host元素内可以嵌入与此虚拟主机关联的Web应用程序的Context等元素。<ul><li>常用属性说明：<ul><li>1、name：此Host的FQDN虚拟主机名称；</li><li>2、appBase：此Host的webapps目录，即存放非归档的web应用程序的目录或归档后的WAR文件的目录路径；可以使用基于$CATALINA_HOME的相对路径；</li><li>3、autoDeploy：在Tomcat处于运行状态时放置于appBase目录中的应用程序文件是否自动进行deploy；默认为true；</li><li>4、unpackWars：在启用此webapps时是否对WAR格式的归档文件先进行展开；默认为true。<ul><li>如默认配置中定义了一个主机名为”localhost”的Host，而webapps目录为$ CATALINA_BASE相对的”webapps”，即前面说到的默认目录，也可用绝对路径来配置其他目录。</li></ul></li></ul></li></ul></li></ul></li></ul><hr><ul><li><code>6、Context组件</code><ul><li>Context（上下文）表示在特定虚拟主机中运行的Web应用程序，一个Context对应一个Web应用程序，而里面的Wrapper可以理解为一个个Servlet程序。</li><li>Context需要根据其定义的上下文路径（path）匹配请求URI的最长前缀（除主机名外）来选择。一旦选择，可以由docBase来找到该上下文将对应的web应用程序部署目录，由目录中web.xml定义的servlet映射选择一个合适的servlet来处理传入的请求。</li><li>一个Host可以有多个Context，通常不建议定义在server.xml文件中，而是每一个context定义使用一个单独的XML文件进行，<code>其文件的目录为$CATALINA_HOME/conf/&lt;engine name&gt;/&lt;host name&gt;</code></li><li>可以看到server.xml中默认没有定义Context，但存在/conf/context.xml，在前面说Tomcat配置文件时曾介绍过，context.xml为部署与此Tomcat实例上所有的web应用程序提供的默认配置文件，</li><li>通过它可以找到默认的和各web应用程序提供部署描述符文件web.xml，/conf/web.xml定义了Tomcat提供的默认Servlet处理程序，主要用来处理静态资源请求；而各webapp的web.xml可以定义其他的动态请求url映射到不同Servlet程序处理。<ul><li>常用的属性定义有：<ul><li>1、docBase：相应的Web应用程序的存放位置；也可以使用相对路径，起始路径为此Context所属Host中appBase定义的路径；切记，docBase的路径名不能与相应的Host中appBase中定义的路径名有包含关系，比如，如果appBase为deploy，而docBase绝不能为deploy-bbs类的名字；</li><li>2、path：相对于Web服务器根路径而言的URI；如果为空””，则表示为此webapp的根路径；如果context定义在一个单独的xml文件中，此属性不需要定义；</li><li>3、reloadable：是否允许重新加载此context相关的Web应用程序的类；默认为false；</li></ul></li></ul></li></ul></li></ul><hr><ul><li><code>7、Realm组件</code><ul><li>Realm（领域）表示分配给这些用户的用户名，密码和角色（类似于Unix组）的”数据库”。一个Realm（领域）表示一个安全上下文，它是一个授权访问某个给定Context的用户列表和某用户所允许切换的角色相关定义的列表。</li><li>Catalina容器（Engine，Host或Context）可以包含不超过一个Realm元素（但自身可以嵌套）。此外，与引擎或主机关联的领域由低级容器自动继承，除非下级容器显式定义了自己的领域。如果没有为引擎配置领域，将自动为引擎配置空领域的实例。</li><li>定义Realm时惟一必须要提供的属性是classname，它是Realm的多个不同实现，用于表示此Realm认证的用户及角色等认证信息的存放位置，Tomcat中实现了多种不同的Realm，如下：<ul><li>UserDatabaseRealm：基于UserDatabase文件(通常是tomcat-user.xml)实现用户认证，它实现是一个完全可更新和持久有效的MemoryRealm，因此能够跟标准的MemoryRealm兼容；它通过JNDI实现；</li><li>LockOutRealm：提供锁定功能，以便在给定时间段内出现过多的失败认证尝试时提供用户锁定机制；</li><li>JAASRealm：基于Java Authintication and Authorization Service实现用户认证；</li><li>JDBCRealm：通过JDBC访问某关系型数据库表实现用户认证；</li><li>JNDIRealm：基于JNDI使用目录服务实现认证信息的获取；</li><li>MemoryRealm：查找tomcat-user.xml文件实现用户信息的获取。<ul><li>可以看到默认配置文件中定义了一个LockOutRealm并嵌套一个UserDatabaseRealm的Realm来通过tomcat-user.xml文件实现用户认证。</li></ul></li></ul></li></ul></li></ul><hr><ul><li><code>8、Valve组件</code><ul><li>Valve（阀门）类似于过滤器，用来拦截请求并在将其转至目标之前进行某种处理操作；它可以工作于Engine和Host/Context之间、Host和Context之间以及Context和Web应用程序的某资源之间。</li><li>Valve常被用来记录客户端请求、客户端IP地址和服务器等信息，这种处理技术通常被称作请求转储(request dumping)。请求转储valve记录请求客户端请求数据包中的HTTP首部信息和cookie信息文件中，响应转储valve则记录响应数据包首部信息和cookie信息至文件中。</li><li>一个容器内可以建立多个Valve，而且Valve定义的次序也决定了它们生效的次序。不同类型的Value具有不同的处理能力，Tomcat中实现了多种不同的Valve：<ul><li>AccessLogValve：访问日志Valve</li><li>ExtendedAccessValve：扩展功能的访问日志Valve</li><li>RequestDumperValve：请求转储Valve；</li><li>RemoteAddrValve：基于远程地址的访问控制；</li><li>RemoteHostValve：基于远程主机名称的访问控制；</li><li>SemaphoreValve：用于控制Tomcat主机上任何容器上的并发访问数量；</li><li>ReplicationValve：专用于Tomcat集群架构中，可以在某个请求的session信息发生更改时触发session数据在各节点间进行复制；</li><li>SingleSignOn：将两个或多个需要对用户进行认证webapp在认证用户时连接在一起，即一次认证即可访问所有连接在一起的webapp；</li><li>ClusterSingleSingOn：对SingleSignOn的扩展，专用于Tomcat集群当中，需要结合ClusterSingleSignOnListener进行工作。<ul><li>通过属性className定义相关的java实现的类名来选择Value。如默认配置文件中定义了一个AccessLogValve的Value来记录访问日志到文件中。</li></ul></li></ul></li></ul></li></ul><hr><h2 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h2><ul><li>1、Logger<ul><li>日志记录器(Logger)：用于记录组件内部的状态信息，可被用于除Context之外的任何容器中。日志记录的功能可被继承，因此，一个引擎级别的Logger将会记录引擎内部所有组件相关的信息，除非某内部组件定义了自己的Logger组件（前面介绍的AccessLogValve使用自包含的逻辑来写它的日志文件，以获得更好的效率）。</li></ul></li></ul><hr><ul><li>2、Listener<ul><li>Listener用于创建和配置LifecycleListener对象，而LifecycleListener通常被开发人员用来创建和删除容器。</li></ul></li></ul><hr><ul><li>3、Loader<ul><li>Java的动态装载功能是其语言功能强大表现之一，Servlet容器使用此功能在运行时动态装载servlet和它们所依赖的类。Loader可以用于Context中控制java类的加载，即WebApp类加载器。</li></ul></li></ul><hr><ul><li>4、Resources<ul><li>经常用于实现在Context中指定需要装载的但不在Tomcat本地磁盘上的应用资源，如Java类，HTML页面，JSP文件等。</li></ul></li></ul><hr><ul><li>5、GlobalNamingResources<ul><li>应用于整个服务器的JNDI映射，此可以避免每个Web应用程序都需要在各自的web.xml创建，这在web应用程序以WAR的形式存在时尤为有用。它通常可以包含三个子元素：Environment、Resource和ResourceEnvRef。</li></ul></li></ul><hr><ul><li>6、WatchedResource<ul><li>WatchedResource可以用于Context中监视指定的webapp程序文件的改变，并且能够在监视到文件内容发生改变时重新装载此文件。</li></ul></li></ul><hr><ul><li><p>7、Manager</p><ul><li><p>Manger对象用于实现HTTP会话管理的功能，Tomcat中有5种Manger的实现：</p><ul><li>1)StandardManager<ul><li>Tomcat6的默认会话管理器，用于非集群环境中对单个处于运行状态的Tomcat实例会话进行管理。当Tomcat关闭时，这些会话相关的数据会被写入磁盘上的一个名叫SESSION.ser的文件，并在Tomcat下次启动时读取此文件。</li></ul></li><li><p>2) PersistentManager</p><ul><li>当一个会话长时间处于空闲状态时会被写入到swap会话对象，这对于内存资源比较吃紧的应用环境来说比较有用。</li></ul></li><li><p>3)DeltaManager</p><ul><li>属于ClusterManager，用于Tomcat集群的会话管理器，它通过将改变了会话数据同步给集群中的其它节点实现会话复制。这种实现会将所有会话的改变同步给集群中的每一个节点，也是在集群环境中用得最多的一种实现方式。</li><li>但集群节点较多时，会消耗大量的网络资源，一般适用于3、4个节点的集群。</li></ul></li><li>4)BackupManager<ul><li>属于ClusterManager，用于Tomcat集群的会话管理器，与DeltaManager不同的是，某节点会话的改变只会同步给集群中的另一个而非所有节点。</li></ul></li><li>5)SimpleTcpReplicationManager<ul><li>Tomcat4时用到的版本，过于老旧了。</li></ul></li></ul></li></ul></li></ul><hr><ul><li>8、Stores<ul><li>PersistentManager必须包含一个Store元素以指定将会话数据存储至何处。这通常有两种实现方式：FileStore和JDBCStore。</li></ul></li></ul><hr><ul><li>9、Cluster<ul><li>专用于配置Tomcat集群的元素，可用于Engine和Host容器中。在用于Engine容器中时，Engine中的所有Host均支持集群功能。在Cluster元素中，需要直接定义一个Manager元素，这个Manager元素有一个其值为org.apache.catalina.ha.session.DeltaManager或org.apache.catalina.ha.session.BackupManager的className属性。同时，Cluster中还需要分别定义一个Channel和ClusterListener元素。</li></ul></li></ul><hr><ul><li>10、Channel<ul><li>用于Cluster中给集群中同一组中的节点定义通信”信道”。Channel中需要至少定义Membership、Receiver和Sender三个元素，此外还有一个可选元素Interceptor。</li></ul></li></ul><hr><ul><li>11、Membership<ul><li>用于Channel中配置同一通信信道上节点集群组中的成员情况，即监控加入当前集群组中的节点并在各节点间传递心跳信息，而且可以在接收不到某成员的心跳信息时将其从集群节点中移除。Tomcat6中Membership的实现是org.apache.catalina.tribes.membership.McastService。</li></ul></li></ul><hr><ul><li>12、Sender<ul><li>用于Channel中配置”复制信息”的发送器，实现发送需要同步给其它节点的数据至集群中的其它节点。发送器不需要属性的定义，但可以在其内部定义一个Transport元素。</li></ul></li></ul><hr><ul><li><p>13、Transport</p><ul><li><p>用于Sender内部，配置数据如何发送至集群中的其它节点。Tomcat有两种Transport的实现：</p></li><li><p>1) PooledMultiSender</p><ul><li>基于Java阻塞式IO，可以将一次将多个信息并发发送至其它节点，但一次只能传送给一个节点。</li></ul></li><li>2)PooledParallelSener<ul><li>基于Java非阻塞式IO，即NIO，可以一次发送多个信息至一个或多个节点。</li></ul></li></ul></li></ul><hr><ul><li>14、Receiver</li><li>用于Channel定义某节点如何从其它节点的Sender接收复制数据，Tomcat中实现的接收方式有两种BioReceiver和NioReceiver。</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tomcat基础与组件&quot;&gt;&lt;a href=&quot;#tomcat基础与组件&quot; class=&quot;headerlink&quot; title=&quot;tomcat基础与组件&quot;&gt;&lt;/a&gt;tomcat基础与组件&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/14/tomcat基础与部署/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://9527dz.top/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://9527dz.top/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat之java基础</title>
    <link href="https://9527dz.top/2019/01/14/tomcat%E4%B9%8Bjava%E5%9F%BA%E7%A1%80/"/>
    <id>https://9527dz.top/2019/01/14/tomcat之java基础/</id>
    <published>2019-01-14T08:55:23.392Z</published>
    <updated>2019-01-14T12:46:12.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat之java基础"><a href="#tomcat之java基础" class="headerlink" title="tomcat之java基础"></a>tomcat之java基础</h1><p><img src="/2019/01/14/tomcat之java基础/标题.png" alt=""><br><a id="more"></a></p><h2 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h2><h3 id="什么是java"><a href="#什么是java" class="headerlink" title="什么是java"></a>什么是java</h3><ul><li>java所涉及到的相关概念如下图。总体来说就是java语言、java API、jvm等构成。</li><li>jvm：java虚拟机，java的代码都是运行在jvm上，这是java语言跨平台的保证，针对不同的系统jvm也不同，这就实现了同一份代码，通过不同jvm的运行可以让对应的操作系统识别。</li><li>JRE（java running environment）：就是提供给java代码一个运行环境，java代码运行在jvm上，但是开发程序的时候往往除本身代码外会有引入的api，当程序运行时，jvm会加载相关的类，所以一个能保证代码能正常运行的环境是jvm+api（java se api）。</li><li>JDK（java development kit）：java开发环境，JDK=java语言+开发相关的API+JRE。开发环境除了要正常运行程序外（JRE环境），还需要进行开发相关的操作如打包、编译等这类工具。</li></ul><p><img src="/2019/01/14/tomcat之java基础/java.png" alt=""></p><h3 id="JAVA-API"><a href="#JAVA-API" class="headerlink" title="JAVA API"></a>JAVA API</h3><ul><li><p>平时API听多了，但是或许并不了解，这里做下简要解释。一个操作系统会提供很多API接口让程序员使用计算机的硬件资源，这是系统API，这里涉及到一个POSXI的概念，POSIX表示可移植操作系统接口（Portable Operating System Interface ，缩写为 POSIX ），POSIX标准定义了操作系统应该为应用程序提供的接口标准，为一个POSIX兼容的操作系统编写的程序，应该可以在任何其它的POSIX操作系统（即使是来自另一个厂商）上编译执行。因为遵循POSXI标准的操作系统，所定义的操作系统API都相同，所以开发程序的时候，使用的API在名称参数上都可以兼容，所以换一个系统，不需要重新编写代码。POSIX是针对API的标准，即针对API的函数名，返回值，参数类型等。POSIX兼容也就指定这些接口函数兼容，但是并不管API具体如何实现。</p></li><li><p>Java api：就是用java语言编写的功能代码，为访问主机上的本地资源，Java api调用了本地方法（操作系统API），直接通过内核请求调用相关内核函数。而后将功能相似的这些代码归类，组成java api类库。</p></li><li><p>以linux编程为例：我们编写linux用户程序的时候，是不能直接调用内核里面的函数的，内核里面的函数位于进程虚拟地址空间里面的内核空间，用户空间函数及函数库都处于进程虚拟地址空间里面的用户空间，用户空间调用内核空间的函数只有一个通道，这个通道就是系统调用指令，所以通常要调用glibc等库的接口函数（C语言的API），glibc也是用户空间的，但glibc自己实现了调用特殊的宏汇编系统调用指令进行cpu运行状态的切换，把进程从用户空间切换到内核空间。</p></li></ul><p><img src="/2019/01/14/tomcat之java基础/api.png" alt=""><br><img src="/2019/01/14/tomcat之java基础/a.png" alt=""></p><h3 id="JVM-内存结构"><a href="#JVM-内存结构" class="headerlink" title="JVM 内存结构"></a>JVM 内存结构</h3><p><img src="/2019/01/14/tomcat之java基础/jvm.png" alt=""></p><ul><li><p>java中通过多线程机制使得多个任务同时执行处理，所有的线程共享JVM内存区域main memory，而每个线程又单独的有自己的工作内存，当线程与内存区域进行交互时，数据从主存拷贝到工作内存，进而交由线程处理。</p></li><li><p>程序计数器（Program Counter Register）：由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器</p></li><li><p>Java 虚拟机栈（Java Virtual Machine Stacks）：每个放在被执行的时候都会同时创建一个栈帧用于存当前线程中局部基本类型的变量（java中定义的八种基本类型：boolean、char、byte、short、int、long、float、double），操作数栈，动态链接，方法出口等信息。虚拟内存栈就是我们经常讲的“栈”。其中局部变量表所需内存是在编译期完成分配。</p></li><li><p>方法区（Method Area）：与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。它有一个别名叫做Non-Heap（非堆），目的应该是与Java 堆区分开来。也称为持久代（Permanet Generation）。</p></li><li><p>Java 堆（Java Heap）：是Java 虚拟机所管理的内存中最大的一块。它是JVM用来存储对象实例以及数组值的区域，可以认为Java中所有通过new创建的对象的内存都在此分配。Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆”（Garbage Collected Heap）。</p></li><li><p>本地方法栈：与虚拟机栈类似，区别在于虚拟机栈为虚拟机执行Java方法服务，而本地方法栈为虚拟机使用Native方法（系统接口）服务。</p></li></ul><h3 id="WEB-CGI"><a href="#WEB-CGI" class="headerlink" title="WEB CGI"></a>WEB CGI</h3><ul><li><p>早期的web只能实现静态的页面，如果我们需要一种效果，就是我们向服务器请求时想让web服务器现场处理并将处理过的数据结果返回给我们，该如何实现呢。</p><ul><li>第一种方式：开发一个程序，接收用户请求，解析请求内容，查找相关数据进行计算处理，将处理结果封装成响应报文返回给用户。</li><li>第二种方式：既然已经存在web服务器了，那没必要重新开发程序来处理HTTP协议的东西，只需要开发另一种方式，让计算机能够将处理后的数据，发送给web服务器，服务器再返回给用户</li><li>于是CGI协议就产生了，web服务器接收到请求，可是它自身无法解决请求之中需要经过计算处理的内容，那样服务器就去找帮手，找个能处理这个内容的其他程序，这个其他程序通过一种方式（CGI）和服务器进行交流，处理好之后将结果送给web服务器。</li></ul></li><li><p>早期使用的web服务器扩展机制CGI，它允许用户调用web服务器上的CGI程序。CGI即是公共网关接口，大多数的CGI程序使用Perl来编写，也使用C、Pyhton或者PHP来编写。用户通过单机某个链接或者直接在浏览器的地址栏中输入Url来访问CGI程序，web服务接收到请求后，发现这个请求是给CGI程序的，于是就启动并运行这个CGI程序，对用户请求进行处理，CGI程序解析请求中的CGI数据，处理数据，并产生了一个响应（通常是HTML页面）。这个响应被返回给Web服务器，Web服务器包装这个响应（例如添加消息报头），以HTTP响应的形式发送给web浏览器</p></li></ul><p><img src="/2019/01/14/tomcat之java基础/web.png" alt=""></p><h2 id="什么是CGI"><a href="#什么是CGI" class="headerlink" title="什么是CGI"></a>什么是CGI</h2><ul><li>如上文所述，HTTP服务器是一个很简单的东西，并不负责动态页面的构建，只能转发静态页面，事物总是不断发展，网站也越来越复杂，所以出现动态技术。同时Apache也说，能支持perl，生成动态页面，这个支持perl，其实是Apache越位了，做了一件额外的事情。</li><li>既然HTTP Server自己不能做，外包给别人但是要与第三者做个约定，我给你什么，然后你给我什么，就是我把请求参数发给你，然后我接收你的处理结果给客户端，那这个约定就是Common Gatway Interface(CGI)</li><li>CGI全称是“通用网关接口”，是HTTP服务器与你的或其他机器上的程序进行“交谈”的一种工具，其程序必须运行在网络服务器上，是一种根据请求信息动态产生的响应内容的接口协议，CGI可以用任何一种语言编写，只要这种语言具有标准输入，输出和环境变量。如php，perl,tcl等。</li><li>通过CGI,HTTP sERVER可以将根据请求不同启动不同的外部程序，并将请求内容转发给该程序，在程序执行结束后，将执行结果作为回应返回给客户端。也就是说，对于每个请求，都要产生一个新的进程进行处理，因为每个进程都会占有很多服务器的资源和时间，这就导致服务器无法同时处理很多的并发请求，另外CGI程序都是与操作系统平台相关的，虽然在互联网爆发的初期，CGI为开发互联网应用做出了很大的贡献，但是随着技术的发展，开始逐渐衰落。所以，CGI的定义是：外部应用程序与HTTP服务器之间的接口协议。</li></ul><h2 id="Serlvet与Servlet容器"><a href="#Serlvet与Servlet容器" class="headerlink" title="Serlvet与Servlet容器"></a>Serlvet与Servlet容器</h2><ul><li>当java想实现CGI这样的功能时，因为java代码运行在jvm中，而jvm是没有办法直接跟web服务器进行交流的，所以Servlet就出现了。</li><li><p>当初在Apache Server 开发时CGI这样的功能时还未出现Serlet的概念，所以Apache不能内置支持Servlet。实际上，除了Apache，其他许多HTTP Server软件都不能直接支持Servlet。为了支持Servlet，通常要单独开发程序，这种程序一般称为服务小程序的容器（servlet container） ，有时也叫做服务器小程序引擎（servlet engine）。它的web服务器或者应用程序服务器的一部分，用于在发送的请求和响应之上提供的网络服务，解码基于MMIE的请求，格式化基于MIME的响应，它在Servlet的生命周期内包括和管理Servlet，是一个实时运行的外壳程序，运行时由wab服务器软件处理一般的请求，并把Servlet调用传递给“容器”来处理。</p></li><li><p>既然java作为编程语言，那么我们可以开发自己想要的功能，我们开发一个程序，使之能够与web服务器进行交互。所以java写了一个servlet类，这个类可以实例化为servlet程序，这个程序可以接受来自web服务器的请求并处理。那问题又来了， 如果多个web请求过来，仅仅一个Servlet程序是不够的，而且请求来了如何对java代码编译呢，于是乎就在外层增加一个管理功能的容器（这里纯属个人臆想），所以如果把Servlet类库完整实现了，那就是Servlet容器。这个容器的作用是什么呢？</p><ul><li><p>1、利用容器提供的方法，你能轻松的让servlet与web服务器对话，而不用自己建立serversocket、监听某个端口、创建流等等。容器知道自己与web服务器之间的协议，所以你的servlet不用担心web服务器（如Apache）和你自己的web代码之间的API，只需要考虑如何在servlet中实现业务逻辑（比如从数据库或者磁盘中获取数据并处理）。</p></li><li><p>2、多线程支持：容器会自动为它所接收的每个servlet请求创建一个新的java线程。针对用户的请求，如果servlet已经运行完相应的http服务方法，这个线程就会结束。</p></li><li><p>3、生命周期管理：servlet容器控制着servlet的生与死，它负责加载类、实例化和初始化servlet，调用servlet方法，以及使servlet实例被垃圾回收。</p></li></ul></li></ul><p><img src="/2019/01/14/tomcat之java基础/容器.png" alt=""></p><ul><li><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序（服务器响应）之间的中间层，位于Web 服务器内部的服务器端的Java应用程序，与传统的从命令行启动的Java应用程序不同，Servlet由Web服务器进行加载，该Web服务器必须包含支持Servlet的Java虚拟机。客户端发送请求至服务器；服务器启动并调用Servlet，Servlet根据客户端请求生成响应内容并将其传给服务器；服务器将响应返回客户端。       </p></li><li><p>servlet就是一个组件，需要部署到servlet容器才能运行。servlet容器为servlet提供网络相关的服务：即servlet容器为将请求中的相关数据解析出来，并且封装到请求对象(request)里面，这样一来，servlet就不需要理解http协议(只需要调用request对象的相关方法即可获取数)，另外，当servlet处理请求完毕，只需要将结果写到响应对象(response)里面,servlet容器会自动将response对象中的数据打包，发送给浏览器。</p></li></ul><h2 id="java-servlet-简单代码实现"><a href="#java-servlet-简单代码实现" class="headerlink" title="java servlet 简单代码实现"></a>java servlet 简单代码实现</h2><ul><li><p>Java Servlet与CGI (Common Gateway Interface 公共网关接口)的比较:</p></li><li><p>与传统的CGI和许多其他类似CGI的技术相比，Java Servlet具有更高的效率，更容易使用，功能更强大，具有更好的可移植性，更节省投资。在未来的技术发展过程中，Servlet有可能彻底取代CGI。</p></li><li><p>在传统的CGI中，每个请求都要启动一个新的进程，如果CGI程序本身的执行时间较短，启动进程所需要的开销很可能反而超过实际执行时间。而在Servlet中，每个请求由一个轻量级的Java线程处理(而不是重量级的操作系统进程)。</p></li><li><p>在传统CGI中，如果有N个并发的对同一CGI程序的请求，则该CGI程序的代码在内存中重复装载了N次；而对于Servlet，处理请求的是N个线程，只需要一份Servlet类代码。在性能优化方面，Servlet也比CGI有着更多的选择。</p></li></ul><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><ul><li>使用Servlet可以实现java程序和web服务器的交互，但是Servlet和CGI一样存在一个问题，Servlet程序在返回结果的时候必须连带HTML标签一起返回，所以负责格式显示的HTML代码和负责数据产生的Java代码混在一起了，程序员和页面编辑人员无法各自实现自己的工作，就要求java程序员必须要了解HTML显示效果。所以就有了JSP技术产生，有了JSP一个web请求的执行流程如下。</li></ul><p><img src="/2019/01/14/tomcat之java基础/jsp.png" alt=""></p><ul><li>其实JSP也是java的一个类库而已，要想写出的JSP代码能够被识别，这时候就需要一个JSP容器负责来解析。JSP代码最终会被编译成Servlet，然后再由Servlet处理请求。一个JSP页面包含了JSP规范的java代码（元素）和HTML标签（数据模板），元素则交给JSP容器处理，模板数据直接返回给客户端。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tomcat之java基础&quot;&gt;&lt;a href=&quot;#tomcat之java基础&quot; class=&quot;headerlink&quot; title=&quot;tomcat之java基础&quot;&gt;&lt;/a&gt;tomcat之java基础&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/14/tomcat之java基础/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tomcat" scheme="https://9527dz.top/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://9527dz.top/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>mariadb实现二进制安装</title>
    <link href="https://9527dz.top/2019/01/13/mariadb%E5%AE%9E%E7%8E%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/"/>
    <id>https://9527dz.top/2019/01/13/mariadb实现二进制安装/</id>
    <published>2019-01-13T12:22:48.489Z</published>
    <updated>2019-01-13T12:24:05.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mariadb实现二进制安装"><a href="#mariadb实现二进制安装" class="headerlink" title="mariadb实现二进制安装"></a>mariadb实现二进制安装</h1><p><img src="/2019/01/13/mariadb实现二进制安装/标题.png" alt=""><br><a id="more"></a></p><h2 id="通用二进制格式安装过程"><a href="#通用二进制格式安装过程" class="headerlink" title="通用二进制格式安装过程"></a>通用二进制格式安装过程</h2><p>范例：二进制格式安装的mysql版本为：mysql-10.2</p><pre><code class="bash">第一步：将二进制编译完的文件传进linux中，解压缩、创建软连接[root@centos7 ~]<span class="comment"># ls</span>mariadb-10.2.19-linux-x86_64.tar.gz [root@centos7 ~]<span class="comment"># tar xfv mariadb-10.2.19-linux-x86_64.tar.gz -C /usr/local</span>[root@centos7 ~]<span class="comment"># ls /usr/local</span>bin  games    lib    libexec                       sbin   srcetc  include  lib64  mariadb-10.2.19-linux-x86_64  share   创建软连接，方便下次升级（链接程序所在路径，因为源码编译时文档中指定程序路径放置在/usr/<span class="built_in">local</span>/mysql）[root@centos7 ~]<span class="comment"># ln -s /usr/local/mariadb-10.2.19-linux-x86_64/ /usr/local/mysql</span>[root@centos7 ~]<span class="comment"># ll /usr/local/mysql</span>lrwxrwxrwx. 1 root root 40 Nov 27 17:01 /usr/<span class="built_in">local</span>/mysql -&gt; /usr/<span class="built_in">local</span>/mariadb-10.2.19-linux-x86_64/第二步：修改程序目录的属性[root@centos7 ~]<span class="comment"># chown -R root:root /usr/local/mysql/</span>[root@centos7 ~]<span class="comment"># ll /usr/local/mysql/</span>total 180drwxrwxr-x.  2 root root  4096 Sep 23 10:13 bin  程序-rw-r--r--.  1 root root 17987 Nov 13 00:32 COPYING-rw-r--r--.  1 root root 86263 Nov 13 00:32 COPYING.thirdparty-rw-r--r--.  1 root root  2354 Nov 13 00:32 CREDITSdrwxrwxr-x.  3 root root    18 Nov 13 07:37 data-rw-r--r--.  1 root root  8245 Nov 13 00:32 EXCEPTIONS-CLIENTdrwxrwxr-x.  3 root root    19 Nov 13 07:37 include-rw-r--r--.  1 root root  8694 Nov 13 00:32 INSTALL-BINARYdrwxrwxr-x.  5 root root  4096 Sep 23 10:14 libdrwxrwxr-x.  4 root root    30 Nov 13 07:37 mandrwxrwxr-x. 11 root root  4096 Nov 13 07:37 mysql-test-rw-r--r--.  1 root root  2469 Nov 13 00:32 README.md-rw-r--r--.  1 root root 19510 Nov 13 00:32 README-wsrepdrwxrwxr-x.  2 root root    30 Nov 13 07:37 scriptsdrwxrwxr-x. 32 root root  4096 Nov 13 07:37 sharedrwxrwxr-x.  4 root root  4096 Nov 13 07:37 sql-benchdrwxrwxr-x.  3 root root   275 Nov 13 07:37 support-files第三步：创建程序用户[root@centos7 ~]<span class="comment"># useradd -r -s /sbin/nologin -d /data/mysql -c "mariadb user" mysql</span>[root@centos7 ~]<span class="comment"># getent passwd mysql</span>mysql:x:989:983:mariadb user:/data/mysql:/sbin/nologin第四步：创建数据库目录：存放数据库的数据[root@centos7 ~]<span class="comment"># ls -ld /data/mysql</span>ls: cannot access /data/mysql: No such file or directory[root@centos7 ~]<span class="comment"># mkdir /data/mysql</span>[root@centos7 ~]<span class="comment"># install -d /data/mysql -o root -g mysql</span>[root@centos7 ~]<span class="comment"># ls -ld /data/mysql</span>drwxr-xr-x. 2 root mysql 6 Nov 27 17:15 /data/mysql第四步：生成系统数据库[root@centos7 ~]<span class="comment"># ls /usr/local/mysql/</span>bin                 include         README-wsrepCOPYING             INSTALL-BINARY  scriptsCOPYING.thirdparty  lib             shareCREDITS             man             sql-benchdata                mysql-test      support-filesEXCEPTIONS-CLIENT   README.md  安装数据库的脚本：生成系统数据库  [root@centos7 ~]<span class="comment"># ls /usr/local/mysql/scripts/</span>   mysql_install_db[root@centos7 mysql]<span class="comment"># pwd</span>/usr/<span class="built_in">local</span>/mysql[root@centos7 mysql]<span class="comment"># scripts/mysql_install_db --user=mysql --datadir=/data/mysql</span>   确定是否生成了数据库   [root@centos7 mysql]<span class="comment"># ls /data/mysql/</span>    aria_log.00000001  ibdata1      mysql    aria_log_control   ib_logfile0  performance_schema    ib_buffer_pool     ib_logfile1  <span class="built_in">test</span>第五步：准备数据库的配置文件[root@centos7 ~]<span class="comment"># mkdir /etc/mysql</span>[root@centos7 ~]<span class="comment"># ls /usr/local/mysql/support-files/</span>binary-configure        my-medium.cnf        policymagic                   my-small.cnf         wsrep.cnfmy-huge.cnf             mysqld_multi.server  wsrep_notifymy-innodb-heavy-4G.cnf  mysql-log-rotatemy-large.cnf            mysql.server[root@centos7 ~]<span class="comment"># cd /usr/local/mysql/support-files/</span>[root@centos7 support-files]<span class="comment"># cp my-huge.cnf /etc/mysql/my.cnf</span>第六步：修改配置文件，根据自己定义的数据路径进行修改[root@centos7 ~]<span class="comment"># vim /etc/mysql/my.cnf </span>[mysqld]datadir=/data/mysqlport            = 3306socket          = /tmp/mysql.sock第七步：准备程序服务的启动脚本[root@centos7 ~]<span class="comment"># ls /usr/local/mysql/support-files/</span>mysql.server[root@centos7 ~]<span class="comment"># cp /usr/local/mysql/support-files/mysql.server  /etc/init.d/</span>  可以改名，方便启动[root@centos7 ~]<span class="comment"># cd /etc/init.d/</span>[root@centos7 init.d]<span class="comment"># ls</span><span class="built_in">functions</span>  mysql.server  netconsole  network  README[root@centos7 init.d]<span class="comment"># mv mysql.server mysqld</span>第八步：准备启动[root@centos7 ~]<span class="comment"># chkconfig --add mysqld</span>[root@centos7 ~]<span class="comment"># chkconfig --list</span>mysqld             0:off    1:off    2:on    3:on    4:on    5:on    6:offnetconsole         0:off    1:off    2:off    3:off    4:off    5:off    6:offnetwork            0:off    1:off    2:on    3:on    4:on    5:on    6:off启动[root@centos7 ~]<span class="comment"># service mysqld restart</span>Restarting mysqld (via systemctl):                         [  OK  ]准备PATH变量[root@centos7 ~]<span class="comment"># echo 'PATH=/usr/local/mysql/bin:$PATH' &gt; /etc/profile.d/mysql.sh</span>[root@centos7 ~]<span class="comment"># source /etc/profile.d/mysql.sh </span>连接测试[root@centos7 ~]<span class="comment"># mysql</span>Welcome to the MariaDB monitor.  Commands end with ; or \g.Your MariaDB connection id is 10Server version: 10.2.19-MariaDB-log MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.MariaDB [(none)]&gt; <span class="built_in">exit</span>查看数据库路径方法1MariaDB [(none)]&gt; show variables like <span class="string">'datadir'</span>    -&gt; ;+---------------+--------------+| Variable_name | Value        |+---------------+--------------+| datadir       | /data/mysql/ |+---------------+--------------+1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)方法2MariaDB [(none)]&gt; select @@datadir    -&gt; ;+--------------+| @@datadir    |+--------------+| /data/mysql/ |+--------------+1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)执行初始化安装脚本[root@centos7 ~]<span class="comment"># ls /usr/local/mysql/bin/</span> mysql_secure_installation[root@centos7 ~]<span class="comment"># mysql_secure_installation</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mariadb实现二进制安装&quot;&gt;&lt;a href=&quot;#mariadb实现二进制安装&quot; class=&quot;headerlink&quot; title=&quot;mariadb实现二进制安装&quot;&gt;&lt;/a&gt;mariadb实现二进制安装&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/13/mariadb实现二进制安装/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://9527dz.top/categories/mysql/"/>
    
    
      <category term="msql" scheme="https://9527dz.top/tags/msql/"/>
    
  </entry>
  
  <entry>
    <title>mairadb实现源码安装</title>
    <link href="https://9527dz.top/2019/01/13/mairadb%E5%AE%9E%E7%8E%B0%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"/>
    <id>https://9527dz.top/2019/01/13/mairadb实现源码安装/</id>
    <published>2019-01-13T12:19:59.545Z</published>
    <updated>2019-01-13T12:22:04.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mairadb实现源码安装"><a href="#mairadb实现源码安装" class="headerlink" title="mairadb实现源码安装"></a>mairadb实现源码安装</h1><p><img src="/2019/01/13/mairadb实现源码安装/标题.png" alt=""><br><a id="more"></a></p><h2 id="mairadb实现源码安装10-2-19"><a href="#mairadb实现源码安装10-2-19" class="headerlink" title="mairadb实现源码安装10.2.19"></a>mairadb实现源码安装10.2.19</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">第一步：安装相关的依赖包</span><br><span class="line">[root@centos7 yum.repos.d]<span class="comment"># yum install bison bison-devel  zlib-devel libcurl-devel libarchive-devel  boost-devel  gcc  gcc-c++  cmake ncurses-devel gnutls-devel libxml2-devel openssl-devel libevent-devel libaio-devel</span></span><br><span class="line"></span><br><span class="line">第二步：创建对应的账号              （数据库存放数据的路径）</span><br><span class="line">[root@centos7 yum.repos.d]<span class="comment"># useradd -r -s /sbin/nologin -d  /data/mysql/  mysql </span></span><br><span class="line"></span><br><span class="line">第三步：创建数据对应的数据库路径</span><br><span class="line">[root@centos7 ~]<span class="comment"># mkdir /data/mysql</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># chown mysql:mysql /data/mysql</span></span><br><span class="line"></span><br><span class="line">第四步：下载源码解压</span><br><span class="line">[root@centos7 ~]<span class="comment"># ls</span></span><br><span class="line">mariadb-10.2.19.tar.gz</span><br><span class="line">[root@centos7 ~]<span class="comment"># tar xvf mariadb-10.2.19.tar.gz </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ls</span></span><br><span class="line">mariadb-10.2.19        </span><br><span class="line">mariadb-10.2.19.tar.gz</span><br><span class="line">[root@centos7 ~]<span class="comment"># du -sh mariadb-10.2.19</span></span><br><span class="line">506Mmariadb-10.2.19</span><br><span class="line"></span><br><span class="line">第五步：cmack编译</span><br><span class="line">[root@centos7 ~]<span class="comment"># cd mariadb-10.2.19/</span></span><br><span class="line">[root@centos7 mariadb-10.2.19]<span class="comment"># cmake . \</span></span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/app/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/data/mysql/ \</span><br><span class="line">-DSYSCONFDIR=/etc \</span><br><span class="line">-DMYSQL_USER=mysql \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITHOUT_MROONGA_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_DEBUG=0 \</span><br><span class="line">-DWITH_READLINE=1 \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DWITH_ZLIB=system \</span><br><span class="line">-DWITH_LIBWRAP=0 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/data/mysql/mysql.sock \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 多线程编译</span><br><span class="line">[root@centos7 ~]<span class="comment"># make -j 4 &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line">[root@centos7 mariadb-10.2.19]<span class="comment"># ls /app/mysql/</span></span><br><span class="line">bin                 EXCEPTIONS-CLIENT  README.md</span><br><span class="line">COPYING             include            README-wsrep</span><br><span class="line">COPYING.thirdparty  INSTALL-BINARY     scripts</span><br><span class="line">CREDITS             lib                share</span><br><span class="line">data                man                sql-bench</span><br><span class="line">docs                mysql-test         support-files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第五步：生成数据库文件</span><br><span class="line">[root@centos7 mysql]<span class="comment"># scripts/mysql_install_db --user=mysql --datadir=/data/mysql</span></span><br><span class="line"></span><br><span class="line">[root@centos7 mysql]<span class="comment"># ls -l  /data/mysql/</span></span><br><span class="line">total 110620</span><br><span class="line">-rw-rw----. 1 mysql mysql    16384 Nov 27 21:02 aria_log.00000001</span><br><span class="line">-rw-rw----. 1 mysql mysql       52 Nov 27 21:02 aria_log_control</span><br><span class="line">-rw-rw----. 1 mysql mysql      938 Nov 27 21:02 ib_buffer_pool</span><br><span class="line">-rw-rw----. 1 mysql mysql 12582912 Nov 27 21:02 ibdata1</span><br><span class="line">-rw-rw----. 1 mysql mysql 50331648 Nov 27 21:02 ib_logfile0</span><br><span class="line">-rw-rw----. 1 mysql mysql 50331648 Nov 27 21:02 ib_logfile1</span><br><span class="line">drwx------. 2 mysql root      4096 Nov 27 21:02 mysql</span><br><span class="line">drwx------. 2 mysql mysql       20 Nov 27 21:02 performance_schema</span><br><span class="line">drwx------. 2 mysql root         6 Nov 27 21:02 <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">第六步：设置PATH变量</span><br><span class="line">[root@centos7 mysql]<span class="comment"># echo 'PATH=/app/mysql/bin:$PATH' &gt; /etc/profile.d/mysql.sh</span></span><br><span class="line">[root@centos7 mysql]<span class="comment"># source /etc/profile.d/mysql.sh </span></span><br><span class="line"></span><br><span class="line">第七步：拷贝模板配置文件</span><br><span class="line">[root@centos7 mysql]<span class="comment"># pwd</span></span><br><span class="line">/app/mysql</span><br><span class="line">[root@centos7 mysql]<span class="comment"># cp support-files/my-huge.cnf /etc/my.cnf</span></span><br><span class="line">cp: overwrite ‘/etc/my.cnf’? y</span><br><span class="line"></span><br><span class="line">第八步：设置启动脚本</span><br><span class="line">[root@centos7 ~]<span class="comment"># cd /app/mysql/support-files/</span></span><br><span class="line">[root@centos7 support-files]<span class="comment"># ls</span></span><br><span class="line">binary-configure        my-medium.cnf        policy</span><br><span class="line">magic                   my-small.cnf         wsrep.cnf</span><br><span class="line">my-huge.cnf             mysqld_multi.server  wsrep_notify</span><br><span class="line">my-innodb-heavy-4G.cnf  mysql-log-rotate</span><br><span class="line">my-large.cnf            mysql.server</span><br><span class="line">[root@centos7 support-files]<span class="comment"># cp mysql.server /etc/init.d/mysqld</span></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># chkconfig --add mysqld</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># chkconfig --list</span></span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use <span class="string">'systemctl list-unit-files'</span>.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      <span class="string">'systemctl list-dependencies [target]'</span>.</span><br><span class="line"></span><br><span class="line">mysqld         0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">[root@centos7 ~]<span class="comment"># service mysqld restart</span></span><br><span class="line">Restarting mysqld (via systemctl):                         [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># ss -ntl</span></span><br><span class="line">LISTEN      0      80     :::3306               :::*     </span><br><span class="line"></span><br><span class="line">安全脚本</span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mairadb实现源码安装&quot;&gt;&lt;a href=&quot;#mairadb实现源码安装&quot; class=&quot;headerlink&quot; title=&quot;mairadb实现源码安装&quot;&gt;&lt;/a&gt;mairadb实现源码安装&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/13/mairadb实现源码安装/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://9527dz.top/categories/mysql/"/>
    
    
      <category term="msql" scheme="https://9527dz.top/tags/msql/"/>
    
  </entry>
  
  <entry>
    <title>centos6安装mysql</title>
    <link href="https://9527dz.top/2019/01/13/centos6%E5%AE%89%E8%A3%85mysql/"/>
    <id>https://9527dz.top/2019/01/13/centos6安装mysql/</id>
    <published>2019-01-13T12:16:57.798Z</published>
    <updated>2019-01-13T12:18:30.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos6安装mysql"><a href="#centos6安装mysql" class="headerlink" title="centos6安装mysql"></a>centos6安装mysql</h1><p><img src="/2019/01/13/centos6安装mysql/标题.png" alt=""><br><a id="more"></a></p><h2 id="mysql安装-centos6"><a href="#mysql安装-centos6" class="headerlink" title="mysql安装 centos6"></a>mysql安装 centos6</h2><p><code>光盘自带的版本</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># yum info mysql</span></span><br><span class="line">Loaded plugins: fastestmirror, refresh-packagekit, security</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirror.bit.edu.cn</span><br><span class="line"> * extras: ftp.sjtu.edu.cn</span><br><span class="line"> * updates: mirrors.huaweicloud.com</span><br><span class="line">Available Packages</span><br><span class="line">Name        : mysql</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 5.1.73</span><br><span class="line">Release     : 8.el6_8</span><br><span class="line">Size        : 895 k</span><br><span class="line">Repo        : base</span><br><span class="line">Summary     : MySQL client programs and shared libraries</span><br><span class="line">URL         : http://www.mysql.com</span><br><span class="line">License     : GPLv2 with exceptions</span><br><span class="line">Description : MySQL is a multi-user, multi-threaded SQL database</span><br><span class="line">            : server. MySQL is a client/server implementation</span><br><span class="line">            : consisting of a server daemon (mysqld) and many different</span><br><span class="line">            : client programs and libraries. The base package contains</span><br><span class="line">            : the standard MySQL client programs and generic MySQL</span><br><span class="line">            : files.</span><br></pre></td></tr></table></figure></p><p><code>rpm 方式安装Mariadb：</code><br>mysql端口默认为tcp 3306<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">安装：</span><br><span class="line">[root@centos6 ~]<span class="comment"># yum install mysql-server -y</span></span><br><span class="line"></span><br><span class="line">查看安装包主要的文件列表：</span><br><span class="line">[root@centos6 ~]<span class="comment"># rpm -ql mysql-server</span></span><br><span class="line">/etc/rc.d/init.d/mysqld  服务启动脚本</span><br><span class="line">/usr/libexec/mysqld      服务器主程序</span><br><span class="line">/var/lib/mysql           存放数据库的数据的路径</span><br><span class="line">/var/<span class="built_in">log</span>/mysqld.log      日志文件</span><br><span class="line">/etc/my.cnf              服务的配置文件</span><br><span class="line">[root@centos6 ~]<span class="comment"># rpm -qf /etc/my.cnf （可以作为mysql数据库的服务器的配置文件，也可以作为客户端的配置文件）</span></span><br><span class="line">mysql-libs-5.1.73-8.el6_8.x86_64</span><br><span class="line"></span><br><span class="line">启动服务：</span><br><span class="line">[root@centos6 ~]<span class="comment"># service mysqld star</span></span><br><span class="line">Installing MySQL system tables...</span><br><span class="line">OK</span><br><span class="line">Filling <span class="built_in">help</span> tables...</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files/mysql.server to the right place <span class="keyword">for</span> your syste</span><br><span class="line"></span><br><span class="line">PLEASE REMEMBERTO  SET A PASSWORD FOR THE MySQL root USER !</span><br><span class="line">To <span class="keyword">do</span> so, start the server, <span class="keyword">then</span> issue the following <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">/usr/bin/mysqladmin -u root password <span class="string">'new-password'</span></span><br><span class="line">/usr/bin/mysqladmin -u root -h centos6.com password <span class="string">'new-pasd'</span></span><br><span class="line"></span><br><span class="line">Alternatively you can run:</span><br><span class="line">/usr/bin/mysql_secure_installation 初始化服务脚本，可以设置root口令，也可以更安全的数据库</span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> will also give you the option of removing the <span class="built_in">test</span></span><br><span class="line">databases and anonymous user created by default.  This is</span><br><span class="line">strongly recommended <span class="keyword">for</span> production servers.</span><br><span class="line"></span><br><span class="line">See the manual <span class="keyword">for</span> more instructions.</span><br><span class="line"></span><br><span class="line">You can start the MySQL daemon with:</span><br><span class="line"><span class="built_in">cd</span> /usr ; /usr/bin/mysqld_safe &amp;</span><br><span class="line"></span><br><span class="line">You can <span class="built_in">test</span> the MySQL daemon with mysql-test-run.pl</span><br><span class="line"><span class="built_in">cd</span> /usr/mysql-test ; perl mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">Please report any problems with the /usr/bin/mysqlbug script</span><br><span class="line"></span><br><span class="line">                                                           [ ok ]</span><br><span class="line">Starting mysqld:                                           [ ok ]</span><br><span class="line"></span><br><span class="line">  启动程序后，生成数据库数据相关的文件，未启动之前时空的：</span><br><span class="line">  [root@centos6 ~]<span class="comment"># ls /var/lib/mysql/</span></span><br><span class="line">  ibdata1  ib_logfile0  ib_logfile1  mysql  mysql.sock（数据库的套接字）  <span class="built_in">test</span></span><br><span class="line">  自己连接本机的mysql服务端，可以走套接字（数据库服务的用户与linux用户无关）</span><br><span class="line"></span><br><span class="line">使用客户端工具连接数据库</span><br><span class="line">[root@centos6 ~]<span class="comment"># which mysql</span></span><br><span class="line">/usr/bin/mysql</span><br><span class="line">[root@centos6 ~]<span class="comment"># rpm -qf /usr/bin/mysql</span></span><br><span class="line">mysql-5.1.73-8.el6_8.x86_64</span><br><span class="line"></span><br><span class="line">查看进程：</span><br><span class="line">[root@centos6 ~]<span class="comment"># ps aux</span></span><br><span class="line">root       4616  0.0  0.0 108228  1468 pts/1    S    21:05   0:00 /bin/sh /usr/bin/mysqld_safe --datadir=/var/lib/mysql --socket=/var/lib/mysql/mysql.sock --</span><br><span class="line">（数据库的主程序）mysql      4718  0.0  1.6 367520 30848 pts/1    Sl   21:05   0:00 /usr/libexec/mysqld --basedir=/usr --datadir=/var/lib/mysql --user=mysql --<span class="built_in">log</span>-error=/var/l</span><br><span class="line"></span><br><span class="line">mysql数据库是单进程多线程的数据库程序：</span><br><span class="line">[root@centos6 ~]<span class="comment"># pstree -p</span></span><br><span class="line">├─mysqld_safe(4616)───mysqld(4718)─┬─&#123;mysqld&#125;(4720)</span><br><span class="line">        │                                  ├─&#123;mysqld&#125;(4721)线程</span><br><span class="line">        │                                  ├─&#123;mysqld&#125;(4722)</span><br><span class="line">        │                                  ├─&#123;mysqld&#125;(4723)</span><br><span class="line">        │                                  ├─&#123;mysqld&#125;(4724)</span><br><span class="line">        │                                  ├─&#123;mysqld&#125;(4725)</span><br><span class="line">        │                                  ├─&#123;mysqld&#125;(4726)</span><br><span class="line">        │                                  ├─&#123;mysqld&#125;(4727)</span><br><span class="line">        │                                  └─&#123;mysqld&#125;(4728)</span><br><span class="line"></span><br><span class="line">查看数据库安装脚本</span><br><span class="line">[root@centos6 ~]<span class="comment"># rpm -q --scripts mysql-server</span></span><br><span class="line">preinstall scriptlet (using /bin/sh):</span><br><span class="line">/usr/sbin/groupadd -g 27 -o -r mysql &gt;/dev/null 2&gt;&amp;1 || :</span><br><span class="line">/usr/sbin/useradd -M -N -g mysql -o -r -d /var/lib/mysql -s /bin/bash \</span><br><span class="line">-c <span class="string">"MySQL Server"</span> -u 27 mysql &gt;/dev/null 2&gt;&amp;1 || :</span><br><span class="line">postinstall scriptlet (using /bin/sh):</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">    /sbin/chkconfig --add mysqld</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">/bin/chmod 0755 /var/lib/mysql</span><br><span class="line">/bin/touch /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">preuninstall scriptlet (using /bin/sh):</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> = 0 ]; <span class="keyword">then</span></span><br><span class="line">    /sbin/service mysqld stop &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    /sbin/chkconfig --del mysqld</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">postuninstall scriptlet (using /bin/sh):</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -ge 1 ]; <span class="keyword">then</span></span><br><span class="line">    /sbin/service mysqld condrestart &gt;/dev/null 2&gt;&amp;1 || :</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">连接数据库：（本地连接数据库是由本机的sock套接字连接）</span><br><span class="line">  使用mysql客户端工具连接：</span><br><span class="line">  mysql -u 数据库用户 -p （提示输入口令）-s 指定套接字路径 （默认为/var/lib/mysql/mysql.sock）</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> 帮助<span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span>清屏 to clear the current input statement.</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p><code>范例：下面为mysql数据库的客户端命令</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">下面为mysql数据库的客户端命令</span><br><span class="line">mysql&gt; <span class="built_in">help</span>      </span><br><span class="line">List of all MySQL commands:</span><br><span class="line">Note that all text commands must be first on line and end with <span class="string">';'</span></span><br><span class="line">?         (\?) Synonym <span class="keyword">for</span> `<span class="built_in">help</span><span class="string">'. </span></span><br><span class="line"><span class="string">clear     (\c) --清除当前输入的语句</span></span><br><span class="line"><span class="string">connect   (\r) --重新连接，通常用于被剔除或异常断开后重新连接，SQL*plus下也有这样一个connect命令</span></span><br><span class="line"><span class="string">delimiter (\d) --设置命令终止符，缺省为；，比如我们可以设定为/来表示语句结束 </span></span><br><span class="line"><span class="string">edit      (\e) --编辑缓冲区的上一条SQL语句到文件，缺省调用vi，文件会放在/tmp路径下</span></span><br><span class="line"><span class="string">ego       (\G) --控制结果显示为垂直显示</span></span><br><span class="line"><span class="string">exit      (\q) --退出mysql</span></span><br><span class="line"><span class="string">go        (\g) --发送命令到mysql服务</span></span><br><span class="line"><span class="string">help      (\h) Display this help.</span></span><br><span class="line"><span class="string">nopager   (\n) --关闭页设置，打印到标准输出  </span></span><br><span class="line"><span class="string">notee     (\t) --关闭输出到文件</span></span><br><span class="line"><span class="string">pager     (\P) --设置pager方式，可以设置为调用more,less等等，主要是用于分页显示</span></span><br><span class="line"><span class="string">print     (\p) Print current command.           </span></span><br><span class="line"><span class="string">prompt    (\R) --改变mysql的提示符 </span></span><br><span class="line"><span class="string">quit      (\q) Quit mysql.                             </span></span><br><span class="line"><span class="string">rehash    (\#) --自动补齐相关对象名字  </span></span><br><span class="line"><span class="string">source    (\.) --执行脚本文件</span></span><br><span class="line"><span class="string">status    (\s) --获得状态信息</span></span><br><span class="line"><span class="string">system    (\!) --执行系统命令   </span></span><br><span class="line"><span class="string">tee       (\T) --操作结果输出到文件 </span></span><br><span class="line"><span class="string">use       (\u) --切换数据库</span></span><br><span class="line"><span class="string">charset   (\C) --设置字符集</span></span><br><span class="line"><span class="string">warnings  (\W) --打印警告信息</span></span><br><span class="line"><span class="string">nowarning (\w) Don'</span>t show warnings after every statement.</span><br><span class="line">--上面的所有命令，扩号内的为快捷操作，即只需要输入“\”+ 字母即可执行</span><br><span class="line"></span><br><span class="line">查看mysql数据库的存储引擎：（服务器端命令）</span><br><span class="line">mysql&gt; show engines;</span><br><span class="line">+------------+---------+------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine     | Support | Comment                                                    | Transactions | XA   | Savepoints |</span><br><span class="line">+------------+---------+------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| MRG_MYISAM | YES     | Collection of identical MyISAM tables                      | NO           | NO   | NO         |</span><br><span class="line">| CSV        | YES     | CSV storage engine                                         | NO           | NO   | NO         |</span><br><span class="line">| MyISAM     | DEFAULT | Default engine as of MySQL 3.23 with great performance     | NO           | NO   | NO         |</span><br><span class="line">| InnoDB     | YES     | Supports transactions, row-level locking, and foreign keys | YES          | YES  | YES        |</span><br><span class="line">| MEMORY     | YES     | Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables  | NO           | NO   | NO         |</span><br><span class="line">+------------+---------+------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">从服务器中得到相关的状态信息</span><br><span class="line">mysql&gt; status</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.1.73, <span class="keyword">for</span> redhat-linux-gnu (x86_64) using readline 5.1</span><br><span class="line">Connection id:2</span><br><span class="line">Current database:</span><br><span class="line">Current user:root@localhost（当前连接身份）</span><br><span class="line">SSL:Not <span class="keyword">in</span> use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:<span class="string">''</span></span><br><span class="line">Using delimiter:;</span><br><span class="line">Server version:5.1.73 Source distribution</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:Localhost via UNIX socket</span><br><span class="line">Server characterset:latin1 （字符集）</span><br><span class="line">Db     characterset:latin1</span><br><span class="line">Client characterset:latin1</span><br><span class="line">Conn.  characterset:latin1</span><br><span class="line">UNIX socket:/var/lib/mysql/mysql.sock（套接字文件路径）</span><br><span class="line">Uptime:1 hour 1 min 14 sec</span><br><span class="line">Threads: 1（当前线程）  Questions: 8  Slow queries: 0  Opens: 15  Flush tables: 1  Open tables: 8  Queries per second avg: 0.2</span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">调用linux命令</span><br><span class="line">mysql&gt; system hostname</span><br><span class="line">centos6.com</span><br></pre></td></tr></table></figure></p><p><code>范例：mysql中的提示符</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">提示符：</span><br><span class="line">修改方式建议</span><br><span class="line">为了方便我们在平时的使用，有效的给我们提示信息。 </span><br><span class="line">建议参考Linux系统的提示符方式命名，即：用户名@主机名+当前所在位置。 </span><br><span class="line">在MySQL中可以通过参数来获取提示符信息，下面列表中列出了常用的四个信息，方便我们等下修改MySQL提示符。</span><br><span class="line"></span><br><span class="line">参数描述</span><br><span class="line">\D完整的日期</span><br><span class="line">\d当前数据库</span><br><span class="line">\h服务器名称</span><br><span class="line">\u当前用户</span><br><span class="line">mysql&gt; PROMPT \u@\h \d &gt;    </span><br><span class="line">root@localhost (none) &gt;CREATE DATABASE testdb;</span><br><span class="line">root@localhost (none) &gt;USE testdb;</span><br><span class="line">root@localhost testdb &gt;</span><br><span class="line"></span><br><span class="line">修改mysql数据库的提示符</span><br><span class="line">mysql&gt; prompt mysql--&gt;</span><br><span class="line">PROMPT <span class="built_in">set</span> to <span class="string">'mysql--&gt;'</span></span><br><span class="line">mysql--&gt;</span><br><span class="line"></span><br><span class="line">命令行进入mysql顺便修改提示符</span><br><span class="line">[root@centos6 ~]<span class="comment"># mysql --prompt="\u@\D"</span></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved</span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line">root@Tue Nov 27 22:53:50 2018</span><br><span class="line"></span><br><span class="line">修改mysql提示符，永久保存生效(centos6的服务端和客户端的配置文件在同一个文件中)</span><br><span class="line">  编辑数据库的配置文件，写入客户端配置</span><br><span class="line">[root@centos6 ~]<span class="comment"># vim /etc/my.cnf </span></span><br><span class="line">服务端配置</span><br><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line">服务端配置</span><br><span class="line">[mysqld_safe]</span><br><span class="line"><span class="built_in">log</span>-error=/var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">客户端配置，写入提示符信息</span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">'\u@\D-&gt;'</span></span><br><span class="line"></span><br><span class="line">保存，进入数据库，查看提示符，是否发生变化</span><br><span class="line">[root@centos6 ~]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 4</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line">root@Tue Nov 27 22:58:29 2018-&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;centos6安装mysql&quot;&gt;&lt;a href=&quot;#centos6安装mysql&quot; class=&quot;headerlink&quot; title=&quot;centos6安装mysql&quot;&gt;&lt;/a&gt;centos6安装mysql&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/13/centos6安装mysql/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://9527dz.top/categories/mysql/"/>
    
    
      <category term="msql" scheme="https://9527dz.top/tags/msql/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装mysql</title>
    <link href="https://9527dz.top/2019/01/13/centos7%E5%AE%89%E8%A3%85mysql/"/>
    <id>https://9527dz.top/2019/01/13/centos7安装mysql/</id>
    <published>2019-01-13T12:09:15.993Z</published>
    <updated>2019-01-13T12:16:20.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7安装mysql"><a href="#centos7安装mysql" class="headerlink" title="centos7安装mysql"></a>centos7安装mysql</h1><p><img src="/2019/01/13/centos7安装mysql/标题.png" alt=""><br><a id="more"></a></p><h2 id="mysql安装-centos7"><a href="#mysql安装-centos7" class="headerlink" title="mysql安装 centos7"></a>mysql安装 centos7</h2><p><code>光盘自带的版本</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># yum info mariadb</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line"> * extras: mirror.bit.edu.cn</span><br><span class="line"> * updates: mirror.bit.edu.cn</span><br><span class="line">Available Packages</span><br><span class="line">Name        : mariadb</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Epoch       : 1</span><br><span class="line">Version     : 5.5.60</span><br><span class="line">Release     : 1.el7_5</span><br><span class="line">Size        : 8.9 M</span><br><span class="line">Repo        : updates/7/x86_64</span><br><span class="line">Summary     : A community developed branch of MySQL</span><br><span class="line">URL         : http://mariadb.org</span><br><span class="line">License     : GPLv2 with exceptions and LGPLv2 and BSD</span><br><span class="line">Description : MariaDB is a community developed branch of MySQL.</span><br><span class="line">            : MariaDB is a multi-user, multi-threaded SQL database</span><br><span class="line">            : server. It is a client/server implementation consisting</span><br><span class="line">            : of a server daemon (mysqld) and many different client</span><br><span class="line">            : programs and libraries. The base package contains the</span><br><span class="line">            : standard MariaDB/MySQL client programs and generic MySQL</span><br><span class="line">            : files.</span><br></pre></td></tr></table></figure></p><p><code>rpm 方式安装Mariadb：</code><br>mysql端口默认为tcp 3306<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">安装：</span><br><span class="line">[root@centos7 ~]<span class="comment"># yum install mariadb-server -y</span></span><br><span class="line"></span><br><span class="line">查看安装包主要的文件列表：</span><br><span class="line">[root@centos7 ~]<span class="comment"># rpm -ql mariadb-server</span></span><br><span class="line">/etc/my.cnf.d/server.cnf   服务器端配置文件</span><br><span class="line">/usr/libexec/mysqld        服务器主程序</span><br><span class="line">/var/lib/mysql             存放数据库数据的路径</span><br><span class="line">/var/<span class="built_in">log</span>/mariadb/mariadb.log 日志</span><br><span class="line">/usr/lib/systemd/system/mariadb.service 服务启动脚本</span><br><span class="line"></span><br><span class="line">启动程序：</span><br><span class="line">    启动前查看数据库数据目录是为空</span><br><span class="line">    [root@centos7 ~]<span class="comment"># ls /var/lib/mysql/</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl restart mariadb</span></span><br><span class="line">root@centos7 ~]<span class="comment"># ls /var/lib/mysql/</span></span><br><span class="line">aria_log.00000001  ib_logfile0  mysql.sock</span><br><span class="line">aria_log_control   ib_logfile1  performance_schema</span><br><span class="line">ibdata1            mysql        <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">连接数据库：</span><br><span class="line">[root@centos7 ~]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 2</span><br><span class="line">Server version: 5.5.60-MariaDB MariaDB Server</span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line">MariaDB [(none)]&gt; </span><br><span class="line"></span><br><span class="line">查看搜索引擎：</span><br><span class="line">MariaDB [(none)]&gt; show engines;</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                                    | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| MEMORY             | YES     | Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables                  | NO           | NO   | NO         |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                                      | NO           | NO   | NO         |</span><br><span class="line">| CSV                | YES     | CSV storage engine                                                         | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears)             | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                                      | NO           | NO   | NO         |</span><br><span class="line">| InnoDB             | DEFAULT | Percona-XtraDB, Supports transactions, row-level locking, and foreign keys | YES          | YES  | YES        |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                                     | NO           | NO   | NO         |</span><br><span class="line">| FEDERATED          | YES     | FederatedX pluggable storage engine                                        | YES          | NO   | YES        |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                                         | NO           | NO   | NO         |</span><br><span class="line">| Aria               | YES     | Crash-safe tables with MyISAM heritage                                     | NO           | NO   | NO         |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">从服务器中得到相关的状态信息</span><br><span class="line">MariaDB [(none)]&gt; \s</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 15.1 Distrib 5.5.60-MariaDB, <span class="keyword">for</span> Linux (x86_64) using readline 5.1</span><br><span class="line"></span><br><span class="line">Connection id:2</span><br><span class="line">Current database:</span><br><span class="line">Current user:root@localhost</span><br><span class="line">SSL:Not <span class="keyword">in</span> use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:<span class="string">''</span></span><br><span class="line">Using delimiter:;</span><br><span class="line">Server:MariaDB</span><br><span class="line">Server version:5.5.60-MariaDB MariaDB Server</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:Localhost via UNIX socket</span><br><span class="line">Server characterset:latin1</span><br><span class="line">Db     characterset:latin1</span><br><span class="line">Client characterset:utf8</span><br><span class="line">Conn.  characterset:utf8</span><br><span class="line">UNIX socket:/var/lib/mysql/mysql.sock</span><br><span class="line">Uptime:9 min 44 sec</span><br><span class="line">Threads: 1  Questions: 6  Slow queries: 0  Opens: 0  Flush tables: 2  Open tables: 26  Queries per second avg: 0.010</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure></p><p><code>范例：centos7修改提示符：</code><br>（centos7mysql的配置文件和客户端是分开的）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cd /etc/my.cnf.d/</span></span><br><span class="line">[root@centos7 my.cnf.d]<span class="comment"># ls</span></span><br><span class="line">client.cnf  mysql-clients.cnf  server.cnf</span><br><span class="line"></span><br><span class="line">编辑客户端配置文件修改提示符</span><br><span class="line">[root@centos7 my.cnf.d]<span class="comment"># vim mysql-clients.cnf </span></span><br><span class="line">[mysql]</span><br><span class="line">prompt=<span class="string">'\u@\D-&gt;'</span></span><br><span class="line"></span><br><span class="line">查看是否修改成功</span><br><span class="line">[root@centos7 my.cnf.d]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 3</span><br><span class="line">Server version: 5.5.60-MariaDB MariaDB Server</span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and other</span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current inputatement.</span><br><span class="line">root@Tue Nov 27 15:04:34 2018-&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt;    none:表示当前正在处于哪个数据库里面</span><br><span class="line"></span><br><span class="line">查看数据库的数据路径目录形式的代表数据库，也是系统自带的数据库，所以可以理解为数据库存放数据 分为系统自身用的数据、用户创建生产的数据库</span><br><span class="line">[root@centos7 ~]<span class="comment"># ls /var/lib/mysql/</span></span><br><span class="line">aria_log.00000001  ib_logfile0  mysql.sock</span><br><span class="line">aria_log_control   ib_logfile1  performance_schema</span><br><span class="line">ibdata1            mysql        <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">查看当前有多少数据库即表</span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">查看当前数据库的版本信息（数据库中带有括号的命令，表现为系统自带的函数）</span><br><span class="line">MariaDB [(none)]&gt; select version();</span><br><span class="line">+----------------+</span><br><span class="line">| version()      |</span><br><span class="line">+----------------+</span><br><span class="line">| 5.5.60-MariaDB |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">查看当前的用户信息</span><br><span class="line">MariaDB [(none)]&gt; select user();</span><br><span class="line">+----------------+</span><br><span class="line">| user()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">查看用户当前所在哪个数据库中</span><br><span class="line">MariaDB [(none)]&gt; select database();</span><br><span class="line">+------------+</span><br><span class="line">| database() |</span><br><span class="line">+------------+</span><br><span class="line">| NULL       |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">使用use 客户端工具切换到指定的数据库，作为当前使用的数据库</span><br><span class="line">MariaDB [(none)]&gt; use mysql</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt; </span><br><span class="line"></span><br><span class="line">查看当前使用的数据库中的所有表列表</span><br><span class="line">MariaDB [mysql]&gt; show tables;</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+---------------------------+</span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| event                     |</span><br><span class="line">| func                      |</span><br><span class="line">| general_log               |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| host                      |</span><br><span class="line">| ndb_binlog_index          |</span><br><span class="line">| plugin                    |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| proxies_priv              |</span><br><span class="line">| servers                   |</span><br><span class="line">| slow_log                  |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+---------------------------+</span><br><span class="line">24 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">命令行指定显示指定数据库中的表列表(意义同上命令)</span><br><span class="line">MariaDB [mysql]&gt; show tables from mysql;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">上面的数据库中的表实际表现为</span><br><span class="line">[root@centos7 ~]<span class="comment"># ls /var/lib/mysql/mysql</span></span><br><span class="line"></span><br><span class="line">查看服务端命令的帮助</span><br><span class="line"><span class="built_in">help</span> + 服务端命令</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">`范例：安装完数据库，linux上的任何用户都可以使用mysql的root用户登陆，也可以使用任何一个用户连接登陆`</span><br><span class="line">```bash</span><br><span class="line">查看mysql存放的用户信息</span><br><span class="line">[root@centos7 ~]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 7</span><br><span class="line">Server version: 5.5.60-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use mysql</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt; show tables;</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+---------------------------+</span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| event                     |</span><br><span class="line">| func                      |</span><br><span class="line">| general_log               |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| host                      |</span><br><span class="line">| ndb_binlog_index          |</span><br><span class="line">| plugin                    |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| proxies_priv              |</span><br><span class="line">| servers                   |</span><br><span class="line">| slow_log                  |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+---------------------------+</span><br><span class="line">24 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt; select user,host,password from user;</span><br><span class="line">+------+-------------+----------+</span><br><span class="line">| user | host        | password |</span><br><span class="line">+------+-------------+----------+</span><br><span class="line">| root | localhost   |          |</span><br><span class="line">| root | centos7.com |          |</span><br><span class="line">| root | 127.0.0.1   |          |</span><br><span class="line">| root | ::1         |          |</span><br><span class="line">|      | localhost   |          |</span><br><span class="line">|      | centos7.com |          |</span><br><span class="line">+------+-------------+----------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">安全加固，执行初始化命令</span><br><span class="line">[root@centos7 ~]<span class="comment"># mysql_secure_installation </span></span><br><span class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none): （输入当前数据库中root用户的口令，若无口令，直接回车）</span><br><span class="line">Set root password? [Y/n] （是否设置root的口令）y</span><br><span class="line">New password:              口令</span><br><span class="line">Re-enter new password:     确定口令</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line">Remove anonymous users? [Y/n]  （是否删除匿名用户）y</span><br><span class="line">Disallow root login remotely? [Y/n] (是否禁用远程登陆)y</span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? [Y/n] (是否删除测试数据库)y</span><br><span class="line">Reload privilege tables now? [Y/n]  (是否重新加载特权表)y</span><br><span class="line">Thanks <span class="keyword">for</span> using MariaDB!</span><br><span class="line"></span><br><span class="line">再次连接mysql数据库</span><br><span class="line">[root@centos7 ~]<span class="comment"># mysql -u root -p</span></span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use mysql</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt; show tables;</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+---------------------------+</span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| event                     |</span><br><span class="line">| func                      |</span><br><span class="line">| general_log               |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| host                      |</span><br><span class="line">| ndb_binlog_index          |</span><br><span class="line">| plugin                    |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| proxies_priv              |</span><br><span class="line">| servers                   |</span><br><span class="line">| slow_log                  |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+---------------------------+</span><br><span class="line">24 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt; select user,host,password from user;</span><br><span class="line">+------+-----------+-------------------------------------------+</span><br><span class="line">| user | host      | password                                  |</span><br><span class="line">+------+-----------+-------------------------------------------+</span><br><span class="line">| root | localhost | *0E04F27C8B21547FD069D6E8519AE49B7ECE8E94 |</span><br><span class="line">| root | 127.0.0.1 | *0E04F27C8B21547FD069D6E8519AE49B7ECE8E94 |</span><br><span class="line">| root | ::1       | *0E04F27C8B21547FD069D6E8519AE49B7ECE8E94 |</span><br><span class="line">+------+-----------+-------------------------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">目前仅可以本机连接，使用centos6连接测试</span><br><span class="line">[root@centos6 ~]<span class="comment"># mysql -u root -p centos -h 172.18.135.88</span></span><br><span class="line">Enter password: </span><br><span class="line">连接不上</span><br></pre></td></tr></table></figure><p><code>范例：查看mysql账号数据库是否活跃</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mysqladmin -u root -p ping</span></span><br><span class="line">Enter password: </span><br><span class="line">mysqld is alive</span><br></pre></td></tr></table></figure></p><p><code>范例：停止此用户的数据库</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mysqladmin -u root -p shutdown</span></span><br><span class="line">Enter password: </span><br><span class="line"></span><br><span class="line">测试：连接不上去了</span><br><span class="line">[root@centos7 ~]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password: </span><br><span class="line">ERROR 2002 (HY000): Can<span class="string">'t connect to local MySQL server through socket '</span>/var/lib/mysql/mysql.sock<span class="string">' (2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">启动服务</span></span><br><span class="line"><span class="string">[root@centos7 ~]# systemctl restart mariadb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看连接信息</span></span><br><span class="line"><span class="string">[root@centos7 ~]# mysqladmin status</span></span><br><span class="line"><span class="string">Uptime: 23  Threads: 1  Questions: 3  Slow queries: 0  Opens: 0  Flush tables: 2  Open tables: 18  Queries per second avg: 0.130</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;centos7安装mysql&quot;&gt;&lt;a href=&quot;#centos7安装mysql&quot; class=&quot;headerlink&quot; title=&quot;centos7安装mysql&quot;&gt;&lt;/a&gt;centos7安装mysql&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/13/centos7安装mysql/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://9527dz.top/categories/mysql/"/>
    
    
      <category term="msql" scheme="https://9527dz.top/tags/msql/"/>
    
  </entry>
  
  <entry>
    <title>mysql安装和基本操作</title>
    <link href="https://9527dz.top/2019/01/13/mysql%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://9527dz.top/2019/01/13/mysql安装和基本操作/</id>
    <published>2019-01-13T12:03:01.939Z</published>
    <updated>2019-01-13T12:07:09.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql安装和基本操作"><a href="#mysql安装和基本操作" class="headerlink" title="mysql安装和基本操作"></a>mysql安装和基本操作</h1><p><img src="/2019/01/13/mysql安装和基本操作/标题.png" alt=""><br><a id="more"></a></p><h2 id="MYSQL的特性"><a href="#MYSQL的特性" class="headerlink" title="MYSQL的特性"></a>MYSQL的特性</h2><p><code>插件式存储引擎：也称为“表类型”，存储管理器有多种实现版本，功能和特 性可能均略有差别；用户可根据需要灵活选择,Mysql5.5.5开始&amp;innoDB引擎是 MYSQL默认引擎</code><br>&ensp;&ensp;MyISAM ==&gt; Aria<br>&ensp;&ensp;InnoDB ==&gt; XtraDB<br>单进程，多线程<br>诸多扩展和新特性<br>提供了较多测试组件<br>开源 </p><h2 id="安装MYSQL"><a href="#安装MYSQL" class="headerlink" title="安装MYSQL"></a>安装MYSQL</h2><p><code>Mariadb安装方式：</code><br>1、源代码：编译安装<br>2、二进制格式的程序包：展开至特定路径，并经过简单配置后即可使用<br>3、程序包管理器管理的程序包<br>CentOS 安装光盘<br>项目官方：  <a href="https://downloads.mariadb.org/mariadb/repositories/" target="_blank" rel="noopener">https://downloads.mariadb.org/mariadb/repositories/</a><br>国内镜像：  <a href="https://mirrors.tuna.tsinghua.edu.cn/mariadb/mariadbx.y.z/yum/centos/7/x86_64/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/mariadb/mariadbx.y.z/yum/centos/7/x86_64/</a>     </p><h2 id="RPM包安装MySQL"><a href="#RPM包安装MySQL" class="headerlink" title="RPM包安装MySQL"></a>RPM包安装MySQL</h2><p>RPM包安装<br>&ensp;&ensp;CentOS 7：安装光盘直接提供<br>&ensp;&ensp;&ensp;&ensp;mariadb-server   服务器包<br>&ensp;&ensp;&ensp;&ensp;mariadb       客户端工具包<br>&ensp;&ensp;CentOS 6<br>提高安全性<br>&ensp;&ensp;<code>mysql_secure_installation</code><br>&ensp;&ensp;&ensp;&ensp;<code>设置数据库管理员root口令</code><br>&ensp;&ensp;&ensp;&ensp;<code>禁止root远程登录</code><br>&ensp;&ensp;&ensp;&ensp;<code>删除anonymous用户帐号</code><br>&ensp;&ensp;&ensp;&ensp;<code>删除test数据库</code>  </p><h2 id="MariaDB程序"><a href="#MariaDB程序" class="headerlink" title="MariaDB程序"></a>MariaDB程序</h2><p>客户端程序：<br>&ensp;&ensp;mysql: 交互式的CLI工具<br>&ensp;&ensp;mysqldump：备份工具，基于mysql协议向mysqld发起查询请求，并将查得的所<br>有数据转换成insert等写操作语句保存文本文件中<br>&ensp;&ensp;mysqladmin：基于mysql协议管理mysqld<br>&ensp;&ensp;mysqlimport：数据导入工具<br>MyISAM存储引擎的管理工具：<br>&ensp;&ensp;myisamchk：检查MyISAM库<br>&ensp;&ensp;myisampack：打包MyISAM表，只读<br>服务器端程序<br>&ensp;&ensp;mysqld_safe<br>&ensp;&ensp;mysqld<br>&ensp;&ensp;mysqld_multi    多实例（一个程序在系统上运行多次，多个进程，缺点仅能实现单一版本的多实例） ，示例：mysqld_multi  –example   </p><h2 id="用户账号"><a href="#用户账号" class="headerlink" title="用户账号"></a>用户账号</h2><p><code>mysql用户账号由两部分组成：</code><br>&ensp;&ensp;‘USERNAME‘@’HOST‘<br>说明：<br>&ensp;&ensp;HOST限制此用户可通过哪些远程主机连接mysql服务器<br>&ensp;&ensp;支持使用通配符：<br>&ensp;&ensp;&ensp;&ensp;% 匹配任意长度的任意字符<br>&ensp;&ensp;&ensp;&ensp;172.16.0.0/255.255.0.0 或 172.16.%.%<br>&ensp;&ensp;&ensp;&ensp;_  匹配任意单个字符  </p><h2 id="Mysql-客户端"><a href="#Mysql-客户端" class="headerlink" title="Mysql 客户端"></a>Mysql 客户端</h2><p>mysql使用模式：<br>交互式模式：<br>&ensp;&ensp;可运行命令有两类：<br>&ensp;&ensp;客户端命令：<br>&ensp;&ensp;&ensp;&ensp;\h, help<br>&ensp;&ensp;&ensp;&ensp;\u，use<br>&ensp;&ensp;&ensp;&ensp;\s，status<br>&ensp;&ensp;&ensp;&ensp;!，system<br>&ensp;&ensp;服务器端命令：<br>&ensp;&ensp;&ensp;&ensp;SQL语句， 需要语句结束符；<br>脚本模式：<br>&ensp;&ensp;mysql –uUSERNAME -pPASSWORD &lt; /path/somefile.sql<br>&ensp;&ensp;mysql&gt; source /path/from/somefile.sql   </p><h2 id="Mysql客户端"><a href="#Mysql客户端" class="headerlink" title="Mysql客户端"></a>Mysql客户端</h2><p>mysql客户端可用选项：<br>-A, –no-auto-rehash 禁止补全<br>-u, –user=  用户名,默认为root<br>-h, –host=  服务器主机,默认为localhost<br>-p, –passowrd= 用户密码,建议使用-p,默认为空密码<br>-P, –port=  服务器端口<br>-S, –socket= 指定连接socket文件路径<br>-D, –database=  指定默认数据库<br>-C, –compress 启用压缩<br>-e   “SQL“ 执行SQL命令<br>-V, –version 显示版本<br>-v  –verbose 显示详细信息<br>–print-defaults   获取程序默认使用的配置    </p><h2 id="socket地址"><a href="#socket地址" class="headerlink" title="socket地址"></a>socket地址</h2><p>服务器监听的两种socket地址：<br>&ensp;&ensp;ip socket: 监听在tcp的3306端口，支持远程通信<br>&ensp;&ensp;unix sock: 监听在sock文件上，仅支持本机通信<br>&ensp;&ensp;&ensp;&ensp;如：/var/lib/mysql/mysql.sock)<br>说明：host为localhost,127.0.0.1时自动使用unix sock   </p><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><p>运行mysql命令：默认空密码登录<br>&ensp;&ensp;mysql&gt;use mysql<br>&ensp;&ensp;mysql&gt;select user();查看当前用户<br>&ensp;&ensp;mysql&gt;SELECT User,Host,Password FROM user;<br>登录系统：mysql  –uroot  –p<br>客户端命令：本地执行<br>&ensp;&ensp;mysql&gt; help<br>&ensp;&ensp;每个命令都完整形式和简写格式<br>&ensp;&ensp;mysql&gt; status 或 \s<br>服务端命令：通过mysql协议发往服务器执行并取回结果  每个命令末尾都必须使用命令结束符号，默认为分号<br>&ensp;&ensp;示例：SELECT VERSION();    </p><h2 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h2><p>服务器端(mysqld)：工作特性有多种配置方式<br>1、命令行选项：<br>2、配置文件：类ini格式<br>集中式的配置，能够为mysql的各应用程序提供配置信息<br>&ensp;&ensp;[mysqld]<br>&ensp;&ensp;[mysqld_safe]<br>&ensp;&ensp;[mysqld_multi]<br>&ensp;&ensp;[mysql]<br>&ensp;&ensp;[mysqldump]<br>&ensp;&ensp;[server]<br>&ensp;&ensp;[client]<br>格式：parameter = value<br>说明：_和- 相同<br>&ensp;&ensp;1，ON，TRUE意义相同， 0，OFF，FALSE意义相同   </p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>配置文件：</code><br><code>后面覆盖前面的配置文件，顺序如下：下面的优先级高</code><br>/etc/my.cnf        &ensp;&ensp;      Global选项<br>/etc/mysql/my.cnf   &ensp;&ensp;     Global选项<br>SYSCONFDIR/my.cnf   &ensp;&ensp;     Global选项<br>$MYSQL_HOME/my.cnf   &ensp;&ensp;    Server-specific 选项<br>–defaults-extra-file= path<br>~/.my.cnf           &ensp;&ensp;     User-specific 选项   </p><h2 id="MairaDB配置"><a href="#MairaDB配置" class="headerlink" title="MairaDB配置"></a>MairaDB配置</h2><p>侦听3306/tcp端口可以在绑定有一个或全部接口IP上<br>vim /etc/my.cnf<br>[mysqld]<br>skip-networking=1<br>关闭网络连接，只侦听本地客户端， 所有和服务器的交互都通过一个socket实 现，socket的配置存放在/var/lib/mysql/mysql.sock） 可在/etc/my.cnf修改   </p><h2 id="通用二进制格式安装过程"><a href="#通用二进制格式安装过程" class="headerlink" title="通用二进制格式安装过程"></a>通用二进制格式安装过程</h2><p>二进制格式安装过程<br>(1) 准备用户<br>&ensp;&ensp;groupadd -r -g 306 mysql<br>&ensp;&ensp;useradd -r -g 306 -u 306 –d /data/mysql  mysql<br>(2) 准备数据目录，建议使用逻辑卷<br>&ensp;&ensp;mkdir /data/mysql<br>&ensp;&ensp;chown mysql:mysql  /data/mysql<br>(3) 准备二进制程序<br>&ensp;&ensp;tar xf mariadb-VERSION-linux-x86_64.tar.gz -C   /usr/local<br>&ensp;&ensp;cd /usr/local<br>&ensp;&ensp;ln -sv mariadb-VERSION mysql<br>&ensp;&ensp;chown -R root:mysql /usr/local/mysql/<br>(4) 准备配置文件<br>&ensp;&ensp;mkdir /etc/mysql/<br>&ensp;&ensp;cp support-files/my-large.cnf /etc/mysql/my.cnf<br>&ensp;&ensp;[mysqld]中添加三个选项：<br>&ensp;&ensp;datadir = /data/mysql<br>&ensp;&ensp;innodb_file_per_table = on<br>&ensp;&ensp;skip_name_resolve = on    禁止主机名解析，建议使用<br>(5)创建数据库文件<br>&ensp;&ensp;cd /usr/local/mysql/<br>&ensp;&ensp;./scripts/mysql_install_db –datadir=/data/mysql –user=mysql<br>(6)准备服务脚本，并启动服务<br>&ensp;&ensp;cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld<br>&ensp;&ensp;chkconfig –add mysqld<br>service mysqld start<br>(7)PATH路径<br>&ensp;&ensp;echo ‘PATH=/user/local/mysql/bin:$PATH’ &gt;   /etc/profile.d/mysql<br>(8)安全初始化<br> &ensp;&ensp;/user/local/mysql/bin/mysql_secure_installation  </p><h2 id="源码编译安装mariadb"><a href="#源码编译安装mariadb" class="headerlink" title="源码编译安装mariadb"></a>源码编译安装mariadb</h2><p>安装包<br>&ensp;&ensp;yum install bison bison-devel  zlib-devel libcurl-devel libarchive-devel  boost-devel  gcc  gcc-c++  cmake ncurses-devel gnutls-devel libxml2-devel openssl-devel libevent-devel libaio-devel<br>做准备用户和数据目录<br>&ensp;&ensp;useradd –r –s /sbin/nologin –d  /data/mysql/  mysql<br>&ensp;&ensp;mkdir   /data/mysql<br>&ensp;&ensp;chown  mysql.mysql  /data/mysql<br>&ensp;&ensp;tar xvf   mariadb-10.2.18.tar.gz<br>cmake 编译安装<br>&ensp;&ensp;cmake的重要特性之一是其独立于源码(out-of-source)的编译功能，即编译工作可以在 另一个指定的目录中而非源码目录中进行，这可以保证源码目录不受任何一次编译的影 响，因此在同一个源码树上可以进行多次不同的编译，如针对于不同平台编译  编译选项:<a href="https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html</a>  </p><p>cd mariadb-10.2.18/<br>cmake . \<br>-DCMAKE_INSTALL_PREFIX=/app/mysql \<br>-DMYSQL_DATADIR=/data/mysql/ \<br>-DSYSCONFDIR=/etc \<br>-DMYSQL_USER=mysql \<br>-DWITH_INNOBASE_STORAGE_ENGINE=1 \<br>-DWITH_ARCHIVE_STORAGE_ENGINE=1 \<br>-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \<br>-DWITH_PARTITION_STORAGE_ENGINE=1  \<br>-DWITHOUT_MROONGA_STORAGE_ENGINE=1 \<br>-DWITH_DEBUG=0 \<br>-DWITH_READLINE=1 \<br>-DWITH_SSL=system \<br>-DWITH_ZLIB=system \<br>-DWITH_LIBWRAP=0 \<br>-DENABLED_LOCAL_INFILE=1  \<br>-DMYSQL_UNIX_ADDR=/data/mysql/mysql.sock \<br>-DDEFAULT_CHARSET=utf8 \<br>-DDEFAULT_COLLATION=utf8_general_ci make &amp;&amp; make install<br>提示：如果出错，执行rm -f CMakeCache.txt    </p><p>准备环境变量<br>echo ‘PATH=/app/mysql/bin:$PATH’ &gt; /etc/profile.d/mysql.sh<br>.     /etc/profile.d/mysql.sh<br>生成数据库文件<br>cd   /app/mysql/<br>scripts/mysql_install_db –datadir=/data/mysql/ –user=mysql<br>准备配置文件<br>cp  /app/mysql/support-files/my-huge.cnf   /etc/my.cnf<br>准备启动脚本<br>cp /app/mysql/support-files/mysql.server  /etc/init.d/mysqld<br>启动服务<br>chkconfig –add mysqld ;service mysqld start     </p><h2 id="关系型数据库的常见组件"><a href="#关系型数据库的常见组件" class="headerlink" title="关系型数据库的常见组件"></a>关系型数据库的常见组件</h2><p>数据库：database<br>表：table  行：row  列：column<br>索引：index<br>视图：view<br>用户：user<br>权限：privilege<br>存储过程：procedure<br>存储函数：function<br>触发器：trigger<br>事件调度器：event scheduler，任务计划   </p><h2 id="SQL语言的兴起与语法标准"><a href="#SQL语言的兴起与语法标准" class="headerlink" title="SQL语言的兴起与语法标准"></a>SQL语言的兴起与语法标准</h2><p>20世纪70年代，IBM开发出SQL，用于DB2<br>1981年，IBM推出SQL/DS数据库<br>业内标准微软和Sybase的T-SQL，Oracle的PL/SQL<br>SQL作为关系型数据库所使用的标准语言，最初是基于IBM的实现在1986年被 批准的。1987年，“国际标准化组织(ISO)”把ANSI(美国国家标准化组织) SQL作为国际标准。<br>SQL：ANSI SQL<br>SQL-1986, SQL-1989, SQL-1992, SQL-1999, SQL-2003 , SQL-2008  SQL-2011   </p><h2 id="SQL语言规范"><a href="#SQL语言规范" class="headerlink" title="SQL语言规范"></a>SQL语言规范</h2><p>在数据库系统中，SQL语句不区分大小写(建议用大写)<br>SQL语句可单行或多行书写，以“;”结尾<br>关键词不能跨多行或简写<br>用空格和缩进来提高语句的可读性<br>子句通常位于独立行，便于编辑，提高可读性<br>注释：<br>&ensp;&ensp;SQL标准：<br>&ensp;&ensp;/<em>注释内容</em>/   多行注释<br>&ensp;&ensp;– 注释内容    单行注释，注意有空格<br>&ensp;&ensp;MySQL注释：  #     </p><h2 id="数据库对象"><a href="#数据库对象" class="headerlink" title="数据库对象"></a>数据库对象</h2><p>数据库的组件(对象)：<br>&ensp;&ensp;数据库、表、索引、视图、用户、存储过程、函数、触发器、事件调度器等<br>命名规则：<br>&ensp;&ensp;必须以字母开头<br>&ensp;&ensp;可包括数字和三个特殊字符（# _ $）<br>&ensp;&ensp;不要使用MySQL的保留字<br>&ensp;&ensp;同一database(Schema)下的对象不能同名   </p><h2 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h2><p>SQL语句分类：<br>DDL: Data Defination Language 数据定义语言<br>&ensp;&ensp;CREATE，DROP，ALTER<br>DML: Data Manipulation Language 数据操纵语言<br>&ensp;&ensp;INSERT，DELETE，UPDATE<br>DCL：Data Control Language 数据控制语言<br>&ensp;&ensp;GRANT，REVOKE，COMMIT，ROLLBACK<br>DQL：Data Query Language 数据查询语言<br>&ensp;&ensp;SELECT </p><h2 id="SQL语句构成"><a href="#SQL语句构成" class="headerlink" title="SQL语句构成"></a>SQL语句构成</h2><p>SQL语句构成：<br>&ensp;&ensp;Keyword组成clause<br>&ensp;&ensp;多条clause组成语句<br>示例：<br>SELECT *                   SELECT子句<br>FROM products              FROM子句<br>WHERE price&gt;400            WHERE子句<br>说明：一组SQL语句，由三个子句构成，SELECT,FROM和WHERE是关键字     </p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a><code>数据库操作</code></h2><p>创建数据库：<br>&ensp;&ensp;CREATE DATABASE|SCHEMA [IF NOT EXISTS] ‘DB_NAME’;<br>&ensp;&ensp;CHARACTER SET ‘character set name’<br>&ensp;&ensp;COLLATE ‘collate name’<br>删除数据库<br>&ensp;&ensp;DROP DATABASE|SCHEMA [IF EXISTS] ‘DB_NAME’;<br>查看支持所有字符集：<br>&ensp;&ensp;SHOW CHARACTER SET;<br>查看支持所有排序规则：<br>&ensp;&ensp;SHOW COLLATION;<br>获取命令使用帮助：<br>&ensp;&ensp;mysql&gt; HELP KEYWORD;<br>查看数据库列表：<br>&ensp;&ensp;mysql&gt; SHOW DATABASES;  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mysql安装和基本操作&quot;&gt;&lt;a href=&quot;#mysql安装和基本操作&quot; class=&quot;headerlink&quot; title=&quot;mysql安装和基本操作&quot;&gt;&lt;/a&gt;mysql安装和基本操作&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/13/mysql安装和基本操作/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://9527dz.top/categories/mysql/"/>
    
    
      <category term="msql" scheme="https://9527dz.top/tags/msql/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据库基础原理</title>
    <link href="https://9527dz.top/2019/01/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>https://9527dz.top/2019/01/13/数据库基础原理/</id>
    <published>2019-01-13T11:52:49.592Z</published>
    <updated>2019-01-13T11:57:15.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql数据库基础原理"><a href="#mysql数据库基础原理" class="headerlink" title="mysql数据库基础原理"></a>mysql数据库基础原理</h1><p><img src="/2019/01/13/数据库基础原理/标题.png" alt=""><br><a id="more"></a></p><h2 id="MYSQL数据库"><a href="#MYSQL数据库" class="headerlink" title="MYSQL数据库"></a>MYSQL数据库</h2><p>关系型数据库基础<br>安装MySQL<br>管理数据库和表<br>用户和权限管理<br>函数，存储过程和触发器<br>MySQL架构<br>存储引擎<br>服务器选项，系统和状态变量<br>优化查询和索引管理<br>锁和事务管理<br>日志管理<br>备份还原<br>MySQL集群  </p><h2 id="数据的时代"><a href="#数据的时代" class="headerlink" title="数据的时代"></a>数据的时代</h2><p>涉及的数据量大<br>数据不随程序的结束而消失<br>数据被多个应用程序共享<br>大数据   </p><h2 id="数据库的发展史"><a href="#数据库的发展史" class="headerlink" title="数据库的发展史"></a>数据库的发展史</h2><p>萌芽阶段：文件系统        使用磁盘文件来存储数据<br>初级阶段：第一代数据库    出现了网状模型、层次模型的数据库<br>中级阶段：第二代数据库    关系型数据库和结构化查询语言<br>高级阶段：新一代数据库    “关系-对象”型数据库   </p><h2 id="文件管理系统的缺点"><a href="#文件管理系统的缺点" class="headerlink" title="文件管理系统的缺点"></a>文件管理系统的缺点</h2><p>编写应用程序不方便<br>数据冗余不可避免<br>应用程序依赖性<br>不支持对文件的并发访问<br>数据间联系弱<br>难以按用户视图表示数据<br>无安全控制功能   </p><h2 id="数据库管理系统的优点"><a href="#数据库管理系统的优点" class="headerlink" title="数据库管理系统的优点"></a>数据库管理系统的优点</h2><p>相互关联的数据的集合<br>较少的数据冗余<br>程序与数据相互独立<br>保证数据的安全、可靠<br>最大限度地保证数据的正确性<br>数据可以并发使用并能同时保证一致性   </p><h2 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h2><p>数据库是数据的汇集，它以一定的组织形式存于存储介质上<br>DBMS是管理数据库的系统软件，它实现数据库系统的各种功能。是数据库系 统的核心<br>DBA：负责数据库的规划、设计、协调、维护和管理等工作<br>应用程序指以数据库为基础的应用程序   </p><h2 id="数据库管理系统的基本功能"><a href="#数据库管理系统的基本功能" class="headerlink" title="数据库管理系统的基本功能"></a>数据库管理系统的基本功能</h2><p>数据定义<br>数据处理<br>数据安全<br>数据备份 </p><h2 id="网状数据库"><a href="#网状数据库" class="headerlink" title="网状数据库"></a>网状数据库</h2><p>最早出现的是网状DBMS，1964年通用电气公司的Charles Bachman成功地开发出世界上第一 个网状IDS，也是第一个数据库管理系统，IDS 具有数据模式和日志的特征，只能在GE主机运行   </p><h2 id="层次数据库"><a href="#层次数据库" class="headerlink" title="层次数据库"></a>层次数据库</h2><p><img src="/2019/01/13/数据库基础原理/图.png" alt=""></p><h2 id="数据库系统的架构"><a href="#数据库系统的架构" class="headerlink" title="数据库系统的架构"></a>数据库系统的架构</h2><p>单机架构<br>大型主机/终端架构<br>主从式架构（C/S）<br>分布式架构   </p><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>关系型数据库：使用的是sql语言，结构化的查询语言  ，内部机制特性ACID特性：保证数据库的安全稳定，影响性能<br>NOSQL：redis:高性能，高并发</p><p><code>关系 ：</code>关系就是二维表，其中：表中的行、列次序并不重要<br><code>行row：</code>表中的每一行，又称为一条记录<br><code>列column：</code>表中的每一列，称为属性，字段<br><code>主键（Primary key）：</code>用于惟一确定一个记录的字段<br><code>域domain：</code>属性的取值范围，如，性别只能是‘男’和‘女’两个值    </p><p>一个服务器可以搭建多个DBMS<br>DBMS:多个数据库  ，推荐存放一个数据库，防止访问量过大<br>库：同一个项目的相关系数据，多个表<br>表：一个表多个字段和记录  </p><h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><p>RDBMS：<br>&ensp;&ensp;MySQL: MySQL, MariaDB, Percona Server<br>&ensp;&ensp;PostgreSQL: 简称为pgsql，EnterpriseDB  &ensp;&ensp;Oracle    MSSQL<br>&ensp;&ensp;DB2<br>数据库排名：   <a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">https://db-engines.com/en/ranking</a>  </p><h2 id="实体-联系模型E-R"><a href="#实体-联系模型E-R" class="headerlink" title="实体-联系模型E-R"></a>实体-联系模型E-R</h2><p>实体Entity：客观存在并可以相互区分的客观事物或抽象事件称为实体<br>&ensp;&ensp;在E-R图中用矩形框表示实体，把实体名写在框内<br>属性：实体所具有的特征或性质<br>联系：联系是数据之间的关联集合，是客观存在的应用语义链<br>&ensp;&ensp;实体内部的联系：指组成实体的各属性之间的联系。如职工实体中，职工号和 部门经理号之间有一种关联关系<br>&ensp;&ensp;实体之间的联系：指不同实体之间联系。例：学生选课实体和学生基本信息实 体之间<br>&ensp;&ensp;实体之间的联系用菱形框表示   </p><h2 id="联系类型"><a href="#联系类型" class="headerlink" title="联系类型"></a>联系类型</h2><p>联系的类型<br>&ensp;&ensp;一对一联系(1:1)<br>&ensp;&ensp;一对多联系(1:n)<br>&ensp;&ensp;多对多联系(m:n)<br>数据的操作：<br>&ensp;&ensp;数据提取：在数据集合中提取感兴趣的内容。SELECT<br>&ensp;&ensp;数据更新：变更数据库中的数据。INSERT、DELETE、UPDATE<br>数据的约束条件 ：是一组完整性规则的集合<br>&ensp;&ensp;实体（行）完整性 Entity integrity<br>&ensp;&ensp;域（列）完整性 Domain Integrity<br>&ensp;&ensp;参考完整性 Referential Integrity </p><h2 id="简易数据规划流程"><a href="#简易数据规划流程" class="headerlink" title="简易数据规划流程"></a>简易数据规划流程</h2><p>第一阶段：收集数据，得到字段<br>&ensp;&ensp;收集必要且完整的数据项<br>&ensp;&ensp;转换成数据表的字段<br>第二阶段：把字段分类，归入表，建立表的关联<br>&ensp;&ensp;关联：表和表间的关系<br>&ensp;&ensp;分割数据表并建立关联的优点<br>&ensp;&ensp;节省空间<br>&ensp;&ensp;减少输入错误<br>&ensp;&ensp;方便数据修改<br>第三阶段：<br>&ensp;&ensp;规范化数据库   </p><h2 id="数据库的正规化分析"><a href="#数据库的正规化分析" class="headerlink" title="数据库的正规化分析"></a>数据库的正规化分析</h2><p>RDMBS设计范式基础概念<br>&ensp;&ensp;设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不 同的规范要求被称为不同范式，各种范式呈递次规范，越高的范式数据库冗余越小<br>&ensp;&ensp;目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式 （3NF）、巴德斯科范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称 完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上 进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般 数据库只需满足第三范式(3NF）即可 </p><p><code>1NF：无重复的列，每一列都是不可分割的基本数据项，同一列中不能有多个 值，即实体中的某个属性不能有多个值或者不能有重复的属性。除去同类型的 字段，就是无重复的列</code><br>说明：第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF） 的数据库就不是关系数据库<br><code>2NF：属性完全依赖于主键，第二范式必须先满足第一范式，要求表中的每个 行必须可以被唯一地区分。通常为表加上一个列，以存储各个实例的唯一标识 PK，非PK的字段需要与整个PK有直接相关性</code><br><code>3NF：属性不依赖于其它非主属性，满足第三范式必须先满足第二范式。第三 范式要求一个数据库表中不包含已在其它表中已包含的非主关键字信息，非PK 的字段间不能有从属关系</code>  </p><h2 id="SQL概念"><a href="#SQL概念" class="headerlink" title="SQL概念"></a>SQL概念</h2><p>SQL: Structure Query Language<br>&ensp;&ensp;结构化查询语言<br>&ensp;&ensp;SQL解释器：<br>&ensp;&ensp;数据存储协议：应用层协议，C/S<br>S：server, 监听于套接字，接收并处理客户端的应用请求<br>C：Client<br>&ensp;&ensp;客户端程序接口<br>&ensp;&ensp;&ensp;&ensp;CLI     字符、命令行<br>&ensp;&ensp;&ensp;&ensp;GUI     图形化<br>&ensp;&ensp;应用编程接口  API<br>&ensp;&ensp;&ensp;&ensp;ODBC：Open Database Connectivity     开放的数据库连接<br>&ensp;&ensp;&ensp;&ensp;JDBC：Java Data Base Connectivity     java开放数据库的开发接口</p><p>mysql：端口tcp 3306<br>oracle：端口tcp 1521<br>sqlserver:端口tcp 1433</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><code>约束：constraint，表中的数据要遵守的限制</code><br>&ensp;&ensp;主键pk：一个或多个字段的组合，填入的数据必须能在本表中唯一标识本行； 必须提供数据，即NOT NULL，一个表只能有一个<br>&ensp;&ensp;惟一键uk：一个或多个字段的组合，填入的数据必须能在本表中唯一标识本行； 允许为NULL，一个表可以存在多个<br>&ensp;&ensp;外键fk：一个表中的某字段可填入的数据取决于另一个表的主键或唯一键已有 的数据 ,作用在依赖的表上，被依赖的表上，可以作用主键和唯一键<br>&ensp;&ensp;检查：字段值在一定范围内   </p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>索引：将表中的一个或多个字段中的数据复制一份另存，并且按特定次序排序 存储   （例如：书签，标识）<br>关系运算：<br>&ensp;&ensp;选择：挑选出符合条件的行<br>&ensp;&ensp;投影：挑选出需要的字段<br>&ensp;&ensp;连接：表间字段的关联  </p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>数据抽象：<br>&ensp;&ensp;物理层：数据存储格式，即RDBMS在磁盘上如何组织文件<br>&ensp;&ensp;逻辑层：DBA角度，描述存储什么数据，以及数据间存在什么样的关系<br>&ensp;&ensp;视图层：用户角度，描述DB中的部分数据<br>关系模型的分类：<br>&ensp;&ensp;关系模型<br>&ensp;&ensp;基于对象的关系模型<br>&ensp;&ensp;半结构化的关系模型：XML数据  ：扩展的标记语言</p><p><code>范例：基于xml语言存放的数据</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下面目录内的文件都是基于xml语言存放数据的文件</span><br><span class="line">[root@centos6 gconf]<span class="comment"># cd /etc/gconf/gconf.xml.defaults/</span></span><br></pre></td></tr></table></figure></p><p><code>范例：设置开机自动登陆</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># vim /etc/gdm/custom.conf </span></span><br><span class="line"><span class="comment"># GDM configuration storage</span></span><br><span class="line">[daemon]</span><br><span class="line">AutomaticLoginEnable=ture</span><br><span class="line">AutomaticLongin=root</span><br></pre></td></tr></table></figure></p><h2 id="MySQL历史"><a href="#MySQL历史" class="headerlink" title="MySQL历史"></a>MySQL历史</h2><p>1979年：TcX公司 Monty Widenius，Unireg<br>1996年：发布MySQL1.0，Solaris版本，Linux版本<br>1999年：MySQL AB公司，瑞典<br>2003年：MySQL 5.0版本，提供视图、存储过程等功能<br>2008年：Sun 收购<br>2009年：Oracle收购sun<br>2009年：Monty成立MariaDB   </p><h2 id="MySQL和MariaDB"><a href="#MySQL和MariaDB" class="headerlink" title="MySQL和MariaDB"></a>MySQL和MariaDB</h2><p>官方网址：<br><a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a><br><a href="http://mariadb.org/" target="_blank" rel="noopener">http://mariadb.org/</a><br><code>官方文档</code><br><code>https://dev.mysql.com/doc/</code><br><code>https://mariadb.com/kb/en/</code><br>版本演变：<br>MySQL：5.1 –&gt; 5.5 –&gt; 5.6 –&gt; 5.7 –&gt;8.0<br>MariaDB：5.5 –&gt;10.0–&gt; 10.1 –&gt; 10.2 –&gt; 10.3<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum info ..</span><br><span class="line">centos6默认光盘安装mysql 5.1.73</span><br><span class="line">centos7使用的是mariadb 5.5.56</span><br></pre></td></tr></table></figure></p><h2 id="MYSQL的特性"><a href="#MYSQL的特性" class="headerlink" title="MYSQL的特性"></a>MYSQL的特性</h2><p><code>插件式存储引擎：</code>也称为“表类型”，存储管理器有多种实现版本，功能和特 性可能均略有差别；用户可根据需要灵活选择,Mysql5.5.5开始innoDB引擎是 MYSQL默认引擎<br>&ensp;&ensp;MyISAM ==&gt; Aria<br>&ensp;&ensp;InnoDB ==&gt; XtraDB<br>单进程，多线程<br>诸多扩展和新特性<br>提供了较多测试组件<br>开源   </p><p>raw:裸文件系统：无文件系统：二进制方式存储</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mysql数据库基础原理&quot;&gt;&lt;a href=&quot;#mysql数据库基础原理&quot; class=&quot;headerlink&quot; title=&quot;mysql数据库基础原理&quot;&gt;&lt;/a&gt;mysql数据库基础原理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/13/数据库基础原理/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://9527dz.top/categories/mysql/"/>
    
    
      <category term="msql" scheme="https://9527dz.top/tags/msql/"/>
    
  </entry>
  
  <entry>
    <title>nginx高并发内核优化</title>
    <link href="https://9527dz.top/2019/01/13/nginx%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E6%A0%B8%E4%BC%98%E5%8C%96/"/>
    <id>https://9527dz.top/2019/01/13/nginx高并发内核优化/</id>
    <published>2019-01-13T05:57:38.185Z</published>
    <updated>2019-01-13T07:24:13.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx作为负载均衡器高并发内核优化"><a href="#nginx作为负载均衡器高并发内核优化" class="headerlink" title="nginx作为负载均衡器高并发内核优化"></a>nginx作为负载均衡器高并发内核优化</h1><p><img src="/2019/01/13/nginx高并发内核优化/图标.png" alt=""><br><a id="more"></a></p><h2 id="实现nginx高并发linux内核优化"><a href="#实现nginx高并发linux内核优化" class="headerlink" title="实现nginx高并发linux内核优化"></a>实现nginx高并发linux内核优化</h2><ul><li><p>由于默认的linux内核的参数考虑的是最通用的场景，这明显不符合用于支持高并发访问的web服务器的定义，所以需要修改linux内核的参数，是的nginx可以拥有更高的性能，根据业务的特点来进行调整，当nginx作为静态web内容服务器、反向代理或者提供压缩服务器的服务器时，其内核的参数调整通常都是不同的，这里针对最通用的、使用nginx支持更多并发请求的tcp网络参数做简单的配置，修改/etc/sysctl.conf来更改内核的参数</p><ul><li><code>file-max = 999999</code><ul><li>表示单个进程较大可以打开的句柄数即文件描述符的数量</li></ul></li><li><code>net.ipv4.tcp_rw_reuse = 1</code><ul><li>参数设置为1，表示允许将TIME_WAIT状态的socket重新用于新的tcp连接，这对于服务器来说意义重大，因为总有大量TIME_WAIT状态的链接存在</li></ul></li><li>net.ipv4.tcp_keepalive_time = 600<ul><li>当keeplived启动时。tcp发送keeplived消息的频度；默认为2小时，将其设置为10分钟，可以更快的清理无效的链接</li></ul></li><li><code>net.piv4.tcp_fin_timeout = 30</code><ul><li>当服务器主动关闭连接时，socket保持在FIN_WAIT_2状态的较大时间</li></ul></li><li>net.piv4.tcp_max_tw_buckets - 5000<ul><li>这个参数表示操作系统允许TIME_WAIT套接字数量的较大值，如果超过这个数字，TIME_WAIT套接字将立刻被抢出并打印警告信息，默认为8000，过多的TIME_WAIT套接字会使web服务器变慢</li></ul></li><li>net.ipv4.ip_local_portrange = 1024 65000<ul><li>定义UDP和TCP连接的本地端口的取值范围</li></ul></li><li>net.ipv4.tcp_rmem = 1024 87380 12582912<ul><li>定义TCP接受缓存的最小值、默认值、最大值</li></ul></li><li>net.ipv4.tcp_wmem = 1024 87380 12582912<ul><li>定义了TCP发送缓存的最小值、默认值、较大值</li></ul></li><li><p>net.core.netdev_max_backlog = 8096</p><ul><li>当网卡接受数据包的速度大于内核处理速度时，会有一个列队保存这些数据包。这个参数表示该列队的较大值</li></ul></li><li><p>net.core.rmem_default = 6291456</p><ul><li>表示内核套接字接受缓存区默认的大小</li></ul></li><li>net.core.wmem_default = 6291456<ul><li>表示内核套接字发送缓存区默认的大小</li></ul></li><li>net.core.rmem_max = 12582912<ul><li>表示内核的套接字接受缓存区较大大小</li></ul></li><li>net.core.wmem_max = 12582912<ul><li>表示内核套接字发送缓存区较大大小</li></ul></li></ul></li><li><p>注意：以上四个参数，需要根据业务的逻辑和实际的硬件成本来综合考虑</p><ul><li>net.piv4.tcp_syncookies = 1<ul><li>与性能无关。用于解决tcp的syn攻击</li></ul></li><li>net.ipv4.tcp_max_syn_backlog = 8192<ul><li>这个参数表示tcp三次握手建立阶段接受syn请求的列队的较大长度，默认1024，将这个参数设置的大一点可使出现nginx繁忙来不及accept新的连接时，linux不至于丢失客户端的发起连接的请求</li></ul></li><li>net.ipv4.tcp_tw_recycle = 1<ul><li>这个参数用于设置启用timewait快速回收</li></ul></li><li>net.core.somaxconn = 262114<ul><li>选项默认值为128，这个参数用于调节系统同时发起的tcp连接数，在高并发的请求中，默认的值可能会导致连接超时或者重传，因此需要结合高并发请求数来调节此值</li></ul></li><li>net.ipv4.tcp_max_orphans = 262114<ul><li>选项用于设定系统中最多有多少个tcp套接字不被关联到任何一个用户文件句柄中。如果超过这个数字，孤立连接将立即被复位输出警告信息。这个限制指示为了防</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nginx作为负载均衡器高并发内核优化&quot;&gt;&lt;a href=&quot;#nginx作为负载均衡器高并发内核优化&quot; class=&quot;headerlink&quot; title=&quot;nginx作为负载均衡器高并发内核优化&quot;&gt;&lt;/a&gt;nginx作为负载均衡器高并发内核优化&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/13/nginx高并发内核优化/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://9527dz.top/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://9527dz.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx的stream模块</title>
    <link href="https://9527dz.top/2019/01/13/nginx%E4%BC%AA%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD/"/>
    <id>https://9527dz.top/2019/01/13/nginx伪四层负载/</id>
    <published>2019-01-13T03:27:06.777Z</published>
    <updated>2019-01-13T05:55:25.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx的stream模块（伪四层负载）"><a href="#nginx的stream模块（伪四层负载）" class="headerlink" title="nginx的stream模块（伪四层负载）"></a>nginx的stream模块（伪四层负载）</h1><p><img src="/2019/01/13/nginx伪四层负载/标题.png" alt=""><br><a id="more"></a></p><h2 id="nginx伪四层负载"><a href="#nginx伪四层负载" class="headerlink" title="nginx伪四层负载"></a>nginx伪四层负载</h2><ul><li>Nginx 1.9.0版本起支持四层负载均衡，从而使得Nginx变得更加强大。目前，四层软件负载均衡器用得比较多的是HaProxy；而Nginx也支持四层负载均衡。</li></ul><h3 id="ngx-stream-core-module"><a href="#ngx-stream-core-module" class="headerlink" title="ngx_stream_core_module"></a><code>ngx_stream_core_module</code></h3><ul><li><p>ngx_stream_core_module模块从1.9.0版本开始可用。默认情况下，此模块不是构建的，它应该使用-with-stream配置参数启用。</p></li><li><p><code>(1) listen address:port [ssl] [udp] [backlog=number] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];</code></p><ul><li>监听的端口；<ul><li>默认为tcp协议；<ul><li>udp: 监听udp协议的端口；</li></ul></li></ul></li></ul></li></ul><h3 id="ngx-stream-proxy-module"><a href="#ngx-stream-proxy-module" class="headerlink" title="ngx_stream_proxy_module"></a><code>ngx_stream_proxy_module</code></h3><ul><li>ngx_stream_proxy_module模块(1.9.0)允许通过TCP、UDP(1.9.13)和unix域套接字代理数据流。</li><li><p>(1) proxy_pass address;</p><ul><li>设置代理服务器的地址。该地址可以指定为域名或IP地址、端口或unix域套接字路径。</li></ul></li><li><p>(2) proxy_timeout timeout;</p><ul><li>设置客户端或代理服务器连接上的两个连续读写操作之间的超时。如果在此时间内没有传输数据，则连接将关闭。<pre><code>- 默认为10m; </code></pre></li></ul></li><li><p>(3) proxy_connect_timeout time;</p><ul><li>定义与代理服务器建立连接的超时。<pre><code>- 设置nginx与被代理的服务器尝试建立连接的超时时长；默认为60s；</code></pre></li></ul></li></ul><p>参考：<a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html#stream" target="_blank" rel="noopener">http://nginx.org/en/docs/stream/ngx_stream_core_module.html#stream</a></p><p>范例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">实现nginx_stream代理mysql_server服务器面向客户端提供服务</span><br><span class="line"></span><br><span class="line">  clent</span><br><span class="line">  nginx_stream  : yum install nginx</span><br><span class="line">  mysql_server  : yum istall mariadb-server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql_server</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">  创建账号</span><br><span class="line">  MariaDB [(none)]&gt; grant all on *.* to daizhe@<span class="string">'%'</span> identified by <span class="string">'centos'</span>;</span><br><span class="line">  生效权限</span><br><span class="line">  MariaDB [(none)]&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nginx_server</span><br><span class="line"><span class="comment">#使用stream四层代理时使用的上下文都在stream &#123;&#125; 上下文当中，不要与http同时使用</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  stream &#123;</span><br><span class="line">        server &#123;</span><br><span class="line">        listen 3306;</span><br><span class="line">        proxy_pass  172.18.135.2:3306;  <span class="comment">#数据库的地址和端口</span></span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart nginx</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl   </span></span><br><span class="line">    LISTEN      0      128       *:3306  </span><br><span class="line"></span><br><span class="line">client测试</span><br><span class="line">  <span class="comment">#使用client连接nginx_stream_server服务器验证是否被调度</span></span><br><span class="line">  ~]<span class="comment"># mysql -udaizhe -pcentos -h172.18.135.1  #地址为nginx地址</span></span><br><span class="line">  MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">再次启动一个mysql数据库实现客户端访问的负载均衡</span><br><span class="line"><span class="comment">#模拟两个数据库的效果，为了使客户调度起来无差别感知，使两个mysql授权的账号和数据相同（生产中可以做主从）</span></span><br><span class="line"></span><br><span class="line">（后添加）mysql_server</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">  创建账号</span><br><span class="line">  MariaDB [(none)]&gt; grant all on *.* to daizhe@<span class="string">'%'</span> identified by <span class="string">'centos'</span>;</span><br><span class="line">  生效权限</span><br><span class="line">  MariaDB [(none)]&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">配置nginx_stream_server</span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line">    stream &#123;</span><br><span class="line">        upstream dbserver &#123;</span><br><span class="line">        server 172.18.135.2:3306;</span><br><span class="line">        server 172.18.135.5:3306;</span><br><span class="line">        &#125;</span><br><span class="line">        server &#123;</span><br><span class="line">        listen 3306;</span><br><span class="line">        proxy_pass dbserver;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">client 测试（为了使得看出差别可以在daizhe账号下创建不同的数据库以便看出算法）</span><br><span class="line">   ~]<span class="comment"># while true; do mysql -udaizhe -pcentos -h172.18.135.1 -e "show databases;"; sleep 1 ;done</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| db1                |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| db2                |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nginx的stream模块（伪四层负载）&quot;&gt;&lt;a href=&quot;#nginx的stream模块（伪四层负载）&quot; class=&quot;headerlink&quot; title=&quot;nginx的stream模块（伪四层负载）&quot;&gt;&lt;/a&gt;nginx的stream模块（伪四层负载）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/13/nginx伪四层负载/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://9527dz.top/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://9527dz.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx的http_upstream模块</title>
    <link href="https://9527dz.top/2019/01/13/nginx%E4%B8%83%E5%B1%82%E8%B0%83%E5%BA%A6/"/>
    <id>https://9527dz.top/2019/01/13/nginx七层调度/</id>
    <published>2019-01-13T03:17:09.054Z</published>
    <updated>2019-01-13T03:22:09.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx的http-upstream模块（七层负载）"><a href="#nginx的http-upstream模块（七层负载）" class="headerlink" title="nginx的http_upstream模块（七层负载）"></a>nginx的http_upstream模块（七层负载）</h1><p><img src="/2019/01/13/nginx七层调度/图标.png" alt=""><br><a id="more"></a></p><h2 id="nginx的http-upstream模块"><a href="#nginx的http-upstream模块" class="headerlink" title="nginx的http_upstream模块"></a>nginx的http_upstream模块</h2><ul><li><p>我们知道单台服务器的性能是有上限的，当流量很大时，就需要使用多台服务器来共同提供服务，这就是所谓的集群。</p></li><li><p>负载均衡服务器，就是用来把经过它的流量，按照某种方法，分配到集群中的各台服务器上。这样一来不仅可以承担</p></li><li><p>更大的流量、降低服务的延迟，还可以避免单点故障造成服务不可用。一般的反向代理服务器，都具备负载均衡的功能。</p></li><li><p>负载均衡功能可以由硬件来提供，比如以前的F5设备。也可以由软件来提供，LVS可以提供四层的负载均衡(利用IP和端口)，</p></li><li><p>Haproxy和Nginx可以提供七层的负载均衡(利用应用层信息)。</p></li></ul><pre><code>硬件：F5 BigIP, Citrix NetScaler, A10 A10软件：    四层调度：lvs, nginx(stream module), haproxy(mode tcp)    七层调度：nginx(http_upstream module), haproxy(mode http), httpd, ats, ...        mysql: Proxy_SQL, ...        ... ...session sticky：会话粘滞    Source IP: sh, persistence    Cookie：session replication：session server：</code></pre><hr><p><img src="/2019/01/13/nginx七层调度/stream.png" alt=""></p><h3 id="ngx-http-upstream-module"><a href="#ngx-http-upstream-module" class="headerlink" title="ngx_http_upstream_module"></a><code>ngx_http_upstream_module</code></h3><ul><li>参考文档：<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_upstream_module.html</a></li><li>ngx_http_upstream_module模块用于定义可以由proxy_pass、fastcgi_pass、uwsgi_pass、scgi_pass和memcached_pass指令引用的服务器组。        </li><li><p><code>(1) upstream name { ... }</code></p><ul><li>定义后端服务器组；引入一个新的上下文；只能用于http{}上下文中；<ul><li>默认的调度方法是wrr；</li></ul></li></ul></li><li><p><code>(2) server address [parameters];</code></p><ul><li>定义服务器地址和相关的参数；</li><li>地址格式：<ul><li>IP[:PORT]</li><li>HOSTNAME[:PORT]</li><li>unix:/PATH/TO/SOME_SOCK_FILE<ul><li>参数：<ul><li>weight=number<ul><li>权重，默认为1；</li></ul></li><li>max_fails=number<ul><li>失败尝试的最大次数；</li></ul></li><li>fail_timeout=time<ul><li>设置服务器为不可用状态的超时时长，默认为10秒；</li></ul></li><li>backup<ul><li>把服务器标记为“备用”状态（sory server 只有所有的服务器全部没办法工作时才会上线）； </li></ul></li><li>down<ul><li>手动标记其为不可用；</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server 172.18.135.2 weight=2 backup max_fails=10m;</span><br></pre></td></tr></table></figure><ul><li><p>(3) least_conn;</p><ul><li>最少连接调度算法； 当server拥有不同的权重时为wlc；当所有后端主机的连接数相同时，则使用wrr进行调度；</li></ul></li><li><p>(4) ip_hash;</p><ul><li>源地址hash算法；能够将来自同一个源IP地址的请求始终发往同一个upstream server；</li></ul></li><li>(5) hash key [consistent];<ul><li>基于指定的key的hash表实现请求调度，此处的key可以文本、变量或二者的组合；<ul><li>consistent：参数，指定使用一致性hash算法；<ul><li>示例：<ul><li>hash $request_uri consistent<ul><li>hash $remote_addr</li><li>hash $cookie_name</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>(6) keepalive connections;<ul><li>可使用长连接的连接数量；每worker与后端服务保持的最大空闲长连接数量；</li></ul></li></ul><hr><h3 id="范例：实现nginx调度"><a href="#范例：实现nginx调度" class="headerlink" title="范例：实现nginx调度"></a><code>范例：实现nginx调度</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">三台主机</span><br><span class="line">  client</span><br><span class="line">  nginx_stream_server :yum install nginx -y</span><br><span class="line">  web_server1 :yum install httpd -y</span><br><span class="line">  web_server2 :yum install httpd -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">配置两台web_server的页面文件</span><br><span class="line">  <span class="comment">#为了达到负载均衡的web_server网页文件应该是相同的，这里为了演示调度器调度的差别有意的是web_server的网页文件设置有差别</span></span><br><span class="line">  web_server1</span><br><span class="line">  ~]<span class="comment"># echo "web_server1" &gt; /var/www/html/index.html</span></span><br><span class="line"></span><br><span class="line">  web_server2</span><br><span class="line">  ~]<span class="comment"># echo "web_server2" &gt; /var/www/html/index.html</span></span><br><span class="line"></span><br><span class="line">编辑nginx实现负载均衡</span><br><span class="line">  <span class="comment">#在原http配置</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  http &#123;  <span class="comment">#仅能在http上下文使用</span></span><br><span class="line">        upstream staticwebsrvs &#123;  <span class="comment">#定义后端服务器组</span></span><br><span class="line">        server 172.18.135.2;  <span class="comment">#web_server1</span></span><br><span class="line">        server 172.18.135.5;  <span class="comment">#web_server2</span></span><br><span class="line">        &#125;</span><br><span class="line">  ....</span><br><span class="line">  <span class="comment">#server中调用服务器组名称</span></span><br><span class="line">        server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://staticwebsrvs/;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">client客户端测试</span><br><span class="line"><span class="comment">#默认1:1轮询算法,支持加权轮询（Round-Robin）</span></span><br><span class="line">  ~]<span class="comment"># while true; do curl http://172.18.135.1:8080; sleep 1;done</span></span><br><span class="line">  web_server1</span><br><span class="line">  web_server2</span><br><span class="line">  web_server1</span><br><span class="line">  web_server2</span><br></pre></td></tr></table></figure><hr><h4 id="算法：使用加权轮询（wrr）"><a href="#算法：使用加权轮询（wrr）" class="headerlink" title="算法：使用加权轮询（wrr）"></a><code>算法：使用加权轮询（wrr）</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">使用加权轮询(默认权重都为1)</span><br><span class="line">  编辑nginx实现负载均衡</span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  http &#123;</span><br><span class="line">        upstream staticwebsrvs &#123;</span><br><span class="line">        server 172.18.135.2 weight=2; <span class="comment">#将web_server1设置权重比为2</span></span><br><span class="line">        server 172.18.135.5;</span><br><span class="line">  &#125;</span><br><span class="line">    ....</span><br><span class="line">        server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://staticwebsrvs/;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">lient客户端测试</span><br><span class="line">  ~]<span class="comment"># while true; do curl http://172.18.135.1:8080; sleep 1;done</span></span><br><span class="line">  web_server1</span><br><span class="line">  web_server1</span><br><span class="line">  web_server2</span><br></pre></td></tr></table></figure><hr><h4 id="算法：least-conn做少连接（wlc）"><a href="#算法：least-conn做少连接（wlc）" class="headerlink" title="算法：least_conn做少连接（wlc）"></a><code>算法：least_conn做少连接（wlc）</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对短链接最好使用：轮询</span></span><br><span class="line"><span class="comment">#对长连接最好使用：wlc</span></span><br><span class="line"></span><br><span class="line">使用least_conn做少连接算法</span><br><span class="line">  编辑nginx实现负载均衡</span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  http &#123;</span><br><span class="line">        upstream staticwebsrvs &#123;</span><br><span class="line">        least_conn;</span><br><span class="line">        server 172.18.135.2 weight=2;</span><br><span class="line">        server 172.18.135.5;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">        server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://staticwebsrvs/;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">lient客户端测试</span><br><span class="line">  ~]<span class="comment"># while true; do curl http://172.18.135.1:8080; sleep 1;done</span></span><br></pre></td></tr></table></figure><hr><h4 id="算法：ip-hash-sh"><a href="#算法：ip-hash-sh" class="headerlink" title="算法：ip_hash (sh)"></a><code>算法：ip_hash (sh)</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">使用ip_hash：bash原ip地址</span><br><span class="line">  编辑nginx实现负载均衡</span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  http &#123;</span><br><span class="line">        upstream staticwebsrvs &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server 172.18.135.2 weight=2;</span><br><span class="line">        server 172.18.135.5;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">        server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://staticwebsrvs/;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">lient客户端测试</span><br><span class="line">  ~]<span class="comment"># while true; do curl http://172.18.135.1:8080; sleep 1;done</span></span><br><span class="line">  web_server1</span><br><span class="line">  web_server1</span><br><span class="line">  web_server1</span><br><span class="line">  web_server1</span><br><span class="line">  web_server1</span><br><span class="line"></span><br><span class="line">工作方式：</span><br><span class="line"><span class="comment">#对客户端ip做bash计算，把后端服务器按权重bash成静态的数组，而后在数据上取模，取出模几，就映射到第几台服务器上</span></span><br><span class="line">缺点：</span><br><span class="line"><span class="comment">#如果服务器的总数发生了变化则此前的hash结果则发生变动</span></span><br><span class="line"><span class="comment">#当后端服务器宕机后，session会丢失；</span></span><br><span class="line"><span class="comment">#来自同一局域网的客户端会被转发到同一个后端服务器，可能导致负载失衡；</span></span><br><span class="line"><span class="comment">#不适用于CDN网络，不适用于前段还有代理的情况。</span></span><br></pre></td></tr></table></figure><hr><h4 id="算法：consistent-bashing-一致性hash"><a href="#算法：consistent-bashing-一致性hash" class="headerlink" title="算法：consistent bashing 一致性hash"></a><code>算法：consistent bashing 一致性hash</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#无论权重怎么变，但是hash算法是不变的，仅对固定的进行bash取模</span></span><br><span class="line"><span class="comment">#bash:可以对任何数据进行hash</span></span><br><span class="line"><span class="comment">#consistent一致性hash,如果不添加则便是静态hash与ip_hash相同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line">对原地址进行bash，不过做了一致性<span class="built_in">hash</span></span><br><span class="line">  编辑nginx实现负载均衡</span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  http &#123;</span><br><span class="line">        upstream staticwebsrvs &#123;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line">        server 172.18.135.2 weight=2;</span><br><span class="line">        server 172.18.135.5;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">        server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://staticwebsrvs/;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">lient客户端测试</span><br><span class="line">  ~]<span class="comment"># while true; do curl http://172.18.135.1:8080; sleep 1;done</span></span><br><span class="line">  web_server1</span><br><span class="line">  web_server1</span><br><span class="line">  web_server1</span><br><span class="line">  web_server1</span><br><span class="line">  web_server1</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">对用户请求的uri进项<span class="built_in">hash</span>(适用于后端服务器为缓存服务器，提高命中率)</span><br><span class="line"><span class="built_in">hash</span> <span class="variable">$request_uri</span> consistent;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  http &#123;</span><br><span class="line">        upstream staticwebsrvs &#123;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$request_uri</span> consistent;</span><br><span class="line">        server 172.18.135.2 weight=2;</span><br><span class="line">        server 172.18.135.5;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">        server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://staticwebsrvs/;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx+才支持</span><br><span class="line">nginx-sticky-module的使用（基于cookie的会话保持）</span><br><span class="line"></span><br><span class="line">使用sticky_cookie_insert启用会话亲缘关系，这会导致来自同一客户端的请求被传递到一组服务器在同一台服务器。与ip_hash不同之处在于，它不是基于IP来判断客户端的，而是基于cookie来判断。因此可以避免上述ip_hash中来自同一局域网的客户端和前段代理导致负载失衡的情况。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nginx的http-upstream模块（七层负载）&quot;&gt;&lt;a href=&quot;#nginx的http-upstream模块（七层负载）&quot; class=&quot;headerlink&quot; title=&quot;nginx的http_upstream模块（七层负载）&quot;&gt;&lt;/a&gt;nginx的http_upstream模块（七层负载）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/13/nginx七层调度/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://9527dz.top/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://9527dz.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx的fastcgi模块</title>
    <link href="https://9527dz.top/2019/01/12/nginx%E7%9A%84fastcgi%E6%A8%A1%E5%9D%97/"/>
    <id>https://9527dz.top/2019/01/12/nginx的fastcgi模块/</id>
    <published>2019-01-12T05:51:45.884Z</published>
    <updated>2019-01-12T09:11:35.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx的fastcgi模块"><a href="#nginx的fastcgi模块" class="headerlink" title="nginx的fastcgi模块"></a>nginx的fastcgi模块</h1><p><img src="/2019/01/12/nginx的fastcgi模块/图标.png" alt=""><br><a id="more"></a></p><h2 id="nginx的fastcgi模块-1"><a href="#nginx的fastcgi模块-1" class="headerlink" title="nginx的fastcgi模块"></a>nginx的fastcgi模块</h2><p>1.1　什么是 FastCGI</p><ul><li><p>FastCGI是一个可伸缩地、高速地在HTTP server和动态脚本语言间通信的接口。多数流行的HTTP server都支持FastCGI，包括Apache、Nginx和lighttpd等。同时，FastCGI也被许多脚本语言支持，其中就有PHP。</p></li><li><p>FastCGI是从CGI发展改进而来的。传统CGI接口方式的主要缺点是性能很差，因为每次HTTP服务器遇到动态程序时都需要重新启动脚本解析器来执行解析，然后将结果返回给HTTP服务器。这在处理高并发访问时几乎是不可用的。另外传统的CGI接口方式安全性也很差，现在已经很少使用了。</p></li><li><p>FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者多个脚本解析守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。</p></li></ul><p>1.2　Nginx+FastCGI运行原理(nginx+fcgi_module–&gt;fpm(php))=NMP</p><ul><li>Nginx不支持对外部程序的直接调用或者解析，所有的外部程序（包括PHP）必须通过FastCGI接口来调用。FastCGI接口在Linux下是socket（这个socket可以是文件socket，也可以是ip socket）。为了调用CGI程序，还需要一个FastCGI的wrapper（wrapper可以理解为用于启动另一个程序的程序），这个wrapper绑定在某个固定socket上，如端口或者文件socket。当Nginx将CGI请求发送给这个socket的时候，通过FastCGI接口，wrapper接收到请求，然后派生出一个新的线程，这个线程调用解释器或者外部程序处理脚本并读取返回数据；接着，wrapper再将返回的数据通过FastCGI接口，沿着固定的socket传递给Nginx；最后，Nginx将返回的数据发送给客户端。这就是Nginx+FastCGI的整个运作过程，</li></ul><p><img src="/2019/01/12/nginx的fastcgi模块/fpm.png" alt=""></p><h2 id="ngx-http-fastcgi-module模块："><a href="#ngx-http-fastcgi-module模块：" class="headerlink" title="ngx_http_fastcgi_module模块："></a>ngx_http_fastcgi_module模块：</h2><ul><li><p><code>1、fastcgi_pass address;</code></p><ul><li>address为fastcgi server的地址；    location, if in location；</li></ul></li><li><p><code>2、fastcgi_index name;</code></p><ul><li>fastcgi默认的主页资源; </li></ul></li><li><p><code>3、fastcgi_param parameter value [if_not_empty];</code></p><ul><li>设置应该传递给FastCGI服务器的参数。该值可以包含文本、变量及其组合。(用于向后端的fastcgi或者fpm_server来传递参数)        </li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装完nginx时在目录中就有fastcgi_paeams文件，里面装的时nginx给fpm服务传递的参数，（每个默认的参数都要启动生效，每一个默认值fastcgi服务端执行fpm服务时要配置启用的参数的默认设定）</span></span><br><span class="line">    ~]<span class="comment"># ls /etc/nginx/</span></span><br><span class="line">    fastcgi_params </span><br><span class="line"></span><br><span class="line">两台主机</span><br><span class="line">    client</span><br><span class="line">    proxy_nginx_server    :yum install nginx -y</span><br><span class="line">    fpm_server          :yum install php-fpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编辑代理nginx_server</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">    </span><br><span class="line">        location  ~* \.php$  &#123;</span><br><span class="line">        fastcgi_pass 172.18.135.2:9000;  <span class="comment">#定义如果客户端请求的资源为.php结尾的文件转发到fpm_server服务器上</span></span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  /data<span class="variable">$fastcgi_script_name</span>;  <span class="comment">#/data是在fpm_server上</span></span><br><span class="line">        include        fastcgi_params;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    ~]<span class="comment"># nginx -t</span></span><br><span class="line">    ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">fpm_server创建.php文件供客户端访问</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># cat /data/info.php </span></span><br><span class="line">    &lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">    ?&gt;</span><br><span class="line">    编辑fpm的配置文件的允许监听的地址</span><br><span class="line">    ~]<span class="comment"># vim /etc/php-fpm.d/www.conf</span></span><br><span class="line">    listen = 172.18.135.2:9000</span><br><span class="line">    listen.allowed_clients = any</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart php-fpm</span></span><br><span class="line"></span><br><span class="line">client访问</span><br><span class="line">    http://172.18.135.1/info.php</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">使用压测工具进行压测（ab）</span><br><span class="line">     ~]<span class="comment"># yum install httpd-tools -y</span></span><br><span class="line">        ab 命令（n&gt;c）</span><br><span class="line">            -c 模拟并发的数量</span><br><span class="line">            -n 指定请求的个数</span><br><span class="line"></span><br><span class="line">对nginx调度器进行压测</span><br><span class="line">    ~]<span class="comment"># ab -c 100 -n 1000 http://172.18.135.1/infp.php</span></span><br><span class="line">    Requests per second:    2389.18 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">对nginx调度器的fastcgi模块启用缓存</span><br><span class="line"><span class="comment">#http上下文定义键</span></span><br><span class="line">    ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">    http &#123;</span><br><span class="line">        fastcgi_cache_path /var/cache/fastcgi       levels=1:1:2 keys_zone=fastcgi:10m     max_size=2G;</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">#调用http定义的键</span></span><br><span class="line">       server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        location  ~* \.php$  &#123;</span><br><span class="line">        fastcgi_pass 172.18.135.2:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  /data<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">        fastcgi_cache     fastcgi;</span><br><span class="line">        fastcgi_cache_key <span class="variable">$request_uri</span>;</span><br><span class="line">        fastcgi_cache_valid 200 302 10m;</span><br><span class="line">        fastcgi_cache_valid 301   1h;</span><br><span class="line">        fastcgi_cache_valid any   1m;</span><br><span class="line">        fastcgi_cache_methods GET HEAD;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># mkdir -p /var/cache/fastcgi</span></span><br><span class="line">    ~]<span class="comment"># nginx -t</span></span><br><span class="line">    ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">再次访问测试验证是否加速</span><br><span class="line">    ~]<span class="comment"># ab -c 100 -n 1000 http://172.18.135.1/infp.php  #第一次访问生成缓存</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># tree /var/cache/fastcgi/</span></span><br><span class="line">    /var/cache/fastcgi/</span><br><span class="line">    └── 5</span><br><span class="line">      └── 6</span><br><span class="line">          └── af</span><br><span class="line">             └── 48fe86dcef16714ba3e4f82bba2daf65</span><br><span class="line">    3 directories, 1 file</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ab -c 100 -n 1000 http://172.18.135.1/infp.php</span></span><br><span class="line">    Requests per second:    10657.12 [<span class="comment">#/sec] (mean)</span></span><br></pre></td></tr></table></figure><p>4、fastcgi_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</p><ul><li><p>定义fastcgi的缓存；缓存位置为磁盘上的文件系统，由path所指定路径来定义；</p><ul><li>levels=levels：缓存目录的层级数量，以及每一级的目录数量；levels=ONE:TWO:THREE</li><li>leves=1:2:2</li><li>keys_zone=name:size<ul><li>k/v映射的内存空间的名称及大小<ul><li>inactive=time<ul><li>非活动时长</li></ul></li><li>max_size=size<ul><li>磁盘上用于缓存数据的缓存空间上限</li></ul></li></ul></li></ul></li></ul></li><li><p>5、fastcgi_cache zone | off;</p><ul><li>调用指定的缓存空间来缓存数据；http, server, location</li></ul></li><li><p>6、fastcgi_cache_key string;</p><ul><li>定义用作缓存项的key的字符串；</li></ul></li><li><p>7、fastcgi_cache_methods GET | HEAD | POST …;</p><ul><li>为哪些请求方法使用缓存；</li></ul></li><li><p>8、fastcgi_cache_min_uses number;</p><ul><li>缓存空间中的缓存项在inactive定义的非活动时间内至少要被访问到此处所指定的次数方可被认作活动项；</li></ul></li><li><p>9、fastcgi_cache_valid [code …] time;</p><ul><li>不同的响应码各自的缓存时长；</li></ul></li><li><p>10、fastcgi_keep_conn on | off;</p><ul><li>默认情况下，FastCGI服务器会在发送响应后立即关闭连接。但是，当这个指令被设置为on时，nginx将指示FastCGI服务器保持连接打开。    </li></ul></li></ul><p>范例：fastcgi模块内键有两个url可以输出fastcgi健康状态以及健康页面信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_server配置文件中开启两个内建的url(这两个url的输出默认使用的fastcgi协议)</span><br><span class="line">    ~]<span class="comment"># vim /etc/php-fpm.d/www.conf </span></span><br><span class="line">    121 pm.status_path = /pm_status</span><br><span class="line">    133 ping.path = /ping   <span class="comment">#ping·pong</span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart php-fpm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编辑nginx代理</span><br><span class="line">    ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">        location ~* ^/(pm_status|ping)$ &#123;</span><br><span class="line">        fastcgi_pass 172.18.135.2:9000;</span><br><span class="line">         fastcgi_param  SCRIPT_FILENAME  <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     ~]<span class="comment"># nginx -t</span></span><br><span class="line">     ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">客户端访问测试</span><br><span class="line">    ~]<span class="comment"># curl 172.18.135.1/pm_status</span></span><br><span class="line">    pool:                 www</span><br><span class="line">    process manager:      dynamic</span><br><span class="line">    start time:           12/Jan/2019:17:09:39 +0800</span><br><span class="line">    start since:          57</span><br><span class="line">    accepted conn:        1</span><br><span class="line">    listen queue:         0</span><br><span class="line">    max listen queue:     0</span><br><span class="line">    listen queue len:     128</span><br><span class="line">    idle processes:       4</span><br><span class="line">    active processes:     1</span><br><span class="line">    total processes:      5</span><br><span class="line">    max active processes: 1</span><br><span class="line">    max children reached: 0</span><br><span class="line">    slow requests:        0</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># curl 172.18.135.1/ping</span></span><br><span class="line">    pong</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nginx的fastcgi模块&quot;&gt;&lt;a href=&quot;#nginx的fastcgi模块&quot; class=&quot;headerlink&quot; title=&quot;nginx的fastcgi模块&quot;&gt;&lt;/a&gt;nginx的fastcgi模块&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/12/nginx的fastcgi模块/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://9527dz.top/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://9527dz.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx的proxy模块</title>
    <link href="https://9527dz.top/2019/01/10/nginx%E7%9A%84proxy%E6%A8%A1%E5%9D%97/"/>
    <id>https://9527dz.top/2019/01/10/nginx的proxy模块/</id>
    <published>2019-01-10T11:56:48.546Z</published>
    <updated>2019-01-12T06:00:57.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx的proxy模块"><a href="#nginx的proxy模块" class="headerlink" title="nginx的proxy模块"></a>nginx的proxy模块</h1><p><img src="/2019/01/10/nginx的proxy模块/图标.png" alt=""><br><a id="more"></a></p><h2 id="nginx的proxy模块-1"><a href="#nginx的proxy模块-1" class="headerlink" title="nginx的proxy模块"></a>nginx的proxy模块</h2><p>一、反向代理</p><ul><li><p>1.什么是反向代理（DNAT）<br>通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中由代理服务器向Internet上的web服务器发起请求，最终达到客户机上网的目的（也就是正向代理）。</p></li><li><p>而反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p></li><li>Nginx只做请求的转发，后台有多个http服务器提供服务，nginx的功能就是把请求转发给后面的服务器，决定把请求转发给谁</li></ul><p><img src="/2019/01/10/nginx的proxy模块/代理.png" alt=""></p><h2 id="ngx-http-proxy-module模块："><a href="#ngx-http-proxy-module模块：" class="headerlink" title="ngx_http_proxy_module模块："></a>ngx_http_proxy_module模块：</h2><ul><li>1、proxy_pass URL;    <ul><li>Context:    location, if in location, limit_except<ul><li>作用：将用户的请求代理到哪个URL上（完成的是两个路径的映射关系）<ul><li>注意：proxy_pass后面的路径不带uri时，其会将location的uri传递给后端主机；</li></ul></li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">server_name HOSTNAME;</span><br><span class="line">location /uri/ &#123;</span><br><span class="line">proxy http://hos[:port];</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http://HOSTNAME/uri --&gt; http://host/uri </span><br><span class="line"></span><br><span class="line">proxy_pass后面的路径是一个uri时，其会将location的uri替换为proxy_pass的uri；</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">server_name HOSTNAME;</span><br><span class="line">location /uri/ &#123;</span><br><span class="line">proxy http://host/new_uri/;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http://HOSTNAME/uri/ --&gt; http://host/new_uri/</span><br><span class="line"></span><br><span class="line">如果location定义其uri时使用了正则表达式的模式，或在if语句或limt_execept中使用proxy_pass指令，则proxy_pass之后必须不能使用uri; 用户请求时传递的uri将直接附加代理到的服务的之后；</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">server_name HOSTNAME;</span><br><span class="line">location ~|~* /uri/ &#123;</span><br><span class="line">proxy http://host;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http://HOSTNAME/uri/ --&gt; http://host/uri/；</span><br></pre></td></tr></table></figure><p><img src="/2019/01/10/nginx的proxy模块/代理1.png" alt=""></p><p><code>范例：实现简单的代理</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">使用docker镜像创建两个web_server服务器</span><br><span class="line"><span class="comment">#容易已经绑定宿主机的存储卷，默认安装完docker生成的一个net的地址桥</span></span><br><span class="line"><span class="comment">#无需暴漏端口，因为此web_server仅用于和前端内网中的nginx_proxy_server通讯不需要直接和客户端进行通讯</span></span><br><span class="line"></span><br><span class="line">   ~]<span class="comment"># docker run --name webser1 -it --network bridge -v /vols/websrv1:/vole/htdocs1 busybox</span></span><br><span class="line">   / <span class="comment"># httpd -f -v -h  /vole/htdocs1</span></span><br><span class="line"><span class="comment">#-f 运行在前台</span></span><br><span class="line"><span class="comment">#-v 打印信息在前台</span></span><br><span class="line"><span class="comment">#-h 指定家目录</span></span><br><span class="line"></span><br><span class="line">   ~]<span class="comment"># docker run --name webser2 -it --network bridge -v /vols/websrv2:/vole/htdocs1 busybox</span></span><br><span class="line">   / <span class="comment"># httpd -f -v -h  /vole/htdocs1</span></span><br><span class="line"></span><br><span class="line">在宿主机上创建对应的存储卷上对应的网页文件</span><br><span class="line">~]<span class="comment"># mkdir -p /vols/websrv1</span></span><br><span class="line">~]<span class="comment"># mkdir -p /vols/websrv2</span></span><br><span class="line">~]<span class="comment"># echo "webser1" &gt; /vols/websrv1/index.html</span></span><br><span class="line">  ~]<span class="comment"># echo "webser2" &gt; /vols/websrv2/index.html</span></span><br><span class="line">  ~]<span class="comment"># curl 172.17.0.2</span></span><br><span class="line">    websrv1</span><br><span class="line">  ~]<span class="comment"># curl 172.17.0.3</span></span><br><span class="line">    websrv2</span><br><span class="line"></span><br><span class="line">配置nginx代理</span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">        server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://172.17.0.2/;         <span class="comment">#proxy_pass的优先级比root的优先级要高 ,/有和无是有区别的。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># nginx -t</span></span><br><span class="line">~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">客户端请求nginx代理的地址</span><br><span class="line">~]<span class="comment"># curl 172.18.135.1:8080</span></span><br><span class="line">websrv1</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"><span class="comment">###实验说明/有和无是有区别的</span></span><br><span class="line"><span class="comment">##无/##</span></span><br><span class="line">       server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        root /nginx/html;</span><br><span class="line">        location /bbs &#123;</span><br><span class="line">        proxy_pass http://172.17.0.2; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~]<span class="comment"># mkdir -p /nginx/html/ddb</span></span><br><span class="line">~]<span class="comment"># mkdir -p /nginx/html/bbs</span></span><br><span class="line">~]<span class="comment"># echo "/nginx/html/bbs/index.html" &gt; /nginx/html/bbs/index.html</span></span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line">~]<span class="comment"># curl 172.18.135.1:8080/bbs</span></span><br><span class="line">/nginx/html/bbs/index.html</span><br><span class="line"></span><br><span class="line">查看web_server打印的日志</span><br><span class="line">[::ffff:172.17.0.1]:50650: response:404</span><br><span class="line"></span><br><span class="line"><span class="comment">##有/##</span></span><br><span class="line">       server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        root /nginx/html;</span><br><span class="line">        location /bbs &#123;</span><br><span class="line">        proxy_pass http://172.17.0.2/; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~]<span class="comment"># curl 172.18.135.1:8080/bbs</span></span><br><span class="line">websrv1</span><br><span class="line"></span><br><span class="line">查看web_server打印的日志</span><br><span class="line">[::ffff:172.17.0.1]:50648: response:200</span><br><span class="line"></span><br><span class="line">··············································································</span><br><span class="line">范例：使用正则表达式匹配客户端请求的文件进行代理</span><br><span class="line">配置nginx代理</span><br><span class="line"><span class="comment">#"proxy_pass"不能在正则表达式给出的位置中</span></span><br><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        location ~* \.(jpg|png|jpeg) &#123;<span class="comment">#如果客户端请求这些资源则代理则将客户段的请求代理到web_server的/images/目录下文件</span></span><br><span class="line">        proxy_pass http://172.17.0.1;<span class="comment">#proxy_pass定义的匹配条件后面不可以url（客户的请求资源url和自动补在服务器上，如果客户请求的http://172.18.135.1:8888/bbs/a.jpg,如果后端的web服务器上有这个资源，则客户端也回加载此图片（后面的uri是原封不动的放在后端服务器上的））</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># nginx -t</span></span><br><span class="line">~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">在web_server上放置图片提供访问（从宿主机上查找图片放在容器对应映射在宿主机上的存储卷）</span><br><span class="line">~]<span class="comment"># cd /vols/websrv1/</span></span><br><span class="line">websrv1]<span class="comment"># cp /usr/share/cups/www/images/smiley.jpg .</span></span><br><span class="line"></span><br><span class="line">客户端访问测试</span><br><span class="line">http://172.18.135.1:8888/smiley.jpg</span><br><span class="line"></span><br><span class="line">查看web_server是否接受请求</span><br><span class="line">[::ffff:172.17.0.1]:50720: response:200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##测试请求web_server下的其他url的图片</span></span><br><span class="line">宿主机放置资源在存储卷上</span><br><span class="line">bbs]<span class="comment"># pwd</span></span><br><span class="line">/vols/websrv1/bbs</span><br><span class="line">请求测试</span><br><span class="line">http://172.18.135.1:8888/bbs/profile.jpg</span><br><span class="line">```</span><br><span class="line">- `2、proxy_set_header field value;`</span><br><span class="line">- 设定发往后端主机的请求报文的请求首部的值；Context:http, server, location</span><br><span class="line">- proxy_set_header X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">- proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">`范例：proxy_set_header ：将请求报文发送给后端被代理的服务器时，修改请求报文的某些或者某个首部`</span><br><span class="line">```bash</span><br><span class="line">七层调度是可以操纵两路报文：</span><br><span class="line">第一：把请求转给后端时，可以操作报文</span><br><span class="line">第二：将后端服务器的响应发还给客户端时，可以操作报文</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">实现被调度的服务器显示的日志查看到的源地址为客户端的地址</span><br><span class="line"><span class="comment">#利用变量操作客户端请求被调度的服务器的请求报文的源地址的修改</span></span><br><span class="line"><span class="comment">#proxy_set_header X-Real-IP  $remote_addr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志查看被调度的默认的请求的客户端的地址，默认显示的不是真正的客户端的地址，显示的是调度的器的地址（请求报文的源地址）</span></span><br><span class="line"><span class="comment">#[::ffff:172.17.0.1]:50728: response:200</span></span><br><span class="line"></span><br><span class="line">（让代理服务器发请求报文时添加特定的请求首部，修改为真正的客户端地址，让后端被调度的服务器记录日志时，改为记录新的日志）</span><br><span class="line"></span><br><span class="line">编辑被调度的web服务的配置文件</span><br><span class="line">1.查看后端web服务器的使用的日志的格式</span><br><span class="line">CustomLog /path/to/file 格式定义（common、combined、combinedio）</span><br><span class="line"></span><br><span class="line">2.修改web后端使用的日志的格式</span><br><span class="line">LogFormat <span class="string">"%&#123;X-Real-IP&#125;i %l %u %t \"%r\" %&gt;s %b"</span> common</span><br><span class="line"></span><br><span class="line">3.修改nginx调度器的配置文件</span><br><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        listen 8888;</span><br><span class="line">        location ~* \.(jpg|png|jpeg) &#123;</span><br><span class="line">        proxy_pass http://172.18.135.2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~]<span class="comment"># nginx -t</span></span><br><span class="line">~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">4.客户端访问调度器并查看后端的web_server服务器的访问日志信息</span><br><span class="line">~]<span class="comment"># cat /var/log/httpd/access_log </span></span><br><span class="line">172.18.135.5 - - [12/Jan/2019:10:08:05 +0800] <span class="string">"GET /smiley.jpg HTTP/1.0"</span> 200 14120</span><br><span class="line">(此地址文真实客户端地址)</span><br></pre></td></tr></table></figure><ul><li><code>3、proxy_cache_path</code><ul><li>定义可用于proxy功能的缓存；Context:    http            <ul><li>proxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</li></ul></li></ul></li></ul><p>范例：    定义可用于proxy功能的缓存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">页面缓存（http服务）</span><br><span class="line"><span class="comment">#nginx作为反向代理服务器时支持缓存功能的，缓存是由缓存模块个缓存机制来提供的，对于缓存服务来说要想启用起来，是由代理模块自带的，在nginx上想要使用代理，必须要匹配模式，在nginx中的缓存是要先定义在使用的，</span></span><br><span class="line">levels=levels <span class="comment">#定义使用几级索引，做多使用三级=每级索引当中打算使用几个字符创建多少个子项（一个字符是16个，两个字符就是256个，2^8）</span></span><br><span class="line"><span class="comment">#inactive=time非活动时间</span></span><br><span class="line"><span class="comment">#max_size=size  整个磁盘空间用于缓存的时间的空间的大小</span></span><br><span class="line"><span class="comment">#manager_sleep=time每隔多长时间检查缓存的有效性</span></span><br><span class="line"><span class="comment">#manager_threshold=time如果缓存时间沾满，如何使用LRU（最近最少使用算法）算法激活，并清理缓存</span></span><br><span class="line"></span><br><span class="line">范例：配置nginx的proxy功能的页面缓存</span><br><span class="line"><span class="comment">#直接定义在http的上下文</span></span><br><span class="line"><span class="comment"># proxy_cache_path定义缓存的放置路径，并确保定义的缓存的目录的存在,应该放置在当前主机上的io性能最好的设备上（固态硬盘）（缓存对cpu的压力小，但是最磁盘io的压力很大）</span></span><br><span class="line"><span class="comment">#levels=1:1:1 定义缓存的路由级别，每个路由有16个子目录</span></span><br><span class="line"><span class="comment">#keys_zone定义内存空间的路径和定义内存数据或者索引数据的缓存（K/V）</span></span><br><span class="line"><span class="comment">#max_size=size指定磁盘空间的大小</span></span><br><span class="line"><span class="comment">#proxy_cache调用缓存的名称</span></span><br><span class="line"><span class="comment">#proxy_cache_key $schene$proxy_host$is_args$args;#定义使用的键bash（协议：服务器地址：端口：请求的uri）如果是服务器的地址使用了泛域名解析，则要去掉协议和服务器地址</span></span><br><span class="line"><span class="comment">#proxy_cache_valid 定义缓存进来的键被保留多长时间</span></span><br><span class="line"><span class="comment">#proxy_cache_methods(默认为GET、POST)(对web服务器来讲通常仅缓存读操作，不缓存写操作，查询缓存时只对读操作查缓存)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#proxy_cache_use_stale (缓存的内容不一定是权威的内容，所有能够响应客户端的前提是后端服务器时ok的，如果客户的某一请求来了服务器时不在了，代理联系不到后端的服务器，并且缓存中的内容已经过期了客户端的且缓存中的内容还是存在的，决定代理服务器还要不要给客户端返回结果)off代表如果服务器有问题时代理服务器不拿缓存中数据去对客户端进行响应，定义服务器出现问题是代理继续使用未过期的缓存进行响应proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | off ...;</span></span><br><span class="line"></span><br><span class="line">编辑nginx代理节点的配置文件</span><br><span class="line"><span class="comment">#定义缓存功能</span></span><br><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">http &#123;</span><br><span class="line">        proxy_cache_path /var/cache/nginxlevels=1:1:2 keys_zone=webcache:10mmax_size=2G;</span><br><span class="line">....</span><br><span class="line"><span class="comment">#调用缓存</span></span><br><span class="line">        server &#123;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        listen 8888;</span><br><span class="line">        location ~* \.(jpg|png|jpeg) &#123;</span><br><span class="line">        proxy_pass http://172.18.135.2;</span><br><span class="line">        proxy_cache     webcache;</span><br><span class="line">proxy_cache_key <span class="variable">$request_uri</span>;<span class="comment">#设置仅使用uri当客户端请求的bash的键</span></span><br><span class="line">proxy_cache_valid 200 302 10m;<span class="comment">#根据用户第一次请求的响应码定义缓存的时长</span></span><br><span class="line">proxy_cache_valid 3011h;</span><br><span class="line">proxy_cache_valid any1m;</span><br><span class="line">proxy_cache_methods GET HEAD;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># nginx -t</span></span><br><span class="line">~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">客户端进行访问测试</span><br><span class="line">http://172.18.135.1:8888/smiley.jpg</span><br><span class="line"></span><br><span class="line">调度器查看是否生成缓存</span><br><span class="line">~]<span class="comment"># tree /var/cache/nginx</span></span><br><span class="line">/var/cache/nginx</span><br><span class="line">└── 2<span class="comment">#一级桶</span></span><br><span class="line">    └── b<span class="comment">#二级桶</span></span><br><span class="line">        └── df<span class="comment">#三级桶</span></span><br><span class="line">            └── ac2582e15d13e9fa21b8da128b16dfb2</span><br><span class="line">3 directories, 1 file</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># cat /var/cache/nginx/2/b/df/ac2582e15d13e9fa21b8da128b16dfb2 </span></span><br><span class="line">޷9\YJ9\u9\¼b]<span class="string">"3728-57f392ebe4ca8"</span></span><br><span class="line">KEY: /smiley.jpg</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 12 Jan 2019 05:05:11 GMT</span><br><span class="line">Server: Apache/2.4.6 (CentOS)</span><br><span class="line">Last-Modified: Sat, 12 Jan 2019 02:00:57 GMT</span><br><span class="line">ETag: <span class="string">"3728-57f392ebe4ca8"</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 14120</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: image/jpeg</span><br></pre></td></tr></table></figure></p><ul><li><p>4、proxy_cache zone | off;</p><ul><li>指明要调用的缓存，或关闭缓存机制；Context:    http, server, location</li></ul></li><li><p>5、    proxy_cache_key string;</p><ul><li>缓存中用于“键”的内容；<ul><li>默认值：proxy_cache_key $scheme$proxy_host$request_uri;</li></ul></li></ul></li><li><p>6、proxy_cache_valid [code …] time;</p><ul><li><p>定义对特定响应码的响应内容的缓存时长；</p><ul><li><p>定义在http{…}中；</p><ul><li>proxy_cache_path /var/cache/nginx/proxy_cache levels=1:1:1 keys_zone=pxycache:20m max_size=1g;</li></ul></li><li><p>定义在需要调用缓存功能的配置段，例如server{…}；</p><ul><li>proxy_cache pxycache;</li><li>proxy_cache_key $request_uri;</li><li>proxy_cache_valid 200 302 301 1h;</li><li>proxy_cache_valid any 1m;</li></ul></li></ul></li></ul></li><li><p>7、proxy_cache_use_stale</p><ul><li>proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | off …;</li><li>确定在与代理服务器通信期间发生错误时，可以在哪些情况下使用陈旧的缓存响应。        </li></ul></li><li><p>8、proxy_cache_methods GET | HEAD | POST …;</p><ul><li>如果在这个指令中列出了客户机请求方法，那么响应将被缓存。“GET”和“HEAD”方法总是添加到列表中，但是建议显式地指定它们。    </li></ul></li><li><p><code>9、proxy_hide_header field;</code>    #操纵发送给客户端的响应报文</p><ul><li>默认情况下，nginx不传递头字段“Date”、“Server”、“X-Pad”和“X-Accel-…”从代理服务器到客户机的响应。proxy_hide_header指令设置不传递的其他字段。    (参考文档：<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_purge" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_purge</a>)</li></ul></li><li><p><code>10、proxy_connect_timeout time;</code></p><ul><li>定义与代理服务器建立连接的超时。应该注意的是，这个超时通常不能超过75秒。</li><li>默认为60s；最长为75s；</li></ul></li><li><code>11、proxy_read_timeout time;</code> <ul><li>定义从代理服务器读取响应的超时。超时仅在两个连续读取操作之间设置，而不是为整个响应的传输设置。</li></ul></li><li><code>12、proxy_send_timeout time;</code><ul><li>设置将请求发送到代理服务器的超时。仅在两个连续的写操作之间设置超时，而不是为整个请求的传输设置超时。如果代理服务器在此期间没有收到任何消息，则连接将关闭。</li></ul></li></ul><h3 id="ngx-http-headers-module模块"><a href="#ngx-http-headers-module模块" class="headerlink" title="ngx_http_headers_module模块"></a><code>ngx_http_headers_module模块</code></h3><ul><li>ngx_http_headers_module模块允许将“Expires”和“Cache-Control”报头字段以及任意字段添加到响应报头中。</li><li><p>向由代理服务器响应给客户端的响应报文添加自定义首部，或修改指定首部的值；</p></li><li><p><code>1、add_header name value [always];</code></p><ul><li>添加自定义首部；<ul><li>add_header X-Via  $server_addr;</li><li>add_header X-Accel $server_name;</li></ul></li></ul></li><li>2、expires [modified] time;<ul><li>expires epoch | max | off;</li><li>用于定义Expire或Cache-Control首部的值；</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nginx的proxy模块&quot;&gt;&lt;a href=&quot;#nginx的proxy模块&quot; class=&quot;headerlink&quot; title=&quot;nginx的proxy模块&quot;&gt;&lt;/a&gt;nginx的proxy模块&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/10/nginx的proxy模块/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://9527dz.top/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://9527dz.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置和使用基础--Webserver</title>
    <link href="https://9527dz.top/2019/01/09/nginx%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%802/"/>
    <id>https://9527dz.top/2019/01/09/nginx配置和使用基础2/</id>
    <published>2019-01-09T11:54:53.467Z</published>
    <updated>2019-01-12T01:51:21.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-Webserver-第二章：配置指令"><a href="#Nginx-Webserver-第二章：配置指令" class="headerlink" title="Nginx-Webserver:第二章：配置指令"></a>Nginx-Webserver:第二章：配置指令</h1><p><img src="/2019/01/09/nginx配置和使用基础2/标题.png" alt=""><br><a id="more"></a></p><h2 id="程序环境"><a href="#程序环境" class="headerlink" title="程序环境"></a>程序环境</h2><ul><li><p>程序环境</p><ul><li>配置文件的组成部分：</li><li>主配置文件：nginx.conf<ul><li>include conf.d/*.conf</li><li>fastcgi， uwsgi，scgi等协议相关的配置文件</li><li>mime.types：支持的mime类型</li></ul></li><li><p>主程序文件：/usr/sbin/nginx</p><ul><li>Unit File：nginx.service</li></ul></li><li><p>配置：</p><ul><li>主配置文件的配置指令：<ul><li>directive value [value2 …];</li></ul></li></ul></li><li><p>注意：</p><ul><li>(1) 指令必须以分号结尾；</li><li>(2) 支持使用配置变量；<ul><li>内建变量：由Nginx模块引入，可直接引用；</li><li>自定义变量：由用户使用set命令定义；<ul><li>set variable_name value;</li></ul></li></ul></li><li>引用变量：$variable_name</li></ul></li></ul></li><li>nginx支持三类功能在配置文件中放在三个不同的上下文配置段中（一般这三种配置不会同时出现）<ul><li>web<ul><li>http{}</li></ul></li><li>mail<ul><li>mail{}</li></ul></li><li>四层调度机制<ul><li>stream{}</li></ul></li></ul></li></ul><h2 id="主配置文件结构："><a href="#主配置文件结构：" class="headerlink" title="主配置文件结构："></a>主配置文件结构：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">main block：主配置段，也即全局配置段；</span><br><span class="line">event &#123;</span><br><span class="line">...</span><br><span class="line">&#125;：事件驱动相关的配置；</span><br><span class="line">http &#123;</span><br><span class="line">...</span><br><span class="line">&#125;：http/https 协议相关的配置段；</span><br><span class="line">mail &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">stream &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http协议相关的配置结构</span><br><span class="line">http &#123;</span><br><span class="line">...</span><br><span class="line">...：各server的公共配置</span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">&#125;：每个server用于定义一个虚拟主机；</span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">listen <span class="comment">#监听端口</span></span><br><span class="line">server_name <span class="comment">#服务器名称</span></span><br><span class="line">root    <span class="comment">#网页文件根目录</span></span><br><span class="line"><span class="built_in">alias</span></span><br><span class="line">location [OPERATOR] URL &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> CONDITION &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置指令"><a href="#配置指令" class="headerlink" title="配置指令"></a>配置指令</h2><h3 id="main配置段常见的配置指令："><a href="#main配置段常见的配置指令：" class="headerlink" title="main配置段常见的配置指令："></a>main配置段常见的配置指令：</h3><ul><li>分类：<ul><li>正常运行必备的配置</li><li>优化性能相关的配置</li><li>用于调试及定位问题相关的配置</li><li>事件驱动相关的配置</li></ul></li></ul><h3 id="正常运行必备的配置："><a href="#正常运行必备的配置：" class="headerlink" title="正常运行必备的配置："></a>正常运行必备的配置：</h3><ul><li><p>1、user</p><ul><li>Syntax:    user user [group];</li><li>Default:    user nobody nobody;</li><li>Context:    main            </li><li>定义工作进程使用的用户和组凭据。如果省略组，则使用名称与user相同的组。</li></ul></li><li><p>2、pid /PATH/TO/PID_FILE;</p><ul><li>指定存储nginx主进程进程号码的文件路径；</li></ul></li><li><p>3、include file | mask;</p><ul><li>指明包含进来的其它配置文件片断；</li></ul></li><li>4、load_module file;<ul><li>指明要装载的动态模块；</li></ul></li></ul><h3 id="性能优化相关的配置："><a href="#性能优化相关的配置：" class="headerlink" title="性能优化相关的配置："></a>性能优化相关的配置：</h3><ul><li><p><code>1、worker_processes number | auto;</code></p><ul><li>worker进程的数量；通常应该等于小于当前主机的cpu的物理核心数；</li><li>auto：当前主机物理CPU核心数；</li></ul></li><li><p><code>2、worker_cpu_affinity cpumask ...;</code></p><ul><li>worker_cpu_affinity auto [cpumask];    <ul><li>nginx进程的CPU亲缘性；    </li></ul></li><li>CPU MASK：(cpu位掩码称为bit mask)<ul><li>00000000：</li><li>0000 0001：0号CPU</li><li>0000 0010：1号CPU</li><li>0000 0100：2号CPU</li><li>… …</li><li>0000 0011：0和1号CPU；<ul><li>优点：提升缓存的命中率</li><li>context switch:会产生cpu不必要的消耗</li></ul></li></ul></li></ul></li><li><p>3、worker_priority number;</p><ul><li>指定worker进程的nice值，设定worker进程优先级；[-20,20]</li><li>（数字越小优先级越高，默认的值为0）    </li></ul></li><li><p><code>4、worker_rlimit_nofile number;</code></p><ul><li>worker进程所能够打开的文件数量上限；</li></ul></li><li><p>time_resolution</p><ul><li>计时器解析度，降低此值，可减少gettimeofday()系统调用的次数</li></ul></li></ul><h3 id="调试、定位问题："><a href="#调试、定位问题：" class="headerlink" title="调试、定位问题："></a>调试、定位问题：</h3><h4 id="如果是编译安装想要使用一下功能必须在编译时使用–with-debug功能开启"><a href="#如果是编译安装想要使用一下功能必须在编译时使用–with-debug功能开启" class="headerlink" title="如果是编译安装想要使用一下功能必须在编译时使用–with-debug功能开启"></a>如果是编译安装想要使用一下功能必须在编译时使用–with-debug功能开启</h4><ul><li><p>1、daemon on|off;    </p><ul><li>是否以守护进程方式运行Nignx；</li></ul></li><li><p>2、master_process on|off;</p><ul><li>是否以master/worker模型运行nginx；默认为on；(适用于追踪和调试问题，开启以单进程模式运行nginx，主进程直接处理用户的请求)</li></ul></li><li><p>3、error_log file [level];</p><ul><li>错误日志和日志级别（web服务器一般有两种日志：访问日志和错误日志）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在配置nginx.conf 的时候，有一项是指定错误日志的，默认情况下你不指定也没有关系，因为nginx很少有错误日志记录的。但有时出现问题时，是有必要记录一下错误日志的，方便我们排查问题。</span><br><span class="line"></span><br><span class="line">error_log 级别分为 debug, info, notice, warn, error, crit  默认为crit, 该级别在日志名后边定义格式如下：</span><br><span class="line">error_log  /your/path/error.log crit; </span><br><span class="line"></span><br><span class="line">crit 记录的日志最少，而debug记录的日志最多。如果你的nginx遇到一些问题，比如502比较频繁出现，但是看默认的error_log并没有看到有意义的信息，那么就可以调一下错误日志的级别，当你调成error级别时，错误日志记录的内容会更加丰富。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="事件驱动相关的配置"><a href="#事件驱动相关的配置" class="headerlink" title="事件驱动相关的配置:"></a>事件驱动相关的配置:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#事件驱动中的参数定义决定了每一个子进程支持的并发连接数</span></span><br><span class="line">events &#123;   </span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">- `1、worker_connections number;`</span><br><span class="line">- 每个worker进程所能够打开的最大并发连接数数量；</span><br><span class="line">    - 整个nginx并发连接数（进程数*每个进程可以打开的并发连接数）</span><br><span class="line">    - worker_processes * worker_connections</span><br><span class="line"></span><br><span class="line">- 2、use [epoll|rtsig|select|poll];</span><br><span class="line">- 指明并发连接请求的处理方法；</span><br><span class="line">- 事件驱动机制模型： use epoll;</span><br><span class="line">- 建议让nginx自行选择</span><br><span class="line"></span><br><span class="line">- 3、accept_mutex on | off;（是否打开互斥锁）</span><br><span class="line">- 处理新的连接请求的方法；on意味着由各worker轮流处理新请求，Off意味着每个新请求的到达都会通知所有的worker进程；</span><br><span class="line"></span><br><span class="line">- 4、lock_file file;</span><br><span class="line">- accept_mutex用到的锁文件的路径；</span><br><span class="line"></span><br><span class="line"><span class="comment">## http协议的相关配置</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">http协议的相关配置：</span><br><span class="line">http &#123;    <span class="comment">#http全局配置，可共享给多个server使用</span></span><br><span class="line">... ...</span><br><span class="line">server &#123;  <span class="comment">#一到多个server,每一个server用来定义一个虚拟主机</span></span><br><span class="line">...</span><br><span class="line">listen  <span class="comment">#</span></span><br><span class="line">server_name</span><br><span class="line">root</span><br><span class="line">location [OPERATOR] /uri/ &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="与套接字相关的配置"><a href="#与套接字相关的配置" class="headerlink" title="与套接字相关的配置"></a>与套接字相关的配置</h3><ul><li>1、server { … }<ul><li>配置一个虚拟主机；</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen address[:PORT]|PORT; <span class="comment">#指定要监听的地址和端口，仅指定监听的端口，表示监听本机可用的所有此端口，或者指定地址，代表监听此地址的80端口，或者仅监听在本机的unix.socket</span></span><br><span class="line">server_name SERVER_NAME;</span><br><span class="line">root /PATH/TO/DOCUMENT_ROOT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>2、listen PORT|address[:port]|unix:/PATH/TO/SOCKET_FILE</p><ul><li><p>listen address[:port] [default_server] [ssl] [http2 | spdy]  [backlog=number] [rcvbuf=size] [sndbuf=size]</p><ul><li>default_server：设定为默认虚拟主机；</li><li>ssl：限制仅能够通过ssl连接提供服务；</li></ul></li><li>http2:要求支持http2协议；<ul><li>backlog=number：后援队列长度；</li><li>rcvbuf=size：接收缓冲区大小；</li><li>sndbuf=size：发送缓冲区大小；</li></ul></li></ul></li><li><p>3、server_name name …;</p><ul><li>指明虚拟主机的主机名称；后可跟多个由空白字符分隔的字符串；</li><li>支持*通配任意长度的任意字符；</li><li>server_name <em>.magedu.com  <a href="http://www.magedu" target="_blank" rel="noopener">www.magedu</a>.</em></li><li>支持~起始的字符做正则表达式模式匹配；</li><li>server_name ~^www\d+.magedu.com$<ul><li>匹配机制：   <pre><code>-  (1) 首先是字符串精确匹配;     -     (2) 左侧*通配符；      -     (3) 右侧*通配符；    -     (4) 正则表达式；（尽量不要使用正则表达式，引擎在处理字符串影响效率）</code></pre></li></ul></li></ul></li><li><p>4、</p><ul><li>tcp_nodelay on | off;<ul><li>在keepalived模式下的连接是否启用TCP_NODELAY选项；</li></ul></li><li>tcp_nopush on|off;<ul><li>在sendfile模式下，是否启用TCP_CORK选项；</li></ul></li></ul></li><li><p>5、sendfile on | off;</p><ul><li>是否启用sendfile功能；</li></ul></li></ul><h3 id="定义路径相关的配置"><a href="#定义路径相关的配置" class="headerlink" title="定义路径相关的配置"></a>定义路径相关的配置</h3><ul><li><p><code>6、root path;</code></p><ul><li>设置web资源路径映射；用于指明用户请求的url所对应的本地文件系统上的文档所在目录路径；<ul><li>可用的位置：http（对整个http生效）, server（仅对一个server生效）, location（仅对一个location生效）, if in location；</li></ul></li></ul></li><li><p><code>7、location [ = | ~ | ~* | ^~ ] uri { ... }</code>   </p><ul><li>用来表达nginx中，一组有匹配模式的url路径下的资源访问的属性定义和访问控制机制的</li><li><p>在一个server中location配置段可存在多个，用于实现从uri到文件系统的路径映射；  </p></li><li><p>ngnix会根据用户请求的URI来检查定义的所有location，并找出一个最佳匹配，而后应用其配置；</p></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">客户请求到收到请求，服务端的匹配路由</span><br><span class="line"></span><br><span class="line">  Nginx--&gt;server_name</span><br><span class="line">    server</span><br><span class="line">    server</span><br><span class="line">  Server--&gt;Location</span><br><span class="line">    location&#123;&#125;  <span class="comment">#仅为一个location所匹配处理</span></span><br><span class="line">      <span class="keyword">if</span></span><br><span class="line">      <span class="keyword">if</span></span><br><span class="line">    location&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=：对URI做精确匹配；例如, http://www.9727.top/，</span><br><span class="line">http://www.9727.top/index.html</span><br><span class="line"></span><br><span class="line">  location  =  / &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~：对URI做正则表达式模式匹配，区分字符大小写；</span><br><span class="line">~*：对URI做正则表达式模式匹配，不区分字符大小写；</span><br><span class="line">^~：对URI的左半部分做匹配检查，不区分字符大小写；</span><br><span class="line">不带符号：以URI为前缀的所有uri；</span><br><span class="line"></span><br><span class="line">    匹配优先级：=, ^~, ～/～*，不带符号；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        让我们通过一个例子来说明以上内容：</span><br><span class="line">            location = / &#123;</span><br><span class="line">                [ configuration A ]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            location / &#123;</span><br><span class="line">                [ configuration B ]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            location /documents/ &#123;</span><br><span class="line">                [ configuration C ]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            location ^~ /images/ &#123;</span><br><span class="line">                [ configuration D ]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">                [ configuration E ]</span><br><span class="line">            &#125;</span><br><span class="line">            “ /”请求将匹配配置A，“ /index.html”请求将匹配配置B，“ /documents/document.html”请求将匹配配置C，“ /images/1.gif”请求将匹配配置D，“ /documents/1.jpg”请求将匹配配置E.</span><br><span class="line">            “ @”前缀定义命名位置。这样的位置不用于常规请求处理，而是用于请求重定向。它们不能嵌套，也不能包含嵌套位置。</span><br></pre></td></tr></table></figure><p><code>范例： 用来表达nginx中，一组有匹配模式的url路径下的资源访问的属性定义和访问控制机制的</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line">        root <span class="string">"/ngx/html"</span>;</span><br><span class="line">        location / &#123;</span><br><span class="line">        root <span class="string">"/web/nginx/html"</span>;</span><br><span class="line">&#125;</span><br><span class="line">        location /images &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> ~]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">~]<span class="comment"># nginx -s reload</span></span><br><span class="line">~]<span class="comment"># curl 172.18.135.1:8080</span></span><br><span class="line">/web/nginx/html/index.html</span><br><span class="line">~]<span class="comment"># curl 172.18.135.1:8080/images/</span></span><br><span class="line">/ngx/html/images/index.html</span><br></pre></td></tr></table></figure></p><ul><li><code>8、alias path;</code><ul><li>定义路径别名，文档映射的另一种机制；仅能用于location上下文；    <ul><li>注意：location中使用root指令和alias指令的意义不同；<ul><li>(a) root，给定的路径对应于location中的/uri/左侧的/；</li><li>(b) alias，给定的路径对应于location中的/uri/右侧的/；</li></ul></li></ul></li></ul></li></ul><p><code>范例：alias path</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#alias</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line"><span class="comment">#        root "/ngx/html";</span></span><br><span class="line">        location / &#123;</span><br><span class="line">        root <span class="string">"/web/nginx/html"</span>;</span><br><span class="line">&#125;</span><br><span class="line">        location /images &#123;</span><br><span class="line">        <span class="built_in">alias</span> <span class="string">"/ngx/html"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># curl 172.18.135.1:8080/images/</span></span><br><span class="line">/ngx/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment">#root</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line"><span class="comment">#       root "/ngx/html";</span></span><br><span class="line">        location / &#123;</span><br><span class="line">        root <span class="string">"/web/nginx/html"</span>;</span><br><span class="line">&#125;</span><br><span class="line">        location /images &#123;</span><br><span class="line">        root <span class="string">"/ngx/html"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># curl 172.18.135.1:8080/images/</span></span><br><span class="line">/ngx/html/images/index.html</span><br></pre></td></tr></table></figure></p><ul><li><p>9、index file …;</p><ul><li>默认资源；http, server, location；</li></ul></li><li><p><code>10、error_page code ... [=[response]] uri;</code> </p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个错误页面即错误重定向</span></span><br><span class="line">error_page 404 /404.html;</span><br><span class="line">location = /404.html &#123;</span><br><span class="line">root <span class="string">"/www/error_pages"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>范例：error_page code ... [=[response]] uri;  定义一个错误页面</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">status(状态码)：告诉客户端的请求发生的结果：</span><br><span class="line">1XX：100-101，信息提示</span><br><span class="line">2XX：200-206，成功类型信息</span><br><span class="line">3XX：300-305，重定向的资源</span><br><span class="line">4XX：400-415，错误类型的信息，客户端的错误，</span><br><span class="line">5XX：500-505，错误类型错误，服务器端错误</span><br><span class="line">常用的状态码：</span><br><span class="line">200：:成功响应，请求的所有数据通过相应报文的entity-body部分发送，OK</span><br><span class="line">301：请求的URL执行的资源已经被删除；但在相应报文中通过首部Location指明了资源的所在位置；Moved Permanently （永久重定向）</span><br><span class="line">302：与301相似，但在相应报文中通过首部Location指明了资源现在所处临时新位置；Found （临时重定向）</span><br><span class="line">304：客户端发出了条件式请求，但服务器的资源为曾发生改变，则通过相应此响应状态码通知客户端，Not Modified</span><br><span class="line">401：需要输入账号和密码认证方能访问资源：Unauthorized</span><br><span class="line">403：请求被禁止：Forbidden</span><br><span class="line">404：服务器无法找到客户端请求的资源：Not Found</span><br><span class="line">500：服务器内部错误：InternalServerError</span><br><span class="line">502：:代理服务器从后端服务器中收到的一条伪响应：Bad Gateway</span><br><span class="line"></span><br><span class="line">定义一个404服务器无法找到客户端请求的资源的错误页面</span><br><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line"><span class="comment">#       root "/ngx/html";</span></span><br><span class="line">        location / &#123;</span><br><span class="line">        root <span class="string">"/web/nginx/html"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        location /images &#123;</span><br><span class="line">        root <span class="string">"/ngx/html"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># curl 172.18.135.1:8080/aaaa/</span></span><br><span class="line">/web/nginx/html/404.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line"><span class="comment">#       root "/ngx/html";</span></span><br><span class="line">        location / &#123;</span><br><span class="line">        root <span class="string">"/web/nginx/html"</span>;</span><br><span class="line">&#125;</span><br><span class="line">        location /images &#123;</span><br><span class="line">        root <span class="string">"/ngx/html"</span>;</span><br><span class="line">&#125;</span><br><span class="line">        error_page 404 /xx.html;</span><br><span class="line">        location = /xx.html&#123;</span><br><span class="line">        root <span class="string">"/etc/nginx/error/"</span></span><br><span class="line">&#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>11、try_files file … uri;</li></ul><h3 id="定义客户端请求的相关配置"><a href="#定义客户端请求的相关配置" class="headerlink" title="定义客户端请求的相关配置"></a>定义客户端请求的相关配置</h3><ul><li>12、keepalive_timeout timeout [header_timeout];<ul><li>设定保持连接的超时时长，0表示禁止长连接；默认为75s；</li></ul></li><li>13、keepalive_requests number;<ul><li>在一次长连接上所允许请求的资源的最大数量，默认为100;                     </li></ul></li><li>14、keepalive_disable none | browser …;<ul><li>对哪种浏览器禁用长连接；</li></ul></li><li>15、send_timeout time;<ul><li>向客户端发送响应报文的超时时长，此处，是指两次写操作之间的间隔时长；</li></ul></li><li>16、client_body_buffer_size size;<ul><li>用于接收客户端请求报文的body部分的缓冲区大小；默认为16k；超出此大小时，其将被暂存到磁盘上的由client_body_temp_path指令所定义的位置；</li></ul></li><li>17、client_body_temp_path path [level1 [level2 [level3]]];<ul><li>设定用于存储客户端请求报文的body部分的临时存储路径及子目录结构和数量；<ul><li>16进制的数字；<ul><li>client_body_temp_path   /var/tmp/client_body  1 2 2  <ul><li>1：表示用一位16进制数字表示一级子目录；0-f  </li><li>2：表示用2位16进程数字表示二级子目录：00-ff  </li><li>2：表示用2位16进程数字表示三级子目录：00-ff  </li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="对客户端进行限制的相关配置"><a href="#对客户端进行限制的相关配置" class="headerlink" title="对客户端进行限制的相关配置"></a>对客户端进行限制的相关配置</h2><ul><li>18、limit_rate rate;<ul><li>限制响应给客户端的传输速率，单位是bytes/second，0表示无限制；</li></ul></li><li>19、limit_except method … { … }<ul><li>限制对指定的请求方法之外的其它方法的使用客户端；</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">limit_except GET &#123;</span><br><span class="line">allow 192.168.1.0/24;</span><br><span class="line">deny  all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作优化的配置"><a href="#文件操作优化的配置" class="headerlink" title="文件操作优化的配置"></a>文件操作优化的配置</h2><ul><li>20、aio on | off | threads[=pool];<ul><li>是否启用aio功能；</li></ul></li><li>21、directio size | off;<ul><li>在Linux主机启用O_DIRECT标记，此处意味文件大于等于给定的大小时使用，例如directio 4m;</li></ul></li><li><p>22、open_file_cache off;</p><ul><li><p>open_file_cache max=N [inactive=time];</p><ul><li><p>nginx可以缓存以下三种信息：</p><ul><li>(1) 文件的描述符、文件大小和最近一次的修改时间；</li><li>(2) 打开的目录结构；</li><li><p>(3) 没有找到的或者没有权限访问的文件的相关信息；</p></li><li><p>max=N：可缓存的缓存项上限；达到上限后会使用LRU算法实现缓存管理；</p></li><li>inactive=time：缓存项的非活动时长，在此处指定的时长内未被命中的或命中的次数少于open_file_cache_min_uses指令所指定的次数的缓存项即为非活动项；</li></ul></li></ul></li></ul></li><li><p>23、open_file_cache_valid time;</p><ul><li>缓存项有效性的检查频率；默认为60s; </li></ul></li><li><p>24、open_file_cache_min_uses number;</p><ul><li>在open_file_cache指令的inactive参数指定的时长内，至少应该被命中多少次方可被归类为活动项；</li></ul></li><li>25、open_file_cache_errors on | off;<ul><li>是否缓存查找时发生错误的文件一类的信息；<h2 id="modules模块"><a href="#modules模块" class="headerlink" title="modules模块"></a>modules模块</h2><h3 id="ngx-http-access-module模块：实现基于ip的访问控制功能"><a href="#ngx-http-access-module模块：实现基于ip的访问控制功能" class="headerlink" title="ngx_http_access_module模块：实现基于ip的访问控制功能"></a><code>ngx_http_access_module模块：实现基于ip的访问控制功能</code></h3></li></ul></li><li>26、allow address | CIDR | unix: | all;</li><li>27、deny address | CIDR | unix: | all;<ul><li>http, server, location, limit_except</li><li>该ngx_http_access_module模块允许限制对某些客户端地址的访问。</li><li>访问也可以通过 密码，子请求的 结果或JWT来限制。通过地址和密码同时限制访问由satisf指令控制。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例配置（默认为allow）</span><br><span class="line">location / &#123;</span><br><span class="line">    deny  192.168.1.1;      <span class="comment">#单独拒绝此地址</span></span><br><span class="line">    allow 192.168.1.0/24;</span><br><span class="line">    allow 10.1.1.0/16;</span><br><span class="line">    allow 2001:0db8::/32;</span><br><span class="line">    deny  all;              <span class="comment"># 拒绝所有</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">按顺序检查规则，直到找到第一个匹配项。在此示例中，仅允许IPv4网络访问 10.1.1.0/16并且192.168.1.0/24 不包括地址192.168.1.1，以及IPv6网络2001:0db8::/32。如果有很多规则， 最好使用 ngx_http_geo_module模块变量。</span><br></pre></td></tr></table></figure><h3 id="ngx-http-auth-basic-module模块-实现基于用户的访问控制，使用basic机制进行用户认证；"><a href="#ngx-http-auth-basic-module模块-实现基于用户的访问控制，使用basic机制进行用户认证；" class="headerlink" title="ngx_http_auth_basic_module模块:实现基于用户的访问控制，使用basic机制进行用户认证；"></a><code>ngx_http_auth_basic_module模块:实现基于用户的访问控制，使用basic机制进行用户认证；</code></h3><ul><li>28、auth_basic string | off;</li><li>29、auth_basic_user_file file;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /admin/ &#123;</span><br><span class="line"><span class="built_in">alias</span> /webapps/app1/data/;</span><br><span class="line">auth_basic <span class="string">"Admin Area"</span>;    <span class="comment">#注释信息</span></span><br><span class="line">auth_basic_user_file /etc/nginx/.ngxpasswd;   <span class="comment">#放置授权加密可以访问的用户名密码文件路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：htpasswd命令由httpd-tools所提供；</span><br></pre></td></tr></table></figure><p><code>范例：基于ngx_http_auth_basic_module模块:实现基于用户的访问控制，使用basic机制进行用户认证</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">配置nginx实现basic加密认证访问</span><br><span class="line">    ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">          server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line">        root <span class="string">"/ngx/html"</span>;</span><br><span class="line">        location / &#123;</span><br><span class="line">        auth_basic <span class="string">"prvate images"</span>;<span class="comment">#注释信息</span></span><br><span class="line">        auth_basic_user_file <span class="string">"/etc/nginx/.ngxpasswd"</span>;<span class="comment">#存放用户名密码的文件定义</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">安装htpasswd命令</span><br><span class="line">htpasswd命令由httpd-tools所提供</span><br><span class="line">  ~]<span class="comment"># yum install httpd-tools -y</span></span><br><span class="line"></span><br><span class="line">创建存放实现加密的用户名和密码文件</span><br><span class="line">  -c 仅用于第一次创建用户时使用</span><br><span class="line">  -m 指定MD5加密算法</span><br><span class="line">  -b 直接给定密码，不使用交互式</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># htpasswd -c -m /etc/nginx/.ngxpasswd daizhe</span></span><br><span class="line">  New password: centos</span><br><span class="line">  Re-type new password: centos</span><br><span class="line">  Adding password <span class="keyword">for</span> user daizhe <span class="comment">#创建daizhe用户</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># htpasswd -m -b /etc/nginx/.ngxpasswd nn centos</span></span><br><span class="line">  Adding password <span class="keyword">for</span> user nn</span><br><span class="line"></span><br><span class="line">查看创建的加密的账号以及测试访问</span><br><span class="line">  ~]<span class="comment"># cat /etc/nginx/.ngxpasswd </span></span><br><span class="line">  daizhe:<span class="variable">$apr1</span><span class="variable">$5kVocZ7d</span><span class="variable">$KIumQtuh5wGySn0iUomd30</span></span><br><span class="line">  nn:<span class="variable">$apr1</span><span class="variable">$ayW</span>.DtQE<span class="variable">$sN5QCmC4enr</span>.a1rUkTHHK0</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">测试</span><br></pre></td></tr></table></figure><p><img src="/2019/01/09/nginx配置和使用基础2/加密.png" alt=""></p><h3 id="ngx-http-stub-status-module模块：用于输出nginx的基本状态信息；"><a href="#ngx-http-stub-status-module模块：用于输出nginx的基本状态信息；" class="headerlink" title="ngx_http_stub_status_module模块：用于输出nginx的基本状态信息；"></a><code>ngx_http_stub_status_module模块：用于输出nginx的基本状态信息；</code></h3><ul><li>30、stub_status;<ul><li>配置示例：</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">location  /basic_status &#123;</span><br><span class="line">stub_status;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">- Active connections: 291 </span><br><span class="line">- server accepts handled requests</span><br><span class="line">- 16630948 16630948 31070465 </span><br><span class="line">- Reading: 6 Writing: 179 Waiting: 106 </span><br><span class="line"></span><br><span class="line">- Active connections: 活动状态的连接数；</span><br><span class="line">- accepts：已经接受的客户端请求的总数；</span><br><span class="line">- handled：已经处理完成的客户端请求的总数；</span><br><span class="line">- requests：客户端发来的总的请求数；</span><br><span class="line">- Reading：处于读取客户端请求报文首部的连接的连接数；</span><br><span class="line">- Writing：处于向客户端发送响应报文过程中的连接数；</span><br><span class="line">- Waiting：处于等待客户端发出请求的空闲连接数；</span><br><span class="line"></span><br><span class="line">范例：ngx_http_stub_status_module模块：用于输出nginx的基本状态信息；</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">        &#125;</span><br><span class="line">        location = /ngx_status &#123;<span class="comment">#声明访问指定的location可以查看nginx的基本状态信息</span></span><br><span class="line">        stub_status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># nginx -t</span></span><br><span class="line">~]<span class="comment"># nginx -s reload</span></span><br><span class="line">[root@host-192-168-35-104 ~]<span class="comment"># curl 172.20.101.158:8080/ngx_status</span></span><br><span class="line">Active connections: 1 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 9 9 8 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0</span><br></pre></td></tr></table></figure><h3 id="ngx-http-log-module模块-gx-http-log-module模块以指定的格式写入请求日志。-访问日志"><a href="#ngx-http-log-module模块-gx-http-log-module模块以指定的格式写入请求日志。-访问日志" class="headerlink" title="ngx_http_log_module模块:gx_http_log_module模块以指定的格式写入请求日志。    (访问日志)"></a><code>ngx_http_log_module模块:gx_http_log_module模块以指定的格式写入请求日志。    (访问日志)</code></h3><ul><li><code>31、log_format name string ...;</code><ul><li>string可以使用nginx核心模块及其它模块内嵌的变量；</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#string可以使用nginx核心模块及其它模块内嵌的变量</span></span><br><span class="line"><span class="comment">#string可以命名为一下变量</span></span><br><span class="line"><span class="variable">$bytes_sent</span></span><br><span class="line">发送到客户端的字节数</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection</span></span><br><span class="line">连接序列号</span><br><span class="line"></span><br><span class="line"><span class="variable">$connection_requests</span></span><br><span class="line">通过连接发出的当前请求数（1.1.18）</span><br><span class="line"></span><br><span class="line"><span class="variable">$msec</span></span><br><span class="line">以秒为单位的时间，日志写入时的分辨率为毫秒</span><br><span class="line"></span><br><span class="line"><span class="variable">$pipe</span></span><br><span class="line">“ p”如果请求是流水线的，“ .”否则</span><br><span class="line"></span><br><span class="line"><span class="variable">$request_length</span></span><br><span class="line">请求长度（包括请求行，标题和请求正文）</span><br><span class="line"></span><br><span class="line"><span class="variable">$request_time</span></span><br><span class="line">以毫秒为单位请求处理时间（以秒为单位）; 从客户端读取第一个字节之间经过的时间，并将最后一个字节发送到客户端后的日志写入</span><br><span class="line"></span><br><span class="line"><span class="variable">$status</span></span><br><span class="line">回应状态</span><br><span class="line"></span><br><span class="line"><span class="variable">$time_iso8601</span></span><br><span class="line">当地时间采用ISO 8601标准格式</span><br><span class="line"></span><br><span class="line"><span class="variable">$time_local</span></span><br><span class="line">通用日志格式的本地时间</span><br><span class="line"></span><br><span class="line"><span class="variable">$remote_addr</span> </span><br><span class="line">远程客户端地址</span><br><span class="line"></span><br><span class="line"><span class="variable">$http_referer</span></span><br><span class="line">~]<span class="comment"># curl -e "www.baidu.com" 172.20.101.158:8080/ngx_status</span></span><br><span class="line">~]<span class="comment"># cat /var/log/nginx/access.log </span></span><br><span class="line">172.20.101.158 - - [10/Jan/2019:10:18:57 +0800] <span class="string">"GET /ngx_status HTTP/1.1"</span> 200 100 <span class="string">"www.baidu.com"</span> <span class="string">"curl/7.29.0"</span> <span class="string">"-"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">按字母顺序排列的变量索引</span><br><span class="line">http://nginx.org/en/docs/varindex.html</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看安装完nginx默认定义的日志的格式</span></span><br><span class="line"><span class="comment">#默认放置在http上下文，对所有的sever生效</span></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"><span class="comment">#调用此日志格式</span></span><br><span class="line">access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br></pre></td></tr></table></figure><ul><li><p>32、access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];</p><ul><li>access_log off;</li><li>访问日志文件路径，格式及相关的缓冲的配置；<ul><li>buffer=size</li><li>flush=time </li></ul></li></ul></li><li><p>33、open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time];</p><ul><li>open_log_file_cache off;    #关闭</li><li>缓存各日志文件相关的元数据信息；<ul><li>max：缓存的最大文件描述符数量；</li><li>min_uses：在inactive指定的时长内访问大于等于此值方可被当作活动项；</li><li>inactive：非活动时长；</li><li>valid：验正缓存中各缓存项是否为活动项的时间间隔；</li></ul></li></ul></li></ul><h3 id="ngx-http-gzip-module：-压缩传输-ngx-http-gzip-module模块是一个过滤器，它使用“gzip”方法压缩响应。这通常有助于将传输数据的大小减少一半甚至更多"><a href="#ngx-http-gzip-module：-压缩传输-ngx-http-gzip-module模块是一个过滤器，它使用“gzip”方法压缩响应。这通常有助于将传输数据的大小减少一半甚至更多" class="headerlink" title="ngx_http_gzip_module：(压缩传输)ngx_http_gzip_module模块是一个过滤器，它使用“gzip”方法压缩响应。这通常有助于将传输数据的大小减少一半甚至更多"></a><code>ngx_http_gzip_module：(压缩传输)ngx_http_gzip_module模块是一个过滤器，它使用“gzip”方法压缩响应。这通常有助于将传输数据的大小减少一半甚至更多</code></h3><ul><li><p>1、gzip on | off;    （总开关，是否开启压缩功能）#cpu资源紧缺尽量不要压缩，节省带宽，cpu不紧缺则可以考虑开启压缩传输（对文本文件进行压缩，其他格式的文件内容本身就是压缩的，压缩比不大，或许还可以增长）</p></li><li><p>2、gzip_comp_level level;</p><ul><li>设置响应的gzip压缩级别。可接受的值在1到9之间。（数字越大，压缩比越高，也越消耗cpu）    </li></ul></li><li><p>3、    gzip_disable regex …;</p><ul><li>禁用“User-Agent”头字段匹配任何指定正则表达式的请求的响应gzipping。    </li></ul></li><li><p>4、    gzip_min_length length;</p><ul><li>启用压缩功能的响应报文大小阈值； (资源压缩的最小下限阀值，一个资源已经3k了还怎么压缩，设置最小的下限)</li></ul></li><li><p>5、gzip_buffers number size;    </p><ul><li>支持实现压缩功能时为其配置的缓冲区数量及每个缓存区的大小；（内存资源较为充沛时启用，可以加速压缩的速度）</li></ul></li><li><p>6、gzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any …;</p><ul><li>nginx作为代理服务器接收到从被代理服务器发送的响应报文后，在何种条件下启用压缩功能的；<ul><li>off：对代理的请求不启用压缩</li><li>no-cache, no-store，private：表示从被代理服务器收到的响应报文首部的Cache-Control的值为此三者中任何一个，则启用压缩功能；</li><li>any：对任何可以压缩的内容都压缩</li></ul></li></ul></li><li><p>7、gzip_types mime-type …;</p><ul><li>压缩过滤器，仅对此处设定的MIME类型的内容启用压缩功能；（纯文本和html格式的内容默认就是压缩的内容）</li></ul></li></ul><p>范例：启用压缩<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">定义服务器的压缩功能</span><br><span class="line"><span class="comment">#定义在http上下文对所有的server都生效，定义在单独的server中仅对单个server生效</span></span><br><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">http &#123;</span><br><span class="line">.........</span><br><span class="line">    gzip on;<span class="comment">#开启压缩</span></span><br><span class="line">    gzip_comp_level 6;<span class="comment">#压缩比为6</span></span><br><span class="line">    gzip_min_length 64;<span class="comment">#低于64个字节则不压缩</span></span><br><span class="line">    gzip_proxied any;<span class="comment">#任何被代理的内容都压缩</span></span><br><span class="line">    gzip_types text/xml text/css application/javasctipt;<span class="comment">#压缩的文件类型</span></span><br><span class="line">.........</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># nginx -t</span></span><br><span class="line">~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">使用curl命令请求服务端进行压缩</span><br><span class="line">[root@host-192-168-35-104 ~]<span class="comment"># curl --compressed -I 172.20.101.158</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.12.2</span><br><span class="line">Date: Thu, 10 Jan 2019 03:39:11 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Last-Modified: Thu, 10 Jan 2019 03:24:04 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: W/<span class="string">"5c36bad4-1293ae"</span></span><br><span class="line">Content-Encoding: gzip</span><br><span class="line"></span><br><span class="line">测试</span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/09/nginx配置和使用基础2/压缩.png" alt=""></p><h3 id="ngx-http-ssl-module模块："><a href="#ngx-http-ssl-module模块：" class="headerlink" title="ngx_http_ssl_module模块："></a>ngx_http_ssl_module模块：</h3><ul><li>1、    ssl on | off;<ul><li>为给定的虚拟服务器启用HTTPS协议。</li></ul></li><li><p>2、ssl_certificate file;</p><ul><li>当前虚拟主机使用PEM格式的证书文件；</li></ul></li><li><p>3、ssl_certificate_key file;</p><ul><li>当前虚拟主机上与其证书匹配的私钥文件；</li></ul></li><li><p>4、ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2];</p><ul><li>支持ssl协议版本，默认为后三个；</li></ul></li><li><p>5、ssl_session_cache off | none | [builtin[:size]] [shared:name:size];</p><ul><li><p>builtin[:size]：使用OpenSSL内建的缓存，此缓存为每worker进程私有；</p></li><li><p>[shared:name:size]：在各worker之间使用一个共享的缓存；</p></li></ul></li><li><p>6、ssl_session_timeout time;</p><ul><li>客户端一侧的连接可以复用ssl session cache中缓存 的ssl参数的有效时长；</li></ul></li></ul><p>范例：ssl加密传输nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">        server &#123;</span><br><span class="line">        listen              443 ssl;</span><br><span class="line"></span><br><span class="line">        ssl_protocols       TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;<span class="comment">#加密算法，不写使用默认的加密算法</span></span><br><span class="line">        ssl_certificate     /etc/nginx/certs/nginx.crt;<span class="comment">#私钥</span></span><br><span class="line">        ssl_certificate_key /etc/nginx/certs/nginx.key;<span class="comment">#证书</span></span><br><span class="line">        ssl_session_cache   shared:SSL:10m;<span class="comment">#加密传输的缓存的大小10m</span></span><br><span class="line">        ssl_session_timeout 10m;</span><br><span class="line">location / &#123;</span><br><span class="line">        root <span class="string">"/web/nginx/html"</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">生成自签名的证书</span><br><span class="line">~]<span class="comment"># cd /etc/nginx/</span></span><br><span class="line">nginx]<span class="comment"># mkdir certs</span></span><br><span class="line">nginx]<span class="comment"># cd certs/</span></span><br><span class="line">    certs]<span class="comment"># openssl genrsa -out nginx.key 2048#私钥</span></span><br><span class="line">certs]<span class="comment"># openssl req -new -x509 -key nginx.key -out nginx.crt -days 3650 -subj "/CN=www.centos.com"#证书</span></span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line"> ~]<span class="comment"># mkdir -p /web/nginx/html</span></span><br><span class="line"> ~]<span class="comment"># echo "123" &gt; /web/nginx/html/index.html</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># nginx -t</span></span><br><span class="line">~]<span class="comment"># nginx -s reload</span></span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/09/nginx配置和使用基础2/ssl.png" alt=""></p><h3 id="ngx-http-rewrite-module模块：实现url重写，将用户请求的URI基于regex所描述的模式进行检查，而后完成替换；"><a href="#ngx-http-rewrite-module模块：实现url重写，将用户请求的URI基于regex所描述的模式进行检查，而后完成替换；" class="headerlink" title="ngx_http_rewrite_module模块：实现url重写，将用户请求的URI基于regex所描述的模式进行检查，而后完成替换；"></a><code>ngx_http_rewrite_module模块：实现url重写，将用户请求的URI基于regex所描述的模式进行检查，而后完成替换；</code></h3><ul><li><p>1、rewrite regex replacement [flag]</p><ul><li>将用户请求的URI基于regex所描述的模式进行检查，匹配到时将其替换为replacement指定的新的URI；</li><li><p>注意：如果在同一级配置块中存在多个rewrite规则，那么会自下而下逐个检查；被某条件规则替换完成后，会重新一轮的替换检查，因此，隐含有循环机制；[flag]所表示的标志位用于控制此循环机制；</p><ul><li><p>如果replacement是以http://或https://开头，则替换结果会直接以重向返回给客户端；</p><ul><li><p>301：永久重定向；</p><ul><li>[flag]：</li><li>last：重写完成后停止对当前URI在当前location中后续的其它重写操作，而后对新的URI启动新一轮重写检查；提前重启新一轮循环； </li><li>break：重写完成后停止对当前URI在当前location中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置；结束循环；</li><li><p>redirect：重写完成后以临时重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求；302：临时重定向</p></li><li><p>permanent:重写完成后以永久重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求；301：永久重定向</p></li></ul></li></ul></li></ul></li></ul></li></ul><p><code>范例：将用户对bbs的访问，转成对forum的访问</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># mkdir /web/nginx/html/forum</span></span><br><span class="line">~]<span class="comment"># echo "/web/nginx/html/forum/index.html" &gt; /web/nginx/html/forum/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#此时对forum/index.html访问url路径为：http://172.10.101.158/forum</span></span><br><span class="line"></span><br><span class="line">实现用户访问http://172.10.101.158/bbs跳转到http://172.10.101.158/forum响应（bbs目录可以不存在）</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">        server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line">        root <span class="string">"/var/www/nginx"</span>;</span><br><span class="line">        location /bbs/ &#123;</span><br><span class="line">        rewrite ^/bbs/(.*)$ /forum/<span class="variable">$1</span>;<span class="comment">#后面未加任何控制符相当于last</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#如果访问此server的/var/www/nginx/bbs则重写到此server的/var/www/nginx/forum(此格式仅限单个的重写操作写法)</span></span><br><span class="line"></span><br><span class="line">设置用户对bbs的访问和对forum的访问统统改为其他的其他的server访问</span><br><span class="line">http://www.centos.com/bbs和http://www.centos.com/forum响应的访问请求一个新的serverwww.linux.com的访问</span><br><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">        server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.centos.com;</span><br><span class="line">        root <span class="string">"/var/www/nginx"</span>;</span><br><span class="line">        location ~* ^/(bbs|forum) &#123;</span><br><span class="line">        rewrite ^/(bbs|froum)/(.*)$ http://www.linux.com/<span class="variable">$2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        server &#123;</span><br><span class="line">        server_name www.linux.com;</span><br><span class="line">        listen 8080;</span><br><span class="line">        root <span class="string">"/web/nginx/forum"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">实现对本机的任何的不安全的172.20.101.158下的所有资源都会跳转到www.centos.com的https</span><br><span class="line">        server &#123;</span><br><span class="line"> 66         listen              443 ssl;</span><br><span class="line"> 67         server_name www.centos.com</span><br><span class="line"> 68         ssl_protocols       TLSv1.1 TLSv1.2;</span><br><span class="line"> 69         ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-    MD5;</span><br><span class="line"> 70         ssl_certificate     /etc/nginx/certs/nginx.crt;</span><br><span class="line"> 71         ssl_certificate_key /etc/nginx/certs/nginx.key;</span><br><span class="line"> 72         ssl_session_cache   shared:SSL:10m;</span><br><span class="line"> 73         ssl_session_timeout 10m;</span><br><span class="line"> 74         location / &#123;</span><br><span class="line"> 75         root <span class="string">"/web/nginx/html"</span>;</span><br><span class="line"> 76         &#125;</span><br><span class="line"> 77     &#125;</span><br><span class="line"> 78 </span><br><span class="line"> 7</span><br><span class="line"> 80         server &#123;</span><br><span class="line"> 81         listen 8080;</span><br><span class="line"> 82         server_name 172.20.101.158;</span><br><span class="line"> 83         root <span class="string">"/var/www/nginx"</span>;</span><br><span class="line"> 84         rewrite ^/(.*)$ https://centos.com/<span class="variable">$1</span>;</span><br><span class="line"> 85         location / &#123;</span><br><span class="line"> 86 &#125;</span><br><span class="line"> 87 &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">临时重定向</span><br><span class="line">    rewrite ^/(.*)$ https://centos.com/<span class="variable">$1</span> redirect;</span><br><span class="line">永久重定向</span><br><span class="line">rewrite ^/(.*)$ https://centos.com/<span class="variable">$1</span> permanent;</span><br></pre></td></tr></table></figure></p><ul><li>2、return<ul><li>return code [text];</li><li>return code URL;</li><li>return URL;</li></ul></li></ul><ul><li><p>3、    rewrite_log on | off;</p><ul><li>是否开启重写日志；</li></ul></li><li><p>4、    if (condition) { … }</p><ul><li><p>引入一个新的配置上下文 ；条件满足时，执行配置块中的配置指令；一般用在：server, location；</p></li><li><p>condition：</p><ul><li>比较操作符：<ul><li>==</li><li>!=</li><li>~：模式匹配，区分字符大小写；</li><li>~*：模式匹配，不区分字符大小写；</li><li>!~：模式不匹配，区分字符大小写；</li><li>!~*：模式不匹配，不区分字符大小写；</li></ul></li><li>文件及目录存在性判断：<ul><li>-e, !-e</li><li>-f, !-f</li><li>-d, !-d</li><li>-x, !-x</li></ul></li></ul></li></ul></li><li><p>5、set $variable value;    #在nginx里自己定义变量</p><ul><li>用户自定义变量 ；    </li></ul></li></ul><h3 id="ngx-http-referer-module模块：ngx-http-referer-module模块用于阻止“Referer”头字段中值无效的请求访问站点。"><a href="#ngx-http-referer-module模块：ngx-http-referer-module模块用于阻止“Referer”头字段中值无效的请求访问站点。" class="headerlink" title="ngx_http_referer_module模块：ngx_http_referer_module模块用于阻止“Referer”头字段中值无效的请求访问站点。"></a><code>ngx_http_referer_module模块：ngx_http_referer_module模块用于阻止“Referer”头字段中值无效的请求访问站点。</code></h3><p>引用者，显示上级url的来源（盗链）</p><ul><li>1、valid_referers none | blocked | server_names | string …;<ul><li>定义referer首部的合法可用值(合法的链接)；<ul><li>none：请求报文首部没有referer首部；</li><li>blocked：请求报文的referer首部没有值；</li><li>server_names：参数，其可以有值作为主机名或主机名模式；<ul><li>arbitrary_string：直接字符串，但可使用*作通配符；</li><li>regular expression：被指定的正则表达式模式匹配到的字符串；要使用~打头，例如 ~.*.a.com；</li></ul></li></ul></li></ul></li></ul><p>范例:防盗链<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义正常引用和非正常引用链接的跳转</span></span><br><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">        server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name 172.20.101.158;</span><br><span class="line">        valid_referers none blocked server_name 172.20.101.158 172.20.101.82 *.ce</span><br><span class="line">ntos.com;<span class="comment">#定义允许外链访问的地址</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;<span class="comment">#除了上面定义的地址外可以外链访问主页，其余的地址直接跳转至http://172.20.101.158:8080/;</span></span><br><span class="line">        <span class="built_in">return</span> http://172.20.101.158:8080/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        root <span class="string">"/var/www/nginx"</span>;</span><br><span class="line">        rewrite ^/(.*)$ https://www.daizhe.111/<span class="variable">$1</span>;</span><br><span class="line">        location / &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-e 模拟外链来的地址</span><br><span class="line">~]<span class="comment"># curl -I -e "www.baidu.com" http://172.20.101.158/</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nginx-Webserver-第二章：配置指令&quot;&gt;&lt;a href=&quot;#Nginx-Webserver-第二章：配置指令&quot; class=&quot;headerlink&quot; title=&quot;Nginx-Webserver:第二章：配置指令&quot;&gt;&lt;/a&gt;Nginx-Webserver:第二章：配置指令&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/09/nginx配置和使用基础2/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://9527dz.top/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://9527dz.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置和使用基础--Webserver</title>
    <link href="https://9527dz.top/2019/01/07/nginx%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
    <id>https://9527dz.top/2019/01/07/nginx配置和使用基础/</id>
    <published>2019-01-07T11:46:19.581Z</published>
    <updated>2019-01-09T13:09:53.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-Webserver-第一章：工作模型"><a href="#Nginx-Webserver-第一章：工作模型" class="headerlink" title="Nginx-Webserver:第一章：工作模型"></a>Nginx-Webserver:第一章：工作模型</h1><p><img src="/2019/01/07/nginx配置和使用基础/标题.png" alt=""><br><a id="more"></a></p><h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><p>一、Nginx的产生</p><ul><li><p>Nginx是一款高性能的 HTTP 和反向代理服务器，由俄罗斯人Igor Sysoev（伊戈尔·赛索耶夫）为俄罗斯网站Rambler.ru开发的，在Rambler.ru网站平稳的运行了四年，而且俄俄罗斯超过20%的虚拟主机平台采用Nginx作为反向代理服务器。</p></li><li><p>在国内，使用nginx网站用户有：百度、京东、金山爱词霸、新浪、校内网、、淘宝、YUPOO相册、豆瓣、迅雷看看、网易、腾讯等。</p></li></ul><p>二、Nginx的优点</p><ul><li>1.高并发量：根据官方给出的数据，能够支持高达 50,000 个并发连接数的响应</li><li>2.内存消耗少：处理静态文件，同样起web 服务，比apache 占用更少的内存及资源，所有它是轻量级的</li><li>3.简单稳定：配置简单，基本在一个conf文件中配置，性能比较稳定，可以7*24小时长时间不间断运行</li><li>4.模块化程度高：Nginx是高度模块化的设计，编写模块相对简单，包括 gzipping, byte ranges, chunked responses,以及 SSI-filter 等 filter，支持 SSL 和 TLSSNI。</li><li>5.支持Rwrite重写规则：能够根据域名、URL的不同， 将HTTP请求分发到不同的后端服务器群组。</li><li>6.低成本：Nginx可以做高并发的负载均衡，且Nginx是开源免费的，如果使用F5等硬件来做负载均衡，硬件成本比较高。 </li><li>7.支持多系统：Nginx代码完全用C语言从头写成，已经移植到许多体系结构和操作系统，包括：Linux、FreeBSD、Solaris、Mac OS X、AIX以及Microsoft Windows，由于Nginx是免费开源的，可以在各系统上编译并使用。</li></ul><p>三、Nginx的缺点</p><ul><li>1.动态处理差：nginx处理静态文件好,耗费内存少，但是处理动态页面则很鸡肋，现在一般前端用nginx作为反向代理抗住压力，apache作为后端处理动态请求。</li><li>2.rewrite弱：虽然nginx支持rewrite功能，但是相比于Apache来说，Apache比nginx 的rewrite 强大。</li></ul><h2 id="nginx特征及基础概念"><a href="#nginx特征及基础概念" class="headerlink" title="nginx特征及基础概念"></a>nginx特征及基础概念</h2><ul><li><p>nginx(web 服务器、web代理、反向代理)</p><ul><li><p>调用libevent:高性能的网络服务程序库</p><ul><li>epoll():基于事件驱动的开发好的库文件</li></ul></li><li><p>nginx特性：</p><ul><li>模块化设计、较好的扩展性</li><li>高可靠(组成部分一个主控进程+多个子进程组成)<ul><li>master—&gt;worker<ul><li>master主控进程负责解析配置文件，启动子进程（读取和验证配置，创建或绑定关闭套接字以及启动终止worker进程以及控制worker进程的个数，无需重新启动进程让新的配置文件加载、完成平滑版本升级等..）</li><li>worker子进程才是真正响应用户请求的进程（worker子进程有多种种类：有的子进程是实现缓存加载多适用于反向代理、接受用户的请求-接收传入并处理客户端的连接请求，cache实现缓存）</li></ul></li></ul></li><li>低内存消耗（一个线程相应多个请求）<ul><li>10000个保持连接状态模式下的连接nginx仅需2.5MB的内存</li></ul></li><li>支持热部署<ul><li>不停机而且更新配置文件、日志文件滚动、升级程序版本</li></ul></li></ul></li><li>nginx的基本功能<ul><li>支持event模型</li><li>支持epool机制</li><li>支持异步IO（事件驱动）</li><li>支持内存映射</li></ul></li><li>基本功能<ul><li>静态资源的web服务器，能缓存打开的文件描述符</li><li>支持http、smtp、pop3协议的反向代理服务器（缓存加速、缓存在本地是基于键值对关系缓存的，键是用户请求的url,值为对应的取得的数据流极大的减轻了后端服务器的压力）<ul><li>反向代理服务器：仅为接受用户请求并且自行到某个有限的服务器上去取内容（只要是把自己扮演成某个特定服务器的样子）</li><li>正向代理：代表客户端出去请求任何网站(把自己扮演成所有服务器的样子)</li></ul></li><li>支持缓存加速、负载均衡机制（反向代理）</li><li>支持fastcgi(fpm,LNMP),uWSGI(python)等</li><li>模块化（非DSO机制）、过滤器zip，SSI（服务器端包含）及图像打大小调整</li><li>支持ssl</li></ul></li><li>扩展功能<ul><li>基于名称和ip和端口的虚拟主机</li><li>支持keepalive</li><li>支持平滑升级</li><li>定制访问日志、支持日志缓冲区</li><li>支持路径别名</li><li>支持基于ip以及用户的访问控制</li><li>支持速率限制、支持并发数限制</li></ul></li><li>nginx的基本架构特性<ul><li>一个master进程，生成一个或者多个worker进程</li><li>事件驱动：epoll（边缘触发）、Kqueue,/dev/poll</li><li>IO复用器<ul><li>select,poll,rt signal(实时信号)</li></ul></li><li>支持sendfile,sendfile64</li><li>支持AIO（异步IO）</li><li>支持非阻塞模型</li><li>支持内存映射（mmap）</li></ul></li><li>nginx工作模式：基于非阻塞、事件驱动、由一个master进程生成多个worker线程，每一个worker响应n个请求<ul><li>一般单机并发3w请求，在反代的情况下会影响其性能</li></ul></li><li>nginx的模块类型<ul><li>核心模块</li><li>标准的http模块（Standard http modules）</li><li>可选的http模块（Optional http modules ）</li><li>邮件模块（Mail modules）</li><li>第三方模块（3rd party modules）</li></ul></li></ul></li></ul><p><img src="/2019/01/07/nginx配置和使用基础/功能.png" alt=""></p><h2 id="nginx是基于epel源安装"><a href="#nginx是基于epel源安装" class="headerlink" title="nginx是基于epel源安装"></a>nginx是基于epel源安装</h2><pre><code>nginx的安装配置：    官方的预制包：        http://nginx.org/packages/centos/7/x86_64/RPMS/        Fedora-EPEL:</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">yum安装</span><br><span class="line">    yum install nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编译安装：</span><br><span class="line">~]<span class="comment"># yum groupinstall "Development Tools" "Server Platform Development"</span></span><br><span class="line">~]<span class="comment"># yum install pcre-devel openssl-devel zlib-devel</span></span><br><span class="line">~]<span class="comment"># useradd -r nginx</span></span><br><span class="line">~]<span class="comment">#  ./configure --prefix=/usr/local/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line">nginx -t    <span class="comment">#检查nginx语法格式</span></span><br><span class="line">nginx -s relod <span class="comment">#重新服务配置文件</span></span><br><span class="line">man nginx</span><br><span class="line">     -s signal      Send a signal to the master process.  The argument signal can be one</span><br><span class="line">                    of: stop, quit, reopen, reload.  The following table shows the cor‐</span><br><span class="line">                    responding system signals:</span><br><span class="line"></span><br><span class="line">                    stop    SIGTERM</span><br><span class="line">                    quit    SIGQUIT</span><br><span class="line">                    reopen  SIGUSR1</span><br><span class="line">                    reload  SIGHUP</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nginx-Webserver-第一章：工作模型&quot;&gt;&lt;a href=&quot;#Nginx-Webserver-第一章：工作模型&quot; class=&quot;headerlink&quot; title=&quot;Nginx-Webserver:第一章：工作模型&quot;&gt;&lt;/a&gt;Nginx-Webserver:第一章：工作模型&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/07/nginx配置和使用基础/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://9527dz.top/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://9527dz.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>http协议及io模型</title>
    <link href="https://9527dz.top/2019/01/06/io%E6%A8%A1%E5%9E%8B/"/>
    <id>https://9527dz.top/2019/01/06/io模型/</id>
    <published>2019-01-06T07:16:30.928Z</published>
    <updated>2019-01-06T07:19:04.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http协议及io模型"><a href="#http协议及io模型" class="headerlink" title="http协议及io模型"></a>http协议及io模型</h1><p><img src="/2019/01/06/io模型/标题.png" alt=""><br><a id="more"></a></p><h2 id="HTTP-协议和IO模型"><a href="#HTTP-协议和IO模型" class="headerlink" title="HTTP 协议和IO模型"></a>HTTP 协议和IO模型</h2><p>一：HTTP协议</p><ul><li>http协议：HyperText Transfer Procotol超文本传输协议，http协议是无状态的，监听在80端口，TCP协议上。HTTP协议的特点有以下几点：<ul><li>1.支持客户/服务器模式。</li><li>2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。</li><li>由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li><li>3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li><li>4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li><li>5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ul></li></ul><p>二：HTTP协议Procatol</p><ul><li><p>在服务器不是持久连接的状况下，客户端在第一次访问服务器时服务器会记录客户端的个人标志信息，当客户端刷新或者再次访问时，服务器就要要求客户端输个人的标识信息，记录访问者的信息。也就是说在不是持久连接的状况下，服务器无法追踪访问者的来源。</p></li><li><p>1.于是就出现了 cookie和session</p><ul><li>html：HyperText Mark Language：超文标记语言</li><li>web资源：<ul><li>静态文件：.jpg .gif .html  .txt .js .css.mp3 .avi</li><li>动态文件：.php  .jsp</li></ul></li></ul></li><li><p>2.http早期版本只能传输文本内容，到HTTP/1.0之后支持MIME。使HTTP协议支持传输多媒体信息。</p></li><li><p>MIME：Multipurpose Internet Mailextention</p><ul><li>MIME类型：Major/minor<ul><li>text/plain</li><li>image/jpeg  </li><li>image/gif</li></ul></li></ul></li><li><p>3.URI:Uniform Resource Idetifier ：统一资源标识符</p><ul><li>URL：Uniform Resource Locate：统一资源定位符</li><li>用于描述某服务特定资源的位置</li><li>格式：Scheme://Server:Poert/Path/to/resource<ul><li>URN：Uniform Resource Naming：统一资源命名符。</li><li>URL方案：scheme</li><li>服务器地址：IP：Port</li><li>资源路径</li><li>基本语法：  <ul><li><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</code></li></ul></li></ul></li></ul></li><li><p>4.http事务 （请求—&gt;响应）</p><ul><li>request:请求报文<ul><li>报文格式<ul><li><code>&lt;method&gt;&lt;URL&gt;&lt;version&gt;&lt;HEADERS&gt;&lt;body&gt;</code></li><li>请求的方法.url.协议版本.请求报文的首部.主体</li></ul></li></ul></li><li>response:响应报文<ul><li>响应报文<ul><li><code>&lt;version&gt;&lt;status&gt;&lt;reason phrase&gt;&lt;HEADERS&gt;&lt;body&gt;</code></li><li>协议的版本.状态码.原因短语.响应报文的首部.主体</li></ul></li></ul></li><li>协议格式<ul><li>文本</li><li>二进制   </li></ul></li></ul></li><li>5.method：请求的方法：<ul><li>常用请求的方法：  <ul><li>GET：从服务器获取一个资源 </li><li>HEAD：只从服务器获取文档的响应首部</li><li>POST：向服务器发送要处理的数据</li><li>PUT：将请求的主题部分存储服务器上</li><li>DEETE：强求删除服务器上指定的文档</li><li>TRACE：追踪请求到达服务器中间经过的代理服务器</li><li>OPTIONS：请求服务器返回对指定资源支持使用的请求方法</li></ul></li></ul></li></ul><p><img src="/2019/01/06/io模型/请求.png" alt=""></p><p>6.status(状态码)：告诉客户端的请求发生的结果：</p><ul><li>1XX：100-101，信息提示</li><li>2XX：200-206，成功类型信息</li><li>3XX：300-305，重定向的资源</li><li>4XX：400-415，错误类型的信息，客户端的错误，</li><li><p>5XX：500-505，错误类型错误，服务器端错误</p></li><li><p>常用的状态码：</p><ul><li>200：:成功响应，请求的所有数据通过相应报文的entity-body部分发送，OK </li><li>301：请求的URL执行的资源已经被删除；但在相应报文中通过首部Location指明了资源的所在位置；Moved Permanently （永久重定向）</li><li>302：与301相似，但在相应报文中通过首部Location指明了资源现在所处临时新位置；Found  （临时重定向）</li><li>304：客户端发出了条件式请求，但服务器的资源为曾发生改变，则通过相应此响应状态码通知客户端，Not Modified</li><li>401：需要输入账号和密码认证方能访问资源：Unauthorized</li><li>403：请求被禁止：Forbidden</li><li>404：服务器无法找到客户端请求的资源：Not Found</li><li>500：服务器内部错误：InternalServerError</li><li>502：:代理服务器从后端服务器中收到的一条伪响应：Bad Gateway</li></ul></li></ul><ul><li>7.hearders首部：<ul><li>通用首部：<ul><li>Date：报文的创建时间</li><li>Connection：连接状态，keep-alive,close</li><li>via：显示报文经过的中间节点</li><li>Cache-Control：控制缓存<ul><li>no-cache：</li><li>max-age</li></ul></li><li>Transfer-Encoding<ul><li>WEB 服务器表明自己对本响应消息体（不是消息体里面的对象）作了怎样的编码，比如是否分块（chunked），例如：Transfer-Encoding: chunked</li></ul></li><li>pragma</li></ul></li></ul></li></ul><p><img src="/2019/01/06/io模型/请求头部.png" alt=""></p><ul><li><p>上图为请求首部：</p><ul><li>Accept：通过服务器自己能够接受的媒体类型</li><li>Accept_Charset</li><li>Accept_Encoding：告诉服务器自己能接受的编码格式，如gzip</li><li>Accept-Language：通知服务器自己能接受的语言</li><li>Host：请求的服务器名称或者端口号</li><li>Referer：包含了当前正在请求的资源的上一级资源。</li><li><p>User-Agent：客户端代理</p></li><li><p>7.1条件式请求首部</p><ul><li>Expect：</li><li>If-Modified-Since：自从指定的时间之后，请求的资源是否发生过修改</li><li>If-Unmodufied-Since：</li><li>If-None-Match：本地缓存中存储的文档的ETag标签是否与服务器文档的Etag不匹配。</li><li>If-Match;</li></ul></li><li>7.2安全请求首部：<ul><li>Authorization:向服务器发送认证信息，如账号密码</li><li>Cookie：客户端向服务器发送cookie</li><li>Cookie2：</li></ul></li><li>7.3代理请求首部：<ul><li>Proxy-authorization:向代理服务器认证</li></ul></li></ul></li><li><p>8.响应首部：</p><ul><li>信息性：<ul><li>Age：响应持续时长</li><li>Server：服务器程序软件名称和版本</li></ul></li><li>协商首部：某资源有多种表示方法时使用<ul><li>Accept-Ranges：服务器可接受的请求范围类型</li><li>Vary：服务器查看的其他首部列表</li></ul></li><li>安全响应首部：<ul><li>Set-Cookie：向客户端设置Cookie</li><li>Set-Cookie2</li><li>WWW-Authenticate：来自服务器的对客户端质询认证表单</li></ul></li></ul></li><li><p>9.实体首部：</p><ul><li>Allow：列出次实体可使用的请求方法：</li><li>Location：告诉客户端真正的实体位于何处</li><li>Content-encoding：编码格式</li><li>Content-language</li><li>Content-Length：实体的长度</li><li>Content-Location：实体真正所在的位置</li><li>Content-Type：主体的对象类型</li><li>缓存相关：<ul><li>Etag:实体的扩展标签</li><li>Expires：实体的过期时间</li></ul></li></ul></li></ul><p>三：web页面，多个资源</p><ul><li><p>浏览器自身的限制是针对于单一域名访问的限制，最多能打开几个线程进行访问，。而在一个公司网站使用多个域名的话，当用户使用浏览器访问时，浏览器会针对不同的域名开启多个线程来访问页面资源。如，在单一域名 <a href="http://www.nginx.com进行访问，浏览器可能开启2个线程进行页面资源的访问。假如在" target="_blank" rel="noopener">www.nginx.com进行访问，浏览器可能开启2个线程进行页面资源的访问。假如在</a> <a href="http://www.nginx.com" target="_blank" rel="noopener">www.nginx.com</a> 域名下的图片资源又单独使用一个域名 <a href="http://www.image.com" target="_blank" rel="noopener">www.image.com</a> 。那么浏览器会再次开启两个线程进行访问。所以在公司内部使用多个域名，这也是提升访问速度的一种方法。</p></li><li><p>1.web服务器的认证：</p><ul><li>基于IP认证：</li><li>基于用户认证：<ul><li>basic认证</li><li>digest认证</li></ul></li></ul></li><li>2.web服务器的资源映射<ul><li>a.DocumentRoot</li><li>b.路径别名Alias</li><li>c.虚拟主机DocumentRoot</li><li>b.用户家目录DocumentRoot</li></ul></li><li>3.支持第三方模块：支持模块的动态加载</li></ul><p>四：一次完整的http请求</p><ul><li>（1）建立连接或处理连接：接收客户端请求或拒绝请求</li><li><p>（2）接收请求</p><ul><li>接收来自网络的请求报文对某一个资源的请求</li><li>并发服务器访问响应模型（Web I/O）<ul><li>单进程I/O机结构：启动一个进程处理用户请求，而且一次只处理一个请求，多个请求被串行响应。</li><li>多进程I/O结构：并行启动多个线程，每个进程响应一个请求，一个请求称为一个pv。</li><li>复用I/O 结构：一个进程响应多个n个请求<ul><li>多线程模型：一个进程生成多个线程，每个线程响应一个用户请求。</li><li>事件驱动机制：事件回调来完成事件请求：event-driven</li><li>复用的多进程I/O结构：启动多个（m）进程，每个进程响应n个请求。</li><li>c10K问题 :1w个并发连接：</li></ul></li></ul></li></ul></li><li><p>（3）处理请求：对请求报文进行解析，并获取请求的资源及请求方法等相关信息</p><ul><li>元数据：请求报文首部</li><li><code>请求方法&lt;method&gt;</code></li><li><code>&lt;method&gt;&lt;URL&gt;&lt;VerSion&gt;</code></li></ul></li><li><p>（4）访问资源:获取请求报文中请求的资源</p><ul><li>web服务器，即存放了web资源的服务器，负责向请求者提供对方请求的静态资源，或动态运行后生成的资源，这些资源放置在本地文件系统某路径下，此路径通常为DocRoot</li><li>web服务器资源路径的映射方式：<ul><li>a.docroot</li><li>b.路径别名</li><li>c.虚拟主机docroot</li><li>b.用户家目录docroot</li></ul></li></ul></li><li><p>5）构建响应报文</p><ul><li>MIME类型：<ul><li>显示分类</li><li>魔法分类</li><li>协商分类</li></ul></li><li>URL重定向：<ul><li>cdn</li><li>web服务构建的响应并非客户端请求的资源，而是资源另一个访问路径。</li><li>游走重定向：</li><li>永久重定向：</li></ul></li></ul></li><li>（6）发送响应报文</li><li>（7）记录日志</li></ul><p>五：I/O模型</p><ul><li>(1)I/O类型：</li><li>同步IO和异步IO：synchronous ,asyncronous：关注的是消息通知机制<ul><li>同步：调用发出之后不会立即返回，但一旦返回，则返回最终结果。</li><li>异步：调用发出之后，被调用方立即返回消息，但返回的并不是最终结果被调用者通过状态，通知机制等通知调用者，或通过回调函数来处理结果。 </li></ul></li><li><p>阻塞IO和非阻塞IO：nlock，nonlock：关注的是调用者等待被调用者返回调用结果时的状态：（调用者的状态）</p><ul><li>阻塞：调用结果返回之前，调用者会被挂起；调用真只有在得到调用结果之后才能继续。</li><li>非阻塞：调用者在调用结果返回之前，不会被挂起，即调用不会阻塞调用者 </li></ul></li><li><p>(2)常用的IO模型：</p><ul><li>blocking IO ：阻塞型IO</li><li>noblocking IO 非阻塞型IO</li><li>IO multiplexing：复用型IO</li><li>signal driven IO：事件驱动型IO</li><li>asynchronnous IO：异步型IO</li></ul></li><li><p>通过磁盘IO总体解释：</p><ul><li>一个用户进程发起一次磁盘IO调用时，将有两个阶段组成，一次是内核向磁盘取数据，存放到内存空间，另一次是数据从内存空间取出，将数据存到用户进程的内存中。真正被称为执行IO的阶段是：数据从内核内存到进程内存的过程。</li></ul></li></ul><h3 id="阻塞型IO："><a href="#阻塞型IO：" class="headerlink" title="阻塞型IO："></a><code>阻塞型IO：</code></h3><p><img src="/2019/01/06/io模型/阻塞型.png" alt=""></p><ul><li>当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据（对磁盘read来说内核从磁盘获取数据）。对于network io来说，很多时候数据在一开始还没有到达（比如，还没有收到一个完整的UDP包），这个时候kernel就要等待足够的数据到来。而在用户进程这边，整个进程会被阻塞。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。</li><li>所以，blocking IO的特点就是在IO执行的两个阶段（等待数据和拷贝数据两个阶段）都被block了。</li><li>实际上，除非特别指定，几乎所有的IO接口 ( 包括socket接口 ) 都是阻塞型的。这给网络编程带来了一个很大的问题，如在调用send()的同时，线程将被阻塞，在此期间，线程将无法执行任何运算或响应任何的网络请求。</li><li>一个简单的改进方案是在服务器端使用多线程（或多进程）。多线程（或多进程）的目的是让每个连接都拥有独立的线程（或进程），这样任何一个连接的阻塞都不会影响其他的连接。具体使用多进程还是多线程，并没有一个特定的模式。传统意义上，进程的开销要远远大于线程，所以如果需要同时为较多的客户机提供服务，则不推荐使用多进程；如果单个服务执行体需要消耗较多的CPU资源，譬如需要进行大规模或长时间的数据运算或文件访问，则进程较为安全。</li></ul><h3 id="非阻塞IO："><a href="#非阻塞IO：" class="headerlink" title="非阻塞IO："></a><code>非阻塞IO：</code></h3><p><img src="/2019/01/06/io模型/非阻塞型.png" alt=""></p><ul><li>从图中可以看出，当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</li></ul><h3 id="复用型IO："><a href="#复用型IO：" class="headerlink" title="复用型IO："></a><code>复用型IO：</code></h3><ul><li>内核提供了两种调用，select（），poll(),当用户进程发起系统调用时，内核中的selecte会接受这个系统调用，并select自身将系统调用发送给内核，内核再进行准备数据和拷贝数据。当用户进程发起一次系统调用给select之后，用户进程在等待数据返回的过程中，还可以发起多次系统调用，每次系统调用都要经过select发送内核进行处理。也就是说，selects是一个代理。比如，（例子不是很恰当）公司老板向人事部发布通知要裁员，此时老板通过助理把裁员名单送给人事部。在发送和得到结果之前，公司老板还可以通过助理让销售部经理来老板办公室。其实这就相当于复用IO的模型，助理就相当于select。<ul><li>select不能超过1024个。</li><li>prefork模型和worker模型就是基于复用IO模型的。并发响应有限。</li><li>调用者被阻塞者select上，但可以处理其他请求或IO</li></ul></li></ul><h3 id="事件驱动型IO："><a href="#事件驱动型IO：" class="headerlink" title="事件驱动型IO："></a><code>事件驱动型IO：</code></h3><p><img src="/2019/01/06/io模型/事件驱动型.png" alt=""></p><ul><li>事件驱动型IO：<ul><li>在第一阶段内：当用户进程发起系统调用时，内核会立即通知给用户进程系统调用已经收到，并且会在数据收集和准备完成时通知用户进程。此时用户进程就可以处理其他事物。</li><li>在第二阶段内：当系统将磁盘数据取到内存空间中后，通知调用者，调用者会使用回调函数进行处理，来获取数据。这个阶段会发生阻塞状况。</li><li>假如一个用户进程在第一次发送系统调用请求后，在第一阶段内，继续发送第二次系统调用请求。当用户进程第一次请求被阻塞第二阶段时，内核告知用户进程，第二次请求的数据也已经准备好了，让用户进程来获取。此时就出现了冲突状态</li><li>通知机制：<ul><li>水平触发：多次通知</li><li>边缘触发：只通知一次：</li><li>event模型就是使用的此IO模型。</li><li>Nginx支持此IO模型，采用的通知机制为边缘触发。</li></ul></li></ul></li></ul><h3 id="异步型IO："><a href="#异步型IO：" class="headerlink" title="异步型IO："></a><code>异步型IO：</code></h3><p><img src="/2019/01/06/io模型/异步型.png" alt=""></p><ul><li>异步IO模型和复用IO模型区别之处就是：在数据准备第二阶段，内核将数据直接存放到用户进程的内存空间中，不需要用户进程使用回调函数从内核中获取数据。如当一个web服务进程发送请求后，后续过程直接交给内核，在内核处理的过程时间内，此进程可以响应其他的用户请求。当内核将数据返回到进程内存中后，进程就可以把数据直接返回给用户，这大大提高了响应的速度。</li><li>Nginx也支持异步IO模型，还可以基于内存映射的机制来完成数据的发放、所以说Nginx并发能力强。</li></ul><h2 id="几种IO模型的比较"><a href="#几种IO模型的比较" class="headerlink" title="几种IO模型的比较:"></a>几种IO模型的比较:</h2><p><img src="/2019/01/06/io模型/比较.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;http协议及io模型&quot;&gt;&lt;a href=&quot;#http协议及io模型&quot; class=&quot;headerlink&quot; title=&quot;http协议及io模型&quot;&gt;&lt;/a&gt;http协议及io模型&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/06/io模型/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://9527dz.top/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://9527dz.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>四层调度和七层调度器的区别</title>
    <link href="https://9527dz.top/2019/01/05/%E5%9B%9B%E5%B1%82%E8%B0%83%E5%BA%A6%E5%92%8C%E4%B8%83%E5%B1%82%E8%B0%83%E5%BA%A6%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://9527dz.top/2019/01/05/四层调度和七层调度的区别/</id>
    <published>2019-01-05T08:19:10.670Z</published>
    <updated>2019-01-05T08:35:10.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四层调度和七层调度器的区别"><a href="#四层调度和七层调度器的区别" class="headerlink" title="四层调度和七层调度器的区别"></a>四层调度和七层调度器的区别</h1><p><img src="/2019/01/05/四层调度和七层调度的区别/图标.png" alt=""><br><a id="more"></a></p><p><img src="/2019/01/05/四层调度和七层调度的区别/1111.png" alt=""></p><h3 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h3><ul><li><p>简单理解四层和七层负载均衡:</p><ul><li><p>1.所谓四层就是基于IP+端口的负载均衡；七层就是基于URL等应用层信息的负载均衡；同理，还有基于MAC地址的二层负载均衡和基于IP地址的三层负载均衡。 换句换说，二层负载均衡会通过一个虚拟MAC地址接收请求，然后再分配到真实的MAC地址；三层负载均衡会通过一个虚拟IP地址接收请求，然后再分配到真实的IP地址；四层通过虚拟IP+端口接收请求，然后再分配到真实的服务器；七层通过虚拟的URL或主机名接收请求，然后再分配到真实的服务器。</p></li><li><p>2.所谓的四到七层负载均衡，就是在对后台的服务器进行负载均衡时，依据四层的信息或七层的信息来决定怎么样转发流量。 比如四层的负载均衡，就是通过发布三层的IP地址（VIP），然后加四层的端口号，来决定哪些流量需要做负载均衡，对需要处理的流量进行NAT处理，转发至后台服务器，并记录下这个TCP或者UDP的流量是由哪台服务器处理的，后续这个连接的所有流量都同样转发到同一台服务器处理。七层的负载均衡，就是在四层的基础上（没有四层是绝对不可能有七层的），再考虑应用层的特征，比如同一个Web服务器的负载均衡，除了根据VIP加80端口辨别是否需要处理的流量，还可根据七层的URL、浏览器类别、语言来决定是否要进行负载均衡。举个例子，如果你的Web服务器分成两组，一组是中文语言的，一组是英文语言的，那么七层负载均衡就可以当用户来访问你的域名时，自动辨别用户语言，然后选择对应的语言服务器组进行负载均衡处理。</p></li><li><p>3.负载均衡器通常称为四层交换机或七层交换机。四层交换机主要分析IP层及TCP/UDP层，实现四层流量负载均衡。七层交换机除了支持四层负载均衡以外，还有分析应用层的信息，如HTTP协议URI或Cookie信息。</p><ul><li><p>（1）负载均衡分为L4 switch（四层交换），即在OSI第4层工作，就是TCP层啦。此种Load Balance不理解应用协议（如HTTP/FTP/MySQL等等）。例子：LVS，F5。</p></li><li><p>（2）另一种叫做L7 switch（七层交换），OSI的最高层，应用层。此时，该Load Balancer能理解应用协议。例子：  haproxy，MySQL Proxy。</p></li><li><p>注意：上面的很多Load Balancer既可以做四层交换，也可以做七层交换。</p></li></ul></li></ul></li></ul><h3 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h3><ul><li><p>负载均衡设备也常被称为”四到七层交换机”，那么四层和七层两者到底区别在哪里？</p><ul><li><p>第一，技术原理上的区别。</p><ul><li><p>所谓四层负载均衡，也就是主要通过报文中的目标地址和端口，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器。</p></li><li><p>以常见的TCP为例，负载均衡设备在接收到第一个来自客户端的SYN 请求时，即通过上述方式选择一个最佳的服务器，并对报文中目标IP地址进行修改(改为后端服务器IP），直接转发给该服务器。TCP的连接建立，即三次握手是客户端和服务器直接建立的，负载均衡设备只是起到一个类似路由器的转发动作。在某些部署情况下，为保证服务器回包可以正确返回给负载均衡设备，在转发报文的同时可能还会对报文原来的源地址进行修改。</p></li></ul></li></ul></li></ul><pre><code>- `所谓七层负载均衡`，也称为“内容交换”，也就是主要通过报文中的真正有意义的应用层内容，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器。- 以常见的TCP为例，负载均衡设备如果要根据真正的应用层内容再选择服务器，只能先代理最终的服务器和客户端建立连接(三次握手)后，才可能接受到客户端发送的真正应用层内容的报文，然后再根据该报文中的特定字段，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器。负载均衡设备在这种情况下，更类似于一个代理服务器。负载均衡和前端的客户端以及后端的服务器会分别建立TCP连接。所以从这个技术原理上来看，七层负载均衡明显的对负载均衡设备的要求更高，处理七层的能力也必然会低于四层模式的部署方式。</code></pre><ul><li><p>第二，应用场景的需求。</p><ul><li><p>七层应用负载的好处，是使得整个网络更”智能化”。例如访问一个网站的用户流量，可以通过七层的方式，将对图片类的请求转发到特定的图片服务器并可以使用缓存技术；将对文字类的请求可以转发到特定的文字服务器并可以使用压缩技术。当然这只是七层应用的一个小案例，从技术原理上，这种方式可以对客户端的请求和服务器的响应进行任意意义上的修改，极大的提升了应用系统在网络层的灵活性。很多在后台，例如Nginx或者Apache上部署的功能可以前移到负载均衡设备上，例如客户请求中的Header重写，服务器响应中的关键字过滤或者内容插入等功能。</p></li><li><p>另外一个常常被提到功能就是安全性。网络中最常见的SYN Flood攻击，即黑客控制众多源客户端，使用虚假IP地址对同一目标发送SYN攻击，通常这种攻击会大量发送SYN报文，耗尽服务器上的相关资源，以达到Denial of Service(DoS)的目的。从技术原理上也可以看出，四层模式下这些SYN攻击都会被转发到后端的服务器上；而七层模式下这些SYN攻击自然在负载均衡设备上就截止，不会影响后台服务器的正常运营。另外负载均衡设备可以在七层层面设定多种策略，过滤特定报文，例如SQL Injection等应用层面的特定攻击手段，从应用层面进一步提高系统整体安全。</p></li><li><p>现在的7层负载均衡，主要还是着重于应用HTTP协议，所以其应用范围主要是众多的网站或者内部信息平台等基于B/S开发的系统。 4层负载均衡则对应其他TCP应用，例如基于C/S开发的ERP等系统。</p></li></ul></li><li><p>第三，七层应用需要考虑的问题。</p><ul><li><p>1：是否真的必要，七层应用的确可以提高流量智能化，同时必不可免的带来设备配置复杂，负载均衡压力增高以及故障排查上的复杂性等问题。在设计系统时需要考虑四层七层同时应用的混杂情况。</p></li><li><p>2：是否真的可以提高安全性。例如SYN Flood攻击，七层模式的确将这些流量从服务器屏蔽，但负载均衡设备本身要有强大的抗DDoS能力，否则即使服务器正常而作为中枢调度的负载均衡设备故障也会导致整个应用的崩溃。</p></li><li><p>3：是否有足够的灵活度。七层应用的优势是可以让整个应用的流量智能化，但是负载均衡设备需要提供完善的七层功能，满足客户根据不同情况的基于应用的调度。最简单的一个考核就是能否取代后台Nginx或者Apache等服务器上的调度功能。能够提供一个七层应用开发接口的负载均衡设备，可以让客户根据需求任意设定功能，才真正有可能提供强大的灵活性和智能性。</p></li></ul></li></ul><p>　　（本节出自 “ADC技术博客” 博客，请务必保留此出处<a href="http://virtualadc.blog.51cto.com/3027116/591396）" target="_blank" rel="noopener">http://virtualadc.blog.51cto.com/3027116/591396）</a></p><h3 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h3><ul><li><p>负载均衡四七层介绍:</p><ul><li><p>负载均衡（Load Balance）建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。</p></li><li><p>负载均衡有两方面的含义：首先，大量的并发访问或数据流量分担到多台节点设备上分别处理，减少用户等待响应的时间；其次，单个重负载的运算分担到多台节点设备上做并行处理，每个节点设备处理结束后，将结果汇总，返回给用户，系统处理能力得到大幅度提高。</p></li><li><p>本文所要介绍的负载均衡技术主要是指在均衡服务器群中所有服务器和应用程序之间流量负载的应用，目前负载均衡技术大多数是用于提高诸如在Web服务器、FTP服务器和其它关键任务服务器上的Internet服务器程序的可用性和可伸缩性。</p></li></ul></li><li><p>负载均衡技术分类</p><ul><li>目前有许多不同的负载均衡技术用以满足不同的应用需求，下面从负载均衡所采用的设备对象、应用的网络层次（指OSI参考模型）及应用的地理结构等来分类。</li></ul></li><li><p>软/硬件负载均衡</p><ul><li><p>软件负载均衡解决方案是指在一台或多台服务器相应的操作系统上安装一个或多个附加软件来实现负载均衡，如DNS Load Balance，CheckPoint Firewall-1 ConnectControl等，它的优点是基于特定环境，配置简单，使用灵活，成本低廉，可以满足一般的负载均衡需求。</p></li><li><p>软件解决方案缺点也较多，因为每台服务器上安装额外的软件运行会消耗系统不定量的资源，越是功能强大的模块，消耗得越多，所以当连接请求特别大的时候，软件本身会成为服务器工作成败的一个关键；软件可扩展性并不是很好，受到操作系统的限制；由于操作系统本身的Bug，往往会引起安全问题。</p></li><li><p>硬件负载均衡解决方案是直接在服务器和外部网络间安装负载均衡设备，这种设备我们通常称之为负载均衡器，由于专门的设备完成专门的任务，独立于操作系统，整体性能得到大量提高，加上多样化的负载均衡策略，智能化的流量管理，可达到最佳的负载均衡需求。 </p></li><li><p>负载均衡器有多种多样的形式，除了作为独立意义上的负载均衡器外，有些负载均衡器集成在交换设备中，置于服务器与Internet链接之间，有些则以两块网络适配器将这一功能集成到PC中，一块连接到Internet上，一块连接到后端服务器群的内部网络上。</p></li><li><p>一般而言，硬件负载均衡在功能、性能上优于软件方式，不过成本昂贵。</p></li></ul></li><li><p>本地/全局负载均衡</p><ul><li><p>负载均衡从其应用的地理结构上分为本地负载均衡(Local Load Balance)和全局负载均衡(Global Load Balance，也叫地域负载均衡)，本地负载均衡是指对本地的服务器群做负载均衡，全局负载均衡是指对分别放置在不同的地理位置、有不同网络结构的服务器群间作负载均衡。</p></li><li><p>本地负载均衡能有效地解决数据流量过大、网络负荷过重的问题，并且不需花费昂贵开支购置性能卓越的服务器，充分利用现有设备，避免服务器单点故障造成数据流量的损失。其有灵活多样的均衡策略把数据流量合理地分配给服务器群内的服务器共同负担。即使是再给现有服务器扩充升级，也只是简单地增加一个新的服务器到服务群中，而不需改变现有网络结构、停止现有的服务。 </p></li><li><p>全局负载均衡主要用于在一个多区域拥有自己服务器的站点，为了使全球用户只以一个IP地址或域名就能访问到离自己最近的服务器，从而获得最快的访问速度，也可用于子公司分散站点分布广的大公司通过Intranet（企业内部互联网）来达到资源统一合理分配的目的。</p></li></ul></li><li><p>网络层次上的负载均衡</p><ul><li><p>针对网络上负载过重的不同瓶颈所在，从网络的不同层次入手，我们可以采用相应的负载均衡技术来解决现有问题。 </p></li><li><p>随着带宽增加，数据流量不断增大，网络核心部分的数据接口将面临瓶颈问题，原有的单一线路将很难满足需求，而且线路的升级又过于昂贵甚至难以实现，这时就可以考虑采用链路聚合（Trunking）技术。</p></li><li><p>链路聚合技术（第二层负载均衡）将多条物理链路当作一条单一的聚合逻辑链路使用，网络数据流量由聚合逻辑链路中所有物理链路共同承担，由此在逻辑上增大了链路的容量，使其能满足带宽增加的需求。</p></li><li><p>现代负载均衡技术通常操作于网络的第四层或第七层。第四层负载均衡将一个Internet上合法注册的IP地址映射为多个内部服务器的IP地址，对每次 TCP连接请求动态使用其中一个内部IP地址，达到负载均衡的目的。在第四层交换机中，此种均衡技术得到广泛的应用，一个目标地址是服务器群VIP（虚拟 IP，Virtual IP address）连接请求的数据包流经交换机，交换机根据源端和目的IP地址、TCP或UDP端口号和一定的负载均衡策略，在服务器IP和VIP间进行映射，选取服务器群中最好的服务器来处理连接请求。</p></li><li><p>第七层负载均衡控制应用层服务的内容，提供了一种对访问流量的高层控制方式，适合对HTTP服务器群的应用。第七层负载均衡技术通过检查流经的HTTP报头，根据报头内的信息来执行负载均衡任务。 </p></li></ul></li><li><p>第七层负载均衡优点表现在如下几个方面： </p><ul><li><p>通过对HTTP报头的检查，可以检测出HTTP400、500和600系列的错误信息，因而能透明地将连接请求重新定向到另一台服务器，避免应用层故障。</p></li><li><p>可根据流经的数据类型（如判断数据包是图像文件、压缩文件或多媒体文件格式等），把数据流量引向相应内容的服务器来处理，增加系统性能。</p></li><li><p>能根据连接请求的类型，如是普通文本、图象等静态文档请求，还是asp、cgi等的动态文档请求，把相应的请求引向相应的服务器来处理，提高系统的性能及安全性。</p></li><li><p>第七层负载均衡受到其所支持的协议限制（一般只有HTTP），这样就限制了它应用的广泛性，并且检查HTTP报头会占用大量的系统资源，势必会影响到系统的性能，在大量连接请求的情况下，负载均衡设备自身容易成为网络整体性能的瓶颈。</p></li></ul></li><li><p>负载均衡策略</p><ul><li><p>在实际应用中，我们可能不想仅仅是把客户端的服务请求平均地分配给内部服务器，而不管服务器是否宕机。而是想使Pentium III服务器比Pentium II能接受更多的服务请求，一台处理服务请求较少的服务器能分配到更多的服务请求，出现故障的服务器将不再接受服务请求直至故障恢复等等。</p></li><li><p>选择合适的负载均衡策略，使多个设备能很好的共同完成任务，消除或避免现有网络负载分布不均、数据流量拥挤反应时间长的瓶颈。在各负载均衡方式中，针对不同的应用需求，在OSI参考模型的第二、三、四、七层的负载均衡都有相应的负载均衡策略。</p></li><li><p>负载均衡策略的优劣及其实现的难易程度有两个关键因素：一、负载均衡算法，二、对网络系统状况的检测方式和能力。 </p></li><li><p>考虑到服务请求的不同类型、服务器的不同处理能力以及随机选择造成的负载分配不均匀等问题，为了更加合理的把负载分配给内部的多个服务器，就需要应用相应的能够正确反映各个服务器处理能力及网络状态的负载均衡算法：</p></li><li><p>轮循均衡（Round Robin）：每一次来自网络的请求轮流分配给内部中的服务器，从1至N然后重新开始。此种均衡算法适合于服务器组中的所有服务器都有相同的软硬件配置并且平均服务请求相对均衡的情况。</p></li><li><p>权重轮循均衡（Weighted Round Robin）：根据服务器的不同处理能力，给每个服务器分配不同的权值，使其能够接受相应权值数的服务请求。例如：服务器A的权值被设计成1，B的权值是 3，C的权值是6，则服务器A、B、C将分别接受到10%、30％、60％的服务请求。此种均衡算法能确保高性能的服务器得到更多的使用率，避免低性能的服务器负载过重。</p></li><li><p>随机均衡（Random）：把来自网络的请求随机分配给内部中的多个服务器。</p></li><li><p>权重随机均衡（Weighted Random）：此种均衡算法类似于权重轮循算法，不过在处理请求分担时是个随机选择的过程。</p></li><li><p>响应速度均衡（Response Time）：负载均衡设备对内部各服务器发出一个探测请求（例如Ping），然后根据内部中各服务器对探测请求的最快响应时间来决定哪一台服务器来响应客户端的服务请求。此种均衡算法能较好的反映服务器的当前运行状态，但这最快响应时间仅仅指的是负载均衡设备与服务器间的最快响应时间，而不是客户端与服务器间的最快响应时间。</p></li><li><p>最少连接数均衡（Least Connection）：客户端的每一次请求服务在服务器停留的时间可能会有较大的差异，随着工作时间加长，如果采用简单的轮循或随机均衡算法，每一台服务器上的连接进程可能会产生极大的不同，并没有达到真正的负载均衡。最少连接数均衡算法对内部中需负载的每一台服务器都有一个数据记录，记录当前该服务器正在处理的连接数量，当有新的服务连接请求时，将把当前请求分配给连接数最少的服务器，使均衡更加符合实际情况，负载更加均衡。此种均衡算法适合长时处理的请求服务，如FTP。 </p></li><li><p>处理能力均衡：此种均衡算法将把服务请求分配给内部中处理负荷（根据服务器CPU型号、CPU数量、内存大小及当前连接数等换算而成）最轻的服务器，由于考虑到了内部服务器的处理能力及当前网络运行状况，所以此种均衡算法相对来说更加精确，尤其适合运用到第七层（应用层）负载均衡的情况下。</p></li><li><p>DNS响应均衡（Flash DNS）：在Internet上，无论是HTTP、FTP或是其它的服务请求，客户端一般都是通过域名解析来找到服务器确切的IP地址的。在此均衡算法下，分处在不同地理位置的负载均衡设备收到同一个客户端的域名解析请求，并在同一时间内把此域名解析成各自相对应服务器的IP地址（即与此负载均衡设备在同一位地理位置的服务器的IP地址）并返回给客户端，则客户端将以最先收到的域名解析IP地址来继续请求服务，而忽略其它的IP地址响应。在种均衡策略适合应用在全局负载均衡的情况下，对本地负载均衡是没有意义的。</p></li><li><p>尽管有多种的负载均衡算法可以较好的把数据流量分配给服务器去负载，但如果负载均衡策略没有对网络系统状况的检测方式和能力，一旦在某台服务器或某段负载均衡设备与服务器网络间出现故障的情况下，负载均衡设备依然把一部分数据流量引向那台服务器，这势必造成大量的服务请求被丢失，达不到不间断可用性的要求。所以良好的负载均衡策略应有对网络故障、服务器系统故障、应用服务故障的检测方式和能力：</p></li><li><p>Ping侦测：通过ping的方式检测服务器及网络系统状况，此种方式简单快速，但只能大致检测出网络及服务器上的操作系统是否正常，对服务器上的应用服务检测就无能为力了。</p></li><li><p>TCP Open侦测：每个服务都会开放某个通过TCP连接，检测服务器上某个TCP端口（如Telnet的23口，HTTP的80口等）是否开放来判断服务是否正常。</p></li><li><p>HTTP URL侦测：比如向HTTP服务器发出一个对main.html文件的访问请求，如果收到错误信息，则认为服务器出现故障。</p></li><li><p>负载均衡策略的优劣除受上面所讲的两个因素影响外，在有些应用情况下，我们需要将来自同一客户端的所有请求都分配给同一台服务器去负担，例如服务器将客户端注册、购物等服务请求信息保存的本地数据库的情况下，把客户端的子请求分配给同一台服务器来处理就显的至关重要了。有两种方式可以解决此问题，一是根据IP地址把来自同一客户端的多次请求分配给同一台服务器处理，客户端IP地址与服务器的对应信息是保存在负载均衡设备上的；二是在客户端浏览器 cookie内做独一无二的标识来把多次请求分配给同一台服务器处理，适合通过代理服务器上网的客户端。</p></li><li><p>还有一种路径外返回模式（Out of Path Return），当客户端连接请求发送给负载均衡设备的时候，中心负载均衡设备将请求引向某个服务器，服务器的回应请求不再返回给中心负载均衡设备，即绕过流量分配器，直接返回给客户端，因此中心负载均衡设备只负责接受并转发请求，其网络负担就减少了很多，并且给客户端提供了更快的响应时间。此种模式一般用于HTTP服务器群，在各服务器上要安装一块虚拟网络适配器，并将其IP地址设为服务器群的VIP，这样才能在服务器直接回应客户端请求时顺利的达成三次握手。</p></li></ul></li><li><p>负载均衡实施要素</p><ul><li><p>负载均衡方案应是在网站建设初期就应考虑的问题，不过有时随着访问流量的爆炸性增长，超出决策者的意料，这也就成为不得不面对的问题。当我们在引入某种负载均衡方案乃至具体实施时，像其他的许多方案一样，首先是确定当前及将来的应用需求，然后在代价与收效之间做出权衡。</p></li><li><p>针对当前及将来的应用需求，分析网络瓶颈的不同所在，我们就需要确立是采用哪一类的负载均衡技术，采用什么样的均衡策略，在可用性、兼容性、安全性等等方面要满足多大的需求，如此等等。 </p></li><li><p>不管负载均衡方案是采用花费较少的软件方式，还是购买代价高昂在性能功能上更强的第四层交换机、负载均衡器等硬件方式来实现，亦或其他种类不同的均衡技术，下面这几项都是我们在引入均衡方案时可能要考虑的问题：</p></li><li><p>性能：性能是我们在引入均衡方案时需要重点考虑的问题，但也是一个最难把握的问题。衡量性能时可将每秒钟通过网络的数据包数目做为一个参数，另一个参数是均衡方案中服务器群所能处理的最大并发连接数目，但是，假设一个均衡系统能处理百万计的并发连接数，可是却只能以每秒2个包的速率转发，这显然是没有任何作用的。性能的优劣与负载均衡设备的处理能力、采用的均衡策略息息相关，并且有两点需要注意：一、均衡方案对服务器群整体的性能，这是响应客户端连接请求速度的关键；二、负载均衡设备自身的性能，避免有大量连接请求时自身性能不足而成为服务瓶颈。有时我们也可以考虑采用混合型负载均衡策略来提升服务器群的总体性能，如DNS负载均衡与NAT负载均衡相结合。另外，针对有大量静态文档请求的站点，也可以考虑采用高速缓存技术，相对来说更节省费用，更能提高响应性能；对有大量ssl/xml内容传输的站点，更应考虑采用ssl/xml加速技术。</p></li><li><p>可扩展性：IT技术日新月异，一年以前最新的产品，现在或许已是网络中性能最低的产品；业务量的急速上升，一年前的网络，现在需要新一轮的扩展。合适的均衡解决方案应能满足这些需求，能均衡不同操作系统和硬件平台之间的负载，能均衡HTTP、邮件、新闻、代理、数据库、防火墙和 Cache等不同服务器的负载，并且能以对客户端完全透明的方式动态增加或删除某些资源。</p></li><li><p>灵活性：均衡解决方案应能灵活地提供不同的应用需求，满足应用需求的不断变化。在不同的服务器群有不同的应用需求时，应有多样的均衡策略提供更广泛的选择。</p></li><li><p>可靠性：在对服务质量要求较高的站点，负载均衡解决方案应能为服务器群提供完全的容错性和高可用性。但在负载均衡设备自身出现故障时，应该有良好的冗余解决方案，提高可靠性。使用冗余时，处于同一个冗余单元的多个负载均衡设备必须具有有效的方式以便互相进行监控，保护系统尽可能地避免遭受到重大故障的损失。</p></li><li><p>易管理性：不管是通过软件还是硬件方式的均衡解决方案，我们都希望它有灵活、直观和安全的管理方式，这样便于安装、配置、维护和监控，提高工作效率，避免差错。在硬件负载均衡设备上，目前主要有三种管理方式可供选择：一、命令行接口（CLI：Command Line Interface），可通过超级终端连接负载均衡设备串行接口来管理，也能telnet远程登录管理，在初始化配置时，往往要用到前者；二、图形用户接口（GUI：Graphical User Interfaces），有基于普通web页的管理，也有通过Java Applet 进行安全管理，一般都需要管理端安装有某个版本的浏览器；三、SNMP（Simple Network Management Protocol，简单网络管理协议）支持，通过第三方网络管理软件对符合SNMP标准的设备进行管理。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;四层调度和七层调度器的区别&quot;&gt;&lt;a href=&quot;#四层调度和七层调度器的区别&quot; class=&quot;headerlink&quot; title=&quot;四层调度和七层调度器的区别&quot;&gt;&lt;/a&gt;四层调度和七层调度器的区别&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/05/四层调度和七层调度的区别/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="lvs" scheme="https://9527dz.top/categories/lvs/"/>
    
    
      <category term="lvs" scheme="https://9527dz.top/tags/lvs/"/>
    
  </entry>
  
  <entry>
    <title>lvs负载均衡</title>
    <link href="https://9527dz.top/2019/01/05/lvs%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://9527dz.top/2019/01/05/lvs负载均衡/</id>
    <published>2019-01-05T05:48:37.097Z</published>
    <updated>2019-01-05T12:43:42.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lvs负载均衡"><a href="#lvs负载均衡" class="headerlink" title="lvs负载均衡"></a>lvs负载均衡</h1><p><img src="/2019/01/05/lvs负载均衡/图标.png" alt=""><br><a id="more"></a></p><h2 id="lvs负载均衡-1"><a href="#lvs负载均衡-1" class="headerlink" title="lvs负载均衡"></a>lvs负载均衡</h2><ul><li>负载均衡集群是 Load Balance(负载均衡器) 集群。是一种将网络上的访问流量分布于各个节点，以降低服务器压力，更好的向客户端提供服务的一种方式。常用<br>的负载均衡。</li><li><p>调度器分类：</p><ul><li>硬负载 (专用硬件)<ul><li>F5-Big Ip</li><li>NetScaler-Citrix</li><li>A10-A10</li></ul></li><li>软负载(pc server)<ul><li>四层：LVS,Nginx(stream模块伪四层),HAProxy（mode tcp）</li><li>七层：Nginx,HAProxy,ATS,Envoy,Traefik,Kong…</li></ul></li></ul></li><li><p>七层调度器（应用程序调度器）</p><ul><li>如果调度器是根据OSI第七层应用层的报文的格式来识别客户端身份并根据算法获取其中数据完成后端客户端挑选的称之为七层调度器或者称之为应用层调度器。。</li></ul></li><li>四层调度器（内核级调度）<ul><li>仅根据客户端请求时请求的套接字（ip+port）完成后端客户端挑选。</li></ul></li></ul><h3 id="一、负载均衡LVS基本介绍"><a href="#一、负载均衡LVS基本介绍" class="headerlink" title="一、负载均衡LVS基本介绍"></a>一、负载均衡LVS基本介绍</h3><ul><li><p>LB集群的架构和原理很简单，就是当用户的请求过来时，会直接分发到Director Server上，然后它把用户的请求根据设置好的调度算法，智能均衡地分发到后端真正服务器(real server)上。为了避免不同机器上用户请求得到的数据不一样，需要用到了共享存储，这样保证所有用户请求的数据是一样的。</p></li><li><p>LVS是 Linux Virtual Server 的简称，也就是Linux虚拟服务器。这是一个由章文嵩博士发起的一个开源项目，它的官方网站是 <a href="http://www.linuxvirtualserver.org" target="_blank" rel="noopener">http://www.linuxvirtualserver.org</a> 现在 LVS 已经是 Linux 内核标准的一部分。使用 LVS 可以达到的技术目标是：通过 LVS 达到的负载均衡技术和 Linux 操作系统实现一个高性能高可用的 Linux 服务器集群，它具有良好的可靠性、可扩展性和可操作性。从而以低廉的成本实现最优的性能。LVS 是一个实现负载均衡集群的开源软件项目，LVS架构从逻辑上可分为调度层、Server集群层和共享存储。</p></li></ul><h3 id="二、LVS的基本工作原理"><a href="#二、LVS的基本工作原理" class="headerlink" title="二、LVS的基本工作原理"></a>二、LVS的基本工作原理</h3><p><img src="/2019/01/05/lvs负载均衡/lvs工作原理.png" alt=""></p><h3 id="三、LVS的组成"><a href="#三、LVS的组成" class="headerlink" title="三、LVS的组成"></a>三、LVS的组成</h3><ul><li><p>1.lvs分为两个部分，分别是内核模块和lvs的管理工具。</p><ul><li><p>LVS 由2部分程序组成，包括 ipvs 和 ipvsadm。</p><ul><li>ipvsadm：用户空间的命令行工具，规则管理器，用于管理集群服务及相关的RealServer；</li><li>ipvs：工作于内核空间的netfilter的INPUT钩子之上的框架；</li></ul></li><li><p>目前来说，centos7及其以上的内核版本已经包括了ipvs的相关模块了。</p></li></ul></li></ul><p><code>内核支持的ipvs模块</code><br><img src="/2019/01/05/lvs负载均衡/lvs组成.png" alt=""></p><ul><li>上图中的rr，wrr，lc，wlc，lblc等等都是lvs中调度器的调度算法，根据不同的调度算法可以更好的分配服务，实现负载均衡。</li><li>而ipvs(ip virtual server)：一段代码工作在内核空间，实现调度。</li></ul><p><code>ipvsadm客户端管理工具</code><br><img src="/2019/01/05/lvs负载均衡/lvs组成2.png" alt=""></p><ul><li>上图是ipvsadm。负责为ipvs内核框架编写规则，定义谁是集群服务，而谁是后端真实的服务器(Real Server)。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调度算法为内建在内核中的模块一共有10种</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># grep -i "ip_vs" /boot/config-3.10.0-862.el7.x86_64 </span></span><br><span class="line">CONFIG_IP_VS=m</span><br><span class="line">CONFIG_IP_VS_IPV6=y</span><br><span class="line"><span class="comment"># CONFIG_IP_VS_DEBUG is not set</span></span><br><span class="line">CONFIG_IP_VS_TAB_BITS=12</span><br><span class="line">CONFIG_IP_VS_PROTO_TCP=y</span><br><span class="line">CONFIG_IP_VS_PROTO_UDP=y</span><br><span class="line">CONFIG_IP_VS_PROTO_AH_ESP=y</span><br><span class="line">CONFIG_IP_VS_PROTO_ESP=y</span><br><span class="line">CONFIG_IP_VS_PROTO_AH=y</span><br><span class="line">CONFIG_IP_VS_PROTO_SCTP=y</span><br><span class="line">CONFIG_IP_VS_RR=m</span><br><span class="line">CONFIG_IP_VS_WRR=m</span><br><span class="line">CONFIG_IP_VS_LC=m</span><br><span class="line">CONFIG_IP_VS_WLC=m</span><br><span class="line">CONFIG_IP_VS_LBLC=m</span><br><span class="line">CONFIG_IP_VS_LBLCR=m</span><br><span class="line">CONFIG_IP_VS_DH=m</span><br><span class="line">CONFIG_IP_VS_SH=m</span><br><span class="line">CONFIG_IP_VS_SED=m</span><br><span class="line">CONFIG_IP_VS_NQ=m</span><br><span class="line">CONFIG_IP_VS_SH_TAB_BITS=8</span><br><span class="line">CONFIG_IP_VS_FTP=m</span><br><span class="line">CONFIG_IP_VS_NFCT=y</span><br><span class="line">CONFIG_IP_VS_PE_SIP=m</span><br></pre></td></tr></table></figure></li></ul><p>四.LVS的调度算法<br>前面已经说了，调度器（directory） 是通过一定的调度算法将服务请求一个一个的分发下去。现在了解一下调度算法</p><ul><li><code>LVS一共有10种调度算法。</code>  <ul><li>静态算法（算法仅根据算法本身与请求报文特征进行调度 起点公平）</li><li>动态算法（额外考虑后端各RS的当前的负载的状态  结果公平）  </li></ul></li></ul><p><code>静态调度算法（4个）</code></p><ul><li>1.rr（轮叫调度）<ul><li>轮叫调度：这种是最简单的调度算法，就是将请求A一个，B一个，A一个，B一个 …… 循环的发。就算A主机挂掉了，调度器还是会将请求发送到A。十分均衡。</li></ul></li><li>2.wrr（加权轮叫）<ul><li>加权轮叫调度：这种算法是在rr基础上实现的，只不过加了权重，权重范围为1-100，假设A的服务器性能好，就给A的权重设置的高一点，设为2，而B主机是1。这样就实现A二个，B一个，A二个，B一个 …… 循环的发。这样照顾到了服务器性能。</li></ul></li><li>3.sh（源地址哈希）<ul><li>源地址散列：主要是实现将此前的session（会话）绑定。将此前客户的源地址作为散列键，从静态的散列表中找出对应的服务器，只要目标服务器是没有超负荷的就将请求发送过去。就是说某客户访问过A,现在这个客户又来了，所以客户请求会被发送到服务过他的A主机。</li></ul></li><li>4.dh（目的地址哈希）<ul><li>目的地址散列：以目的地址为关键字查找一个静态hash表来获得需要的RS。以目标地址为标准挑选。 功能是和sh近似的，但应用场景不同<ul><li>（dh举个例子：假设1号客户访问了web集群的一个动态页面，调度器将请求转发个A服务器，A服务器的PHP将这个动态请求运行了一遍，生成了缓存并回应1号客户。这下2号客户也访问了这个动态页面，调度器应该将请求发给A。毕竟A已经跑过这段程序了，有缓存，对吧。所以这既是dh算法）</li></ul></li></ul></li></ul><p>接下来是动态算法，动态算法与静态算法最大的区别就是动态算法考虑了服务器的压力。<br>活动链接（active）：客户与服务器建立连接并且有数据传送<br>非活动链接（inactive）：只是建立连接，没有数据传送，没有断开连接  </p><p><code>动态调度算法（6个）</code></p><ul><li>1.lc（最少链接）<ul><li>最少连接调度：这种算法是看A，和B的主机谁的连接少，请求就发给谁，如果负载相同，自上而下调度。</li><li>负载的简单算法：active*256+inactive  （谁小发给谁）</li></ul></li><li>2.wlc（加权最少链接）LVS的理想算法，也是默认的算法<ul><li>加权最少链接：这种算法就是比lc多了一个加权。</li><li>简单算法：( active*256+inactive )/weight    (谁小就发给谁)</li></ul></li><li>3.sed（最短期望延迟）<ul><li>基于wlc算法，假设A，B的权重分别是1，2 。而A的链接数为1，B的链接数为2 。这样的话，用wlc算法得出的结果一样，而明显B的权重大，B的能力较强。用sed算法的话，就可以避免wlc出现的问题。</li><li>简单算法：（active+1)<em>256/weight （活动的连接数+1）</em>256/除以权重  谁小发给谁<ul><li>A：（1+1）/1</li><li>B：（2+1）/2  （B小，交给B）</li></ul></li></ul></li><li>4.nq（永不排队）<ul><li>基于sed算法：在sed的基础上，若谁的链接数为0，直接将请求发送给他，没二话</li></ul></li><li>5.LBLC（基于局部性的最少连接）类似于dh，目标地址hash<ul><li>这个算法主要用于Cache集群系统，因为Cache集群的中客户请求报文的目标IP地址的变化，将相同的目标URL地址请求调度到同一台服务器，来提高服务器的访问的局部性和Cache命中率。从而调整整个集群的系统处理能力。但是，如果realserver的负载处于一半负载，就用最少链接算法，将请求发送给活动链接少的主机。</li></ul></li><li>6.LBLCR（带复制的基于局部性的最少链接）<ul><li>该算法首先是基于最少链接的，当一个新请求收到后，一定会将请求发给最少连接的那台主机的。但这样又破坏了cache命中率。但这个算法中，集群服务是cache共享的，假设A的PHP跑了一遍，得到缓存。但其他realserver可以去A那里拿缓存，这是种缓存复制机制。</li></ul></li></ul><h3 id="五、lvs类型（工作拓扑结构及转发机制）"><a href="#五、lvs类型（工作拓扑结构及转发机制）" class="headerlink" title="五、lvs类型（工作拓扑结构及转发机制）"></a>五、lvs类型（工作拓扑结构及转发机制）</h3><ul><li>LVS 的工作模式分为4中分别是 NAT，DR，TUN，FULL-NAT。其中做个比较，由于工作原理的关系的，NAT的配置最为简单，但是NAT对调度器的压力太大了，导致其效率最低，DR和TUN的工作原理差不多，但是DR中，所有主机必须处于同一个物理环境中，而在TUN中，所有主机可以分布在不同的位置，服务器一个在纽约，一个在深圳。最多应用的是FULL-NAT。</li></ul><p><img src="/2019/01/05/lvs负载均衡/工作类型.png" alt=""></p><ul><li>lvs-nat：修改请求报文的目标IP,多目标IP的DNAT</li><li>lvs-dr：操纵封装新的MAC地址</li><li>lvs-tun：在原请求IP报文之外新加一个IP首部</li><li>lvs-fullnat：修改请求报文的源和目标IP</li></ul><hr><p><img src="/2019/01/05/lvs负载均衡/解析.png" alt=""></p><ul><li>其中的专业术语<ul><li><ol><li>DS：Director Server。指的是前端负载均衡器。</li></ol></li><li><ol start="2"><li>RS：Real Server。后端真实的工作服务器。</li></ol></li><li><ol start="3"><li>VIP：向外部直接面向用户请求，作为用户请求的目标的IP地址。</li></ol></li><li><ol start="4"><li>DIP：Director Server IP，主要用于和内部主机通讯的IP地址。</li></ol></li><li><ol start="5"><li>RIP：Real Server IP，后端服务器的IP地址。</li></ol></li><li><ol start="6"><li>CIP：Client IP，访问客户端的IP地址。</li></ol></li></ul></li></ul><p><code>1.NAT模式</code></p><p><img src="/2019/01/05/lvs负载均衡/NAT.png" alt=""></p><ul><li><p>客户发出请求，发送请求给链接调度器的VIP，调度器将请求报文中的目标Ip地址改为RIP。这样服务器RealServer将请求的内容发给调度器，调度器再将报文中的源IP地址改为VIP。</p><ul><li>(a). 当用户请求到达Director Server，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP</li><li>(b). PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链</li><li>(c). IPVS比对数据包请求的服务是否为集群服务，若是，修改数据包的目标IP地址为后端服务器IP，然后将数据包发至POSTROUTING链。 此时报文的源IP为CIP，目标IP为RIP</li><li>(d). POSTROUTING链通过选路，将数据包发送给Real Server</li><li>(e). Real Server比对发现目标为自己的IP，开始构建响应报文发回给Director Server。 此时报文的源IP为RIP，目标IP为CIP</li><li>(f). Director Server在响应客户端前，此时会将源IP地址修改为自己的VIP地址，然后响应给客户端。 此时报文的源IP为VIP，目标IP为CIP</li></ul></li><li><p>Nat模型的特点</p><ul><li>1.很好配置，原理简单易懂</li><li>2.由于调度器的工作量太大，很容易成为整个集群系统的瓶颈。</li><li>3.RS应该使用私有地址，RS的网关必须指向DIP</li><li>4.支持端口映射</li><li>5.多目标IP的DNAT，通过将请求报文中的目标地址和目标端口修改为某挑出的RS的RIP和PORT实现转发；</li><li>6.RIP和DIP必须在同一个IP网络，且应该使用私网地址；RS的网关要指向DIP；</li><li>7.请求报文和响应报文都必须经由Director转发；Director易于成为系统瓶颈；</li><li>8.支持端口映射，可修改请求报文的目标PORT；</li><li>9.vs必须是Linux系统，rs可以是任意系统；</li></ul></li></ul><p><code>2.DR模式</code><br><img src="/2019/01/05/lvs负载均衡/DR.png" alt=""></p><ul><li><p>整个DR模式都是停留在第二层的数据链路层。直接修改MAC。实现报文的转发。</p><ul><li>(a) 当用户请求到达Director Server，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP</li><li>(b) PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链</li><li>(c) IPVS比对数据包请求的服务是否为集群服务，若是，将请求报文中的源MAC地址修改为DIP的MAC地址，将目标MAC地址修改RIP的MAC地址，然后将数据包发至POSTROUTING链。 此时的源IP和目的IP均未修改，仅修改了源MAC地址为DIP的MAC地址，目标MAC地址为RIP的MAC地址</li><li>(d) 由于DS和RS在同一个网络中，所以是通过二层来传输。POSTROUTING链检查目标MAC地址为RIP的MAC地址，那么此时数据包将会发至Real Server。</li><li>(e) RS发现请求报文的MAC地址是自己的MAC地址，就接收此报文。处理完成之后，将响应报文通过lo接口传送给eth0网卡然后向外发出。 此时的源IP地址为VIP，目标IP为CIP</li><li>(f) 响应报文最终送达至客户端</li></ul></li><li><p>LVS-DR的特点</p><ul><li>1.在前端路由器做静态地址路由绑定，将对于VIP的地址仅路由到Director Server</li><li>2.arptables：在arp的层次上实现在ARP解析时做防火墙规则，过滤RS响应ARP请求。</li><li>3.修改RS上内核参数（arp_ignore和arp_announce）将RS上的VIP配置在网卡接口的别名上，并限制其不能响应对VIP地址解析请求。</li><li>4.确保前端路由器将目标IP为VIP的请求报文发往Director：<ul><li>(a) 在前端网关做静态绑定；</li><li>(b) 在RS上使用arptables；</li><li>(c) 在RS上修改内核参数以限制arp通告及应答级别；<ul><li>arp_announce</li><li>arp_ignore</li></ul></li></ul></li><li>5.RS的RIP可以使用私网地址，也可以是公网地址；RIP与DIP在同一IP网络；RIP的网关不能指向DIP，以确保响应报文不会经由Director；</li><li>6.RS跟Director要在同一个物理网络；</li><li>7.请求报文要经由Director，但响应不能经由Director，而是由RS直接发往Client；</li><li>8.不支持端口映射；</li></ul></li></ul><p><code>3.TUN模式</code><br><img src="/2019/01/05/lvs负载均衡/TUN.png" alt=""></p><ul><li><p>和DR模式差不多，但是比DR多了一个隧道技术以支持realserver不在同一个物理环境中。就是realserver一个在北京，一个工作在上海。</p></li><li><p>在原有的IP报文外再次封装多一层IP首部，内部IP首部(源地址为CIP，目标IIP为VIP)，外层IP首部(源地址为DIP，目标IP为RIP</p><ul><li>(a) 当用户请求到达Director Server，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP 。</li><li>(b) PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链</li><li>(c) IPVS比对数据包请求的服务是否为集群服务，若是，在请求报文的首部再次封装一层IP报文，封装源IP为为DIP，目标IP为RIP。然后发至POSTROUTING链。 此时源IP为DIP，目标IP为RIP</li><li>(d) POSTROUTING链根据最新封装的IP报文，将数据包发至RS（因为在外层封装多了一层IP首部，所以可以理解为此时通过隧道传输）。 此时源IP为DIP，目标IP为RIP</li><li>(e) RS接收到报文后发现是自己的IP地址，就将报文接收下来，拆除掉最外层的IP后，会发现里面还有一层IP首部，而且目标是自己的lo接口VIP，那么此时RS开始处理此请求，处理完成之后，通过lo接口送给eth0网卡，然后向外传递。 此时的源IP地址为VIP，目标IP为CIP</li><li>(f) 响应报文最终送达至客户端</li></ul></li><li><p>LVS-TUN的特点</p><ul><li>1 .RIP、VIP、DIP全是公网地址</li><li>2.RS的网关不会也不可能指向DIP</li><li>3.不支持端口映射</li><li>4.RS的系统必须支持隧道</li></ul></li></ul><p><code>lvs-fullnat模式：</code></p><ul><li>通过同时修改请求报文的源IP地址和目标IP地址进行转发；<ul><li>CIP <--> DIP </--></li><li>VIP <--> RIP </--></li><li>lvs-fullnat    特点：            </li></ul></li><li>(1) VIP是公网地址，RIP和DIP是私网地址，且通常不在同一IP网络；因此，RIP的网关一般不会指向DIP；</li><li>(2) RS收到的请求报文源地址是DIP，因此，只能响应给DIP；但Director还要将其发往Client；</li><li>(3) 请求和响应报文都经由Director；</li><li>(4) 支持端口映射；        </li><li>注意：此类型默认不支持；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lvs负载均衡&quot;&gt;&lt;a href=&quot;#lvs负载均衡&quot; class=&quot;headerlink&quot; title=&quot;lvs负载均衡&quot;&gt;&lt;/a&gt;lvs负载均衡&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/05/lvs负载均衡/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="lvs" scheme="https://9527dz.top/categories/lvs/"/>
    
    
      <category term="lvs" scheme="https://9527dz.top/tags/lvs/"/>
    
  </entry>
  
  <entry>
    <title>docker资源限制以及compose基础应用</title>
    <link href="https://9527dz.top/2019/01/04/docker%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/"/>
    <id>https://9527dz.top/2019/01/04/docker资源限制/</id>
    <published>2019-01-04T13:03:24.175Z</published>
    <updated>2019-01-05T03:56:28.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker资源限制以及compose基础应用"><a href="#docker资源限制以及compose基础应用" class="headerlink" title="docker资源限制以及compose基础应用"></a>docker资源限制以及compose基础应用</h1><p><img src="/2019/01/04/docker资源限制/图标.png" alt=""><br><a id="more"></a></p><h2 id="docker资源限制"><a href="#docker资源限制" class="headerlink" title="docker资源限制"></a>docker资源限制</h2><ul><li><p>在使用docker运行容器时，一台主机上可能会运行几百个容器，这些容器虽然互相隔离，但是底层却使用着相同的CPU，内存和磁盘资源。如果不对容器使用的资源进行限制，那么容器之间会互相影响，小的来说会导致容器资源使用不公平;大的来说，可能会导致主机和集群资源耗尽，服务完全不可用.docker </p></li><li><p>作为容器的管理者，自然提供了控制容器资源的功能。正如使用内核的命名空间来做赚容器之间的隔离，docker也是通过内核的cgroups来做容器的资源限制。</p></li></ul><h3 id="1-内存（不可压缩资源）"><a href="#1-内存（不可压缩资源）" class="headerlink" title="1. 内存（不可压缩资源）"></a>1. 内存（不可压缩资源）</h3><ul><li>1.1 了解耗尽内存的风险</li><li><p>不让正在运行的容器消耗太多的主机内存是很重要的。在 Linux 主机上，如果内核检测到没有足够的内存来执行重要的系统功能，它会抛出一个 OOME内存耗尽 或 Out Of Memory Exception，并开始查杀进程以释放内存。任何进程都可能被杀掉，包括 Docker 和其他重要应用程序。如果终止了错误进程，有可能导致系统宕机。</p></li><li><p>Docker 尝试通过调整 Docker 守护进程的 OOM 优先级来降低这些风险，从而使其和系统上的其他进程相比更不容易被杀掉。容器的 OOM 优先级不调整。这使得单个容器被杀死的可能性要比 Docker 守护进程或其他系统进程被终止的可能性要大。不应该通过手动将守护程序或容器上的 –oom-score-adj 设置为极端负数，或通过在容器上设置 –oom-disable-kill 来尝试规避这些安全措施。</p></li><li>生产环境一般不建议使用swap，因为使用swap会严重影响服务器性能。</li></ul><ul><li><p>选项    描述</p><ul><li>-m 或 –memory=    容器可用的最大内存。如果设置了这个值，最小可用内存是 4MB。</li><li>–memory-swap*    允许容器放入磁盘 swap 中的内存数量。</li><li>–memory-swappiness    默认情况下，主机内核可以交换容器使用的匿名页面的百分比。可以设置为介于0和100之间的值，以调整此百分比。用来定义系统是使用的交换分区的倾向性（数值越大越倾向使用，数值越低越少越晚的使用能不用则不用）</li><li>–memory-reservation    软限制。指定一个小于 –memory 的软限制，当 Docker 检测到主机上的争用或内存不足时，会采用这个限制来替换 –memory。如果使用这个限制，则必须将其设置为低于 –memory，以使其优先。不能保证容器不会超出限制。</li><li>–kernel-memory    容器可以使用的最大内核内存量。允许的最小值是 4m。由于内核内存不能被换出，因此内核内存不足的容器可能会阻塞主机资源，这会对主机和其他容器产生副作用。</li><li>–oom-kill-disable    默认情况下，如果发生内存不足（OOM）错误，内核会杀死容器中的进程。使用 –oom-kill-disable 选项可以更改此行为。注意只能在同时设置了-m/–memory 选项的容器上使用此选项，因为如果未设置 -m 标志，可能会耗尽主机的内存，导致内核需要终止主机系统的进程以释放内存。</li></ul></li><li><p>1.2 限制容器对内存的访问</p><ul><li>Docker 可以对内存实施两种限制：硬限制，允许容器使用不超过给定数量的用户或系统内存；软限制，允许容器使用尽可能多的内存，除非满足某些条件，例如内核检测到内存不足或主机上的争用。其中一些选项在单独使用或同时设置多个选项时会有不同的效果。</li><li>这些选项大多数都是一个正整数，后跟一个后缀 b，k，m，g，以表示字节，千字节，兆字节或千兆字节。</li></ul></li></ul><p><img src="/2019/01/04/docker资源限制/内存资源限制.png" alt=""></p><ul><li><p>1.3 –memory-swap 详情</p><ul><li>–memory-swap 是一个修饰符标志，只有在 –memory 也被设置时才有意义。使用 swap 使得容器可以在耗尽所有可用 RAM 时，将多余的内存需求写入磁盘。对于经常将内存交换到磁盘的应用程序会有性能损失。</li></ul><ul><li><p>其设置可能会产生复杂的效果：</p><ul><li>如果 –memory-swap 设置为正整数，那么 –memory 和 –memory-swap 都需要设置。–memory-swap 表示所有可用的内存和 swap 之和，并且 –memory 控制非 swap 内存数量。因此，如果 –memory=”300m” 和 –memory-swap=”1g”，则容器可以使用 300MB 内存和 700MB swap。</li><li>如果 –memory-swap 设置为 0，则会忽略这个设置。</li><li>如果 –memory-swap 设置的值与 –memory相同，并且 –memory 设置为正整数，则容器无法访问 swap。</li><li>如果 –memory-swap 未设置，并且 –memory 设置了，如果主机容器配置了交换内存，则容器会使用 –memory 设置值的两倍作为 swap 的大小。例如，如果 –memory=”300m”，–memory-swap没有设置，则容器可以使用 300MB 内存和 600MB swap。</li><li>如果 –memory-swap 显式设置为 -1，允许容器使用无限制的 swap，直到达到主机系统可用值。</li></ul></li></ul></li><li><p>禁止容器使用 SWAP</p><ul><li>如果 –memory-swap 设置的值与 –memory相同，则容器无法访问 swap。这是因为 –memory-swap 设置的值是可用的内存与 swap 之和，而 –memory 是可用的物理内存量。</li></ul></li><li><p>1.4 –memory-swappiness 详情</p><ul><li>值为 0 时，关闭匿名页的 swap。</li><li>值为 100 时，所有匿名页都可以 swap。</li><li>默认情况下，如果没有设置 –memory-swappiness，会从主机继承这个值。</li></ul></li><li>1.5 –kernel-memory 详情<ul><li>内核内存限制以分配给指定容器的全部内存来表示。考虑以下情况：<ul><li>无限内存，无限内核内存：这是默认行为。</li><li>无限内存，有限内核内存：当所有 cgroup 所需的内存大于主机上实际存在的内存时，这是合适的。可以将内核内存配置为永远不会覆盖主机上可用的内容，而需要更多内存的容器需要等待。</li><li>有限内存，无限内核内存：整个内存是有限的，但内核内存不是。</li><li>有限内存，有限内核内存：限制用户和内核内存可用于调试与内存相关的问题。如果某个容器对任意一种内存的使用数量超量，则会导致内存不足但不会影响其他容器或主机。在此设置下，如果内核内存限制低于用户内存限制，则内核内存用尽会导致容器遇到 OOM 错误。如果内核内存限制高于用户内存限制，则内核限制不会导致容器体验 OOM。</li></ul></li></ul></li><li>当打开任何内核内存限制时，主机会在每个进程的基础上跟踪“high water mark”（高位标记）统计信息，以便跟踪哪些进程（在这种情况下是容器）正在使用多余的内存。可以通过在主机上查看 /proc/<pid>/status 来查看每个进程。</pid></li></ul><h3 id="2-CPU（可压缩资源）"><a href="#2-CPU（可压缩资源）" class="headerlink" title="2. CPU（可压缩资源）"></a>2. CPU（可压缩资源）</h3><ul><li><p>默认情况下，每个容器对主机 CPU 的周期访问是无限的。可以设置各种约束来限制给定容器访问主机的 CPU 周期。大多数用户使用和配置默认的 CFS 调度器。在 Docker 1.13 及更高版本中，还可以配置实时调度器</p></li><li><p>2.1 配置默认的 CFS 调度器</p><ul><li>CFS 是用于普通 Linux 进程的 Linux 内核 CPU 调度程序。几个运行时标志允许配置容器的 CPU 资源访问量。使用这些设置时，Docker 会修改主机上容器的 cgroup 设置。</li></ul></li></ul><p><img src="/2019/01/04/docker资源限制/cpu.png" alt=""></p><h3 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h3><p>此镜像可以进行压测，参考镜像地址：<a href="https://hub.docker.com/r/lorel/docker-stress-ng" target="_blank" rel="noopener">https://hub.docker.com/r/lorel/docker-stress-ng</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">拖下测试镜像</span><br><span class="line">  [root@centos7 ~]<span class="comment"># docker pull lorel/docker-stress-ng</span></span><br><span class="line"></span><br><span class="line">查看镜像的使用帮助</span><br><span class="line">  [root@centos7 ~]<span class="comment"># docker run --name pc1 -it --rm lorel/docker-stress-ng --help</span></span><br></pre></td></tr></table></figure><h2 id="docker-compose容器编排工具"><a href="#docker-compose容器编排工具" class="headerlink" title="docker compose容器编排工具"></a><code>docker compose容器编排工具</code></h2><p>官网：<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">https://docs.docker.com/compose/</a></p><ul><li><p>1.Compose介绍</p><ul><li>Docker Compose是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。 </li><li>Compose 通过一个配置文件来管理多个Docker容器，在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</li></ul></li><li><p>2.Compose和Docker兼容性</p></li></ul><p><img src="/2019/01/04/docker资源限制/兼容.png" alt=""></p><ul><li>Docker版本变化说明：<ul><li>Docker从1.13.x版本开始，版本分为企业版EE和社区版CE，版本号也改为按照时间线来发布，比如17.03就是2017年3月。</li><li>Docker的linux发行版的软件仓库从以前的<a href="https://apt.dockerproject.org和https://yum.dockerproject.org变更为目前的https://download.docker.com" target="_blank" rel="noopener">https://apt.dockerproject.org和https://yum.dockerproject.org变更为目前的https://download.docker.com</a>, 软件包名字改为docker-ce和docker-ee。</li></ul></li></ul><p>范例：打算部署一个wordpress<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">WordPress:</span><br><span class="line"></span><br><span class="line">1. 在你的主文件夹中创建一个名为my_wordpress的新目录，并将<span class="built_in">cd</span>放入其中:</span><br><span class="line"><span class="comment">#yum install docker-compose</span></span><br><span class="line"><span class="comment"># systemctl start docker</span></span><br><span class="line"><span class="comment"># mkdir ~/my_wordpress/</span></span><br><span class="line"><span class="comment"># cd ~/my_wordpress/ </span></span><br><span class="line"><span class="comment"># docker pull wordpress:latest</span></span><br><span class="line"><span class="comment"># docker pull mysql:5.7</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">2. 创建一个名为docker-compose的文件。并在此文件夹中添加以下内容。为WORDPRESS_DB_PASSWORD、MYSQL_ROOT_PASSWORD和MYSQL_PASSWORD环境选项设置您自己的密码。为WORDPRESS_DB_PASSWORD和MYSQL_PASSWORD输入的密码应该相同。</span><br><span class="line"></span><br><span class="line"><span class="comment"># rpm -q docker-compose</span></span><br><span class="line"><span class="comment">#docker-compose-1.18.0-2.el7.noarch</span></span><br><span class="line"></span><br><span class="line">vim docker-compose.yml</span><br><span class="line">version: <span class="string">'3.3'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">   wordpress: <span class="comment">#服务</span></span><br><span class="line">     depends_on:</span><br><span class="line">       - db</span><br><span class="line">     image: wordpress:latest  <span class="comment">#互联网镜像为wordpress(http、php、php-mysql、wordpress)</span></span><br><span class="line">     volumes:</span><br><span class="line">       - wordpress_files:/var/www/html</span><br><span class="line">     ports:</span><br><span class="line">       - <span class="string">"80:80"</span> <span class="comment">#端口映射,左侧宿主机右侧容器</span></span><br><span class="line">     restart: always</span><br><span class="line">     environment:</span><br><span class="line">       WORDPRESS_DB_HOST: db:3306</span><br><span class="line">       WORDPRESS_DB_NAME: wordpress</span><br><span class="line">       WORDPRESS_DB_USER: wordpress</span><br><span class="line">       WORDPRESS_DB_PASSWORD: my_wordpress_db_password</span><br><span class="line"></span><br><span class="line">   db: <span class="comment">#服务</span></span><br><span class="line">     image: mysql:5.7</span><br><span class="line">     volumes:</span><br><span class="line">       - db_data:/var/lib/mysql</span><br><span class="line">     restart: always</span><br><span class="line">     environment:</span><br><span class="line">       MYSQL_ROOT_PASSWORD: my_db_root_password</span><br><span class="line">       MYSQL_DATABASE: wordpress</span><br><span class="line">       MYSQL_USER: wordpress</span><br><span class="line">       MYSQL_PASSWORD: my_wordpress_db_password</span><br><span class="line">volumes:</span><br><span class="line">    wordpress_files:</span><br><span class="line">    db_data: </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">3. 从my_wordpress目录，开始你的Docker容器:</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose up -d    </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">4. Docker容器启动WordPress和MySQL需要一到两分钟。之后，您可以在web浏览器中访问您的IP地址，您应该被引导到WordPress设置表单。</span><br><span class="line"> </span><br><span class="line">文档出处，</span><br><span class="line">    https://www.linode.com/docs/quick-answers/linux/wordpress-with-docker-compose/</span><br></pre></td></tr></table></figure></p><p>docker ps 命令：</p><pre><code>过滤器：过滤标志(-f或–filter)格式是key=value。如果超过一个过滤，就传递多个标志(如–filter “foo=bar” –filter “bif=baz”)目前支持的过滤有如下这些:    id(容器id)    label(label=或label=&gt;)    name(容器名称)    exited(整数 – 容器退出码。只在使用–all才有用)    status (created restarting running paused exited dead)    ancestor([:], or ) – 过滤从指定镜像创建的容器。    before (容器的名称或id) – 过滤在给定id或名称之前创建的容器。    since (容器的名称或id) – 过滤在给定id或名称之后创建的容器。    isolation (default process hyperv) (Windows daemon only)    volume (数据卷名称或挂载点) – 过滤挂载有指定数据卷的容器。    network (网络id或名称) – 过滤连接到指定网络的容器。--format为格式化输出。格式化选项(–format)使用Go模板来美化打印容器输出。Go模板有效的占位符如下：    .ID 容器ID    .Image 镜像ID    .Command Quoted command    .CreatedAt 创建容器的时间点.    .RunningFor 从容器创建到现在过去的时间.    .Ports 暴露的端口.    .Status 容器状态.    .Size 容器占用硬盘大小.    .Names 容器名称.    .Labels 容器所有的标签.    .Label 指定label的值 例如&apos;{{.Label “com.docker.swarm.cpu”}}’    .Mounts 挂载到这个容器的数据卷名称Docker参考手册：    https://docs.docker.com/engine/reference/commandline/dockerd/</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker资源限制以及compose基础应用&quot;&gt;&lt;a href=&quot;#docker资源限制以及compose基础应用&quot; class=&quot;headerlink&quot; title=&quot;docker资源限制以及compose基础应用&quot;&gt;&lt;/a&gt;docker资源限制以及compose基础应用&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/04/docker资源限制/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="https://9527dz.top/categories/docker/"/>
    
    
      <category term="docker" scheme="https://9527dz.top/tags/docker/"/>
    
  </entry>
  
</feed>
