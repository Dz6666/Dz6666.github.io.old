<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dai zhe&#39;s notes</title>
  
  <subtitle>Just Du It</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://9527dz.top/"/>
  <updated>2018-12-31T13:00:51.689Z</updated>
  <id>https://9527dz.top/</id>
  
  <author>
    <name>唐憎洗发</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker网络模型</title>
    <link href="https://9527dz.top/2018/12/31/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%AD%98%E5%82%A8%E5%8D%B7/"/>
    <id>https://9527dz.top/2018/12/31/docker网络模型及存储卷/</id>
    <published>2018-12-31T07:04:09.152Z</published>
    <updated>2018-12-31T13:00:51.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker网络模型"><a href="#docker网络模型" class="headerlink" title="docker网络模型"></a>docker网络模型</h1><p><img src="/2018/12/31/docker网络模型及存储卷/图标.png" alt=""><br><a id="more"></a></p><h2 id="Docker网络模型详解"><a href="#Docker网络模型详解" class="headerlink" title="Docker网络模型详解"></a>Docker网络模型详解</h2><ul><li><code>四种网络</code><ul><li>桥网络bridge：<ul><li>默认docker0 NET桥</li></ul></li><li>共享桥、共享接口：（共享网络名称空间）<ul><li>联盟式网络</li></ul></li><li>容器直接使用宿主机网络的共享<ul><li>host网络</li></ul></li><li>空网络、无网络、none网络<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看docker可以使用的网络类型</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">38c0658bea06        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">9b7ecc0031ef        host                host                <span class="built_in">local</span></span><br><span class="line">c0de873b7341        none                null                <span class="built_in">local</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>共享桥<br><img src="/2018/12/31/docker网络模型及存储卷/2018-12-28_161058.png" alt=""></p><ul><li>无网络：仅lo,仅自己通讯<ul><li>–network none</li></ul></li><li>桥网络 (详情查看 dacker network inspact brige)<ul><li>–network  brige (默认)</li></ul></li><li>容器间共享网络（联盟式网络）<ul><li>–network contariner:指定已有网容器（相同主机名，不同容器，但是网络是共享，仅共享网络，可以基于127.0.0.1通讯）</li></ul></li><li>共享主机网络<ul><li>–network host</li></ul></li></ul><p><code>无网络</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># docker run --name pc1 -it --rm --network none busybox:latest</span></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure></p><p><code>桥网络</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (默认docker0 NET桥,详情查看 dacker network inspact brige)</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name pc2 -it --rm --network bridge busybox:latest</span></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:508 (508.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看默认的net桥的详情</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker network inspect bridge</span></span><br></pre></td></tr></table></figure></p><p><code>容器间共享网络</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#容器间共享：NET,IPC,UTS</span></span><br><span class="line"></span><br><span class="line">第一个容器</span><br><span class="line">  [root@centos7 ~]<span class="comment"># docker run --name pc2 -it --rm --network bridge busybox:latest</span></span><br><span class="line">  / <span class="comment"># ifconfig</span></span><br><span class="line">  eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:7 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:578 (578.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">  lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">  / <span class="comment"># hostname</span></span><br><span class="line">  45ec3fb534cd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二个容器（共享第一个容器的地址）</span><br><span class="line">  [root@centos7 ~]<span class="comment"># docker run --name pc3 -it --rm --network container:pc2 busybox:latest</span></span><br><span class="line">  / <span class="comment"># ifconfig</span></span><br><span class="line">  eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:648 (648.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">  lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">  / <span class="comment"># hostname</span></span><br><span class="line">  45ec3fb534cd</span><br></pre></td></tr></table></figure></p><p><code>共享宿主机网络</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">  [root@centos7 ~]<span class="comment"># docker run --name pc4 -it --rm --network host  busybox:latest</span></span><br><span class="line">  / <span class="comment"># ifconfig</span></span><br><span class="line">  docker0   Link encap:Ethernet  HWaddr 02:42:D4:BB:AF:CF  </span><br><span class="line">          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          inet6 addr: fe80::42:d4ff:febb:afcf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:21 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:41 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:3522 (3.4 KiB)  TX bytes:3758 (3.6 KiB)</span><br><span class="line"></span><br><span class="line">  ens33     Link encap:Ethernet  HWaddr 00:0C:29:14:4D:62  </span><br><span class="line">          inet addr:192.168.52.1  Bcast:192.168.52.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::bbfd:d184:6a67:3c45/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:264 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:38 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:29263 (28.5 KiB)  TX bytes:4779 (4.6 KiB)</span><br><span class="line"></span><br><span class="line">  ens37     Link encap:Ethernet  HWaddr 00:0C:29:14:4D:6C  </span><br><span class="line">          inet addr:172.18.135.1  Bcast:172.18.135.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::4587:5c47:4c05:570b/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:33565 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:8191 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:14694609 (14.0 MiB)  TX bytes:1013772 (990.0 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:98 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:98 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:10996 (10.7 KiB)  TX bytes:10996 (10.7 KiB)</span><br><span class="line"></span><br><span class="line">  veth7ff20ba Link encap:Ethernet  HWaddr C2:81:A1:34:BA:5F  </span><br><span class="line">          inet6 addr: fe80::c081:a1ff:fe34:ba5f/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:648 (648.0 B)</span><br><span class="line"></span><br><span class="line">  virbr0    Link encap:Ethernet  HWaddr 52:54:00:FF:0B:1F  </span><br><span class="line">          inet addr:192.168.122.1  Bcast:192.168.122.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">  </span><br><span class="line">  / <span class="comment"># hostname</span></span><br><span class="line">  centos7.com</span><br></pre></td></tr></table></figure></p><h3 id="其他网络相关的命令"><a href="#其他网络相关的命令" class="headerlink" title="其他网络相关的命令"></a><code>其他网络相关的命令</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################指定主机名##########################</span></span><br><span class="line">  -h, --hostname string                </span><br><span class="line">      Container host name</span><br><span class="line"><span class="comment">#默认的主机名是docker容器对应的id</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name p1 -it --rm --hostname p1.com busybox:latest </span></span><br><span class="line">/ <span class="comment"># hostname</span></span><br><span class="line">p1.com</span><br><span class="line"></span><br><span class="line"><span class="comment">##########################外部指定host文件以及文件的内容############</span></span><br><span class="line"> --add-host list                  </span><br><span class="line">      Add a custom host-to-IP mapping (host:ip)</span><br><span class="line"><span class="comment">#适用于容器间使用主机名通信，可多次使用</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name p1 -it --rm --hostname p1.com --add-host wg.p1.com:172.18.0.1 busybox:latest </span></span><br><span class="line">/ <span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.18.0.1wg.p1.com</span><br><span class="line">172.17.0.2p1.com p1</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name p1 -it --rm --hostname p1.com --add-host wg.p1.com:172.18.0.1 --add-host www.p1.com:8.8.8.8 busybox:latest </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############创建容器时指定NDS服务器地址以及搜索域#################</span></span><br><span class="line">  --dns list                       Set custom DNS servers</span><br><span class="line">  --dns-search list                Set custom DNS search domains</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name pc1 -it --rm --hostname pc1.com --add-host www.pc1.com:1.1.1.1 --dns 8.8.8.8 --dns 114.114.114.114 --dns-search com busybox</span></span><br><span class="line">/ <span class="comment"># cat /etc/hosts </span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">1.1.1.1www.pc1.com</span><br><span class="line">172.17.0.2pc1.com pc1</span><br><span class="line">/ <span class="comment"># cat /etc/resolv.conf </span></span><br><span class="line">search com</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure><h2 id="服务暴漏-expose-public"><a href="#服务暴漏-expose-public" class="headerlink" title="服务暴漏 expose,public"></a><code>服务暴漏 expose,public</code></h2><p>让私有网络中的主机上的服务被外部主机访问到—DNAT</p><ul><li><p><code>-p选项的使用格式</code> </p><ul><li><code>-p &lt;containerPort&gt;</code><ul><li><code>将指定的容器端口映射至宿主机所有地址的一个动态端口</code></li></ul></li><li><code>-p  &lt;hostPort&gt;:&lt;containerPort&gt;</code> <ul><li><code>将容器端口&lt;containerPort&gt;映射至宿主机上指定的主机端口&lt;hostPort&gt;（宿主机上所有地址的此端口）</code> </li></ul></li><li><p><code>-p &lt;ip&gt;::&lt;containerPort&gt;</code> </p><ul><li><code>将指定的容器端口&lt;containerPort&gt;映射至宿主机指定&lt;ip&gt;的动态端口</code> </li></ul></li><li><code>-p &lt;ip&gt;:&lt;hostPort&gt;:&lt;containerPort&gt;</code> <ul><li><code>将指定的容器端口&lt;containerPort&gt;映射至宿主机指定&lt;ip&gt;的端口&lt;hostPort&gt;</code> </li><li><code>“动态端口”指随机端口，具体的映射结果可使用docker port命令查看</code></li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">-p选项的使用演示，可重复使用多次</span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="comment">########docker容器的80端口映射宿主机上的随机端口#####################</span></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container run --name pc5 -it -p 80 busybox</span></span><br><span class="line"><span class="comment">#ctrl + p ctrl + q</span></span><br><span class="line"><span class="comment">#宿主机查看防火墙</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -t nat -vnL</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 214 packets, 20360 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:32770 to:172.17.0.2:80</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以访问宿主机的映射的端口从而访问容器的httpd服务</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker exec -it  pc5  /bin/sh</span></span><br><span class="line">/ <span class="comment"># /bin/httpd -h /etc</span></span><br><span class="line">/ <span class="comment"># ps</span></span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    1 root      0:00 sh</span><br><span class="line">    7 root      0:00 /bin/sh</span><br><span class="line">   13 root      0:00 /bin/httpd -h /etc</span><br><span class="line">   14 root      0:00 ps</span><br><span class="line">/ <span class="comment"># read escape sequence</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># curl 172.18.135.1:32770</span></span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;404 Not Found&lt;/TITLE&gt;&lt;/HEAD&gt;</span><br><span class="line">&lt;BODY&gt;&lt;H1&gt;404 Not Found&lt;/H1&gt;</span><br><span class="line">The requested URL was not found</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">###########docker容器的80端口映射宿主机上的所有地址的80端口#########</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name pc2 -it --network bridge -p 80:80 busybox</span></span><br><span class="line">/ <span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看防火墙</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -t nat -vnL</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 42 packets, 3276 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:172.17.0.2:80</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                NAMES</span><br><span class="line">7e622f638dba        busybox             <span class="string">"sh"</span>                3 minutes ago       Up 3 minutes        0.0.0.0:80-&gt;80/tcp   pc2</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">##########docker容器的80端口映射宿主机上的指定地址的80端口##########</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">#第一个端口为宿主机的端口，第二个端口为容器的端口</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container run --name pc1 -it --rm --network bridge -p 172.18.135.1:80:80 busybox</span></span><br><span class="line">/ <span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#容器的80地址绑定到宿主机的135.1地址的80端口</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -t nat -vnL</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 9 packets, 702 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            172.18.135.1         tcp dpt:80 to:172.17.0.2:80</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                     NAMES</span><br><span class="line">e87a037e4348        busybox             <span class="string">"sh"</span>                About a minute ago   Up About a minute   172.18.135.1:80-&gt;80/tcp   pc1</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"><span class="comment">##########docker容器的80端口映射宿主机上的指定地址的随机端口#########</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container run --name pc1 -it --rm --network bridge -p 172.18.135.1::80 busybox</span></span><br><span class="line">/ <span class="comment"># [root@centos7 ~]# </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#宿主机检验</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -t nat -vnL</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 15 packets, 1151 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            172.18.135.1         tcp dpt:32768 to:172.17.0.2:80</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                        NAMES</span><br><span class="line">8dd54f2321cd        busybox             <span class="string">"sh"</span>                About a minute ago   Up About a minute   172.18.135.1:32768-&gt;80/tcp   pc1</span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="comment">######################端口映射关系查看##############################</span></span><br><span class="line"><span class="comment">###################################################################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container port pc2</span></span><br><span class="line">443/tcp -&gt; 192.168.52.1:443</span><br><span class="line">80/tcp -&gt; 172.18.135.1:80</span><br></pre></td></tr></table></figure><p>范例：-p 选项多重复使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># docker container run --name pc2 -it --rm --network bridge -p 172.18.135.1:80:80 -p 192.168.52.1:443:443 busybox</span></span><br><span class="line">/ <span class="comment"># [root@centos7 ~]# </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                                NAMES</span><br><span class="line">028e3e9f581f        busybox             <span class="string">"sh"</span>                13 seconds ago      Up 13 seconds       172.18.135.1:80-&gt;80/tcp, 192.168.52.1:443-&gt;443/tcp   pc2</span><br><span class="line">8dd54f2321cd        busybox             <span class="string">"sh"</span>                5 minutes ago       Up 5 minutes        172.18.135.1:32768-&gt;80/tcp                           pc1</span><br></pre></td></tr></table></figure></p><h3 id="自建网络类型"><a href="#自建网络类型" class="headerlink" title="自建网络类型"></a><code>自建网络类型</code></h3><ul><li>docker network create [OPTIONS] NETWORK<ul><li>-d, –driver string     #指定网络类型，默认为bridge，NET</li><li>–subnet strings        #指定子网地址，默认第一个地址设置为桥接口（网关）的地址</li><li>–gateway strings       #不使用默认的手动指定网关</li><li>–ip-range strings      #指定网络分配的地址，如果不指定则除网关外全部分配</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################自建网络地址######################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker network create -d bridge --subnet 10.0.0.0/24 mybr0</span></span><br><span class="line">9902c4e06158ac6bcbabd2aa917b421e3b90d10100c7c457214da834268946e2</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">499e8e1a5fe6        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">9b7ecc0031ef        host                host                <span class="built_in">local</span></span><br><span class="line">9902c4e06158        mybr0               bridge              <span class="built_in">local</span></span><br><span class="line">c0de873b7341        none                null                <span class="built_in">local</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ifconfig</span></span><br><span class="line">br-9902c4e06158: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.0.1  netmask 255.255.255.0  broadcast 10.0.0.255</span><br><span class="line">        ether 02:42:c9:35:05:ce  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 384  bytes 43480 (42.4 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 38  bytes 4779 (4.6 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"><span class="comment">####################将新创建的容器添加到自建的网络中###############</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name pc1 --rm -it --network mybr1  busybox</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker exec -it pc1 /bin/sh</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker exec pc1 ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:02:02  </span><br><span class="line">          inet addr:192.168.2.2  Bcast:192.168.2.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:24 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:2650 (2.5 KiB)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line"><span class="comment">######################将此容器连接到bridge网络中#################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker network connect bridge pc1</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker exec pc1 ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:02:02  </span><br><span class="line">          inet addr:192.168.2.2  Bcast:192.168.2.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:24 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:2650 (2.5 KiB)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:7 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:578 (578.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"><span class="comment">#####################将一个网络接口从此容器中拆除###################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker network disconnect bridge pc1</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker exec pc1 ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:02:02  </span><br><span class="line">          inet addr:192.168.2.2  Bcast:192.168.2.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:24 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:2650 (2.5 KiB)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><h3 id="修改默认的docker0桥"><a href="#修改默认的docker0桥" class="headerlink" title="修改默认的docker0桥"></a><code>修改默认的docker0桥</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">自定义docker0桥的网络属性信息：/etc/docker/daemon.json文件</span><br><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/docker/daemon.json </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://xr8r3tc3.mirror.aliyuncs.com"</span>],</span><br><span class="line">            <span class="string">"bip"</span>: <span class="string">"192.168.1.5/24"</span>,</span><br><span class="line">            <span class="string">"fixed-cidr"</span>: <span class="string">"10.20.0.0/16"</span>,</span><br><span class="line">            <span class="string">"fixed-cidr-v6"</span>: <span class="string">"2001:db8::/64"</span>,</span><br><span class="line">            <span class="string">"mtu"</span>: 1500,</span><br><span class="line">            <span class="string">"default-gateway"</span>: <span class="string">"10.20.1.1"</span>,</span><br><span class="line">            <span class="string">"default-gateway-v6"</span>: <span class="string">"2001:db8:abcd::89"</span>,</span><br><span class="line">            <span class="string">"dns"</span>: [<span class="string">"10.20.1.2"</span>,<span class="string">"10.20.1.3"</span>]</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        核心选项为bip，即bridge ip之意，用于指定docker0桥自身的IP地址；其它选项可通过此地址计算得出。</span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl daemon-reload </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl restart docker</span></span><br><span class="line"></span><br><span class="line">文档路径：</span><br><span class="line">            https://docs.docker.com/engine/userguide/networking/default_network/custom-docker0/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker网络模型&quot;&gt;&lt;a href=&quot;#docker网络模型&quot; class=&quot;headerlink&quot; title=&quot;docker网络模型&quot;&gt;&lt;/a&gt;docker网络模型&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/12/31/docker网络模型及存储卷/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="https://9527dz.top/categories/docker/"/>
    
    
      <category term="docker" scheme="https://9527dz.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker应用基础</title>
    <link href="https://9527dz.top/2018/12/30/docker%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
    <id>https://9527dz.top/2018/12/30/docker应用基础/</id>
    <published>2018-12-30T06:38:28.238Z</published>
    <updated>2018-12-31T07:03:13.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker应用基础"><a href="#docker应用基础" class="headerlink" title="docker应用基础"></a>docker应用基础</h1><p><img src="/2018/12/30/docker应用基础/图标.png" alt=""><br><a id="more"></a><br><img src="/2018/12/30/docker应用基础/a.png" alt=""></p><ul><li>docker：容器使用的前端工具<ul><li>组件：(彼此间通过http/https协议进行通讯)<ul><li>Client : 客户端</li><li>Daemon ：docker守护进程、服务端</li><li>Registry : docker镜像仓库</li></ul></li></ul></li></ul><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##########################确保时间同步########################</span></span><br><span class="line">[root@centos7 yum.repos.d]<span class="comment"># ntpdata ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################下载docker yum源######################</span></span><br><span class="line">[root@centos7 yum.repos.d]<span class="comment"># pwd</span></span><br><span class="line">/etc/yum.repos.d</span><br><span class="line">[root@centos7 yum.repos.d]<span class="comment"># wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo     #下载的docker源为阿里云</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################安装docker社区版########################</span></span><br><span class="line">如果有报错</span><br><span class="line">Error: Package: 3:docker-ce-18.09.0-3.el7.x86_64 (docker-ce-stable)</span><br><span class="line">           Requires: container-selinux &gt;= 2.9</span><br><span class="line"> You could try using --skip-broken to work around the problem</span><br><span class="line"> You could try running: rpm -Va --nofiles --nodigest</span><br><span class="line"></span><br><span class="line">yum install http://vault.centos.org/centos/7.3.1611/extras/x86_64/Packages/container-selinux-2.9-4.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">[root@centos7 yum.repos.d]<span class="comment"># yum install docker-ce</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################使用镜像加速#####################</span></span><br><span class="line">方式一：aliyun官网镜像加速</span><br><span class="line">  https://cr.console.aliyun.com</span><br><span class="line">方式二：docker公共加速器</span><br><span class="line">  http://www.docker-cn.com/registry-mirror</span><br><span class="line">支持两种方式同时使用</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># mkdir -p /etc/docker</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;   <span class="string">"registry-mirrors"</span>: [<span class="string">"https://xr8r3tc3.mirror.aliyuncs.com"</span>,<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; EOF</span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl restart docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################查看docker客户端版本和服务端版本############</span></span><br><span class="line">查看版本信息</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker version</span></span><br><span class="line">Client: <span class="comment">#客户端版本</span></span><br><span class="line"> Version:           18.09.0</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.4</span><br><span class="line"> Git commit:        4d60db4</span><br><span class="line"> Built:             Wed Nov  7 00:48:22 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community <span class="comment">#服务端版本</span></span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.0</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.4</span><br><span class="line">  Git commit:       4d60db4</span><br><span class="line">  Built:            Wed Nov  7 00:19:08 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">查看更详细的docker环境信息</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker info</span></span><br><span class="line">Containers: 0 <span class="comment">#系统上总共有多少个容器</span></span><br><span class="line"> Running: 0 <span class="comment">#容器运行态个数</span></span><br><span class="line"> Paused: 0  <span class="comment">#容器暂停态个数</span></span><br><span class="line"> Stopped: 0 <span class="comment">#容器停止态个数</span></span><br><span class="line">Images: 0 <span class="comment">#当前系统上镜像的个数</span></span><br><span class="line">Server Version: 18.09.0</span><br><span class="line">Storage Driver: overlay2  <span class="comment">#存储驱动</span></span><br><span class="line"> Backing Filesystem: xfs  <span class="comment">#放置在本地的文件系统的格式，建议使用xfs</span></span><br><span class="line"> Supports d_type: <span class="literal">true</span></span><br><span class="line"> Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs <span class="comment">#资源配额功能，需要的虚拟文件系统格式</span></span><br><span class="line">Plugins:  <span class="comment">#插件</span></span><br><span class="line"> Volume: <span class="built_in">local</span>  <span class="comment">#存储卷的插件，仅支持本地</span></span><br><span class="line"> Network: bridge host macvlan null overlay  <span class="comment">#网络插件，支持桥接、主机、叠加、不使用等</span></span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald  json-file <span class="built_in">local</span> logentries splunk syslog <span class="comment">#日志系统插件</span></span><br><span class="line">Swarm: inactive <span class="comment">#集群管理工具</span></span><br><span class="line">Runtimes: runc  <span class="comment">#运行时环境</span></span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: c4446665cb9c30056f4998ed953e6d4ff22c7c39</span><br><span class="line">runc version: 4fc53a81fb7c994640722ac585fa9ca548971871</span><br><span class="line">init version: fec3683</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line">Kernel Version: 3.10.0-862.el7.x86_64</span><br><span class="line">Operating System: CentOS Linux 7 (Core)</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 2</span><br><span class="line">Total Memory: 1.779GiB</span><br><span class="line">Name: centos7.com</span><br><span class="line">ID: CUT4:A7LF:QJ4B:OORH:POA7:AZ7I:SWFT:7F4H:YKBQ:YFXH:BBBV:WGNQ</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line">Debug Mode (client): <span class="literal">false</span></span><br><span class="line">Debug Mode (server): <span class="literal">false</span></span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Labels:</span><br><span class="line">Experimental: <span class="literal">false</span></span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Registry Mirrors: <span class="comment">#镜像加速服务</span></span><br><span class="line"> https://xr8r3tc3.mirror.aliyuncs.com/</span><br><span class="line">Live Restore Enabled: <span class="literal">false</span></span><br><span class="line">Product License: Community Engine</span><br></pre></td></tr></table></figure><h2 id="docker资源管理"><a href="#docker资源管理" class="headerlink" title="docker资源管理"></a>docker资源管理</h2><ul><li>两类资源<ul><li>images:镜像资源管理（静态）<ul><li>docker image -h</li><li>Usage:    docker image COMMAND</li><li>Commands:<ul><li>build      </li><li>history    </li><li>import    </li><li>inspect  </li><li>load    </li><li>ls         </li><li>prune       </li><li>pull    #从远程下载镜像</li><li>push    #将本地的镜像上传</li><li>rm      #删除 docker image rm = docker rmi</li><li>save    </li><li>tag     #给镜像打标签,一个镜像可以有多个标签</li></ul></li></ul></li><li>container：容器管理（动态）<ul><li>Usage:    docker container COMMAND</li><li>Commands:<ul><li>attach      </li><li>commit     #保存镜像</li><li>cp      </li><li>create     #创建容器</li><li>diff      </li><li>exec       #执行容器中的命令</li><li>export  </li><li>inspect     </li><li>kill       #杀死容器</li><li>logs      </li><li>ls         </li><li>pause     #暂停容器</li><li>port      </li><li>prune     </li><li>rename    #重命名容器</li><li>restart   #重启容器</li><li>rm        #删除容器</li><li>run        </li><li>start     #启动容器</li><li>stats      </li><li>stop      #停止容器</li><li>top      </li><li>unpause   #继续容器</li><li>update  </li><li>wait      </li></ul></li></ul></li></ul></li></ul><h2 id="docker容器状态"><a href="#docker容器状态" class="headerlink" title="docker容器状态"></a>docker容器状态</h2><ul><li>容器的状态docker container ps = docker ps<ul><li>running 运行态</li><li>stopped 停止态</li><li>paused  暂停态</li><li>created 创建态</li><li>deleted 删除态</li></ul></li></ul><p><img src="/2018/12/30/docker应用基础/容器的状态.png" alt=""></p><ul><li>OOM:内存耗尽</li></ul><h2 id="docker容器命令使用"><a href="#docker容器命令使用" class="headerlink" title="docker容器命令使用"></a>docker容器命令使用</h2><ul><li>创建容器<ul><li>docker create</li><li>docker run<ul><li>-t,tty</li><li>-i,–interactive</li><li>–name  #容器的名字一定不要同名</li></ul></li><li>docker0 : 桥<ul><li>172.17.0.0/16</li></ul></li><li>–network : 指定网络接口</li><li>–rm : 如果容器停止寓意容器引擎立即将其容器删除 # 适用于临时的容器与-d 选项项抵触</li><li>-d,detach : 守护，运行在后台剥离与当前终端的关系  #与–rm选项相抵触不可同时使用</li></ul></li><li>容器中执行命令   #只有终端id号为1 的进程则此容器才会停止<ul><li>docker container exec = docker exec<ul><li>-i:交互式接口</li><li>-t:分配终端</li></ul></li></ul></li><li>docker常用命令<ul><li>docker stop  #停止容器的运行</li><li>docker rm    #删除容器，直接删除则容器中的数据也将删除，代表容器内的存储单元也被删除掉，且慎用。</li></ul></li><li>查看容器的日志信息<ul><li>docker container logs = docker logs<ul><li>docker日志是直接发往终端控制台</li></ul></li></ul></li><li><p>查看容器使用占用的内存空间</p><ul><li>docker container stats = docker stats</li></ul></li><li><p>显示容器运行的所有的进程的相关信息</p><ul><li>docker container  top = docker top  </li></ul></li><li>列出所有的相关镜像<ul><li>docker images = docker image ls</li></ul></li><li><p>返回容器的终端</p><ul><li>docker container attach = docker attach </li></ul></li><li><p>去docker hub中下载nginx镜像时：最后一位数字为奇数数位金丝雀版，非稳定版，开发版。生产中最好使用偶数或者stable</p></li><li>某一程序如果运行在容器中，并且id号为1的进程时，此进程必须运行在前台。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###################根据关键字来了解镜像################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker search redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################拖取镜像到本地######################</span></span><br><span class="line"><span class="comment">###################默认从hub.docker.com拖取###########</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker image pull centos:7</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker pull redis:4-alpine</span></span><br><span class="line">4-alpine: Pulling from library/redis</span><br><span class="line">cd784148e348: Pull complete   <span class="comment">#分层拖下来的，每一个都是一个层</span></span><br><span class="line">48d4c7155ddc: Pull complete </span><br><span class="line">6d908603dbe8: Pull complete </span><br><span class="line">fd4371c1c78e: Pull complete </span><br><span class="line">e6818dc808c2: Pull complete </span><br><span class="line">f1884d594f6f: Pull complete </span><br><span class="line">Digest: sha256:775bbf766a5b711acce88e4142faf56cd587d63ddc4d57b49f7872f71d56fab6</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:4-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment">###################显示本地镜像########################</span></span><br><span class="line">REPOSITORY：镜像仓库仓库名</span><br><span class="line">TAG：标签</span><br><span class="line">IMAGE ID: 镜像id</span><br><span class="line">CREATED: 镜像的创建时间</span><br><span class="line">SIZE：镜像存储在本地的大小</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker image ls</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis               4-alpine            37abb58bfd68        9 days ago          30MB</span><br><span class="line"></span><br><span class="line"><span class="comment">######################删除镜像#########################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker image rm   镜像名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################查看镜像的详细信息###############</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker image inspect redis:4-alpine</span></span><br><span class="line"><span class="comment">#显示一个jesn格式镜像信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################启动容器######################</span></span><br><span class="line">docker run = docker container run </span><br><span class="line">- it :交互式，并附加终端</span><br><span class="line">--name:容器名字</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container run -it --name c1 centos:7 /bin/bash</span></span><br><span class="line">[root@3aee0a6acdfd /]<span class="comment"># </span></span><br><span class="line">[root@3aee0a6acdfd /]<span class="comment"># yum install net-tools</span></span><br><span class="line">[root@3aee0a6acdfd /]<span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">[root@3aee0a6acdfd /]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class="line"></span><br><span class="line">如果运行容器主机上默认生成一docker0的桥，默认网段172.17.0.0 ，随后创建的容器都会加载到此桥上，此桥为NET桥</span><br><span class="line">[root@centos7 ~]<span class="comment"># ifconfig</span></span><br><span class="line">docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        inet6 fe80::42:ddff:fed7:23fb  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 02:42:dd:d7:23:fb  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 14  bytes 1770 (1.7 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">[root@centos7 ~]<span class="comment"># brctl show  #容器引擎动态实现</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.0242ddd723fbno</span><br><span class="line"></span><br><span class="line">启动容器后也会生成默认防火墙规则</span><br><span class="line">  前期使用建议关闭firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">##################查看所有运行状态的容器#####################</span></span><br><span class="line">- docker ps = docker container ps</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker ps -a  #查看容器的所有状态</span></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">3aee0a6acdfd        centos:7            <span class="string">"/bin/bash"</span>         12 minutes ago      Up 12 minutes                           c1</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################显示当前docker支持的网络接口#############</span></span><br><span class="line">- 默认bridge,代表docker0桥</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">777fc349679b        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">9b7ecc0031ef        host                host                <span class="built_in">local</span></span><br><span class="line">c0de873b7341        none                null                <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################运行redis进程且放到后台不影响当前终端########</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name redis -d redis:4-alpine </span></span><br><span class="line">100f426c23ae6f50e015e7ad5fd13cdee33180c9ac43835f7d6ecef422b38f1c</span><br><span class="line"></span><br><span class="line">- CONTAINER ID：短格式id</span><br><span class="line">- IMAGE :容器启动用的镜像</span><br><span class="line">- COMMAND：容器运行的命令</span><br><span class="line">- CREATED：容器创建的时间</span><br><span class="line">- STATUS：容器运行的状态</span><br><span class="line">- PORTS：容器监听的端口，监听的端口是在容器内部的</span><br><span class="line">- NAMES：容器的名称</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">100f426c23ae        redis:4-alpine      <span class="string">"docker-entrypoint.s…"</span>   8 seconds ago       Up 6 seconds        6379/tcp            redis</span><br><span class="line"></span><br><span class="line"><span class="comment">######################删除正在运行容器#########################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container stop redis</span></span><br><span class="line">redis</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container rm redis   #如果容器停止寓意容器引擎立即将其容器删除</span></span><br><span class="line">redis</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################外部在容器中执行命令##################</span></span><br><span class="line">以交互式接口中运行bash</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container exec -it redis /bin/sh</span></span><br><span class="line">/data <span class="comment"># </span></span><br><span class="line">/data <span class="comment"># ps aux</span></span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    1 redis     0:00 redis-server <span class="comment">#只有终端id号为1 的进程则此容器才会停止，所以退出交互式终端并非结束了次容器</span></span><br><span class="line">   17 root      0:00 /bin/sh</span><br><span class="line">   23 root      0:00 ps aux</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################w外部终端查看容器运行状态#############</span></span><br><span class="line">- 在不进入容器的交互式接口，显示的信息为容器内部的运行状态信息</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container exec redis ps aux</span></span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    1 redis     0:00 redis-server</span><br><span class="line">   24 root      0:00 ps aux</span><br><span class="line"></span><br><span class="line"><span class="comment">######################创建容器在停止状态是自动删除###########</span></span><br><span class="line">- 拉取一个nginx的镜像</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker image pull nginx:1.15-alpine</span></span><br><span class="line">- 运行执行的/bin/sh,并且退出终端时结束删除此进程</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name web -it --rm nginx:1.15-alpine /bin/sh</span></span><br><span class="line">/ <span class="comment"># </span></span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker ps -a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################以守护进程运行nginx#####################</span></span><br><span class="line">-d与--rm 选项不可同时使用</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name web -d nginx:1.15-alpine </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container exec web ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">[root@centos7 ~]<span class="comment"># curl 172.17.0.2         #外部主机访问容器中的服务</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># wget -O - -q 172.17.0.2</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># elinks -dump 172.17.0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################查看容器的日志信息#######################</span></span><br><span class="line">- docker日志是直接发往终端控制台，</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container logs web</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################显示容器运行的所有的进程的相关信息###########</span></span><br><span class="line">- 仅显示指定的容器的运行的进程的相关信息</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker  top web</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line"><span class="comment">###########################attach#########################</span></span><br><span class="line"><span class="comment"># 剥离容器当前运行的终端，但是容器仅是退出了运行的终端，但不停止容器</span></span><br><span class="line"><span class="comment"># 剥离终端 ctrl+p ,ctrl+q</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name c2 centos:7</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">2b5aa9c9e6ad        centos:7            <span class="string">"/bin/bash"</span>              8 seconds ago       Exited (0) 6 seconds ago                       c2</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker rm c2</span></span><br><span class="line">c2</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name c2 -it centos:7</span></span><br><span class="line">[root@49e278ef42ca /]<span class="comment"># [root@centos7 ~]# </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">49e278ef42ca        centos:7            <span class="string">"/bin/bash"</span>              40 seconds ago      Up 39 seconds                                 c2</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container attach c2</span></span><br><span class="line">[root@49e278ef42ca /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h2><ul><li>About Docker Images <ul><li>Docker镜像含有启动容器所需要的文件系统及其内容，因此，其用 于创建并启动docker容器 </li><li>采用分层构建机制，最底层为bootfs，其之为rootfs <ul><li>bootfs：用于系统引导的文件系统，包括bootloader和kernel，容器启动完成后会被卸载以 节约内存资源； </li><li>rootfs：位于bootfs之上，表现为docker容器的根文件系统; <ul><li>传统模式中，系统启动之时，内核挂载rootfs时会首先将其挂载为“只读”模式，完整性自检完成 后将其重新挂载为读写模式； </li><li>docker中，rootfs由内核挂载为“只读”模式，而后通过“联合挂载 ”技术额外挂载一个“可写”层。</li></ul></li></ul></li></ul></li></ul><p><img src="/2018/12/30/docker应用基础/实现1.png" alt=""></p><ul><li>Docker Image Layer（层） <ul><li>位于下层的镜像称为父镜像(parent image)，最底层的称为基础镜像(base image) -</li><li>最上层为“可读写”层，其下的均为“只读”层</li><li>wirtable最上面的可写层并非镜像提供，而是容器提供的</li><li>建构在本地的二级文件系统<ul><li>/var/lib/docker/image/overlay2/<ul><li>distribution  imagedb  layerdb  repositories.json</li></ul></li></ul></li></ul></li></ul><p><img src="/2018/12/30/docker应用基础/实现.png" alt=""></p><h2 id="Aufs"><a href="#Aufs" class="headerlink" title="Aufs"></a>Aufs</h2><ul><li>advanced multi-layered unification filesystem：高级多层统一文件系统 <ul><li>用于为Linux文件系统实现“联合挂载” </li><li>aufs是之前的UnionFS的重新实现，2006年由Junjiro Okajima开发；  </li><li>Docker最初使用aufs作为容器文件系统层，它目前仍作为存储后端之一来支持； </li><li>aufs的竞争产品是overlayfs，后者自从3.18版本开始被合并到Linux内核； </li><li>docker的分层镜像，除了aufs，docker还支持btrfs, devicemapper和vfs等 <ul><li>在Ubuntu系统下，docker默认Ubuntu的 aufs；而在CentOS7上，用的是devicemapper。<h2 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h2></li></ul></li></ul></li><li>启动容器时，docker daemon会试图从本地获取相关的镜像；本地镜像 不存在时，其将从Registry中下载该镜像并保存到本地。</li></ul><p><img src="/2018/12/30/docker应用基础/b.png" alt=""></p><ul><li><p>分类 </p><ul><li>Registry用于保存docker镜像，包括镜像的层次结构和元数据 </li><li>用户可自建Registry，也可使用官方的Docker Hub <ul><li>Sponsor Registry：第三方的registry，供客户和Docker社区使用 </li><li>Mirror Registry：第三方的registry，只让客户使用 </li><li>Vendor Registry：由发布Docker镜像的供应商提供的registry </li><li>Private Registry：通过设有防火墙和额外的安全层的私有实体提供的registry</li></ul></li></ul></li><li><p>Docker Registry中的镜像通常由开发人员制作，而后推送至“公共”或“ 私有”Registry上保存，供其他人员使用，例如“部署”到生产环境.</p></li></ul><p><img src="/2018/12/30/docker应用基础/c.png" alt=""></p><h2 id="制作docker仓库"><a href="#制作docker仓库" class="headerlink" title="制作docker仓库"></a>制作docker仓库</h2><h3 id="docker-Hub"><a href="#docker-Hub" class="headerlink" title="docker Hub"></a>docker Hub</h3><ul><li><a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a></li></ul><p><code>麻雀虽小五脏俱全的linux发行版--很忙的盒子</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># docker image pull busybox:latest</span></span><br><span class="line">busybox:一个微型的linux发行版（很忙的盒子）</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker image ls</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">busybox             latest              758ec7f3a1ee        4 days ago          1.15M</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name box1 -it busybox:latest /bin/sh</span></span><br><span class="line">/ <span class="comment"># ls</span></span><br><span class="line">bin   dev   etc   home  proc  root  sys   tmp   usr   var</span><br></pre></td></tr></table></figure></p><h3 id="范例：制作镜像仓库"><a href="#范例：制作镜像仓库" class="headerlink" title="范例：制作镜像仓库"></a><code>范例：制作镜像仓库</code></h3><p>docker container commit –help<br>Usage:    docker container commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<br>Options:<br>  -a, –author string  #指定镜像的作者<br>  -c, –change list    #对底层镜像默认运行的程序 进行修改<br>  -m, –message string<br>  -p, –pause        #表示制作镜像的时候将容器暂时暂停，避免数据结构不一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#########对本地很忙的盒子进行修改并推送到自己docker hub镜像仓库#######</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name box1 -it busybox:latest /bin/sh</span></span><br><span class="line">/ <span class="comment"># ls</span></span><br><span class="line">bin   dev   etc   home  proc  root  sys   tmp   usr   var</span><br><span class="line">/ <span class="comment"># mkdir /daizhe</span></span><br><span class="line">/ <span class="comment"># ls</span></span><br><span class="line">bin     dev     home    root    tmp     var</span><br><span class="line">daizhe  etc     proc    sys     usr</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################保存修改的镜像并打标签#######################</span></span><br><span class="line"><span class="comment">#确保容器终端不要关闭</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker container commit box1 docker19980110/mybox:v0.1</span></span><br><span class="line">sha256:42956b7e3ff8df5b77abd5b44654aac46bc00fd2ec2e690f1e92847e9879fd99</span><br><span class="line">[root@centos7 ~]<span class="comment"># docker image ls</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker19980110/mybox        v0.1                c6a32f929f07        15 seconds ago      1.15MB</span><br><span class="line"></span><br><span class="line"><span class="comment">###############本机启动测试查看保存的数据数据结构是否存在#############</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker run --name mybox -it docker19980110/mybox:v0.1 </span></span><br><span class="line">/ <span class="comment"># ls</span></span><br><span class="line">bin     dev     home    root    tmp     var</span><br><span class="line">daizhe  etc     proc    sys     usr</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################登陆docker hub###############################</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># docker login</span></span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don<span class="string">'t have a Docker ID, head over to https://hub.docker.com to create one.</span></span><br><span class="line"><span class="string">Username: docker19980110</span></span><br><span class="line"><span class="string">Password: </span></span><br><span class="line"><span class="string">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span></span><br><span class="line"><span class="string">Configure a credential helper to remove this warning. See</span></span><br><span class="line"><span class="string">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Login Succeeded</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#####################将本地的镜像推送到docker hub####################</span></span><br><span class="line"><span class="string">#如果原仓库总有相同的镜像，当推送时，仅推送变化的那一层</span></span><br><span class="line"><span class="string">[root@centos7 ~]# docker image push docker19980110/mybox:v0.1 </span></span><br><span class="line"><span class="string">The push refers to repository [docker.io/docker19980110/mybox]</span></span><br><span class="line"><span class="string">5190a84cd271: Pushed </span></span><br><span class="line"><span class="string">23bc2b70b201: Mounted from library/busybox </span></span><br><span class="line"><span class="string">v0.1: digest: sha256:05ce13e43087ab6249c717c3278e9f2c8d1199310447ac806c527ee85b0dfcb8 size: 734</span></span><br></pre></td></tr></table></figure><p><img src="/2018/12/30/docker应用基础/box.png" alt=""></p><h3 id="范例：制作镜像并对底层镜像默认运行的程序-进行修改以及标签设置"><a href="#范例：制作镜像并对底层镜像默认运行的程序-进行修改以及标签设置" class="headerlink" title="范例：制作镜像并对底层镜像默认运行的程序 进行修改以及标签设置"></a><code>范例：制作镜像并对底层镜像默认运行的程序 进行修改以及标签设置</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################很忙的盒子中默认带有http程序####################</span></span><br><span class="line">/ <span class="comment"># /bin/httpd -h</span></span><br><span class="line">/bin/httpd: option requires an argument -- h</span><br><span class="line">BusyBox v1.29.3 (2018-12-24 21:25:20 UTC) multi-call binary.</span><br><span class="line"></span><br><span class="line">Usage: httpd [-ifv[v]] [-c CONFFILE] [-p [IP:]PORT] [-u USER[:GRP]] [-r REALM] [-h HOME]</span><br><span class="line">or httpd -d/-e/-m STRING</span><br><span class="line"></span><br><span class="line">Listen <span class="keyword">for</span> incoming HTTP requests</span><br><span class="line"></span><br><span class="line">-iInetd mode</span><br><span class="line">-fDon<span class="string">'t daemonize</span></span><br><span class="line"><span class="string">-v[v]Verbose</span></span><br><span class="line"><span class="string">-p [IP:]PORTBind to IP:PORT (default *:80)</span></span><br><span class="line"><span class="string">-u USER[:GRP]Set uid/gid after binding to port</span></span><br><span class="line"><span class="string">-r REALMAuthentication Realm for Basic Authentication</span></span><br><span class="line"><span class="string">-h HOMEHome directory (default .)</span></span><br><span class="line"><span class="string">-c FILEConfiguration file (default &#123;/etc,HOME&#125;/httpd.conf)</span></span><br><span class="line"><span class="string">-m STRINGMD5 crypt STRING</span></span><br><span class="line"><span class="string">-e STRINGHTML encode STRING</span></span><br><span class="line"><span class="string">-d STRINGURL decode STRING</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">####################对很忙的盒子进行修改，启动默认运行httpd###########</span></span><br><span class="line"><span class="string">#保存原有的镜像</span></span><br><span class="line"><span class="string">#启动运行http</span></span><br><span class="line"><span class="string">    -f 前台运行，不适用守护进行</span></span><br><span class="line"><span class="string">    -h 执行家目录</span></span><br><span class="line"><span class="string">[root@centos7 ~]# docker container commit -p -a "daizhe&lt;daizhe.com&gt;" -c '</span>CMD [<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>,<span class="string">"/bin/httpd -f -h /data/web/html"</span>]<span class="string">' mybox</span></span><br><span class="line"><span class="string">sha256:eced8dbd5d14dcb5c4be938d509103a9440cf3d7080620b49dac8fbbbe309974</span></span><br><span class="line"><span class="string">#保存的镜像未打标签</span></span><br><span class="line"><span class="string">[root@centos7 ~]# docker image ls</span></span><br><span class="line"><span class="string">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span></span><br><span class="line"><span class="string">&lt;none&gt;                 &lt;none&gt;              eced8dbd5d14        26 seconds ago      1.15MB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##########################将保存的镜像添加标签#####################</span></span><br><span class="line"><span class="string">#使用id号指定镜像来重新添加标签</span></span><br><span class="line"><span class="string">[root@centos7 ~]# docker image tag eced8dbd5d14 docker19980110/mybox:v0.2</span></span><br><span class="line"><span class="string">[root@centos7 ~]# docker image ls</span></span><br><span class="line"><span class="string">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span></span><br><span class="line"><span class="string">docker19980110/mybox   v0.2                eced8dbd5d14        6 minutes ago       1.15MB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">########################将一个镜像打多个标签######################</span></span><br><span class="line"><span class="string">#latest表示最新的意思</span></span><br><span class="line"><span class="string">[root@centos7 ~]# docker tag docker19980110/mybox:v0.2 docker19980110/mybox:latest</span></span><br><span class="line"><span class="string">[root@centos7 ~]# docker image ls</span></span><br><span class="line"><span class="string">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span></span><br><span class="line"><span class="string">docker19980110/mybox   latest              eced8dbd5d14        8 minutes ago       1.15MB</span></span><br><span class="line"><span class="string">docker19980110/mybox   v0.2                eced8dbd5d14        8 minutes ago       1.15MB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#########################再次将本地的镜像推送到docker hub仓库########</span></span><br><span class="line"><span class="string">[root@centos7 ~]# docker push docker19980110/mybox:v0.</span></span><br><span class="line"><span class="string">v0.1  v0.2  </span></span><br><span class="line"><span class="string">[root@centos7 ~]# docker push docker19980110/mybox:v0.2 </span></span><br><span class="line"><span class="string">The push refers to repository [docker.io/docker19980110/mybox]</span></span><br><span class="line"><span class="string">355c5bc17ee9: Pushed </span></span><br><span class="line"><span class="string">5190a84cd271: Layer already exists </span></span><br><span class="line"><span class="string">23bc2b70b201: Layer already exists </span></span><br><span class="line"><span class="string">v0.2: digest: sha256:ab14ea25f1fbcc40a623343dd44a76224568a0200820f1ee5b61dc81c96ca12a size: 941</span></span><br><span class="line"><span class="string">[root@centos7 ~]# docker push docker19980110/mybox:latest </span></span><br><span class="line"><span class="string">The push refers to repository [docker.io/docker19980110/mybox]</span></span><br><span class="line"><span class="string">355c5bc17ee9: Layer already exists </span></span><br><span class="line"><span class="string">5190a84cd271: Layer already exists </span></span><br><span class="line"><span class="string">23bc2b70b201: Layer already exists </span></span><br><span class="line"><span class="string">latest: digest: sha256:ab14ea25f1fbcc40a623343dd44a76224568a0200820f1ee5b61dc81c96ca12a size: 941</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker应用基础&quot;&gt;&lt;a href=&quot;#docker应用基础&quot; class=&quot;headerlink&quot; title=&quot;docker应用基础&quot;&gt;&lt;/a&gt;docker应用基础&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/12/30/docker应用基础/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="https://9527dz.top/categories/docker/"/>
    
    
      <category term="docker" scheme="https://9527dz.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker基础</title>
    <link href="https://9527dz.top/2018/12/30/docker%E5%9F%BA%E7%A1%80/"/>
    <id>https://9527dz.top/2018/12/30/docker基础/</id>
    <published>2018-12-30T02:19:46.250Z</published>
    <updated>2018-12-30T06:46:25.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker基础即认识docker"><a href="#docker基础即认识docker" class="headerlink" title="docker基础即认识docker"></a>docker基础即认识docker</h1><p><img src="/2018/12/30/docker基础/图标.png" alt=""><br><a id="more"></a></p><h2 id="先从认识容器开始"><a href="#先从认识容器开始" class="headerlink" title="先从认识容器开始"></a>先从认识容器开始</h2><ul><li>什么是容器？</li><li>先来看看容器较为官方的解释：<ul><li>一句话概括容器：容器就是将软件打包成标准化单元，以用于开发、交付和部署。</li><li>容器镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。</li><li>容器化软件适用于基于Linux和Windows的应用，在任何环境中都能够始终如一地运行。</li><li>容器赋予了软件独立性，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。<h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2></li></ul></li><li>再来看看容器较为通俗的解释：<ul><li>如果需要通俗的描述容器的话，我觉得容器就是一个存放东西的地方，就像书包可以装各种文具、衣柜可以放各种衣服、鞋架可以放各种鞋子一样。我们现在所说的容器存放的东西可能更偏向于应用比如网站、程序甚至是系统环境。</li></ul></li><li>容器是一种基础工具；泛指任何可以用于容纳其它物品的工具，可以 部分或完全封闭，被用于容纳、储存、运输物品；物体可以被放置在 容器中，而容器则可以保护内容物； </li><li>人类使用容器的历史至少有十万年，甚至可能有数百万年的历史； </li><li>容器的类型 •<ul><li>瓶 - 指口部比腹部窄小、颈长的容器。 •</li><li>罐 - 指那些开口较大、一般为近圆筒形的器皿。</li><li>箱 - 通常是立方体或圆柱体。形状固定。 </li><li>篮 - 以条状物编织而成。 </li><li>桶 - 一种圆柱形的容器。 </li><li>袋 - 柔性材料制成的容器，形状会受内容物而变化。 </li><li>瓮 - 通常是指陶制，口小肚大的容器。 </li><li>碗 - 用来盛载食物的容器。 </li><li>柜 - 指一个由盒组成的家俱。 </li><li>鞘 - 用于装载刀刃的容器。</li></ul></li></ul><p><img src="/2018/12/30/docker基础/通俗视图.png" alt=""></p><h2 id="图解物理机、虚拟机与容器"><a href="#图解物理机、虚拟机与容器" class="headerlink" title="图解物理机、虚拟机与容器"></a>图解物理机、虚拟机与容器</h2><ul><li>关于虚拟机与容器的对比在后面会详细介绍到，这里只是通过网上的图片加深大家对于物理机、虚拟机与容器这三者的理解。</li><li>物理机</li></ul><p><img src="/2018/12/30/docker基础/物理机.png" alt=""></p><ul><li>虚拟机</li></ul><p><img src="/2018/12/30/docker基础/物理机.png" alt=""></p><ul><li>容器</li></ul><p><img src="/2018/12/30/docker基础/容器.png" alt=""></p><h2 id="再来谈谈Docker的一些概念"><a href="#再来谈谈Docker的一些概念" class="headerlink" title="再来谈谈Docker的一些概念"></a>再来谈谈Docker的一些概念</h2><ul><li><p>通过上面这三张抽象图，我们大概可以通过类比概括出： 容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。因此容器的隔离级别会稍低一些。</p></li><li><p>相信通过上面的解释大家对于容器这个既陌生又熟悉的概念有了一个初步的认识，下面我们就来谈谈Docker的一些概念。</p></li></ul><p><img src="/2018/12/30/docker基础/docker概念.png" alt=""></p><ul><li>什么是Docker<ul><li>关于Docker是什么并太好说，下面我通过四点向你说明Docker到底是个什么东西。</li><li>Docker是世界领先的软件容器平台。</li><li>Docker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。Docke最初实现是基于LXC。</li><li>Docker能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。</li><li>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</li></ul></li></ul><p><img src="/2018/12/30/docker基础/docker代码.png" alt=""></p><ul><li><p>Docker思想</p><ul><li>集装箱</li><li>标准化： ①运输方式、②存储方式、 ③API接口</li><li>隔离</li></ul></li><li><p>Docker容器的特点</p><ul><li>轻量，在一台机器上运行的多个Docker容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。</li><li>标准，Docker容器基于开放式标准，能够在所有主流Linux版本、Microsoft Windows以及包括VM、裸机服务器和云在内的任何基础设施上运行。</li><li>安全，Docker赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。</li></ul></li><li><p>为什么要用Docker</p><ul><li>Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现“这段代码在我机器上没问题啊”这类问题；——一致的运行环境</li><li>可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。——更快速的启动时间</li><li>避免公用的服务器，资源会容易受到其他用户的影响。——隔离性</li><li>善于处理集中爆发的服务器使用压力；——弹性伸缩，快速扩展</li><li>可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。——迁移方便</li><li>使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。——持续交付和部署。</li></ul></li></ul><h2 id="容器-VS-虚拟机"><a href="#容器-VS-虚拟机" class="headerlink" title="容器 VS 虚拟机"></a>容器 VS 虚拟机</h2><ul><li>容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。</li><li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。<br><img src="/2018/12/30/docker基础/容器VS虚拟机.png" alt=""></li></ul><h2 id="容器与虚拟机-VM-总结"><a href="#容器与虚拟机-VM-总结" class="headerlink" title="容器与虚拟机 (VM) 总结"></a>容器与虚拟机 (VM) 总结</h2><p><img src="/2018/12/30/docker基础/容器与虚拟机总结.png" alt=""></p><ul><li>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。 多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行 。与虚拟机相比， 容器占用的空间较少（容器镜像大小通常只有几十兆），瞬间就能完成启动 。</li><li>虚拟机（VM）是一个物理硬件层抽象，用于将一台服务器变成多台服务器。 管理程序允许多个VM在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此占用大量空间。而且VM启动也十分缓慢 。</li></ul><h2 id="容器与虚拟机（VM）两者是可以共存的"><a href="#容器与虚拟机（VM）两者是可以共存的" class="headerlink" title="容器与虚拟机（VM）两者是可以共存的"></a>容器与虚拟机（VM）两者是可以共存的</h2><p><img src="/2018/12/30/docker基础/共存.png" alt=""></p><h2 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h2><ul><li>Docker包括三个基本概念：<ul><li>镜像（Image）</li><li>容器（Container）</li><li>仓库（Repository）</li></ul></li></ul><p><img src="/2018/12/30/docker基础/docker实现方式.png" alt=""><br><img src="/2018/12/30/docker基础/实现.png" alt=""></p><ul><li>镜像（Image）——一个特殊的文件系统<ul><li>操作系统分为内核和用户空间。对于Linux而言，内核启动后，会挂载root文件系统为其提供用户空间支持。而Docker镜像（Image），就相当于是一个root文件系统。</li><li>Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</li><li>Docker设计时，就充分利用Union FS的技术，将其设计为分层存储的架构。 镜像实际是由多层文件系统联合组成。</li><li>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</li><li>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</li></ul></li><li>容器（Container）——镜像运行时的实体<ul><li>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等 。</li><li>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。前面讲过镜像使用的是分层存储，容器也是如此。</li><li>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</li><li>按照Docker最佳实践的要求，容器不应该向其存储层内写入任何数据 ，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， 使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。</li></ul></li><li><p>仓库（Repository）——集中存放镜像文件的地方</p><ul><li><p>镜像构建完成后，可以很容易的在当前宿主上运行，但是， 如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</p></li><li><p>一个Docker Registry中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：镜像仓库是Docker用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。</p></li><li>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本 。我们可以通过&lt;仓库名&gt;:&lt;标签&gt;的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以latest作为默认标签。</li></ul></li><li><p>Docker Registry公开服务和私有Docker Registry的概念：</p><ul><li><p>Docker Registry公开服务是开放给用户使用、允许用户管理镜像的Registry服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p></li><li><p>最常使用的Registry公开服务是官方的Docker Hub ，这也是默认的Registry，并拥有大量的高质量的官方镜像，网址为：hub.docker.com/ 。在国内访问Docker Hub可能会比较慢国内也有一些云服务商提供类似于Docker Hub的公开服务。</p></li><li><p>除了使用公开服务外，用户还可以在本地搭建私有Docker Registry 。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。开源的Docker Registry镜像只提供了Docker Registry API的服务端实现，足以支持Docker命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker基础即认识docker&quot;&gt;&lt;a href=&quot;#docker基础即认识docker&quot; class=&quot;headerlink&quot; title=&quot;docker基础即认识docker&quot;&gt;&lt;/a&gt;docker基础即认识docker&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/12/30/docker基础/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="https://9527dz.top/categories/docker/"/>
    
    
      <category term="docker" scheme="https://9527dz.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>redis集群</title>
    <link href="https://9527dz.top/2018/12/28/redis%E7%BC%93%E5%AD%982/"/>
    <id>https://9527dz.top/2018/12/28/redis缓存2/</id>
    <published>2018-12-28T11:49:23.463Z</published>
    <updated>2018-12-29T13:42:52.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis集群、架构"><a href="#redis集群、架构" class="headerlink" title="redis集群、架构"></a>redis集群、架构</h1><p><img src="/2018/12/28/redis缓存2/图标.png" alt=""><br><a id="more"></a></p><h2 id="一：-redis-集群"><a href="#一：-redis-集群" class="headerlink" title="一： redis 集群"></a>一： redis 集群</h2><ul><li>上一个步骤的主从架构无法实现master和slave角色的自动切换，即当master出现redis服务异常、主机断电、磁盘损坏等问题导致master无法使用，而redis高可用无法实现自故障转移(将slave提升为master)，需要手动改环境配置才能切换到slave redis服务器，另外也无法横向扩展Redis服务的并行写入性能，当单台Redis服务器性能无法满足业务写入需求的时候就必须需要一种方式解决以上的两个核心问题，即：1.master和slave角色的无缝切换，让业务无感知从而不影响业务使用 2.可以横向动态扩展Redis服务器，从而实现多台服务器并行写入以实现更高并发的目的。</li><li><p>Redis 集群实现方式：客户端分片  代理分片  Redis Cluster（做集群一般使用奇数台服务器做集群，3、5、7,损坏的节点剩余要大于总节点的一半）</p></li><li><p>Sentinel(哨兵)：测试主从是否正常通讯：ping GONG(集群实现的前提是要使主从的版本相同)</p><ul><li>Sentinel 进程是用于监控redis集群中Master主服务器工作的状态，在Master主服务器发生故障的时候，可以实现Master和Slave服务器的切换，保证系统的高可用，其已经被集成在redis2.6+的版本中，Redis的哨兵模式到了2.8版本之后就稳定了下来。一般在生产环境也建议使用Redis的2.8版本的以后版本。哨兵(Sentinel) 是一个分布式系统，你可以在一个架构中运行多个哨兵(sentinel) 进程，这些进程使用流言协议(gossipprotocols)来接收关于Master主服务器是否下线的信息，并使用投票协议(Agreement Protocols)来决定是否执行自动故障迁移,以及选择哪个Slave作为新的Master。每个哨兵(Sentinel)进程会向其它哨兵(Sentinel)、Master、Slave定时发送消息，以确认对方是否”活”着，如果发现对方在指定配置时间(可配置的)内未得到回应，则暂时认为对方已掉线，也就是所谓的”主观认为宕机” ，英文名称：Subjective Down，简称SDOWN。有主观宕机，肯定就有客观宕机。当“哨兵群”中的多数Sentinel进程在对Master主服务器做出 SDOWN 的判断，并且通过 SENTINEL is-master-down-by-addr 命令互相交流之后，得出的Master Server下线判断，这种方式就是“客观宕机”，英文名称是：Objectively Down， 简称 ODOWN。通过一定的vote算法，从剩下的slave从服务器节点中，选一台提升为Master服务器节点，然后自动修改相关配置，并开启故障转移（failover）。<br>Sentinel 机制可以解决master和slave角色的切换问题。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sentinel(哨兵)：哨兵判断服务器是否存活的方式</span><br><span class="line">  [root@centos7 redis]<span class="comment"># redis-cli -h 127.0.0.1 -p 6379</span></span><br><span class="line">  127.0.0.1:6379&gt; ping</span><br><span class="line">  PONG</span><br></pre></td></tr></table></figure><p><img src="/2018/12/28/redis缓存2/redis缓存/哨兵架构.png" alt=""></p><h3 id="实现哨兵默认端口26379"><a href="#实现哨兵默认端口26379" class="headerlink" title="实现哨兵默认端口26379"></a><code>实现哨兵默认端口26379</code></h3><p>(在生产中建议哨兵是一台独立的服务器，这里演示的时redis服务器上实现哨兵，哨兵判断节点的存活状态机制：ping :pang)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">实验准备：</span><br><span class="line">  三台主机：全部编译安装，为了避免实验出现差别，尽量使用相同版本</span><br><span class="line"></span><br><span class="line">  主节点：172.18.135.1</span><br><span class="line">  从节点1：172.18.135.2</span><br><span class="line">  从节点2：172.18.135.3</span><br><span class="line"></span><br><span class="line">实验目的如果主节点挂了，自动其中一个从节点上选择一个自动升级为主节点</span><br><span class="line"></span><br><span class="line">第一步：</span><br><span class="line">编辑所有主机的配置文件</span><br><span class="line">  修改本机的监听地址</span><br><span class="line">  76行</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">  修改主从结构的配置</span><br><span class="line">  286  replicaof 192.168.7.103 6379</span><br><span class="line">  293  masterauth 123456 <span class="comment">#master如果密码需要设置</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># systemctl restart redis.service </span></span><br><span class="line"></span><br><span class="line">第二步：</span><br><span class="line">首先实现一主两从架构</span><br><span class="line">  从节点1：</span><br><span class="line">  127.0.0.1:6379&gt; info [</span><br><span class="line">  <span class="comment"># Replication</span></span><br><span class="line">  role:slave</span><br><span class="line">  master_host:172.18.135.1</span><br><span class="line">  master_port:6379</span><br><span class="line">  master_link_status:up</span><br><span class="line"></span><br><span class="line">  从节点2：</span><br><span class="line">  127.0.0.1:6379&gt; info [</span><br><span class="line">  <span class="comment"># Replication</span></span><br><span class="line">  role:slave</span><br><span class="line">  master_host:172.18.135.1</span><br><span class="line">  master_port:6379</span><br><span class="line">  master_link_status:up</span><br><span class="line"></span><br><span class="line">第三步：哨兵可以不和Redis服务器部署在一起</span><br><span class="line">配置哨兵：编辑配置文件sentinel.conf：</span><br><span class="line"></span><br><span class="line">  master 、slave1、slave2 配置：</span><br><span class="line">  [root@centos7 ~]<span class="comment"># cp /usr/local/src/redis-5.0.3/sentinel.conf /usr/local/redis/etc</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># vim /usr/local/redis/etc/sentinel.conf</span></span><br><span class="line">  port 26379</span><br><span class="line">  daemonize yes</span><br><span class="line">  pidfile /usr/<span class="built_in">local</span>/redis/data/redis-sentinel_26379.pid</span><br><span class="line">  logfile <span class="string">"/usr/local/redis/logs/sentinel_26379.log"</span></span><br><span class="line">  dir /usr/<span class="built_in">local</span>/redis/data</span><br><span class="line">  sentinel monitor mymaster 172.18.131.1 6379 2   </span><br><span class="line">  sentinel auth-pass mymaster 123456</span><br><span class="line">  sentinel down-after-milliseconds mymaster 15000   <span class="comment">#15秒</span></span><br><span class="line">  sentinel parallel-syncs mymaster 1</span><br><span class="line">  sentinel failover-timeout mymaster 180000</span><br><span class="line"></span><br><span class="line">第四步：启动哨兵</span><br><span class="line"></span><br><span class="line">  每个节点上都启动哨兵</span><br><span class="line">  [root@centos7 ~]<span class="comment"># /usr/local/redis/bin/redis-sentinel  /usr/local/redis/etc/sentinel.conf</span></span><br><span class="line">  [root@centos7 etc]<span class="comment"># ss -tnl       </span></span><br><span class="line">  LISTEN     0      511            *:26379       </span><br><span class="line">  查看哨兵的日志文件</span><br><span class="line"></span><br><span class="line">第五步：哨兵验证</span><br><span class="line">  [root@centos7 ~]<span class="comment"># redis-cli -p 26379</span></span><br><span class="line">  127.0.0.1:26379&gt; info Sentinel</span><br><span class="line">  <span class="comment"># Sentinel</span></span><br><span class="line">  sentinel_masters:1</span><br><span class="line">  sentinel_tilt:0</span><br><span class="line">  sentinel_running_scripts:0</span><br><span class="line">  sentinel_scripts_queue_length:0</span><br><span class="line">  sentinel_simulate_failure_flags:0</span><br><span class="line">  master0:name=mymaster,status=ok,address=172.18.135.1:6379,slaves=2,sentinels=3</span><br><span class="line"></span><br><span class="line">已经实现哨兵</span><br><span class="line">  可以创建值，并停用主节点，哨兵自动选举新的主节点</span><br></pre></td></tr></table></figure></p><p><code>哨兵配置文件详情</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-s1 etc]<span class="comment"># grep "^[a-Z]" /usr/local/redis/etc/sentinel.conf </span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">port 26379</span><br><span class="line">daemonize yes   <span class="comment">#守护进程运行</span></span><br><span class="line">pidfile <span class="string">"/usr/local/redis/redis-sentinel.pid"</span></span><br><span class="line">logfile <span class="string">"/usr/local/redis/sentinel_26379.log"</span></span><br><span class="line">dir <span class="string">"/usr/local/redis"</span>   <span class="comment"># 哨兵运行产生的数据目录</span></span><br><span class="line">sentinel monitor mymaster 192.168.7.101 6379 2<span class="comment">#这里的2表示，多少个哨兵决定主节点挂掉则提升新的主,此实验的哨兵有三个</span></span><br><span class="line">sentinel auth-pass mymaster 123456  <span class="comment">#主节点的密码，为了安全建议添加密码</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000  <span class="comment">#(SDOWN)主观下线的时间，主节点多长时间没有反应则代表下线，根据生产需求设置</span></span><br><span class="line">sentinel parallel-syncs mymaster 1 <span class="comment">#发生故障转移时候同时向新master同步数据的slave数量，数字越小总同步时间越长</span></span><br><span class="line">sentinel failover-timeout mymaster 180000  <span class="comment">#所有slaves指向新的master所需的超时时间（单位秒）</span></span><br><span class="line">sentinel deny-scripts-reconfig yes  <span class="comment">#代表没有调用其他脚本</span></span><br></pre></td></tr></table></figure></p><ul><li>应用程序如何连接redis？：<ul><li>java客户端连接redis是通过jedis来实现的，java代码用的时候只要创建jedis对象就可以建多个jedis连接池来连接redis，应用程序再直接调用连接池即可连接Redis。</li><li>而Redis为了保障高可用,服务一般都是Sentinel部署方式，当Redis服务中的主服务挂掉之后,会仲裁出另外一台Slaves服务充当Master。这个时候,我们的应用即使使用了Jedis连接池,Master服务挂了,我们的应用奖还是无法连接新的Master服务，为了解决这个问题,Jedis也提供了相应的Sentinel实现,能够在Redis Sentinel主从切换时候,通知我们的应用,把我们的应用连接到新的Master服务。</li><li>Jedis Sentinel的使用也是十分简单的,只是在JedisPool中添加了Sentinel和MasterName参数，Jedis Sentinel底层基于Redis订阅实现Redis主从服务的切换通知，当Reids发生主从切换时，Sentinel会发送通知主动通知Jedis进行连接的切换，JedisSentinelPool在每次从连接池中获取链接对象的时候,都要对连接对象进行检测,如果此链接和Sentinel的Master服务连接参数不一致,则会关闭此连接,重新获取新的Jedis连接对象。 </li></ul></li></ul><h2 id="二：-Redis-Cluster部署"><a href="#二：-Redis-Cluster部署" class="headerlink" title="二： Redis Cluster部署"></a>二： Redis Cluster部署</h2><ul><li><p><code>Redis cluster之前的分布式方案：</code></p><ul><li>1) 客户端分区：由客户端程序决定key写分配和写入的redis node，但是需要客户端自己处理写入分配、高可用管理和故障转移等</li><li>2)代理方案：基于三方软件实现redis proxy，客户端先连接之代理层，由代理层实现key的写入分配，对客户端来说是有比较简单，但是对于集群管节点增减相对比较麻烦，而且代理本身也是单点和性能瓶颈。</li></ul></li><li><p>在哨兵sentinel机制中，可以解决redis高可用的问题，即当master故障后可以自动将slave提升为master从而可以保证redis服务的正常使用，但是无法解决redis单机写入的瓶颈问题，即单机的redis写入性能受限于单机的内存大小、并发数量、网卡速率等因素，因此redis官方在redis 3.0版本之后推出了无中心架构的redis cluster机制，在无中心的redis集群汇中，其每个节点保存当前节点数据和整个集群状态,每个节点都和其他所有节点连接，特点如下：</p><ul><li>1：所有Redis节点使用(PING-PING机制)互联</li><li>2：集群中某个节点的实效是整个集群中超过半数的节点监测都实效才算真正的实效</li><li>3：客户端不需要proxy即可直接连接redis，且客户端不需要连接集群中的所有节点，只要连接集群中的任何一个节点即可。</li><li>4：redis cluster把所有的redisnode映射到 0-16383个槽位(slot)上，读写需要到指定的redis node上进行操作，因此有多少个reids node相当于redis 并发扩展了多少倍。</li><li>5：Redis集群预先分配16384个(slot)槽位，当需要在redis集群中写入一个key -value的时候，会使用CRC16(key)  mod 16384之后的值，决定将key写入值哪一个槽位从而决定写入哪一个Redis节点上，从而有效解决单机瓶颈。</li></ul></li></ul><p><code>Redis cluster基本架构</code></p><ul><li>假如三个主节点分别是：A, B, C 三个节点，采用哈希槽 (hash slot)的方式来分配16384个slot 的话，它们三个节点分别承担的slot 区间是：<ul><li>节点A覆盖0－5460</li><li>节点B覆盖5461－10922</li><li>节点C覆盖10923－16383</li></ul></li><li>此结构缺点是主节点之间无法数据同步</li></ul><p><img src="/2018/12/28/redis缓存2/图.png" alt=""></p><p><code>Redis cluster主从架构：</code></p><ul><li>Redis cluster的架构虽然解决了并发的问题，但是又引入了一个新的问题，每个Redis master的高可用如何解决？</li></ul><p><img src="/2018/12/28/redis缓存2/图2.png" alt=""></p><h3 id="部署redis集群："><a href="#部署redis集群：" class="headerlink" title="部署redis集群："></a><code>部署redis集群：</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####################环境准备####################</span></span><br><span class="line"></span><br><span class="line">三台服务器，每台服务器启动6379和6380两个redis 服务，生产环境建议直接6台服务器。</span><br><span class="line">另外预留一台服务器做集群添加节点测试。</span><br><span class="line"></span><br><span class="line">实验方式：基于端口的不同实现（生产环境中最好使用6台主机实现）</span><br><span class="line">172.18.135.1:6379/6380  172.18.135.5:6379/6380</span><br><span class="line">172.18.135.2:6379/6380  </span><br><span class="line"></span><br><span class="line"><span class="comment">##############创建redis cluster集群的前提####目前仅有三台节点####</span></span><br><span class="line">1.每个redis node节点采用相同的硬件配置、相同的密码</span><br><span class="line">2.每个节点必须开启参数(确保每台节点都是主节点) <span class="comment">#编辑配置文件</span></span><br><span class="line">507 requirepass 123456  <span class="comment"># 建议每个节点都设置密码，但是保证每个节点的密码保持一致</span></span><br><span class="line">838 cluster-enabled yes <span class="comment">#必须开启集群状态，开启后redis 进程会有cluster显示</span></span><br><span class="line">846 cluster-config-file nodes-6380.conf <span class="comment">#此文件有redis cluster集群自动创建和维护，不需要任何手动操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################模拟一台节点上创建第二个节点###################</span></span><br><span class="line">每台节点上模拟创建第二台节点实现一台机器上两个节点</span><br><span class="line">[root@centos77 ~]<span class="comment"># cp /usr/local/redis/etc/redis.conf /usr/local/redis/etc/redis6380.conf </span></span><br><span class="line"><span class="comment">#对原配置文件拷贝进行简单修改</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">port 6380</span><br><span class="line">pidfile <span class="string">"/var/run/redis_6380.pid"</span></span><br><span class="line">logfile <span class="string">"/usr/local/redis/logs/6380.log"</span></span><br><span class="line">cluster-config-file nodes-6380.conf</span><br><span class="line"></span><br><span class="line">创建启动脚本</span><br><span class="line">[root@centos77 ~]<span class="comment"># cp /usr/lib/systemd/system/redis.service /usr/lib/systemd/system/redis6380.service</span></span><br><span class="line">[root@centos77 ~]<span class="comment"># vim !$</span></span><br><span class="line">vim /usr/lib/systemd/system/redis6380</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis persistent key-value database</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/etc/redis6380.conf  --supervised systemd</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment">######################## 启动############################</span></span><br><span class="line">[root@centos77 etc]<span class="comment"># scp /usr/local/redis/etc/redis6380.conf root@172.18.135.1:/usr/local/redis/etc/</span></span><br><span class="line">[root@centos77 etc]<span class="comment"># scp /usr/local/redis/etc/redis6380.conf root@172.18.135.1:/usr/local/redis/etc/</span></span><br><span class="line"></span><br><span class="line">[root@centos77 etc]<span class="comment"># scp /usr/local/redis/etc/redis6380.conf root@172.18.135.1:/usr/local/redis/etc/</span></span><br><span class="line">[root@centos77 etc]<span class="comment"># scp /usr/local/redis/etc/redis6380.conf root@172.18.135.2:/usr/local/redis/etc/</span></span><br><span class="line">[root@centos77 ~]<span class="comment"># scp /usr/lib/systemd/system/redis6380.service root@172.18.135.2:/usr/lib/systemd/system/</span></span><br><span class="line">[root@centos77 ~]<span class="comment"># scp /usr/lib/systemd/system/redis6380.service root@172.18.135.1:/usr/lib/systemd/system/</span></span><br><span class="line"></span><br><span class="line">启动查看端口</span><br><span class="line">[root@centos77 etc]<span class="comment"># ss -tnl          </span></span><br><span class="line">6379                                       </span><br><span class="line">6380</span><br></pre></td></tr></table></figure><p><img src="/2018/12/28/redis缓存2/创建集群的前提.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######################创建集群#####################</span></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli -a 123456  --cluster create 192.168.7.101:6379   192.168.7.101:6380    192.168.7.102:6379   192.168.7.102:6380   192.168.7.103:6379   192.168.7.103:6380  --cluster-replicas 1 </span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.7.102:6380 to 192.168.7.101:6379</span><br><span class="line">Adding replica 192.168.7.101:6380 to 192.168.7.102:6379</span><br><span class="line">Adding replica 192.168.7.103:6380 to 192.168.7.103:6379</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti-affinity</span><br><span class="line">[OK] Perfect anti-affinity obtained!</span><br><span class="line">M: f4cfc5cf821c0d855016488d6fbfb62c03a14fda 192.168.7.101:6379 <span class="comment">#带M的为master</span></span><br><span class="line">   slots:[0-5460] (5461 slots) master  <span class="comment">#当前master的槽位起始和结束位</span></span><br><span class="line">S: 2b6e5d9c3944d79a5b64a19e54e52f83d48438d6 192.168.7.101:6380 <span class="comment">#带S的slave</span></span><br><span class="line">   replicates 70de3821dde4701c647bd6c23b9dd3c5c9f24a62</span><br><span class="line">M: 116c4c6de036fdbac5aaad25eb1a61ea262b64af 192.168.7.102:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master <span class="comment">#当前master的槽位起始和结束位</span></span><br><span class="line">S: 7186c6d03dd9a5e3be658f2d08e800bc55b04a09 192.168.7.102:6380</span><br><span class="line">   replicates f4cfc5cf821c0d855016488d6fbfb62c03a14fda</span><br><span class="line">M: 70de3821dde4701c647bd6c23b9dd3c5c9f24a62 192.168.7.103:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master <span class="comment">#当前master的槽位起始和结束位</span></span><br><span class="line">S: 7eda0bcf0c01bb7343313b81267c42dd1b26c8a6 192.168.7.103:6380</span><br><span class="line">   replicates 116c4c6de036fdbac5aaad25eb1a61ea262b64af</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">'yes'</span> to accept): yes <span class="comment">#输入yes自动创建集群</span></span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to join</span><br><span class="line">.....</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.7.101:6379)</span><br><span class="line">M: f4cfc5cf821c0d855016488d6fbfb62c03a14fda 192.168.7.101:6379 <span class="comment">#master的ID及端口</span></span><br><span class="line">   slots:[0-5460] (5461 slots) master <span class="comment">#已经分配的槽位</span></span><br><span class="line">   1 additional replica(s) <span class="comment">#分配了一个slave</span></span><br><span class="line">S: 7186c6d03dd9a5e3be658f2d08e800bc55b04a09 192.168.7.102:6380</span><br><span class="line">   slots: (0 slots) slave <span class="comment">#slave没有分配槽位</span></span><br><span class="line">   replicates f4cfc5cf821c0d855016488d6fbfb62c03a14fda</span><br><span class="line">M: 70de3821dde4701c647bd6c23b9dd3c5c9f24a62 192.168.7.103:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 116c4c6de036fdbac5aaad25eb1a61ea262b64af 192.168.7.102:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 2b6e5d9c3944d79a5b64a19e54e52f83d48438d6 192.168.7.101:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 70de3821dde4701c647bd6c23b9dd3c5c9f24a62</span><br><span class="line">S: 7eda0bcf0c01bb7343313b81267c42dd1b26c8a6 192.168.7.103:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 116c4c6de036fdbac5aaad25eb1a61ea262b64af</span><br><span class="line">[OK] All nodes agree about slots configuration. <span class="comment">#所有节点槽位分配完成</span></span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots... <span class="comment">#检查打开的槽位</span></span><br><span class="line">&gt;&gt;&gt; Check slots coverage... <span class="comment">#检查插槽覆盖范围</span></span><br><span class="line">[OK] All 16384 slots covered. <span class="comment">#所有槽位(16384个)分配完成</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################检查状态######################</span></span><br><span class="line">由于未设置masterauth认证密码，所以主从未建立起来，但是集群已经运行，所以需要在每个slave控制台使用config <span class="built_in">set</span>设置masterauth密码，或者写在每个redis配置文件中，最好是在控制点设置密码之后再写入配置文件当中。</span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/28/redis缓存2/状态检查.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#######################分别设置masterauth密码#############</span></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.101  -p 6380 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.101:6380&gt;  CONFIG SET  masterauth 123456</span><br><span class="line">OK</span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.102  -p 6380 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.102:6380&gt; CONFIG SET  masterauth 123456</span><br><span class="line">OK</span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.103  -p 6380 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.103:6380&gt; CONFIG SET  masterauth 123456</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################确认slave状态为up##################</span></span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/28/redis缓存2/确认状态.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########################验证master状态###################</span></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.101  -p 6379 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.101:6379&gt; INFO Replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=192.168.7.102,port=6380,state=online,offset=840,lag=0</span><br><span class="line">master_replid:0aa3281030eb29bf268f3317d4afe401f661a917</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:840</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:4026531840</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:840</span><br><span class="line">192.168.7.101:6379&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">###################管理要用集群的命令管理##############</span></span><br><span class="line"><span class="comment">#########################验证集群状态#################</span></span><br><span class="line">192.168.7.101:6379&gt; CLUSTER INFO</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:1474</span><br><span class="line">cluster_stats_messages_pong_sent:1507</span><br><span class="line">cluster_stats_messages_sent:2981</span><br><span class="line">cluster_stats_messages_ping_received:1502</span><br><span class="line">cluster_stats_messages_pong_received:1474</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:2981</span><br><span class="line"></span><br><span class="line"><span class="comment">########################查看集群node对应关系################</span></span><br><span class="line">使用命令cluster nodes：</span><br><span class="line">192.168.7.103:6380&gt; cluster nodes</span><br><span class="line">7186c6d03dd9a5e3be658f2d08e800bc55b04a09 192.168.7.102:6380@16380 slave f4cfc5cf821c0d855016488d6fbfb62c03a14fda 0 1545659135000 4 connected</span><br><span class="line">7eda0bcf0c01bb7343313b81267c42dd1b26c8a6 192.168.7.103:6380@16380 myself,slave 116c4c6de036fdbac5aaad25eb1a61ea262b64af 0 1545659135000 6 conne</span><br><span class="line">ctedf4cfc5cf821c0d855016488d6fbfb62c03a14fda 192.168.7.101:6379@16379 master - 0 1545659135000 1 connected 0-5460</span><br><span class="line">116c4c6de036fdbac5aaad25eb1a61ea262b64af 192.168.7.102:6379@16379 master - 0 1545659136000 3 connected 5461-10922</span><br><span class="line">70de3821dde4701c647bd6c23b9dd3c5c9f24a62 192.168.7.103:6379@16379 master - 0 1545659134000 5 connected 10923-16383</span><br><span class="line">2b6e5d9c3944d79a5b64a19e54e52f83d48438d6 192.168.7.101:6380@16380 slave 70de3821dde4701c647bd6c23b9dd3c5c9f24a62 0 1545659135946 5 connected</span><br><span class="line"></span><br><span class="line"><span class="comment">##########################验证集群写入key##################</span></span><br><span class="line">192.168.7.101:6379&gt; SET key1  value1  <span class="comment">#经过算法计算，当前key的槽位需要写入指定的node </span></span><br><span class="line">(error) MOVED 9189 192.168.7.102:6379 <span class="comment">#槽位不在当前node所以无法写入</span></span><br><span class="line">192.168.7.103:6379&gt; SET key1  value1  </span><br><span class="line">(error) MOVED 9189 192.168.7.102:6379  </span><br><span class="line">192.168.7.102:6379&gt; SET key1  value1 <span class="comment">#指定的node就可以写入</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.102:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">"key1"</span></span><br><span class="line"></span><br><span class="line">192.168.7.101:6379&gt; KEYS *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">192.168.7.103:6379&gt; KEYS *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################集群状态监控###################</span></span><br><span class="line"><span class="comment"># redis-cli -a 123456  --cluster check 192.168.7.101:6379</span></span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/28/redis缓存2/集群状态监控.png" alt=""></p><h3 id="Redis-cluster集群节点维护"><a href="#Redis-cluster集群节点维护" class="headerlink" title="Redis cluster集群节点维护"></a><code>Redis cluster集群节点维护</code></h3><ul><li><p>集群运行时间长久之后，难免由于硬件故障、网络规划、业务增长等原因对已有集群进行相应的调整， 比如增加Redis node节点、减少节点、节点迁移、更换服务器等。<br>增加节点和删除节点会涉及到已有的槽位重新分配及数据迁移。</p></li><li><p>集群维护之动态添加节点：</p><ul><li>增加Redis node节点，需要与之前的Redis node版本相同、配置一致，然后分别启动两台Redis node，因为一主一从。</li></ul></li><li>案例：<ul><li>因公司业务发展迅猛，现有的三主三从redis cluster架构可能无法满足现有业务的并发写入需求，因此公司紧急采购一台服务器192.168.7.104，需要将其动态添加到集群当中其不能影响业务使用和数据丢失，则添加过程如下:</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">为了满足生产需求创建新的服务器</span><br><span class="line"><span class="comment">##同步之前Redis node的配置文件到192.168.7.104 Redis编译安装目录，注意配置文件的监听 IP##</span></span><br><span class="line">scp redis.conf  192.168.7.104:/usr/<span class="built_in">local</span>/redis/etc/</span><br><span class="line">scp redis_6380.conf  192.168.7.104:/usr/<span class="built_in">local</span>/redis/etc/</span><br><span class="line"></span><br><span class="line"><span class="comment">##################分别启动redis服务##########################</span></span><br><span class="line">systemctl  daemon-reload</span><br><span class="line">systemctl  restart redis</span><br><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/etc/redis_6380.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">################将新创建的新的服务器添加节点到集群############</span></span><br><span class="line">在新创建的节点上配置（新加入的节点是没有槽位的）</span><br><span class="line">要添加的redis节点IP和端口    添加到的集群中的master IP:端口</span><br><span class="line"><span class="comment"># redis-cli -a 123456 --cluster add-node     192.168.7.104:6379           192.168.7.101:6379</span></span><br></pre></td></tr></table></figure><p><img src="/2018/12/28/redis缓存2/加入.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#############################分配槽位######################</span></span><br><span class="line">添加主机之后需要对添加至集群种的新主机重新分片否则其没有分片</span><br><span class="line">在新创建的节点上配置（分配的槽位是从以前每个节点上瓜分槽位来给新加入的服务器）</span><br><span class="line">使用命令重新分配槽位:</span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli -a 123456 --cluster reshard  192.168.7.104:6379</span></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli -a 123456 --cluster reshard  192.168.7.104:6379 </span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.7.104:6379)</span><br><span class="line">M: 886338acd50c3015be68a760502b239f4509881c 192.168.7.104:6379</span><br><span class="line">   slots: (0 slots) master</span><br><span class="line">M: 116c4c6de036fdbac5aaad25eb1a61ea262b64af 192.168.7.102:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 2b6e5d9c3944d79a5b64a19e54e52f83d48438d6 192.168.7.101:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 70de3821dde4701c647bd6c23b9dd3c5c9f24a62</span><br><span class="line">S: 7186c6d03dd9a5e3be658f2d08e800bc55b04a09 192.168.7.102:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates f4cfc5cf821c0d855016488d6fbfb62c03a14fda</span><br><span class="line">M: 70de3821dde4701c647bd6c23b9dd3c5c9f24a62 192.168.7.103:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 7eda0bcf0c01bb7343313b81267c42dd1b26c8a6 192.168.7.103:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 116c4c6de036fdbac5aaad25eb1a61ea262b64af</span><br><span class="line">M: f4cfc5cf821c0d855016488d6fbfb62c03a14fda 192.168.7.101:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 4096 <span class="comment">#分配多少个槽位192.168.7.104:6379</span></span><br><span class="line">What is the receiving node ID? 886338acd50c3015be68a760502b239f4509881c <span class="comment">#手动输入192.168.7.104的node ID</span></span><br><span class="line">Please enter all the <span class="built_in">source</span> node IDs.</span><br><span class="line">  Type <span class="string">'all'</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</span><br><span class="line">  Type <span class="string">'done'</span> once you entered all the <span class="built_in">source</span> nodes IDs.</span><br><span class="line">Source node <span class="comment">#1: all #将哪些源主机的槽位分配给192.168.7.104:6379，all是自动在所有的redis node选择划分，如果是从redis cluster删除主机可以使用此方式将主机上的槽位全部移动到别的redis主机</span></span><br><span class="line">………………………………..</span><br><span class="line">    Moving slot 6823 from 116c4c6de036fdbac5aaad25eb1a61ea262b64af</span><br><span class="line">    Moving slot 6824 from 116c4c6de036fdbac5aaad25eb1a61ea262b64af</span><br><span class="line">    Moving slot 6825 from 116c4c6de036fdbac5aaad25eb1a61ea262b64af</span><br><span class="line">    Moving slot 6826 from 116c4c6de036fdbac5aaad25eb1a61ea262b64af</span><br><span class="line">    Moving slot 10923 from 70de3821dde4701c647bd6c23b9dd3c5c9f24a62</span><br><span class="line">    Moving slot 10924 from 70de3821dde4701c647bd6c23b9dd3c5c9f24a62</span><br><span class="line">    Moving slot 10925 from 70de3821dde4701c647bd6c23b9dd3c5c9f24a62</span><br><span class="line">    Moving slot 10926 from 70de3821dde4701c647bd6c23b9dd3c5c9f24a62</span><br><span class="line">…………………………………..</span><br><span class="line">    Moving slot 1364 from f4cfc5cf821c0d855016488d6fbfb62c03a14fda</span><br><span class="line">Do you want to proceed with the proposed reshard plan (yes/no)?  yes <span class="comment">#确认分配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################验证重新分配槽位之后的集群状态#############</span></span><br><span class="line">重新分配槽位是自动从每个Redis node上移动一些槽位到新的master上</span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/28/redis缓存2/验证.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###################为新的master添加slave节点###############</span></span><br><span class="line"><span class="comment">#master节点必须有salvae一但挂掉损失惨重</span></span><br><span class="line">命令格式：(这样加入的192.168.7.104:6380 默认为master)</span><br><span class="line"><span class="comment"># redis-cli -a 123456 --cluster add-node 192.168.7.104:6380 192.168.7.104:6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################更改新节点更改状态为slave###############</span></span><br><span class="line">需要手动将其指定为某个master 的slave，否则其默认角色为master</span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.104 -p 6380 -a 123456 #登录到新添加节点</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.104:6380&gt;  CLUSTER NODES <span class="comment">#查看当前集群节点，找到目标master 的ID</span></span><br><span class="line">7eda0bcf0c01bb7343313b81267c42dd1b26c8a6 192.168.7.103:6380@16380 slave 116c4c6de036fdbac5aaad25eb1a61ea262b64af 0 1545700464964 3 connected</span><br><span class="line">116c4c6de036fdbac5aaad25eb1a61ea262b64af 192.168.7.102:6379@16379 master - 0 1545700470516 3 connected 6827-10922</span><br><span class="line">2b6e5d9c3944d79a5b64a19e54e52f83d48438d6 192.168.7.101:6380@16380 slave 70de3821dde4701c647bd6c23b9dd3c5c9f24a62 0 1545700468498 5 connected</span><br><span class="line">b9a00d59fa3c2a322080a1c7d84f53a2c853b089 192.168.7.104:6380@16380 myself,master - 0 1545700464000 0 connected</span><br><span class="line">886338acd50c3015be68a760502b239f4509881c 192.168.7.104:6379@16379 master - 0 1545700465468 7 connected 0-1364 5461-6826 10923-12287</span><br><span class="line">70de3821dde4701c647bd6c23b9dd3c5c9f24a62 192.168.7.103:6379@16379 master - 0 1545700467489 5 connected 12288-16383</span><br><span class="line">f4cfc5cf821c0d855016488d6fbfb62c03a14fda 192.168.7.101:6379@16379 master - 0 1545700464461 1 connected 1365-5460</span><br><span class="line">7186c6d03dd9a5e3be658f2d08e800bc55b04a09 192.168.7.102:6380@16380 slave f4cfc5cf821c0d855016488d6fbfb62c03a14fda 0 1545700469508 1 connected</span><br><span class="line">192.168.7.104:6380&gt; CLUSTER  REPLICATE 886338acd50c3015be68a760502b239f4509881c <span class="comment">#将其设置slave，设置为192.168.7.104:6379的slave </span></span><br><span class="line"><span class="comment">#命令格式为cluster replicate MASTERID</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.104:6380&gt; CLUSTER NODES <span class="comment">#再次查看集群节点状态，验证节点是否已经更改为指定master 的slave</span></span><br><span class="line">7eda0bcf0c01bb7343313b81267c42dd1b26c8a6 192.168.7.103:6380@16380 slave 116c4c6de036fdbac5aaad25eb1a61ea262b64af 0 1545700517970 3 connected</span><br><span class="line">116c4c6de036fdbac5aaad25eb1a61ea262b64af 192.168.7.102:6379@16379 master - 0 1545700514942 3 connected 6827-10922</span><br><span class="line">2b6e5d9c3944d79a5b64a19e54e52f83d48438d6 192.168.7.101:6380@16380 slave 70de3821dde4701c647bd6c23b9dd3c5c9f24a62 0 1545700518979 5 connected</span><br><span class="line">b9a00d59fa3c2a322080a1c7d84f53a2c853b089 192.168.7.104:6380@16380 myself,slave 886338acd50c3015be68a760502b239f4509881c 0 1545700509000 0 connected</span><br><span class="line">886338acd50c3015be68a760502b239f4509881c 192.168.7.104:6379@16379 master - 0 1545700516456 7 connected 0-1364 5461-6826 10923-12287</span><br><span class="line">70de3821dde4701c647bd6c23b9dd3c5c9f24a62 192.168.7.103:6379@16379 master - 0 1545700519988 5 connected 12288-16383</span><br><span class="line">f4cfc5cf821c0d855016488d6fbfb62c03a14fda 192.168.7.101:6379@16379 master - 0 1545700515953 1 connected 1365-5460</span><br><span class="line">7186c6d03dd9a5e3be658f2d08e800bc55b04a09 192.168.7.102:6380@16380 slave f4cfc5cf821c0d855016488d6fbfb62c03a14fda 0 1545700516962 1 connected</span><br><span class="line">192.168.7.104:6380&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################验证当前集群状态########################</span></span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/28/redis缓存2/状态验证.png" alt=""></p><h3 id="集群维护之动态删除节点"><a href="#集群维护之动态删除节点" class="headerlink" title="集群维护之动态删除节点"></a><code>集群维护之动态删除节点</code></h3><ul><li>添加节点的时候是先添加node节点到集群，然后分配槽位，删除节点的操作与添加节点的操作正好相反，是先将被删除的Redis node上的槽位迁移到集群中的其他Redis node节点上，然后再将其删除。<br>如果一个Redis node节点上的槽位没有被完全迁移，删除该node的时候会提升有数据且无法删除。</li><li>案例：<ul><li>由于192.168.7.101服务器使用年限已经超过三年，已经超过厂商质保期而且硬盘出现异常报警，经运维部架构师提交方案并同开发同事开会商议，决定将现有Redis集群的4台服务器分别是192.168.7.101/192.168.7.102/192.168.7.103/192.168.7.104中的192.168.7.101临时下线，三台服务器的并发写入性能足够支出未来1-2年的业务需求，则删除Redis node 192.168.7.101的操作如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##############迁移master 的槽位之其他master##################</span></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli -a 123456  --cluster reshard  192.168.7.102:6379</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.7.102:6379)</span><br><span class="line">M: 116c4c6de036fdbac5aaad25eb1a61ea262b64af 192.168.7.102:6379</span><br><span class="line">   slots:[6827-10922] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 70de3821dde4701c647bd6c23b9dd3c5c9f24a62 192.168.7.103:6379</span><br><span class="line">   slots:[12288-16383] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 886338acd50c3015be68a760502b239f4509881c 192.168.7.104:6379</span><br><span class="line">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 7eda0bcf0c01bb7343313b81267c42dd1b26c8a6 192.168.7.103:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 116c4c6de036fdbac5aaad25eb1a61ea262b64af</span><br><span class="line">S: b9a00d59fa3c2a322080a1c7d84f53a2c853b089 192.168.7.104:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 886338acd50c3015be68a760502b239f4509881c</span><br><span class="line">S: 7186c6d03dd9a5e3be658f2d08e800bc55b04a09 192.168.7.102:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates f4cfc5cf821c0d855016488d6fbfb62c03a14fda</span><br><span class="line">S: 2b6e5d9c3944d79a5b64a19e54e52f83d48438d6 192.168.7.101:6380</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 70de3821dde4701c647bd6c23b9dd3c5c9f24a62</span><br><span class="line">M: f4cfc5cf821c0d855016488d6fbfb62c03a14fda 192.168.7.101:6379</span><br><span class="line">   slots:[1365-5460] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 4096 <span class="comment">#迁移master上的多少个槽位</span></span><br><span class="line">What is the receiving node ID? 886338acd50c3015be68a760502b239f4509881c <span class="comment">#接收槽位的服务器ID</span></span><br><span class="line">Please enter all the <span class="built_in">source</span> node IDs.</span><br><span class="line">  Type <span class="string">'all'</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</span><br><span class="line">  Type <span class="string">'done'</span> once you entered all the <span class="built_in">source</span> nodes IDs.</span><br><span class="line">Source node <span class="comment">#1: f4cfc5cf821c0d855016488d6fbfb62c03a14fda #从哪个服务器迁移4096个槽位</span></span><br><span class="line">Source node <span class="comment">#2: done #写done，表示没有其他master了</span></span><br><span class="line">    Moving slot 5457 from f4cfc5cf821c0d855016488d6fbfb62c03a14fda</span><br><span class="line">    Moving slot 5458 from f4cfc5cf821c0d855016488d6fbfb62c03a14fda</span><br><span class="line">    Moving slot 5459 from f4cfc5cf821c0d855016488d6fbfb62c03a14fda</span><br><span class="line">    Moving slot 5460 from f4cfc5cf821c0d855016488d6fbfb62c03a14fda</span><br><span class="line">Do you want to proceed with the proposed reshard plan (yes/no)? yes <span class="comment">#是否继续</span></span><br><span class="line"></span><br><span class="line">迁移完成！</span><br><span class="line"></span><br><span class="line"><span class="comment">######################验证槽位迁移完成########################</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="/2018/12/28/redis缓存2/验证槽位是否迁移完成.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################从集群删除服务器##########################</span></span><br><span class="line">虽然槽位已经迁移完成，但是服务器IP信息还在集群当中，因此还需要将IP信息从集群删除</span><br><span class="line">命令格式： redis-cli -a 123456  --cluster  del-node   IP:Port ID</span><br><span class="line"><span class="comment">#删除master：</span></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli -a 123456 --cluster del-node 192.168.7.101:6379 f4cfc5cf821c0d855016488d6fbfb62c03a14fda</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Removing node f4cfc5cf821c0d855016488d6fbfb62c03a14fda from cluster 192.168.7.101:6379</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; SHUTDOWN the node.</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除slave：</span></span><br><span class="line">该节点上如果还有其他节点上master 的slave，但是由于服务器下架也要一并删除，因此要提前把保证每个master至少有一个slave。</span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli -a 123456 --cluster del-node 192.168.7.101:6380 2b6e5d9c3944d79a5b64a19e54e52f83d48438d6</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Removing node 2b6e5d9c3944d79a5b64a19e54e52f83d48438d6 from cluster 192.168.7.101:6380</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; SHUTDOWN the node.</span><br><span class="line"></span><br><span class="line"><span class="comment">####################验证node 是否删除######################</span></span><br><span class="line">发现192.168.7.101已经被删除，但是由于192.168.7.101:6380之前是192.168.7.103:6379的slave，所以删除后会导致相应的master缺少slave，需要重新为没有slave的master分配slave。</span><br><span class="line">可以发现下图的192.168.7.104有两个slave，分别是192.168.7.102:6380和192.168.7.104:6380，因此需要将其中一个slave转移为192.168.7.103的slave。</span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/28/redis缓存2/node.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################重新分配slave#########################</span></span><br><span class="line">将192.168.7.104:6380 转移为192.168.7.103的slave</span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.104 -p 6379 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.104:6379&gt;  CLUSTER NODES</span><br><span class="line">116c4c6de036fdbac5aaad25eb1a61ea262b64af 192.168.7.102:6379@16379 master - 0 1545708439000 3 connected 6827-10922</span><br><span class="line">b9a00d59fa3c2a322080a1c7d84f53a2c853b089 192.168.7.104:6380@16380 slave 886338acd50c3015be68a760502b239f4509881c 0 1545708440717 7 connected</span><br><span class="line">7186c6d03dd9a5e3be658f2d08e800bc55b04a09 192.168.7.102:6380@16380 slave 886338acd50c3015be68a760502b239f4509881c 0 1545708437682 7 connected</span><br><span class="line">886338acd50c3015be68a760502b239f4509881c 192.168.7.104:6379@16379 myself,master - 0 1545708439000 7 connected 0-6826 10923-12287</span><br><span class="line">70de3821dde4701c647bd6c23b9dd3c5c9f24a62 192.168.7.103:6379@16379 master - 0 1545708440000 5 connected 12288-16383</span><br><span class="line">7eda0bcf0c01bb7343313b81267c42dd1b26c8a6 192.168.7.103:6380@16380 slave 116c4c6de036fdbac5aaad25eb1a61ea262b64af 0 1545708438697 3 connected</span><br><span class="line">192.168.7.104:6380&gt; CLUSTER REPLICATE 70de3821dde4701c647bd6c23b9dd3c5c9f24a62</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">##################验证集群Master与Slave对应关系#################</span></span><br><span class="line">Redis Slave节点一定不能个master在一个服务器，必须为跨主机交叉备份模式，避免主机故障后主备全部挂掉，如果出现Redis Slave与Redis master在同一台Redis node的情况，则需要安装以上步骤重新进行slave分配，直到不相互交叉备份为止。</span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/28/redis缓存2/再次验证.png" alt=""></p><h3 id="集群维护之模拟Master宕机"><a href="#集群维护之模拟Master宕机" class="headerlink" title="集群维护之模拟Master宕机"></a><code>集群维护之模拟Master宕机</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">目前的架构为三主三从，互为跨主机master slave模式。</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################测试数据写入###########################</span></span><br><span class="line">测试在master写入数据，并在其对应的slave验证数据：</span><br><span class="line">192.168.7.102:6379&gt; SET key1 value1</span><br><span class="line">OK</span><br><span class="line">192.168.7.102:6379&gt; get key1</span><br><span class="line"><span class="string">"value1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################slave验证数据########################</span></span><br><span class="line">192.168.7.103:6380&gt; KEYS *</span><br><span class="line">1) <span class="string">"key1"</span></span><br><span class="line">192.168.7.103:6380&gt; get key1</span><br><span class="line">(error) MOVED 9189 192.168.7.102:6379 <span class="comment">#slave不提供读写，只提供数据备份即master选举</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################停止master并验证故障转移################</span></span><br><span class="line">Redis Master服务停止之后，其对应的slave会被选举为master继续处理数据的读写操作。</span><br><span class="line"><span class="comment"># systemctl  stop  redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################验证slave 日志#######################</span></span><br><span class="line"><span class="comment"># tail -f /usr/local/redis/redis_6380.log</span></span><br></pre></td></tr></table></figure><p><img src="/2018/12/28/redis缓存2/slave日志.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####################验证slave状态########################</span></span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/28/redis缓存2/slave状态.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######################验证数据读写#########################</span></span><br><span class="line">确认slave 192.168.7.103:6380切换为master之后可以继续为业务提供读写业务且数据没有丢失。</span><br><span class="line">192.168.7.103:6380&gt; KEYS *</span><br><span class="line">1) <span class="string">"key1"</span></span><br><span class="line">192.168.7.103:6380&gt; SET aaa bbb</span><br><span class="line">OK</span><br><span class="line">192.168.7.103:6380&gt; get key1</span><br><span class="line"><span class="string">"value1"</span></span><br><span class="line">192.168.7.103:6380&gt; get aaa</span><br><span class="line"><span class="string">"bbb"</span></span><br><span class="line">192.168.7.103:6380&gt;</span><br><span class="line">注：服务恢复之后重新验证各master的slave。</span><br></pre></td></tr></table></figure></p><h3 id="集群维护之导入现有Redis数据"><a href="#集群维护之导入现有Redis数据" class="headerlink" title="集群维护之导入现有Redis数据"></a><code>集群维护之导入现有Redis数据</code></h3><ul><li>导入数据需要redis cluster不能与被导入的数据有重复的key名称，否则导入不成功或中断。</li><li>案例：<ul><li>公司将redis cluster部署完成之后，需要将之前的数据导入之Redis cluster集群，但是由于Redis cluster使用的分片保存key的机制，因此使用传统的AOF文件或RDB快照无法满足需求，因此需要使用集群数据导入命令完成。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#########################基础环境准备#####################</span></span><br><span class="line"></span><br><span class="line">导入数据之前需要关闭各redis 服务器的密码，包括集群中的各node和源Redis server，避免认证带来的环境不一致从而无法导入，但是可以加参数--cluster-replace 强制替换Redis cluster已有的key。</span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.102 -p 6379 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.102:6379&gt; CONFIG SET requirepass <span class="string">""</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.104:6379&gt; <span class="built_in">exit</span></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.102 -p 6380 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.102:6380&gt; CONFIG SET requirepass <span class="string">""</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.104:6379&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.103 -p 6379 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.103:6379&gt; CONFIG SET requirepass <span class="string">""</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.103:6379&gt; <span class="built_in">exit</span></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.103 -p 6380 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.103:6380&gt; CONFIG SET requirepass <span class="string">""</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.104:6379&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.104 -p 6379 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.104:6379&gt; CONFIG SET requirepass <span class="string">""</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.104:6379&gt; <span class="built_in">exit</span></span><br><span class="line">[root@redis-s1 ~]<span class="comment"># redis-cli  -h 192.168.7.104 -p 6380 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> or <span class="string">'-u'</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.7.104:6380&gt; CONFIG SET requirepass <span class="string">""</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.104:6379&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################执行数据导入###########################</span></span><br><span class="line">将源Redis server的数据直接导入之redis cluster。</span><br><span class="line">命令格式：<span class="comment">#redis-cli  --cluster import  集群服务器IP:PORT --cluster-from 外部Redis node-IP:PORT --cluster-copy --cluster-replace</span></span><br><span class="line">[root@redis-s2 redis]<span class="comment"># redis-cli  --cluster import  192.168.7.103:6379 --cluster-from  192.168.7.101:6379  --cluster-copy</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="/2018/12/28/redis缓存2/数据导入.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####################edis cluster验证数据####################</span></span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/28/redis缓存2/数据验证.png" alt=""></p><h3 id="redis扩展集群方案"><a href="#redis扩展集群方案" class="headerlink" title="redis扩展集群方案"></a><code>redis扩展集群方案</code></h3><ul><li>除了Redis 官方自带的Redis cluster集群之外，还有一写开源的集群解决方案可供参考使用</li><li>codis：<ul><li>Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有显著区别 (不支持的命令列表), 上层应用可以像使用单机的 Redis 一样使用, Codis 底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的 Redis 服务。</li><li>codis-proxy相当于redis，即连接codis-proxy和连接redis是没有任何区别的，codis-proxy无状态，不负责记录是否在哪保存，数据在zookeeper记录，即codis proxy向zookeeper查询key的记录位置，proxy 将请求转发到一个组进行处理，一个组里面有一个master和一个或者多个slave组成，默认有1024个槽位，redis cluster 默认有16384个槽位，其把不同的槽位的内容放在不同的group。</li></ul></li><li>Github 地址：<a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md" target="_blank" rel="noopener">https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md</a> </li></ul><p><img src="/2018/12/28/redis缓存2/codis.png" alt=""></p><h3 id="twemproxy"><a href="#twemproxy" class="headerlink" title="twemproxy"></a><code>twemproxy</code></h3><ul><li>由Twemproxy代替客户端实现分片，即代替用户将数据分片并到不同的后端服务器进行读写，其还支持memcached，可以为proxy配置算法，缺点为twemproxy是瓶颈，不支持数据迁移</li><li>官方github地址<a href="https://github.com/twitter/twemproxy/" target="_blank" rel="noopener">https://github.com/twitter/twemproxy/</a> </li><li>Github 地址：<a href="https://github.com/twitter/twemproxy" target="_blank" rel="noopener">https://github.com/twitter/twemproxy</a> </li></ul><p><img src="/2018/12/28/redis缓存2/twemproxy.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis集群、架构&quot;&gt;&lt;a href=&quot;#redis集群、架构&quot; class=&quot;headerlink&quot; title=&quot;redis集群、架构&quot;&gt;&lt;/a&gt;redis集群、架构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/12/28/redis缓存2/图标.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux服务" scheme="https://9527dz.top/categories/linux%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="redis集群" scheme="https://9527dz.top/tags/redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>redis缓存</title>
    <link href="https://9527dz.top/2018/12/26/redis%E7%BC%93%E5%AD%98/"/>
    <id>https://9527dz.top/2018/12/26/redis缓存/</id>
    <published>2018-12-26T12:22:34.208Z</published>
    <updated>2018-12-29T12:56:32.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis缓存及架构"><a href="#redis缓存及架构" class="headerlink" title="redis缓存及架构"></a>redis缓存及架构</h1><p><img src="/2018/12/26/redis缓存/redis标题.png" alt=""><br><a id="more"></a></p><h2 id="一：-缓存概念："><a href="#一：-缓存概念：" class="headerlink" title="一： 缓存概念："></a>一： 缓存概念：</h2><ul><li>缓存概念<ul><li>缓存是为了调节速度不一致的两个或多个不同的物质的速度，在中间对速度较快的一方起到一个加速访问速度较慢的一方的作用，比如CPU的一级、二级缓存是保存了CPU最近经常访问的数据，内存是保存CPU经常访问硬盘的数据，而且硬盘也有大小不一的缓存，甚至是物理服务器的raid 卡有也缓存，都是为了起到加速CPU 访问硬盘数据的目的，因为CPU的速度太快了，CPU需要的数据硬盘往往不能在短时间内满足CPU的需求，因此PCU缓存、内存、Raid 卡以及硬盘缓存就在一定程度上满足了CPU的数据需求，即CPU 从缓存读取数据可以大幅提高CPU的工作效率。</li></ul></li><li><p>系统缓存</p><ul><li>1.buffer与cache：<br>buffer：缓冲也叫写缓冲，一般用于写操作，可以将数据先写入内存在写入磁盘，buffer 一般用于写缓冲，用于解决不同介质的速度不一致的缓冲，先将数据临时写入到里自己最近的地方，以提高写入速度，CPU会把数据线写到内存的磁盘缓冲区，然后就认为数据已经写入完成看，然后内核的线程在后面的时间在写入磁盘，所以服务器突然断电会丢失内存中的部分数据。<br>cache：缓存也叫读缓存，一般用于读操作，CPU读文件从内存读，如果内存没有就先从硬盘读到内存再读到CPU，将需要频繁读取的数据放在里自己最近的缓存区域，下次读取的时候即可快速读取。</li><li><p>2.cache的保存位置：</p><ul><li>客户端：浏览器</li><li>内存：本地服务器、远程服务器</li><li>硬盘：本机硬盘、远程服务器硬盘</li><li>速度对比：</li><li>客户端浏览器-内存-远程内存-硬盘-远程硬盘。</li></ul></li><li><p>3.cache的特性：</p><ul><li>过期时间</li><li>强制过期，源网站更新图片后CDN是不会更新的，需要强制是图片缓存过期</li><li>命中率，即缓存的读取命中率</li></ul></li></ul></li><li><p>用户层缓存：</p><ul><li>1.DNS缓存：<ul><li>默认为60秒，即60秒之内在访问同一个域名就不在进行 </li><li>DNS解析：</li><li>查看chrome浏览器的DNS缓存：</li><li>chrome://net-internals/#dns</li></ul></li></ul></li></ul><p><img src="/2018/12/26/redis缓存/chrome浏览器缓存.png" alt=""></p><ul><li>浏览器缓存过期机制：<ul><li>最后修改时间：<ul><li>系统调用会获取文件的最后修改时间，如果没有发生变化就返回给浏览器304的状态码，表示没有发生变化，然后浏览器就使用的本地的缓存展示资源，</li></ul></li></ul></li></ul><p><img src="/2018/12/26/redis缓存/最后修改时间.png" alt=""></p><ul><li>Etag标记：<ul><li>基于Etag标记是否一致做判断页面是否发生过变化</li></ul></li></ul><p><img src="/2018/12/26/redis缓存/etag标记.png" alt=""></p><ul><li>过期时间：<ul><li>以上两种都需要发送请求，即不管资源是否过期都要发送请求进行协商，这样会消耗不必要的时间，因此有了缓存的过期时间，即第一次请求资源的时候带一个资源的过期时间，默认为30天，当前这种方式使用的比表较多，但是无法保证客户的时间都是准确并且一致的，因此假如一个最大生存周期，使用用户本地的时间计算缓存数据是否超过多少天，下面的过期时间为2027年，但是缓存的最大生存周期计算为天等于3650天即10年，过期时间如下：</li></ul></li></ul><p><img src="/2018/12/26/redis缓存/过期时间.png" alt=""></p><ul><li><p>CDN缓存：</p><ul><li>什么是CND：<ul><li>内容分发网络（Content Delivery Network），通过将服务内容分发至全网加速节点，利用全球调度系统使用户能够就近获取，有效降低访问延迟，提升服务可用性，CDN 第一降低机房的使用带宽，因为很多资源通过CDN就直接返回用户了，第二解决不同运营商之间的互联，因为可以让联通的网络访问联通让电信的网络访问电信，起到加速用户访问的目的， 第三：解决用户访问的地域问题，就近返回用户资源。    </li><li>百度CDN：<a href="https://cloud.baidu.com/product/cdn.html" target="_blank" rel="noopener">https://cloud.baidu.com/product/cdn.html</a> </li><li>阿里CDN：<a href="https://www.aliyun.com/product/cdn?spm=5176.8269123.416540.50.728y8n" target="_blank" rel="noopener">https://www.aliyun.com/product/cdn?spm=5176.8269123.416540.50.728y8n</a> </li><li>腾讯CDN：<a href="https://www.qcloud.com/product/cdn" target="_blank" rel="noopener">https://www.qcloud.com/product/cdn</a> </li></ul></li></ul></li><li><p>用户请求CDN流程：</p><ul><li>提前对静态内容进行预缓存，避免大量的请求回源，导致主站网络带宽被打满而导致数据无法更新，另外CDN可以将数据根据访问的热度不同而进行不同级别的缓存，例如访问量最高的资源访问CDN 边缘节点的内存，其次的放在SSD或者SATA，再其次的放在云存储，这样兼顾了速度与成本。</li></ul></li></ul><p><img src="/2018/12/26/redis缓存/用户请求CDN流程.png" alt=""></p><ul><li><p>CDN主要优势：</p><ul><li>提前对静态内容进行预缓存，避免大量的请求回源，导致主站网络带宽被打满而导致数据无法更新，另外CDN可以将数据根据访问的热度不通而进行不通级别的缓存，例如访问量最高的资源访问CDN 边缘节点的内存，其次的放在SSD或者SATA，再其次的放在云存储，这样兼顾了速度与成本。缓存-缓存到最快的地方如内存，缓存的数据准确命中率高，访问速度就快</li><li>调度准确-将用户调度到最近的边缘节点</li><li>性能优化-CDN 专门用于缓存响应速度快</li><li>安全相关-抵御攻击</li><li>节省带宽：由于用户请求由边缘节点响应，因此大幅降低到源站带宽。</li></ul></li><li><p>应用层缓存：</p><ul><li>Nginx、PHP等web服务可以设置应用缓存以加速响应用户请求，另外有些解释性语言比如PHP/Python不能直接运行，需要先编译成字节码，但字节码需要解释器解释为机器码之后才能执行，因此字节码也是一种缓存，有时候会出现程序代码上线后字节码没有更新的现象。</li></ul></li><li><p>其他层面缓存：</p><ul><li>CPU缓存(L1的数据缓存和L1的指令缓存)、二级缓存、三级缓存</li><li>磁盘缓存</li><li>RAID卡</li><li>分布式缓存：redis、memcache</li><li># MegaCli64 -LDinfo -Lall -aAll</li></ul></li></ul><h2 id="二：-redis部署与使用："><a href="#二：-redis部署与使用：" class="headerlink" title="二： redis部署与使用："></a>二： redis部署与使用：</h2><ul><li><p>redis基础：</p><ul><li>官网地址：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a> </li><li>Redis和Memcached是非关系型数据库也成为NoSQL，MySQL、Mariadb、SQL Server、PostgreSQL、Oracle 数据库属于关系型数据(RDBMS, Relational Database Management System)</li></ul></li><li><p>redis简介：</p><ul><li>Redis(Remote Dictionary Server)在2009年发布，开发者Salvatore Sanfilippo是意大利开发者，他本想为自己的公司开发一个用于替换MySQL的产品Redis，但是没有想到他把Redis开源后大受欢迎，短短几年，Redis就有了很大的用户群体，目前国内外使用的公司有知乎网、新浪微博、GitHub等</li><li>redis是一个开源的、遵循BSD协议的、基于内存的而且目前比较流行的键值数据库(key-value database)，是一个非关系型数据库，redis提供将内存通过网络远程共享的一种服务，提供类似功能的还有memcache，但相比memcache，redis还提供了易扩展、高性能、具备数据持久性等功能。<br>Redis在高并发、低延迟环境要求比较高的环境使用量非常广泛，目前redis在DB-Engine月排行榜<a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">https://db-engines.com/en/ranking</a> 中一直比较靠前，而且一直是键值型存储类的首位。</li></ul></li></ul><p><img src="/2018/12/26/redis缓存/redis简介.png" alt=""></p><ul><li><p>redis对比memcached：</p><ul><li>支持数据的持久化：可以将内存中的数据保持在磁盘中，重启redis服务或者服务器之后可以从备份文件中恢复数据到内存继续使用。</li><li>支持更多的数据类型：支持string(字符串)、hash(哈希数据)、list(列表)、set(集合)、zet(有序集合)</li><li>支持数据的备份：可以实现类似于数据的master-slave模式的数据备份，另外也支持使用快照+AOF。</li><li>支持更大的value数据：memcache单个key value最大，支持1MB，而redis最大支持512MB。</li><li>Redis 是单线程，而memcache是多线程，所以单机情况下没有memcache并发高，但redis 支持分布式集群以实现更高的并发，单Redis实例可以实现数万并发。</li><li>支持集群横向扩展：基于redis cluster的横向扩展，可以实现分布式集群，大幅提升性能和数据安全性。</li><li>都是基于C语言开发。</li></ul></li><li><p>redis 典型应用场景：</p><ul><li>Session 共享：常见于web集群中的Tomcat或者PHP中多web服务器session共享</li><li>消息队列：ELK的日志缓存、部分业务的订阅发布系统</li><li>计数器：访问排行榜、商品浏览数等和次数相关的场景</li><li>缓存：数据查询、电商网站商品信息、新闻内容</li><li>微博/微信社交场合：共同好友、点赞评论等</li></ul></li><li><p><code>Redis安装及使用：</code></p><ul><li>官方下载地址：<a href="http://download.redis.io/releases/" target="_blank" rel="noopener">http://download.redis.io/releases/</a></li></ul></li><li><p><code>yum安装redis</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># yum list redis</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Available Packages</span><br><span class="line">redis.x86_64                            3.2.12-2.el7    </span><br><span class="line">[root@centos7 ~]<span class="comment"># yum install redis -y</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl start redis &amp;&amp; systemctl enable redis</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>编译安装redis</code></p></li></ul><p><img src="/2018/12/26/redis缓存/编译安装redis.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">官方的安装命令：</span><br><span class="line">  https://redis.io/download </span><br><span class="line"></span><br><span class="line">创建一个适合自己程序防止路径</span><br><span class="line">  [root@centos7 ~]<span class="comment"># mkdir -pv /usr/local/src</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># cd !$</span></span><br><span class="line">  <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">  [root@centos7 src]<span class="comment"># pwd</span></span><br><span class="line">  /usr/<span class="built_in">local</span>/src</span><br><span class="line">  [root@centos7 src]<span class="comment"># ls</span></span><br><span class="line">  redis-5.0.3.tar.gz</span><br><span class="line"></span><br><span class="line">解压</span><br><span class="line">  [root@centos7 src]<span class="comment"># tar xvf redis-5.0.3.tar.gz </span></span><br><span class="line">  </span><br><span class="line">安装开发包组</span><br><span class="line">  [root@centos7 redis-5.0.3]<span class="comment"># yum groupinstall "Development Tools"</span></span><br><span class="line"></span><br><span class="line">编译安装（大小写敏感）</span><br><span class="line">  [root@centos7 redis-5.0.3]<span class="comment"># make PREFIX=/usr/local/redis install</span></span><br><span class="line"></span><br><span class="line">  [root@centos7 redis]<span class="comment"># cd /usr/local/redis/bin/</span></span><br><span class="line">  [root@centos7 bin]<span class="comment"># ls</span></span><br><span class="line">  redis-benchmark  redis-check-rdb  redis-sentinel</span><br><span class="line">  redis-check-aof  redis-cli        redis-server</span><br><span class="line"></span><br><span class="line">创建主配置文件以及程序文件</span><br><span class="line">  [root@centos7 ~]<span class="comment"># cd /usr/local/redis/</span></span><br><span class="line">  [root@centos7 redis]<span class="comment"># ls</span></span><br><span class="line">  bin</span><br><span class="line">  [root@centos7 redis]<span class="comment"># mkdir etc logs run data</span></span><br><span class="line">  root@centos7 redis]<span class="comment"># cp /usr/local/src/redis-5.0.3/redis.conf /usr/local/redis/etc/</span></span><br><span class="line">  [root@centos7 redis]<span class="comment"># ln -sv /usr/local/redis/bin/* /usr/bin/</span></span><br><span class="line"></span><br><span class="line">初次启动解决当前警报启动</span><br><span class="line">  [root@centos7 redis]<span class="comment"># redis-server /usr/local/redis/etc/redis.conf </span></span><br><span class="line">  34186:C 26 Dec 2018 22:10:01.659 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">  34186:C 26 Dec 2018 22:10:01.659 <span class="comment"># Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=34186, just started</span></span><br><span class="line">  34186:C 26 Dec 2018 22:10:01.659 <span class="comment"># Configuration loaded</span></span><br><span class="line">  34186:M 26 Dec 2018 22:10:01.660 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 1024).</span><br><span class="line">                  _._                                                  </span><br><span class="line">             _.-``__ <span class="string">''</span>-._                                             </span><br><span class="line">        _.-``    `.  `_.  <span class="string">''</span>-._           Redis 5.0.3 (00000000/0) 64 bit</span><br><span class="line">    .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._                                   </span><br><span class="line">   (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string">   |`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'|     Port: 6379</span></span><br><span class="line"><span class="string">   |    `-._   `._    /     _.-'</span>    |     PID: 34186</span><br><span class="line">    `-._    `-._  `-./  _.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">   |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string">   |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io        </span></span><br><span class="line"><span class="string">    `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">   |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string">   |    `-._`-._        _.-'</span>_.-<span class="string">'    |                                  </span></span><br><span class="line"><span class="string">    `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">       `-._    `-.__.-<span class="string">'    _.-'</span>                                       </span><br><span class="line">           `-._        _.-<span class="string">'                                           </span></span><br><span class="line"><span class="string">               `-.__.-'</span>                                               </span><br><span class="line">  34186:M 26 Dec 2018 22:10:01.662 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">  34186:M 26 Dec 2018 22:10:01.662 <span class="comment"># Server initialized</span></span><br><span class="line">  34186:M 26 Dec 2018 22:10:01.662 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span></span><br><span class="line">  34186:M 26 Dec 2018 22:10:01.662 <span class="comment"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></span><br><span class="line">  34186:M 26 Dec 2018 22:10:01.662 * Ready to accept connections</span><br><span class="line"></span><br><span class="line">解决第一次启动出现的三个报警</span><br><span class="line">  [root@centos7 ~]<span class="comment"># vim /etc/sysctl.conf </span></span><br><span class="line">  net.core.somaxconn = 512</span><br><span class="line">  vm.overcommit_memory = 1</span><br><span class="line">  [root@centos7 ~]<span class="comment"># sysctl -p</span></span><br><span class="line">  net.core.somaxconn = 512</span><br><span class="line">  vm.overcommit_memory = 1</span><br><span class="line">  [root@centos7 ~]<span class="comment"># echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class="line">  永久生效写进配置文件间，开机自动加载</span><br><span class="line">  vim /etc/rc.d/rc.local </span><br><span class="line">  <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">  chmod a+x /etc/rc.d/rc.local</span><br><span class="line"></span><br><span class="line">再次启动则无报警</span><br><span class="line">  [root@centos7 ~]<span class="comment"># /usr/local/redis/bin/redis-server  /usr/local/redis/etc/redis.conf </span></span><br><span class="line">  35112:C 27 Dec 2018 10:17:12.662 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">  35112:C 27 Dec 2018 10:17:12.662 <span class="comment"># Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=35112, just started</span></span><br><span class="line">  35112:C 27 Dec 2018 10:17:12.662 <span class="comment"># Configuration loaded</span></span><br><span class="line">  35112:M 27 Dec 2018 10:17:12.663 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 1024).</span><br><span class="line">                  _._                                                  </span><br><span class="line">             _.-``__ <span class="string">''</span>-._                                             </span><br><span class="line">        _.-``    `.  `_.  <span class="string">''</span>-._           Redis 5.0.3 (00000000/0) 64 bit</span><br><span class="line">    .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._                                   </span><br><span class="line">   (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string">   |`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'|     Port: 6379</span></span><br><span class="line"><span class="string">   |    `-._   `._    /     _.-'</span>    |     PID: 35112</span><br><span class="line">    `-._    `-._  `-./  _.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">   |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string">   |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io        </span></span><br><span class="line"><span class="string">    `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">   |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string">   |    `-._`-._        _.-'</span>_.-<span class="string">'    |                                  </span></span><br><span class="line"><span class="string">    `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">       `-._    `-.__.-<span class="string">'    _.-'</span>                                       </span><br><span class="line">            `-._        _.-<span class="string">'                                           </span></span><br><span class="line"><span class="string">                `-.__.-'</span>                                               </span><br><span class="line">  35112:M 27 Dec 2018 10:17:12.667 <span class="comment"># Server initialized</span></span><br><span class="line">  35112:M 27 Dec 2018 10:17:12.667 * Ready to accept connections</span><br></pre></td></tr></table></figure></p><ul><li><p><code>解决当前的警告提示：</code></p><ul><li><p>警报：tcp-backlog：</p><ul><li>backlog参数控制的是三次握手的时候server端收到client ack确认号之后的队列值。</li><li>net.core.somaxconn = 512</li></ul></li><li><p>警报：vm.overcommit_memory：</p><ul><li>0、表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。</li><li>1、表示内核允许分配所有的物理内存，而不管当前的内存状态如何。</li><li>2、表示内核允许分配超过所有物理内存和交换空间总和的内存</li><li>vm.overcommit_memory = 1</li></ul></li><li>警报：transparent hugepage：<ul><li>开启大页内存动态分配，需要关闭让redis 负责内存管理。<ul><li>临时生效</li></ul></li><li>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled<ul><li>永久生效写进配置文件间，开机自动加载</li></ul></li><li>vim /etc/rc.d/rc.local <ul><li>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</li></ul></li><li>chmod a+x /etc/rc.d/rc.local<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">redis启动默认使再前台工作，编写启动脚本将服务的启动送往后台执行</span><br><span class="line"></span><br><span class="line">服务启动对应的端口已经默认监听的端口</span><br><span class="line">  [root@centos7 ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  LISTEN      0      511    127.0.0.1:6379    </span><br><span class="line"></span><br><span class="line">编辑redis服务启动脚本</span><br><span class="line">  服务的配置文件放在了/usr/<span class="built_in">local</span>/redis/bin/redis-servier</span><br><span class="line">  服务的主配置文件放在了/usr/<span class="built_in">local</span>/redis/etc/redis.conf</span><br><span class="line"></span><br><span class="line">  [root@centos7 ~]<span class="comment"># vim /usr/lib/systemd/system/redis.service</span></span><br><span class="line">  [Unit]</span><br><span class="line">  Description=Redis persistent key-value database</span><br><span class="line">  After=network.target</span><br><span class="line">  After=network-online.target</span><br><span class="line">  Wants=network-online.target</span><br><span class="line"></span><br><span class="line">  [Service]</span><br><span class="line">  ExecStart=/usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/etc/redis.conf  --supervised systemd</span><br><span class="line">  ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">  ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">  Type=notify</span><br><span class="line">  User=redis</span><br><span class="line">  Group=redis</span><br><span class="line">  RuntimeDirectory=redis</span><br><span class="line">  RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">  [Install]</span><br><span class="line">  WantedBy=multi-user.target</span><br><span class="line">编辑主配置文件</span><br><span class="line">  vim /usr/<span class="built_in">local</span>/redis/etc/redis.conf </span><br><span class="line">  daemonize yes <span class="comment">#让redis作为守护进程运行</span></span><br><span class="line"></span><br><span class="line">创建redis 用户和数据目录：</span><br><span class="line">  [root@centos7 ~]<span class="comment"># useradd redis -s /sbin/nologin </span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># chown -R redis.redis /usr/local/redis/</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># systemctl start redis.service </span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  LISTEN      0      511    127.0.0.1:6379  </span><br><span class="line"></span><br><span class="line">创建命令软连接</span><br><span class="line">  [root@centos7 ~]<span class="comment"># ln -sv /usr/local/redis/bin/* /usr/bin/</span></span><br><span class="line"></span><br><span class="line">修改服务器的监听端口，默认监听在本机的127.0.0.1</span><br><span class="line">  [root@centos7 ~]<span class="comment"># vim /usr/local/redis/etc/redis.conf </span></span><br><span class="line">  <span class="built_in">bind</span> 127.0.0.1 172.18.135.1   (<span class="built_in">bind</span> 地址绑定到本机哪个地址供谁可以访问0.0.0.0代表本机监听在本机的所有的地址)</span><br><span class="line"></span><br><span class="line">使用客户端连接本机的redis服务器</span><br><span class="line">  [root@centos7 ~]<span class="comment"># redis-cli -h 172.18.135.1 -p 6379</span></span><br><span class="line">  172.18.135.1:6379&gt; info</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>编译安装后的命令：</code></p><ul><li>[root@redis-s1 ~]# ll /usr/local/redis/bin/<br>total 32656</li><li>-rwxr-xr-x 1 redis redis 4365488 Dec 13 09:21 redis-benchmark #redis性能测试工具</li><li>-rwxr-xr-x 1 redis redis 8088920 Dec 13 09:21 redis-check-aof #AOF文件检查工具</li><li>-rwxr-xr-x 1 redis redis 8088920 Dec 13 09:21 redis-check-rdb #RDB文件检查工具</li><li>-rwxr-xr-x 1 redis redis 4800752 Dec 13 09:21 redis-cli #redis #客户端工具</li><li>lrwxrwxrwx 1 redis redis   12 Dec 13 09:21 redis-sentinel -&gt; redis-server #哨兵，软连接到</li></ul></li><li><p><code>使用客户端连接redis：</code></p><ul><li>#/usr/local/redis/bin/redis-cli  -h  IP/HOSTNAME -p PORT -a PASSWORD</li></ul></li><li><p><code>redis配置文件：</code></p></li><li><p>redis主要配置项：</p><ul><li>bind 0.0.0.0  #监听地址，可以用空格隔开后多个监听IP</li><li>protected-mode yes  #redis3.2 之后加入的新特性，在没有设置bind IP和密码的时候只允许访问127.0.0.1:6379</li><li>port 6379 #监听端口</li><li>tcp-backlog 511  #三次握手的时候server端收到client ack确认号之后的队列值。</li><li>timeout 0 #客户端和Redis服务端的连接超时时间，默认是0，表示永不超时。 </li><li>tcp-keepalive 300  #tcp 会话保持时间</li><li>daemonize no  #认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes,当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面</li><li>supervised no  #和操作系统相关参数，可以设置通过upstart和systemd管理Redis守护进程，centos 7以后都使用systemd</li><li>pidfile /var/run/redis_6379.pid  #pid文件路径,确定生成的日志目录是有权限的，实际上存放的就是进程号。</li><li>loglevel notice #日志级别</li><li>logfile “” #日志路径</li><li>databases 16  #设置db 库数量，默认16个库，可以连接到redis后使用select # ,切换库</li><li>always-show-logo yes #在启动redis 时是否显示log</li><li>save 900 1   #在900秒内有一个键内容发生更改就出就快照机制</li><li>save 300 10</li><li>save 60 10000</li><li>stop-writes-on-bgsave-error yes  #快照出错时是否禁止redis 写入操作（默认为yes，建议使用no，出错的原因，磁盘满了，权限问题，改为no的原因是系统是由监控的，所以不会等磁盘满了防止数据丢失）</li><li>rdbcompression yes     #持久化到RDB文件时，是否压缩，”yes”为压缩，”no”则反之</li><li>rdbchecksum yes      #是否开启RC64校验，默认是开启（检查RDB文件是否完整）</li><li>dbfilename dump.rdb #快照文件名</li><li>dir ./                  #快照文件保存路径</li><li>replica-serve-stale-data yes #当从库同主库失去连接或者复制正在进行，从机库有两种运行方式：1) 如果replica-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求。2) 如果replica-serve-stale-data设置为no，除去指定的命令之外的任何请求都会返回一个错误”SYNC with master in progress”。</li><li>replica-read-only yes #是否设置从库只读</li><li><p>repl-diskless-sync no #是否使用socket方式复制数据，目前redis复制提供两种方式，disk和socket，如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件，有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave，socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave，disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件，socket的方式就是一个个slave顺序复制，只有在磁盘速度缓慢但是网络相对较快的情况下才使用socket方式，否则使用默认的disk方式</p></li><li><p>repl-diskless-sync-delay 5  #diskless复制的延迟时间，设置0为关闭，一旦复制开始还没有结束之前，master节点不会再接收新slave的复制请求，直到下一次开始</p></li><li>repl-ping-slave-period 10 #slave根据master指定的时间进行周期性的PING 监测</li><li>repl-timeout 60 #复制链接超时时间，需要大于repl-ping-slave-period，否则会经常报超时</li><li>repl-disable-tcp-nodelay no #在socket模式下是否slave套接字发送SYNC之后禁用 TCP_NODELAY，<br>如果你选择“yes”Redis将使用更少的TCP包和带宽来向slaves发送数据。但是这将使数据传输到slave上有延迟，Linux内核的默认配置会达到40毫秒，如果你选择了 “no” 数据传输到salve的延迟将会减少但要使用更多的带宽</li><li>repl-backlog-size 1mb #复制缓冲区大小，只有在slave连接之后才分配内存。 </li><li>repl-backlog-ttl 3600 #多次时间master没有slave连接，就清空backlog缓冲区。</li><li>replica-priority 100 #当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。</li><li>requirepass foobared #设置redis 连接密码</li><li>rename-command #重命名一些高危命令</li><li>maxclients 10000 #最大连接客户端（根据生产进行调整）</li><li>maxmemory #最大内存，单位为bytes字节，8G内存的计算方式8(G)<em>1024(MB)</em>1024(KB)*1024(Kbyte)，需要注意的是slave的输出缓冲区是不计算在maxmemory内。（如果不限制，则redis无限使用物理内存，最后将服务器的进程kill掉，最好给予系统内存的一半，生产使用redis建议服务器16G给redis服务器8G）</li></ul></li></ul><ul><li>appendonly no #是否开启AOF日志记录，默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。</li><li>appendfilename “appendonly.aof” #AOF文件名</li><li>appendfsync everysec  #aof持久化策略的配置,no表示不执行fsync,由操作系统保证数据同步到磁盘,always表示每次写入都执行fsync，以保证数据同步到磁盘,everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</li><li>no-appendfsync-on-rewrite no在aof rewrite期间,是否对aof新记录的append暂缓使用文件同步策略,主要考虑磁盘IO开支和请求阻塞时间。默认为no,表示”不暂缓”,新的aof记录仍然会被立即同步，Linux的默认fsync策略是30秒，如果为yes 可能丢失30秒数据，但由于yes性能较好而且会避免出现阻塞因此比较推荐。</li><li>auto-aof-rewrite-percentage 100 # 当Aof log增长超过指定比例时，重写log file， 设置为0表示不自动重写Aof 日志，重写是为了使aof体积保持最小，而确保保存最完整的数据。</li><li>auto-aof-rewrite-min-size 64mb #触发aof rewrite的最小文件尺寸</li><li>aof-load-truncated yes #是否加载由于其他原因导致的末尾异常的AOF文件(主进程被kill/断电等)</li><li>aof-use-rdb-preamble yes #redis4.0新增RDB-AOF混合持久化格式，在开启了这个功能之后，AOF重写产生的文件将同时包含RDB格式的内容和AOF格式的内容，其中RDB格式的内容用于记录已有的数据，而AOF格式的内存则用于记录最近发生了变化的数据，这样Redis就可以同时兼有RDB持久化和AOF持久化的优点（既能够快速地生成重写文件，也能够在出现问题时，快速地载入数据）。</li></ul><ul><li>lua-time-limit 5000 #lua脚本的最大执行时间，单位为毫秒</li><li>cluster-enabled yes #是否开启集群模式，默认是单机模式</li><li>cluster-config-file nodes-6379.conf #由node节点自动生成和的集群配置文件</li><li>cluster-node-timeout 15000 #集群中node节点连接超时时间</li><li>cluster-replica-validity-factor 10 #在执行故障转移的时候可能有些节点和master断开一段时间数据比较旧，这些节点就不适用于选举为master，超过这个时间的就不会被进行故障转移</li><li>cluster-migration-barrier 1  #一个主节点拥有的至少正常工作的从节点，即如果主节点的slave节点故障后会将多余的从节点分配到当前主节点成为其新的从节点。</li><li>cluster-require-full-coverage yes #集群槽位覆盖，如果一个主库宕机且没有备库就会出现集群槽位不全，那么yes情况下redis集群槽位验证不全就不再对外提供服务，而no则可以继续使用但是会出现查询数据查不到的情况(因为有数据丢失)。</li><li>cluster-replica-no-failover no#Slow log 是 Redis 用来记录查询执行时间的日志系统，slow log 保存在内存里面，读写速度非常快，因此你可以放心地使用它，不必担心因为开启 slow log 而损害 Redis 的速度。</li><li>slowlog-log-slower-than 10000 #以微秒为单位的慢日志记录，为负数会禁用慢日志，为0会记录每个命令操作。</li><li>slowlog-max-len 128 #记录多少条慢日志保存在队列，超出后会删除最早的，以此滚动删除</li></ul><h2 id="三：-redis持久化："><a href="#三：-redis持久化：" class="headerlink" title="三： redis持久化："></a>三： redis持久化：</h2><ul><li>redis 虽然是一个内存级别的缓存程序，即redis 是使用内存进行数据的缓存的，但是其可以将内存的数据按照一定的策略保存到硬盘上，从而实现数据持久保存的目的，redis支持两种不同方式的数据持久化保存机制，分别是RDB和AOF</li><li><p><code>RDB模式：</code></p><ul><li>RDB：基于时间的快照，只保留当前最新的一次快照，特点是执行速度比较快，缺点是可能会丢失从上次快照到当前快照未完成之间的数据。</li><li><p>RDB实现的具体过程Redis从主进程先fork出一个子进程，使用写时复制机制，子进程将内存的数据保存为一个临时文件，比如dump.rdb.temp，当数据保存完成之后再将上一次保存的RDB文件替换掉，然后关闭子进程，这样可以保存每一次做RDB快照的时候保存的数据都是完整的，因为直接替换RDB文件的时候可能会出现突然断电等问题而导致RDB文件还没有保存完整就突然关机停止保存而导致数据丢失的情况，可以手动将每次生成的RDB文件进程备份，这样可以最大化保存历史数据。</p></li><li><p>RDB模式的优缺点：</p></li><li>优点：<ul><li>RDB快照保存了某个时间点的数据，可以通过脚本执行bgsave(非阻塞)或者save(阻塞)命令自定义时间点北备份，可以保留多个备份，当出现问题可以恢复到不同时间点的版本。</li><li>可以最大化o的性能，因为父进程在保存RDB 文件的时候唯一要做的是fork出一个子进程，然后的-操作都会有这个子进程操作，父进程无需任何的IO操作</li><li>RDB在大量数据比如几个G的数据，恢复的速度比AOF的快</li></ul></li><li>缺点：<ul><li>不能时时的保存数据，会丢失自上一次执行RDB备份到当前的内存数据</li><li>数据量非常大的时候，从父进程fork的时候需要一点时间，可能是毫秒或者秒</li></ul></li></ul></li><li><p><code>AOF模式：</code></p><ul><li>AOF:按照操作顺序依次将操作添加到指定的日志文件当中，特点是数据安全性相对较高，缺点是即使有些操作是重复的也会全部记录。</li><li>AOF和RDB一样使用了写时复制机制，AOF默认为每秒钟fsync一次，即将执行的命令保存到AOF文件当中，这样即使redis服务器发生故障的话顶多也就丢失1秒钟之内的数据，也可以设置不同的fsync策略，或者设置每次执行命令的时候执行fsync，fsync会在后台执行线程，所以主线程可以继续处理用户的正常请求而不受到写入AOF文件的IO影响</li></ul><ul><li>AOF模式优缺点：<ul><li>AOF的文件大小要大于RDB格式的文件<ul><li>根据所使用的fsync策略(fsync是同步内存中redis所有已经修改的文件到存储设备)，默认是appendfsync everysec即每秒执行一次fsync</li></ul></li></ul></li></ul></li></ul><h2 id="四：-redis-数据类型："><a href="#四：-redis-数据类型：" class="headerlink" title="四： redis 数据类型："></a>四： redis 数据类型：</h2><ul><li><p>1.字符串(string)：</p><ul><li>字符串是所有编程语言中最常见的和最常用的数据类型，而且也是redis最基本的数据类型之一，而且redis中所有的key的类型都是字符串。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">连接redis</span><br><span class="line">  [root@centos7 ~]<span class="comment"># redis-cli -h 172.18.135.1 -p 6379</span></span><br><span class="line">  172.18.135.1:6379&gt; </span><br><span class="line"></span><br><span class="line">添加一个key</span><br><span class="line">  172.18.135.1:6379&gt; <span class="built_in">set</span> key1 value1  （后面可以添加过期时间，如果不加则永不过期）</span><br><span class="line">  OK</span><br><span class="line"></span><br><span class="line">查看key对应的值</span><br><span class="line">  172.18.135.1:6379&gt; get key1</span><br><span class="line">  <span class="string">"value1"</span></span><br><span class="line"></span><br><span class="line">查看key的类型</span><br><span class="line">  172.18.135.1:6379&gt; <span class="built_in">type</span> key1</span><br><span class="line">  string（字符串）</span><br><span class="line"></span><br><span class="line">删除key的值 （DEL可以删除任何类型的key）</span><br><span class="line">  172.18.135.1:6379&gt; DEL key1</span><br><span class="line">  (<span class="built_in">integer</span>) 1       (返回值为1，则表示成功，0表示不成功)</span><br><span class="line">  172.18.135.1:6379&gt; get key1</span><br><span class="line">  (nil)</span><br><span class="line"></span><br><span class="line">批量创建多个key</span><br><span class="line">  172.18.135.1:6379&gt; mset key1 value1 key2 value2  ....</span><br><span class="line">  OK</span><br><span class="line"></span><br><span class="line">批量获取多个key的值</span><br><span class="line">  172.18.135.1:6379&gt; mget key1 key2 </span><br><span class="line">  1) <span class="string">"value1"</span></span><br><span class="line">  2) <span class="string">"value2"</span></span><br><span class="line"></span><br><span class="line">批量删除多个key</span><br><span class="line">  172.18.135.1:6379&gt; del key1 key2 </span><br><span class="line">  (<span class="built_in">integer</span>) 2</span><br><span class="line">  172.18.135.1:6379&gt; mget key1 key2 </span><br><span class="line">  1) (nil)</span><br><span class="line">  2) (nil)</span><br><span class="line"></span><br><span class="line">清空当前库的所有数据</span><br><span class="line">  172.18.135.1:6379&gt; flushdb</span><br><span class="line">  OK</span><br><span class="line"></span><br><span class="line">查看当前数据库的所有key值</span><br><span class="line">  172.18.135.1:6379&gt; keys *</span><br><span class="line">  (empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">清空所有数据库的key</span><br><span class="line">  172.18.135.1:6379&gt; FLUSHALL</span><br><span class="line"></span><br><span class="line">数值递增：（必须是数字且数个整数）</span><br><span class="line">  172.18.135.1:6379&gt; SET num 0</span><br><span class="line">  OK</span><br><span class="line">  172.18.135.1:6379&gt; INCR num</span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  172.18.135.1:6379&gt; GET num</span><br><span class="line">  <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line">数值递减</span><br><span class="line">  172.18.135.1:6379&gt; INCR num</span><br><span class="line">  (<span class="built_in">integer</span>) 2</span><br><span class="line">  172.18.135.1:6379&gt; GET num</span><br><span class="line">  <span class="string">"2"</span></span><br><span class="line">  172.18.135.1:6379&gt; DECR num</span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  172.18.135.1:6379&gt; GET num</span><br><span class="line">  <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line">向列表追加数据：</span><br><span class="line">  127.0.0.1:6379&gt; LPUSH list1 tom</span><br><span class="line">  (<span class="built_in">integer</span>) 2</span><br><span class="line">  127.0.0.1:6379&gt; RPUSH list1 jack</span><br><span class="line">  (<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line">获取列表长度：</span><br><span class="line">  127.0.0.1:6379&gt; LLEN list1</span><br><span class="line">  (<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line">移除列表数据：</span><br><span class="line">  127.0.0.1:6379&gt; RPOP list1 <span class="comment">#最后一个</span></span><br><span class="line">  <span class="string">"jack"</span></span><br><span class="line">  127.0.0.1:6379&gt; LPOP list1 <span class="comment">#第一个</span></span><br><span class="line">  <span class="string">"tom"</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>2.集合(set)：</p><ul><li>Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">生成集合key:</span><br><span class="line">SADD：无序集合</span><br><span class="line">  127.0.0.1:6379&gt; SADD set1 v1 </span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  127.0.0.1:6379&gt; SADD set2 v2 v4</span><br><span class="line">  (<span class="built_in">integer</span>) 2</span><br><span class="line">  127.0.0.1:6379&gt; TYPE set1</span><br><span class="line">  <span class="built_in">set</span></span><br><span class="line">  127.0.0.1:6379&gt; TYPE set2</span><br><span class="line">  <span class="built_in">set</span></span><br><span class="line"></span><br><span class="line">查看集合中的所有值</span><br><span class="line">  127.0.0.1:6379&gt; SMEMBERS set1</span><br><span class="line"></span><br><span class="line">追加数值：</span><br><span class="line">追加的时候不能追加已经存在的数值</span><br><span class="line">  127.0.0.1:6379&gt; SADD set1 v2 v3 v4</span><br><span class="line">  (<span class="built_in">integer</span>) 3</span><br><span class="line">  127.0.0.1:6379&gt; SADD set1 v2 <span class="comment">#没有追加成功</span></span><br><span class="line">  (<span class="built_in">integer</span>) 0</span><br><span class="line">  127.0.0.1:6379&gt; TYPE set1</span><br><span class="line">  <span class="built_in">set</span></span><br><span class="line">  127.0.0.1:6379&gt; TYPE set2</span><br><span class="line">  <span class="built_in">set</span></span><br><span class="line"></span><br><span class="line">查看集合的所有数据：</span><br><span class="line">同<span class="built_in">set</span>的值不可重复，不同 <span class="built_in">set</span>的值可以相同</span><br><span class="line">  127.0.0.1:6379&gt; SMEMBERS set1</span><br><span class="line">  1) <span class="string">"v4"</span></span><br><span class="line">  2) <span class="string">"v1"</span></span><br><span class="line">  3) <span class="string">"v3"</span></span><br><span class="line">  4) <span class="string">"v2"</span></span><br><span class="line">  127.0.0.1:6379&gt; SMEMBERS set2</span><br><span class="line">  1) <span class="string">"v4"</span></span><br><span class="line">  2) <span class="string">"v2"</span></span><br><span class="line"></span><br><span class="line">获取集合的差集：</span><br><span class="line">差集：已属于A而不属于B的元素称为A与B的（差集）</span><br><span class="line">  127.0.0.1:6379&gt; SDIFF set1 set2</span><br><span class="line">  1) <span class="string">"v1"</span></span><br><span class="line">  2) <span class="string">"v3"</span></span><br><span class="line"></span><br><span class="line">获取集合的交集：</span><br><span class="line">交集：已属于A且属于B的元素称为A与B的(交集）</span><br><span class="line">  127.0.0.1:6379&gt; SINTER set1 set2</span><br><span class="line">  1) <span class="string">"v4"</span></span><br><span class="line">  2) <span class="string">"v2"</span></span><br><span class="line"></span><br><span class="line">获取集合的并集：</span><br><span class="line">并集：已属于A或属于B的元素为称为A与B的(并集）</span><br><span class="line">  127.0.0.1:6379&gt; SUNION  set1 set2</span><br><span class="line">  1) <span class="string">"v2"</span></span><br><span class="line">  2) <span class="string">"v4"</span></span><br><span class="line">  3) <span class="string">"v1"</span></span><br><span class="line">  4) <span class="string">"v3"</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>3.sorted set(有序集合):</p><ul><li>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员，不同的是每个元素都会关联一个double(双精度浮点型)类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序，序集合的成员是唯一的,但分数(score)却可以重复，集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)， 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">生成有序集合：</span><br><span class="line">  127.0.0.1:6379&gt; ZADD zset1 1 v1 </span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  127.0.0.1:6379&gt; ZADD zset1 2 v2</span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  127.0.0.1:6379&gt; ZADD zset1 2 v3</span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  127.0.0.1:6379&gt; ZADD zset1 3 v4</span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  127.0.0.1:6379&gt; TYPE zset1</span><br><span class="line">  zset</span><br><span class="line">  127.0.0.1:6379&gt; TYPE zset2</span><br><span class="line">  zset</span><br><span class="line"></span><br><span class="line">排行案例：</span><br><span class="line">  192.168.7.104:6379&gt; ZADD paihangbang 10 key1 20 key2 30 key3</span><br><span class="line">  (<span class="built_in">integer</span>) 3</span><br><span class="line">  192.168.7.104:6379&gt; ZREVRANGE paihangbang 0 -1 withscores</span><br><span class="line">  1) <span class="string">"key3"</span></span><br><span class="line">  2) <span class="string">"30"</span></span><br><span class="line">  3) <span class="string">"key2"</span></span><br><span class="line">  4) <span class="string">"20"</span></span><br><span class="line">  5) <span class="string">"key1"</span></span><br><span class="line">  6) <span class="string">"10"</span></span><br><span class="line"></span><br><span class="line">批量添加多个数值：</span><br><span class="line">  127.0.0.1:6379&gt; ZADD zset2 1 v1 2 v2 4 v3 5 v5</span><br><span class="line">  (<span class="built_in">integer</span>) 4</span><br><span class="line"></span><br><span class="line">获取集合的长度数：</span><br><span class="line">  127.0.0.1:6379&gt; ZCARD zset1 </span><br><span class="line">  (<span class="built_in">integer</span>) 4</span><br><span class="line">  127.0.0.1:6379&gt; ZCARD zset2</span><br><span class="line">  (<span class="built_in">integer</span>) 4</span><br><span class="line"></span><br><span class="line">基于索引返回数值：</span><br><span class="line">  127.0.0.1:6379&gt; ZRANGE zset1 1 3</span><br><span class="line">  1) <span class="string">"v2"</span></span><br><span class="line">  2) <span class="string">"v3"</span></span><br><span class="line">  3) <span class="string">"v4"</span></span><br><span class="line">  127.0.0.1:6379&gt; ZRANGE zset1 0 2</span><br><span class="line">  1) <span class="string">"v1"</span></span><br><span class="line">  2) <span class="string">"v2"</span></span><br><span class="line">  3) <span class="string">"v3"</span></span><br><span class="line"></span><br><span class="line">返回某个数值的索引：</span><br><span class="line">  127.0.0.1:6379&gt; ZRANK zset1 v2</span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  127.0.0.1:6379&gt; ZRANK zset1 v3</span><br><span class="line">  (<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>4.哈希(hash)：</p><ul><li>hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象,Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">生成<span class="built_in">hash</span> key：</span><br><span class="line">  127.0.0.1:6379&gt; HSET hset1 name tom  age 18</span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  127.0.0.1:6379&gt; TYPE hset1</span><br><span class="line">  <span class="built_in">hash</span></span><br><span class="line"></span><br><span class="line">获取<span class="built_in">hash</span> key字段值：</span><br><span class="line">  127.0.0.1:6379&gt; HGET hset1 name</span><br><span class="line">  <span class="string">"tom"</span></span><br><span class="line">  127.0.0.1:6379&gt; HGET hset1  age</span><br><span class="line">  <span class="string">"18"</span></span><br><span class="line"></span><br><span class="line">删除一个<span class="built_in">hash</span> key的字段：</span><br><span class="line">  127.0.0.1:6379&gt; HDEL hset1 age</span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">获取所有<span class="built_in">hash</span>表中的字段：</span><br><span class="line">  127.0.0.1:6379&gt; HSET hset1 name tom age 19</span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  127.0.0.1:6379&gt; HKEYS hset1</span><br><span class="line">  1) <span class="string">"name"</span></span><br><span class="line">  2) <span class="string">"age"</span></span><br><span class="line"></span><br><span class="line">设定key的过期时间</span><br><span class="line">  127.0.0.1:6379&gt;  <span class="built_in">set</span> test1 value1 ex 5   <span class="comment">#设定这个key的过期时间，43200半天时间，g根据用户需求设定</span></span><br><span class="line"></span><br><span class="line">查看key的过期时长</span><br><span class="line">  127.0.0.1:6379&gt; TTL key1</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="五：-消息队列："><a href="#五：-消息队列：" class="headerlink" title="五： 消息队列："></a>五： 消息队列：</h2><p>消息队列主要分为两种，分别是生产者消费者模式和发布者订阅者模式，这两种模式Redis都支持</p><h3 id="生产者消费者模式："><a href="#生产者消费者模式：" class="headerlink" title="生产者消费者模式："></a>生产者消费者模式：</h3><ul><li>1.在生产者消费者(Producer/Consumer)模式下，上层应用接收到的外部请求后开始处理其当前步骤的操作，在执行完成后将已经完成的操作发送至指定的频道(channel)当中，并由其下层的应用监听该频道并继续下一步的操作，如果其处理完成后没有下一步的操作就直接返回数据给外部请求，如果还有下一步的操作就再将任务发布到另外一个频道，由另外一个消费者继续监听和处理。</li><li>2.模式介绍：<ul><li>生产者消费者模式下，多个消费者同时监听一个队里，但是一个消息只能被最先抢到消息的消费者消费，即消息任务是一次性读取和处理，此模式在分布式业务架构中非常常用，比较常用的软件还有 RabbitMQ、Kafka、RocketMQ、ActiveMQ等</li></ul></li></ul><p><img src="/2018/12/26/redis缓存/生产者消费者模式.png" alt=""></p><ul><li>3.队列介绍：<ul><li>队列当中的 消息由不同的生产者写入也会有不同的消费者取出进行消费处理，但是买一个消息一定是只能被取出一次也就是被消费一次。</li></ul></li></ul><p><img src="/2018/12/26/redis缓存/队列介绍.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">生产者发布消息：</span><br><span class="line">  [root@redis-s4 ~]<span class="comment"># redis-cli</span></span><br><span class="line">  127.0.0.1:6379&gt; AUTH 123456</span><br><span class="line">  OK</span><br><span class="line">  127.0.0.1:6379&gt; LPUSH channel1 msg1 <span class="comment">#从管道的左侧写入</span></span><br><span class="line">  (<span class="built_in">integer</span>) 1</span><br><span class="line">  127.0.0.1:6379&gt; LPUSH channel1 msg2</span><br><span class="line">  (<span class="built_in">integer</span>) 2</span><br><span class="line">  127.0.0.1:6379&gt; LPUSH channel1 msg3</span><br><span class="line">  (<span class="built_in">integer</span>) 3</span><br><span class="line">  127.0.0.1:6379&gt; LPUSH channel1 msg4</span><br><span class="line">  (<span class="built_in">integer</span>) 4</span><br><span class="line">  127.0.0.1:6379&gt; LPUSH channel1 msg5</span><br><span class="line">  (<span class="built_in">integer</span>) 5</span><br><span class="line"></span><br><span class="line">切换终端模拟消费者，查看队列所有消息：<span class="comment">#（0，-1代表查看所有的消息）</span></span><br><span class="line">  127.0.0.1:6379&gt; LRANGE channel1  0  -1  <span class="comment">#切换其他客户端查看则已经看不到此条消息队列，因为已经被当前客户端取走</span></span><br><span class="line">  1) <span class="string">"msg5"</span></span><br><span class="line">  2) <span class="string">"msg4"</span></span><br><span class="line">  3) <span class="string">"msg3"</span></span><br><span class="line">  4) <span class="string">"msg2"</span></span><br><span class="line">  5) <span class="string">"msg1"</span></span><br><span class="line"></span><br><span class="line">消费者消费消息：</span><br><span class="line">  127.0.0.1:6379&gt; RPOP channel1 <span class="comment">#从管道的右侧消费</span></span><br><span class="line">  <span class="string">"msg1"</span></span><br><span class="line">  127.0.0.1:6379&gt; RPOP channel1</span><br><span class="line">  <span class="string">"msg2"</span></span><br><span class="line">  127.0.0.1:6379&gt; RPOP channel1</span><br><span class="line">  <span class="string">"msg3"</span></span><br><span class="line">  127.0.0.1:6379&gt; RPOP channel1</span><br><span class="line">  <span class="string">"msg4"</span></span><br><span class="line">  127.0.0.1:6379&gt; RPOP channel1</span><br><span class="line">  <span class="string">"msg5"</span></span><br><span class="line">  127.0.0.1:6379&gt; RPOP channel1</span><br><span class="line">  (nil)</span><br><span class="line"></span><br><span class="line">切换主机模拟消费者，再次验证队列消息：</span><br><span class="line">  127.0.0.1:6379&gt;  LRANGE channel1  0  -1 </span><br><span class="line">  (empty list or <span class="built_in">set</span>)  <span class="comment">#队列中的消息已经被已全部消费完毕</span></span><br></pre></td></tr></table></figure><h3 id="发布者订阅模式："><a href="#发布者订阅模式：" class="headerlink" title="发布者订阅模式："></a>发布者订阅模式：</h3><ul><li>1.模式简介：<ul><li>在发布者订阅者模式下，发布者将消息发布到指定的channel里面，凡是监听该channel的消费者都会收到同样的一份消息，这种模式类似于是收音机模式，即凡是收听某个频道的听众都会收到主持人发布的相同的消息内容。</li><li>此模式常用语群聊天、群通知、群公告等场景。<ul><li>Subscriber：订阅者</li><li>Publisher：发布者</li><li>Channel：频道</li></ul></li></ul></li></ul><p><img src="/2018/12/26/redis缓存/发布者订阅模式.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">订阅者监听频道：</span><br><span class="line">  [root@redis-s4 ~]<span class="comment"># redis-cli </span></span><br><span class="line">  127.0.0.1:6379&gt; AUTH 123456</span><br><span class="line">  OK</span><br><span class="line">  127.0.0.1:6379&gt; SUBSCRIBE channel1  <span class="comment">#订阅者订阅指定的频道,也就是客户端监听服务端的频道，此时可以模拟多个客户端监听服务端的此频道</span></span><br><span class="line">  Reading messages... (press Ctrl-C to quit)</span><br><span class="line">  1) <span class="string">"subscribe"</span></span><br><span class="line">  2) <span class="string">"channel1"</span></span><br><span class="line">  3) (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">发布者发布消息：<span class="comment">#服务端在此频道发布消息，此时客户端监听在服务端的此频道，都会接受到消息</span></span><br><span class="line">  127.0.0.1:6379&gt; PUBLISH channel1 test1 <span class="comment">#发布者发布消息</span></span><br><span class="line">  (<span class="built_in">integer</span>) 2</span><br><span class="line">  127.0.0.1:6379&gt; PUBLISH channel1 test2</span><br><span class="line">  (<span class="built_in">integer</span>) 2</span><br><span class="line">  127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">订阅多个频道：</span><br><span class="line">订阅指定的多个频道</span><br><span class="line">  127.0.0.1:6379&gt;  SUBSCRIBE channel1 channel2 </span><br><span class="line"></span><br><span class="line">订阅所有频道：</span><br><span class="line">  127.0.0.1:6379&gt; PSUBSCRIBE *</span><br><span class="line"></span><br><span class="line">订阅匹配的频道：</span><br><span class="line">  127.0.0.1:6379&gt; PSUBSCRIBE chann* <span class="comment">#匹配订阅多个频道</span></span><br></pre></td></tr></table></figure><h2 id="六：-redis其他命令："><a href="#六：-redis其他命令：" class="headerlink" title="六： redis其他命令："></a>六： redis其他命令：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">CONFIG：</span><br><span class="line">  config 命令用于查看当前redis配置、以及不重启更改redis配置等</span><br><span class="line">  127.0.0.1:6379&gt;config get * <span class="comment">#获取config的命令配置帮助,或当前配置</span></span><br><span class="line"></span><br><span class="line">更改最大内存：</span><br><span class="line">  127.0.0.1:6379&gt; CONFIG <span class="built_in">set</span> maxmemory 8589934592</span><br><span class="line">  OK</span><br><span class="line">  127.0.0.1:6379&gt; CONFIG get maxmemory <span class="comment">#获取此配置项的值</span></span><br><span class="line">  1) <span class="string">"maxmemory"</span></span><br><span class="line">  2) <span class="string">"8589934592"</span></span><br><span class="line"></span><br><span class="line">设置连接密码：(可以先修改配置文件再动态命令行设置，这样避免重启服务生效)</span><br><span class="line">  127.0.0.1:6379&gt; CONFIG SET requirepass 123456</span><br><span class="line">  OK        <span class="comment">#通过CONFIG设置密码后立即生效</span></span><br><span class="line">  重现连接测试</span><br><span class="line">  172.18.135.1:6379&gt; CONFIG SET requirepass 123456</span><br><span class="line">  OK</span><br><span class="line">  172.18.135.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># redis-cli -h 172.18.135.1 -p 6379</span></span><br><span class="line">  172.18.135.1:6379&gt; keys *</span><br><span class="line">  (error) NOAUTH Authentication required.</span><br><span class="line">  172.18.135.1:6379&gt; auth 123456  <span class="comment">#auth认证连接</span></span><br><span class="line">  OK</span><br><span class="line">  172.18.135.1:6379&gt; keys *</span><br><span class="line">  1) <span class="string">"key1"</span></span><br><span class="line"></span><br><span class="line">编辑配置文件设置连接redis的密码永久生效</span><br><span class="line">  <span class="comment">#可以先在redis动态控制台设置完再在配置文件中修改这样会避免重启服务器代来不必要的损失</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># vim /usr/local/redis/etc/redis.conf </span></span><br><span class="line">  507行</span><br><span class="line">  requirepass 123456</span><br><span class="line"></span><br><span class="line">info：</span><br><span class="line">显示当前节点redis运行状态信息</span><br><span class="line">  172.18.135.1:6379&gt; info </span><br><span class="line"></span><br><span class="line">SELECT：</span><br><span class="line">切换数据库</span><br><span class="line">  172.18.135.1:6379&gt; </span><br><span class="line"></span><br><span class="line">keys:</span><br><span class="line">查看当前库下的所有key：<span class="comment">#keys * 慎用，相当于将数据库中的所有数据拿出，如果数据较多全部显示则会把机器卡死</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BGSAVE：</span><br><span class="line">手动在后台执行RDB持久化操作</span><br><span class="line">  172.18.135.1:6379&gt; BGSAVE</span><br><span class="line"></span><br><span class="line">DBSIZE：</span><br><span class="line">返回当前库下的所有key 数量</span><br><span class="line">  172.18.135.1:6379&gt; DBSIZE</span><br><span class="line"></span><br><span class="line">FLUSHDB：</span><br><span class="line">强制清空当前库中的所有key</span><br><span class="line">  172.18.135.1:6379&gt; FLUSHDB</span><br><span class="line"></span><br><span class="line">FLUSHALL：</span><br><span class="line">强制清空当前redis服务器所有数据库中的所有key，即删除所有数据</span><br><span class="line">  172.18.135.1:6379&gt; FLUSHALL</span><br></pre></td></tr></table></figure><h2 id="七：-redis高可用于集群——配置redis主从"><a href="#七：-redis高可用于集群——配置redis主从" class="headerlink" title="七： redis高可用于集群——配置redis主从"></a>七： redis高可用于集群——配置redis主从</h2><ul><li>虽然Redis可以实现单机的数据持久化，但无论是RDB也好或者AOF也好，都解决不了单点宕机问题，即一旦redis服务器本身出现系统故障、硬件故障等问题后，就会直接造成数据的丢失，因此需要使用另外的技术来解决单点问题。</li><li>配置reids 主从：<ul><li>主备模式，可以实现Redis数据的跨主机备份。</li><li>程序端连接到高可用负载的VIP，然后连接到负载服务器设置的Redis后端real server，此模式不需要在程序里面配置Redis服务器的真实IP地址，当后期Redis服务器IP地址发生变更只需要更改redis 相应的后端real server即可，可避免更改程序中的IP地址设置。</li></ul></li></ul><p><img src="/2018/12/26/redis缓存/分布式缓存.png" alt=""><br><img src="/2018/12/26/redis缓存/配置redis主从.png" alt=""></p><ul><li><code>Slave主要配置：</code><ul><li>Redis Slave 也要开启持久化（RDB\AOF）并设置和master同样的连接密码，因为后期slave会有提升为master的可能,Slave端切换master同步后会丢失之前的所有数据。（最好将slave的配置于master相同，密码相同为了master宕机提升slave为新的主，如果开始同步，从节点上的原有的值则被清空，所以最好是要当从节点的服务器为干净的redis服务系统，后期如果将从节点强制和主节点断开的话则从节点的数据不会丢失）</li><li>一旦某个Slave成为一个master的slave，Redis Slave服务会清空当前redis服务器上的所有数据并将master的数据导入到自己的内存，但是断开同步关系后不会删除当前已经同步过的数据。</li></ul></li></ul><h3 id="命令行配置"><a href="#命令行配置" class="headerlink" title="命令行配置"></a>命令行配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方法1：从节点命令行方式将称为主节点的slave</span><br><span class="line">  当前状态为master，需要转换为slave角色并指向master服务器的IP+PORT+Password</span><br><span class="line">  192.168.7.104:6379&gt; SLAVEOF 192.168.7.103 6379</span><br><span class="line">  OK</span><br><span class="line">  192.168.7.104:6379&gt; CONFIG SET masterauth 123456</span><br><span class="line">  OK</span><br><span class="line">  关闭从节点的从属性</span><br><span class="line">  127.0.0.1:6379&gt; SLAVEOF NO ONE </span><br><span class="line"></span><br><span class="line">在终端配置文件主从选项在重启服务后失效</span><br></pre></td></tr></table></figure><p><img src="/2018/12/26/redis缓存/同步日志.png" alt=""><br><img src="/2018/12/26/redis缓存/当前slave状态.png" alt=""></p><h3 id="保存在配置文件中"><a href="#保存在配置文件中" class="headerlink" title="保存在配置文件中"></a>保存在配置文件中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方法2:</span><br><span class="line">此配置文件是编译安装的配置文件</span><br><span class="line">vim /usr/<span class="built_in">local</span>/redis/etc/redis.conf </span><br><span class="line">replicaof 192.168.7.103 6379</span><br><span class="line">masterauth 123456   <span class="comment">#master如果密码需要设置，这里设置的密码为主节点的密码</span></span><br><span class="line"></span><br><span class="line">从节点查看</span><br><span class="line">  重启服务查看</span><br><span class="line">  127.0.0.1:6379&gt; info</span><br></pre></td></tr></table></figure><p><img src="/2018/12/26/redis缓存/验证slave.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">验证slave数据：确定slave的数据是不是从主节点的数据同步来的，可以一致观察这从节点的日志</span><br><span class="line">  127.0.0.1:6379&gt; KEYS *</span><br><span class="line">  1) <span class="string">"num"</span></span><br><span class="line">  2) <span class="string">"hset1"</span></span><br><span class="line">  3) <span class="string">"key1"</span></span><br><span class="line">  4) <span class="string">"name1"</span></span><br><span class="line">  5) <span class="string">"zset2"</span></span><br><span class="line">  6) <span class="string">"key2"</span></span><br><span class="line">  7) <span class="string">"zset1"</span></span><br><span class="line">  8) <span class="string">"set2"</span></span><br><span class="line">slave 状态只读无法写入数据，</span><br></pre></td></tr></table></figure></p><h3 id="主从复制过程："><a href="#主从复制过程：" class="headerlink" title="主从复制过程："></a><code>主从复制过程：</code></h3><ul><li>Redis支持主从复制分为全量同步和增量同步，首次同步是全量同步，主从同步可以让从服务器从主服务器备份数据，而且从服务器还可与有从服务器，即另外一台redis服务器可以从一台从服务器进行数据同步，redis 的主从同步是非阻塞的，其收到从服务器的sync(2.8版本之前是PSYNC)命令会fork一个子进程在后台执行bgsave命令，并将新写入的数据写入到一个缓冲区里面，bgsave执行完成之后并生成的将RDB文件发送给客户端，客户端将收到后的RDB文件载入自己的内存，然后主redis将缓冲区的内容在全部发送给从redis，之后的同步从服务器会发送一个offset的位置(等同于MySQL的binlog的位置)给主服务器，主服务器检查后位置没有错误将此位置之后的数据包括写在缓冲区的积压数据发送给redis从服务器，从服务器将主服务器发送的挤压数据写入内存，这样一次完整的数据同步，再之后再同步的时候从服务器只要发送当前的offset位 置给主服务器，然后主服务器根据响应的位置将之后的数据发送给从服务器保存到其内存即可。</li><li>Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。具体步骤如下： <ul><li>1）从服务器连接主服务器，发送SYNC命令； </li><li>2）主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB快照文件并使用缓冲区记录此后执行的所有写命令； </li><li>3）主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令； </li><li>4）从服务器收到快照文件后丢弃所有旧数据，载入收到的快照； </li><li>5）主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令； </li><li>6）从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</li><li>7）后期同步会先发送自己slave_repl_offset位置，只同步新增加的数据，不再全量同步。</li></ul></li></ul><p><img src="/2018/12/26/redis缓存/同步过程.png" alt=""></p><h3 id="主从同步优化："><a href="#主从同步优化：" class="headerlink" title="主从同步优化："></a><code>主从同步优化：</code></h3><ul><li>Redis在2.8版本之前没有提供增量部分复制的功能，当网络闪断或者slave Redis重启之后会导致主从之间的全量同步，即从2.8版本开始增加了部分复制的功能。<br>repl-diskless-sync  no #yes为支持disk，master将RDB文件先保存到磁盘在发送给slave，no为maste直接将RDB文件发送给slave，默认即为使用no，Master RDB文件不需要与磁盘交互。<ul><li>repl-diskless-sync-delay 5  #Master准备好RDB文件后等等待传输时间</li><li>repl-ping-slave-period 10 #slave端向server端发送pings的时间区间设置，默认为10秒 </li><li>repl-timeout 60 #设置超时时间</li><li>repl-disable-tcp-nodelay no #是否启用TCP_NODELAY，如设置成yes，则redis会合并小的TCP包从而节省带宽，但会增加同步延迟（40ms），造成master与slave数据不一致，假如设置成no，则redis master会立即发送同步数据，没有延迟，前者关注性能，后者关注一致性</li><li>repl-backlog-size 1mb  #master的写入数据缓冲区，用于记录自上一次同步后到下一次同步过程中间的写入命令，计算公式：b repl-backlog-size = 允许从节点最大中断时长 <em> 主实例offset每秒写入量，比如master每秒最大写入64mb，最大允许60秒，那么就要设置为64mb</em>60秒=3840mb(3.8G)=</li><li>repl-backlog-ttl 3600 #如果一段时间后没有slave连接到master，则backlog size的内存将会被释放。如果值为0则表示永远不释放这部份内存。 </li><li>slave-priority 100 #slave端的优先级设置，值是一个整数，数字越小表示优先级越高。当master故障时将会按照优先级来选择slave端进行恢复，如果值设置为0，则表示该slave永远不会被选择。 </li><li>#min-slaves-to-write 0 # </li><li>#min-slaves-max-lag 10 #设置当一个master端的可用slave少于N个，延迟时间大于M秒时，不接收写操作。</li><li>\Master的重启会导致master_replid发生变化，slave之前的master_replid就和master不一致从而会引发所有slave的全量同步。</li></ul></li></ul><p>Slave同步过程日志：<br><img src="/2018/12/26/redis缓存/同步过程日志.png" alt=""><br>master同步日志：<br><img src="/2018/12/26/redis缓存/master同步日志.png" alt=""></p><h3 id="slave切换master："><a href="#slave切换master：" class="headerlink" title="slave切换master："></a><code>slave切换master：</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">当前状态：</span><br><span class="line">  从节点的状态信息</span><br><span class="line">  192.168.7.101:6379&gt; info Replication</span><br><span class="line">  <span class="comment"># Replication</span></span><br><span class="line">  role:slave</span><br><span class="line">  master_host:192.168.7.103</span><br><span class="line">  master_port:6379</span><br><span class="line">  master_link_status:up</span><br><span class="line">  master_last_io_seconds_ago:8</span><br><span class="line">  master_sync_in_progress:0</span><br><span class="line"></span><br><span class="line">停止slave同步并查看当前状态：</span><br><span class="line">  192.168.7.101:6379&gt; SLAVEOF no one</span><br><span class="line">  OK</span><br><span class="line">  192.168.7.101:6379&gt; info Replication</span><br><span class="line">  <span class="comment"># Replication</span></span><br><span class="line">  role:master</span><br><span class="line">  connected_slaves:0</span><br><span class="line">  master_replid:ac3475e5e4fae8c5f47711a643e465b9520c4182</span><br><span class="line">  master_replid2:8ee6bc1ac452fd4d2ccbaa660a219f78d218399a</span><br><span class="line">  master_repl_offset:8840</span><br><span class="line">  second_repl_offset:8841</span><br><span class="line">  repl_backlog_active:1</span><br><span class="line">  repl_backlog_size:1048576</span><br><span class="line">  repl_backlog_first_byte_offset:8547</span><br><span class="line">  repl_backlog_histlen:294</span><br><span class="line"></span><br><span class="line">测试能从节点否写入数据：</span><br><span class="line">  192.168.7.101:6379&gt; <span class="built_in">set</span> key1 value1 <span class="comment">#从节点停止主从结构时就是本机的自己的主，所以自然可以都自己的值进行写入</span></span><br><span class="line">  OK</span><br><span class="line">  192.168.7.101:6379&gt;</span><br><span class="line"></span><br><span class="line">虽然从节点脱离了主从结构，但是从节点的数据，依然保留着主节点同步时的数据。</span><br></pre></td></tr></table></figure><h3 id="Slave节点再有Slave："><a href="#Slave节点再有Slave：" class="headerlink" title="Slave节点再有Slave："></a><code>Slave节点再有Slave：</code></h3><p><img src="/2018/12/26/redis缓存/从节点再有从节点.png" alt=""></p><ul><li><code>在有slave的”master”查看状态：</code><ul><li># Replication</li><li>role:slave</li><li>master_host:192.168.7.102</li><li>master_port:6379</li><li>master_link_status:up</li><li>master_last_io_seconds_ago:9 #最近一次与master通信已经过去多少秒。</li><li>master_sync_in_progress:0  #是否正在与master通信。</li><li>slave_repl_offset:5334 #当前同步的偏移量。</li><li>slave_priority:100 #slave优先级，master故障后值越小越优先同步，一半设置相同的数值让它同时同步。</li><li>slave_read_only:1</li><li>connected_slaves:1</li><li>slave0:ip=192.168.7.104,port=6379,state=online,  </li><li>offset=5334,lag=1</li><li>master_replid:0f0318c25a022add7fd51d4438c470cf608631f9</li><li>master_replid2:0000000000000000000000000000000000000000</li><li>master_repl_offset:5334</li><li>second_repl_offset:-1</li><li>repl_backlog_active:1</li><li>repl_backlog_size:1048576</li><li>repl_backlog_first_byte_offset:1</li><li>repl_backlog_histlen:5334</li></ul></li></ul><h3 id="常见问题汇总："><a href="#常见问题汇总：" class="headerlink" title="常见问题汇总："></a><code>常见问题汇总：</code></h3><ul><li>master密码不对：<ul><li>即配置的master密码不对，导致验证不通过而无法建立主从同步关系。</li></ul></li></ul><p><img src="/2018/12/26/redis缓存/master密码不对.png" alt=""></p><ul><li><p>Redis版本不一致：</p><ul><li>不同的redis 版本之间存在兼容性问题，因此各master和slave之间必须保持版本一致。<br><img src="/2018/12/26/redis缓存/版本不一致报错.png" alt=""></li></ul></li><li><p>无法远程连接：</p><ul><li>在开启了安全模式情况下，没有设置bind地址和密码</li></ul></li></ul><p><img src="/2018/12/26/redis缓存/远程无法连接.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis缓存及架构&quot;&gt;&lt;a href=&quot;#redis缓存及架构&quot; class=&quot;headerlink&quot; title=&quot;redis缓存及架构&quot;&gt;&lt;/a&gt;redis缓存及架构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/12/26/redis缓存/redis标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux服务" scheme="https://9527dz.top/categories/linux%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="redis缓存" scheme="https://9527dz.top/tags/redis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>KVM.virsh命令使用入门</title>
    <link href="https://9527dz.top/2018/12/25/KVM-virsh%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://9527dz.top/2018/12/25/KVM-virsh命令使用入门/</id>
    <published>2018-12-25T06:33:21.051Z</published>
    <updated>2018-12-25T13:58:20.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KVM-virsh命令使用入门"><a href="#KVM-virsh命令使用入门" class="headerlink" title="KVM-virsh命令使用入门"></a>KVM-virsh命令使用入门</h1><p><img src="/2018/12/25/KVM-virsh命令使用入门/标题.png" alt=""><br><a id="more"></a></p><ul><li>虚拟化技术<ul><li>主机级虚拟化：infrastructure</li><li>容器级虚拟化（用户空间虚拟化即容器）：Container<ul><li>内核名称空间：<ul><li>NET</li><li>Mount</li><li>PID</li><li>UTS</li><li>IPC</li><li>User</li></ul></li></ul></li><li>程序级虚拟化：<ul><li>JVM</li><li>PVM</li></ul></li></ul></li><li><p>云计算环境：</p><ul><li>SaaS：软件即服务</li><li>CaaS:容器即服务</li><li>FWaaS:防火墙即服务</li><li>LBaaS:负载均衡即服务</li><li>DBaaS:数据库即服务</li><li>IaaS:基础设施即服务</li><li>PaaS:平台即服务</li></ul></li><li><p>虚拟主机通讯：  </p><ul><li>物理桥：主机过多，主机间交换报文发生瓶颈</li><li>隧道、叠加网络</li></ul></li></ul><p><img src="/2018/12/25/KVM-virsh命令使用入门/kvm管理工具.png" alt=""></p><ul><li>virsh家族的虚拟机创建后，即使物理机重启了虚拟机也还在。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 所有的虚拟机创建完成后，/etc/libvirt作为的配置文件的工作目录</span><br><span class="line"></span><br><span class="line">  [root@centos7 ~]<span class="comment"># ls /etc/libvirt/</span></span><br><span class="line">  libvirt-admin.conf  lxc.conf  qemu.conf        storage</span><br><span class="line">  libvirt.conf        nwfilter  qemu-lockd.conf  virtlockd.conf</span><br><span class="line">  libvirtd.conf       qemu      secrets          virtlogd.conf</span><br><span class="line"></span><br><span class="line">使用qemu+kvm创建虚拟服务时，配置文件保存在qemu文件中（每个创建的虚拟机都表现为一个.xml文件，立案包含了所有创建虚拟机的所有的相关配置）</span><br><span class="line">  [root@centos7 vms]<span class="comment"># ls /etc/libvirt/qemu</span></span><br><span class="line">  altlinux7.0.xml</span><br></pre></td></tr></table></figure><p><img src="/2018/12/25/KVM-virsh命令使用入门/kvm架构.png" alt=""></p><ul><li>虚拟的主机中虚拟cpu核心，仅表现为宿主机中线程</li></ul><h3 id="virsh"><a href="#virsh" class="headerlink" title="virsh"></a><code>virsh</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">列创建的虚拟机</span><br><span class="line">  [root@centos7 vms]<span class="comment"># virsh list</span></span><br><span class="line">   Id    Name                           State</span><br><span class="line">  ----------------------------------------------------</span><br><span class="line">   12    altlinux7.0                    running</span><br><span class="line"></span><br><span class="line"><span class="comment">## virsh list帮助</span></span><br><span class="line">  [root@centos7 vms]<span class="comment"># virsh list --help</span></span><br><span class="line">    OPTIONS</span><br><span class="line">    --inactive       列出不活跃的域</span><br><span class="line">    --all            不活跃和活跃的域列表</span><br><span class="line">    --transient      列出临时域</span><br><span class="line">    --persistent     列出持久域</span><br><span class="line">    --with-snapshot  列出现有的快照的域</span><br><span class="line">    --without-snapshot  列出没有快照的域</span><br><span class="line">    --state-running  运行状态的域列表</span><br><span class="line">    --state-paused   列出暂停状态的域</span><br><span class="line">    --state-shutoff  列出关闭状态的域</span><br><span class="line">    --state-other    列出其他状态的域</span><br><span class="line">    --autostart      列出启用antostart的域</span><br><span class="line">    --no-autostart   列出禁用antostart的域</span><br><span class="line">    --with-managed-save  列出有管理的保存状态的域</span><br><span class="line">    --without-managed-save  列出没有管理的保存状态的域</span><br><span class="line">    --uuid           只列出 uuid</span><br><span class="line">    --name           只列出域名</span><br><span class="line">    --table          列出表格（默认）</span><br><span class="line">    --managed-save   标记有管理的保存状态的域</span><br><span class="line">    --title          show domain title</span><br><span class="line"></span><br><span class="line">  [root@centos7 vms]<span class="comment"># virsh list --all</span></span><br><span class="line">   Id    Name                           State</span><br><span class="line">  ----------------------------------------------------</span><br><span class="line">   12    altlinux7.0                    running</span><br><span class="line"></span><br><span class="line">  [root@centos7 vms]<span class="comment"># virsh list --name</span></span><br><span class="line">  altlinux7.0</span><br><span class="line"></span><br><span class="line">查看虚拟机的详细信息（实际上看的就是此虚拟机的xml的配置文件）</span><br><span class="line">  [root@centos7 vms]<span class="comment"># virsh dumpxml altlinux7.0</span></span><br><span class="line"></span><br><span class="line">可以将查看虚拟机的详细信息保存在/etc/libvirt作为的配置文件的工作目录中，加以修改实现创建一台新的虚拟系统</span><br><span class="line">  [root@centos7 ~]<span class="comment"># virsh dumpxml altlinux7.0 &gt; /etc/libvirt/qemu/c1.xml</span></span><br><span class="line">  编辑c1.xml</span><br><span class="line">  必须修改项（行）：</span><br><span class="line">          2：名字</span><br><span class="line">          3：删除uuid，启动自动生成</span><br><span class="line">          38：修改本地对应镜像文件</span><br><span class="line">          71：网卡MAC</span><br><span class="line"></span><br><span class="line">创建虚拟机（此实现的前提时建立在上一章kvm虚拟机基础应用的实验的，下一执行命令是在kvm服务器上）</span><br><span class="line">      virsh <span class="built_in">help</span> create :查看创建虚拟机并且启动的帮助</span><br><span class="line">      virsh <span class="built_in">help</span> define :查看仅创建但不启动的帮助</span><br><span class="line">      virsh <span class="built_in">help</span> start :查看启动的帮助</span><br><span class="line">      virsh define &lt;xmlfile&gt; --validate : 检查xml文件格式是否有误</span><br><span class="line">  </span><br><span class="line">  启动虚拟机，并指顶xml文件</span><br><span class="line">      检查语法</span><br><span class="line">      [root@centos7 ~]<span class="comment"># virsh define /etc/libvirt/qemu/c1.xml --validate</span></span><br><span class="line">      Domain c1 defined from /etc/libvirt/qemu/c1.xml</span><br><span class="line">      创建</span><br><span class="line">      [root@centos7 ~]<span class="comment"># virsh define /etc/libvirt/qemu/c1.xml</span></span><br><span class="line">      Domain c1 defined from /etc/libvirt/qemu/c1.xml</span><br><span class="line">      查看是否创建成功</span><br><span class="line">      [root@centos7 ~]<span class="comment"># virsh list --all</span></span><br><span class="line">        Id    Name                           State</span><br><span class="line">        ----------------------------------------------------</span><br><span class="line">        12    altlinux7.0                    running</span><br><span class="line">        -     c1                             shut off</span><br><span class="line">      启动</span><br><span class="line">      [root@centos7 ~]<span class="comment"># virsh start c1</span></span><br><span class="line">      Domain c1 started</span><br><span class="line">      [root@centos7 ~]<span class="comment"># virsh list </span></span><br><span class="line">       Id    Name                           State</span><br><span class="line">      ----------------------------------------------------</span><br><span class="line">       12    altlinux7.0                    running</span><br><span class="line">       13    c1                             running</span><br><span class="line"></span><br><span class="line">  查看创建的虚拟机的地址</span><br><span class="line">    [root@centos7 ~]<span class="comment"># virsh domifaddr c1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## 查看virsh控制台 virsh help console</span></span><br><span class="line"></span><br><span class="line">  使用连接控制台连接虚拟机</span><br><span class="line">  [root@centos7 ~]<span class="comment"># virsh console c1</span></span><br><span class="line">  login as <span class="string">'cirros'</span> user. default password: <span class="string">'cubswin:)'</span>. use <span class="string">'sudo'</span> <span class="keyword">for</span> root.</span><br><span class="line"></span><br><span class="line">  退出当前连接</span><br><span class="line">  ctrl + ]</span><br><span class="line"></span><br><span class="line">  kvm虚拟机的暂停：所有的占用内存，仍然在内存中，只是不响应任何请求。定在内存中，如果宿主机掉电，则虚拟机的所有数据将会丢失</span><br><span class="line"></span><br><span class="line">  kvm虚拟机的挂起:是将宿主机上的所有的虚拟机的使用内存抽取掉，保存成二进制文件，放在磁盘上，下次再次开启虚拟机可以将磁盘中的二进制文件读出来恢复至内存中</span><br><span class="line"></span><br><span class="line">  暂停kvm虚拟机c1</span><br><span class="line">  [root@centos7 vms]<span class="comment"># virsh suspend c1</span></span><br><span class="line"></span><br><span class="line">  恢复kvm虚拟机c1</span><br><span class="line">  [root@centos7 vms]<span class="comment"># virsh resume c1</span></span><br><span class="line"></span><br><span class="line">  挂起kvm虚拟机c1（建议挂起虚拟机的时候将虚拟机先暂停）</span><br><span class="line">  [root@centos7 vms]<span class="comment"># virsh save c1 /tmp/c1.bin --paused</span></span><br><span class="line"></span><br><span class="line">  取消挂起kvm虚拟机c1</span><br><span class="line">  [root@centos7 vms]<span class="comment"># virsh restore /tmp/c1.bin --running</span></span><br><span class="line"></span><br><span class="line">  重启kvm虚拟机c1（热重启）</span><br><span class="line">  virsh reboot c1</span><br><span class="line"></span><br><span class="line">  重启kvm虚拟机c1（冷重启,如同使用电源按钮重新设定目标）</span><br><span class="line">  virsh reset c1</span><br><span class="line"></span><br><span class="line">  关机</span><br><span class="line">  virsh shutdown c1 /相当于在主虚拟机内部shutdown -0</span><br><span class="line"></span><br><span class="line">  暴力拨电，销毁虚拟机的运行状态(销毁的只是虚拟机的运行状态并非是虚拟机的系统程序文件)</span><br><span class="line">  virsh destroy c1</span><br><span class="line"></span><br><span class="line">  删除虚拟机（取消定义一个域或者持久转换为临时）</span><br><span class="line">  vrish undefine c1</span><br><span class="line"></span><br><span class="line">  将虚拟机设置为随宿主机启动开启</span><br><span class="line">  [root@centos7 vms]<span class="comment"># virsh autostart c1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;KVM-virsh命令使用入门&quot;&gt;&lt;a href=&quot;#KVM-virsh命令使用入门&quot; class=&quot;headerlink&quot; title=&quot;KVM-virsh命令使用入门&quot;&gt;&lt;/a&gt;KVM-virsh命令使用入门&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/12/25/KVM-virsh命令使用入门/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux服务" scheme="https://9527dz.top/categories/linux%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="KVM" scheme="https://9527dz.top/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>kvm虚拟机基础应用</title>
    <link href="https://9527dz.top/2018/12/25/kvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/"/>
    <id>https://9527dz.top/2018/12/25/kvm虚拟机基础应用/</id>
    <published>2018-12-25T03:28:26.046Z</published>
    <updated>2018-12-25T13:58:11.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kvm虚拟机基础应用"><a href="#kvm虚拟机基础应用" class="headerlink" title="kvm虚拟机基础应用"></a>kvm虚拟机基础应用</h1><p><img src="/2018/12/25/kvm虚拟机基础应用/kvm.png" alt=""><br><a id="more"></a></p><ul><li>kvm: Kernel-based Virtual Machine  <ul><li>Qumranet公司 –&gt; RedHat  <ul><li>(1) X86_64  </li><li>(2) HVM:   <ul><li>Intel VT  </li><li>AMD AMD-v  </li></ul></li></ul></li></ul></li></ul><p><img src="/2018/12/25/kvm虚拟机基础应用/kvm1.png" alt=""><br><img src="/2018/12/25/kvm虚拟机基础应用/kvm管理工具.png" alt="">  </p><ul><li><p>KVM的组件：</p><ul><li>两类组件：<ul><li>(kvm.ko)/dev/kvm：工作为hypervisor，在用户空间可通过系统调用ioctl()与内核中的kvm模块交互，从而完成虚拟机的创建、启动、停止、删除等各种管理功能；</li><li>qemu-kvm进程：工作于用户空间，用于实现IO设备模拟；用于实现一个虚拟机实例；</li></ul></li></ul></li><li><p>KVM模块load进内存之后，系统的运行模式：</p><ul><li>内核模式：GuestOS执行IO类的操作时，或其它的特殊指令操作时的模式；它也被称为“Guest-Kernel”模式；<pre><code>用户模式：Host OS的用户空间，用于代为GuestOS发出IO请求；来宾模式：GuestOS的用户模式；所有的非IO类请求；</code></pre></li></ul></li><li><p>运行中的一个kvm虚拟机就是一个qemu-kvm进程，运行qemu-kvm程序并传递给它合适的选项及参数即能完成虚拟机启动，终止此进程即能关闭虚拟机；</p></li></ul><h2 id="安装使用KVM"><a href="#安装使用KVM" class="headerlink" title="安装使用KVM"></a>安装使用KVM</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">安装kvm的主机上：</span><br><span class="line"></span><br><span class="line">判断CPU是否支持硬件虚拟化：</span><br><span class="line">[root@centos7 ~]<span class="comment"># grep -i -E '(vmx|svm|lm)' /proc/cpuinfo</span></span><br><span class="line">    cpu型号：</span><br><span class="line">    vmx：Intel VT-x</span><br><span class="line">    svm：AMD AMD-v</span><br><span class="line">    lm:64位cpu</span><br><span class="line"></span><br><span class="line">加载kvm模块使得内核支持kvm,并判断是否成功加载此模块</span><br><span class="line">  [root@centos7 ~]<span class="comment"># modprobe kvm</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># lsmod | grep kvm</span></span><br><span class="line">  kvm_intel             174841  0 </span><br><span class="line">  kvm                   578518  1 kvm_intel</span><br><span class="line">  irqbypass              13503  1 kvm</span><br><span class="line">  [root@centos7 ~]<span class="comment"># file /dev/kvm （字符设备）</span></span><br><span class="line">  /dev/kvm: character special</span><br><span class="line"></span><br><span class="line">安装qemu-kvm,使用户空间具有控制工具</span><br><span class="line">  [root@centos7 ~]<span class="comment"># yum install qemu-kvm -y</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># rpm -ql qemu-kvm</span></span><br><span class="line">  /usr/libexec/qemu-kvm   命令行工具被放在了非PATH变量中，红帽防止用户手动创建虚拟主机。此工具很底层</span><br><span class="line"></span><br><span class="line">使用virt-manager管理kvm(libvirt-daemon-kvm守护进程工具 qemu-kvm  virt-manager图形化工具 libvirt库)</span><br><span class="line">  [root@centos7 ~]<span class="comment"># yum install libvirt-daemon-kvm qemu-kvm  virt-manager libvirt -y</span></span><br><span class="line">  （因为已经安装图形化界面的管理工具，确保宿主机上已经安装图像化相关的库 yum groupinstall GNOME Desktop）</span><br><span class="line"></span><br><span class="line">如果宿主机上已经安装有图像化相关的库则启动libvirt守护进程</span><br><span class="line">  [root@centos7 ~]<span class="comment"># systemctl start libvirtd</span></span><br><span class="line"></span><br><span class="line">libvirtd安装好默认仅提供了一个net网络</span><br><span class="line">创建桥接网络</span><br><span class="line">    将物理网卡当交换及使用</span><br><span class="line">    将软交换机当物理网卡使用</span><br><span class="line">创建物理桥（交换机）</span><br><span class="line">  [root@centos7 ~]<span class="comment"># cd /etc/sysconfig/network-scripts/</span></span><br><span class="line">  [root@centos7 network-scripts]<span class="comment"># cp ifcfg-ens37 ifcfg-br0</span></span><br><span class="line"></span><br><span class="line">配置网卡的配置文件，使br0当网卡使用，将ens37当交换机使用</span><br><span class="line">  [root@centos7 network-scripts]<span class="comment"># vim ifcfg-ens37</span></span><br><span class="line">  HWADDR=00:0C:29:14:4D:6C</span><br><span class="line">  TYPE=Ethernet</span><br><span class="line">  BROWSER_ONLY=no</span><br><span class="line">  BOOTPROTO=none</span><br><span class="line">  DEFROUTE=yes</span><br><span class="line">  IPV4_FAILURE_FATAL=no</span><br><span class="line">  IPV6INIT=no</span><br><span class="line">  NAME=ens37</span><br><span class="line">  DEVICE=ens37</span><br><span class="line">  BRIDGE=br0</span><br><span class="line">  ONBOOT=yes</span><br><span class="line"></span><br><span class="line">  [root@centos7 network-scripts]<span class="comment"># vim ifcfg-br0 </span></span><br><span class="line">  NAME=br0</span><br><span class="line">  DEVICE=br0</span><br><span class="line">  TYPE=Bridge</span><br><span class="line">  PROXY_METHOD=none</span><br><span class="line">  BROWSER_ONLY=no</span><br><span class="line">  BOOTPROTO=none</span><br><span class="line">  IPADDR=172.18.135.1</span><br><span class="line">  PREFIX=24</span><br><span class="line">  GATEWAY=172.18.0.1</span><br><span class="line">  DNS1=8.8.8.8</span><br><span class="line">  DEFROUTE=yes</span><br><span class="line">  IPV4_FAILURE_FATAL=no</span><br><span class="line">  IPV6_FAILURE_FATAL=no</span><br><span class="line">  IPV6_PRIVACY=no</span><br><span class="line">  ONBOOT=yes</span><br><span class="line">  [root@centos7 network-scripts]<span class="comment"># systemctl restart network</span></span><br><span class="line"></span><br><span class="line">  此时br0已经是网卡了，ens37变成了交换机</span><br><span class="line">    [root@centos7 network-scripts]<span class="comment"># ifconfig</span></span><br><span class="line">   br0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">          inet 172.18.135.1  netmask 255.255.255.0  broadcast   172.18.135.255</span><br><span class="line">          inet6 fe80::20c:29ff:fe14:4d6c  prefixlen 64  scopeid     0x20&lt;link&gt;</span><br><span class="line">          ether 00:0c:29:14:4d:6c  txqueuelen 1000  (Ethernet)</span><br><span class="line">         RX packets 590  bytes 75531 (73.7 KiB)</span><br><span class="line">         RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">         TX packets 53  bytes 8801 (8.5 KiB)</span><br><span class="line">         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">   ens37: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">         ether 00:0c:29:14:4d:6c  txqueuelen 1000  (Ethernet)</span><br><span class="line">         RX packets 7333  bytes 809500 (790.5 KiB)</span><br><span class="line">         RX errors 0  dropped 2  overruns 0  frame 0</span><br><span class="line">         TX packets 1275  bytes 194949 (190.3 KiB)</span><br><span class="line">         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">远程连接安装kvm的主机</span><br><span class="line">一下操作在远程连接的主机上操作</span><br><span class="line">  查看网卡已经多了一个virbr0b设备，次接口是libvirtd自动生成的net模式类型的接口</span><br><span class="line">    [root@centos7 ~]<span class="comment"># ssh -X 安装kvm的主机地址</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># systemctl start libvirtd</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># ifconfig</span></span><br><span class="line">  br0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">         inet 172.18.135.1  netmask 255.255.255.0  broadcast 172.18.135.255</span><br><span class="line">         inet6 fe80::20c:29ff:fe14:4d6c  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">          ether 00:0c:29:14:4d:6c  txqueuelen 1000  (Ethernet)</span><br><span class="line">          RX packets 3006  bytes 1312927 (1.2 MiB)</span><br><span class="line">          RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">          TX packets 412  bytes 58640 (57.2 KiB)</span><br><span class="line">         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">    ens37: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">          ether 00:0c:29:14:4d:6c  txqueuelen 1000  (Ethernet)</span><br><span class="line">          RX packets 18644  bytes 3281398 (3.1 MiB)</span><br><span class="line">          RX errors 0  dropped 28  overruns 0  frame 0</span><br><span class="line">         TX packets 1827  bytes 281257 (274.6 KiB)</span><br><span class="line">         TX errors 0  dropped 0 overruns 0   carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">  lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">          inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">         inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">         loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">         RX packets 312  bytes 32472 (31.7 KiB)</span><br><span class="line">         RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">          TX packets 312  bytes 32472 (31.7 KiB)</span><br><span class="line">          TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">  virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">          inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">         ether 52:54:00:ff:0b:1f  txqueuelen 1000  (Ethernet)</span><br><span class="line">         RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">         RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">         TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">检查libvirtd程序是否启动，级运行virt-manager图形化</span><br><span class="line">  [root@centos7 ~]<span class="comment"># systemctl status libvirtd</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># virt-manager</span></span><br></pre></td></tr></table></figure><p>以下操作在远程远程连接的主机上<br>使用pxe安装环境<br><img src="/2018/12/25/kvm虚拟机基础应用/virt-manager.png" alt=""><br><img src="/2018/12/25/kvm虚拟机基础应用/第一步.png" alt=""><br><img src="/2018/12/25/kvm虚拟机基础应用/第二步.png" alt=""></p><p><img src="/2018/12/25/kvm虚拟机基础应用/pxe.png" alt=""><br><img src="/2018/12/25/kvm虚拟机基础应用/第三步.png" alt=""><br>使用本地的镜像（导入现有磁盘映像）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ls</span></span><br><span class="line">cirros-0.3.0-x86_64-disk.img</span><br><span class="line">[root@centos7 ~]<span class="comment"># mkdir /vms</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># mv cirros-0.3.0-x86_64-disk.img /vms/</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cd /vms/</span></span><br><span class="line">[root@centos7 vms]<span class="comment"># ls</span></span><br><span class="line">cirros-0.3.0-x86_64-disk.img</span><br><span class="line">[root@centos7 vms]<span class="comment"># cp cirros-0.3.0-x86_64-disk.img pc1.img</span></span><br><span class="line">[root@centos7 vms]<span class="comment"># cp cirros-0.3.0-x86_64-disk.img pc2.img</span></span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/25/kvm虚拟机基础应用/本地1.png" alt=""><br><img src="/2018/12/25/kvm虚拟机基础应用/本地2.png" alt=""><br>点击Browse Local本地浏览<br><img src="/2018/12/25/kvm虚拟机基础应用/本地3.png" alt=""></p><ul><li>本机客户端访问外部网络<ul><li>SNAT源地址转换适用于隐藏客户端地址<ul><li>主要原因是ipv4地址不够用，私网的地址在互联网没办法被路由。</li></ul></li></ul></li><li>本机服务端，放在互联网被客户访问。<ul><li>DNET目标地址转换，仅考虑请求报文，不考虑响应报文，适用于隐藏服务端的地址</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;kvm虚拟机基础应用&quot;&gt;&lt;a href=&quot;#kvm虚拟机基础应用&quot; class=&quot;headerlink&quot; title=&quot;kvm虚拟机基础应用&quot;&gt;&lt;/a&gt;kvm虚拟机基础应用&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/12/25/kvm虚拟机基础应用/kvm.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux服务" scheme="https://9527dz.top/categories/linux%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="kvm虚拟机基础应用" scheme="https://9527dz.top/tags/kvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络基础架构</title>
    <link href="https://9527dz.top/2018/12/22/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>https://9527dz.top/2018/12/22/网络基础/</id>
    <published>2018-12-22T11:35:57.600Z</published>
    <updated>2018-12-29T13:53:05.237Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/22/网络基础/标题.png" alt=""><br><a id="more"></a></p><h2 id="企业网络架构介绍"><a href="#企业网络架构介绍" class="headerlink" title="企业网络架构介绍"></a>企业网络架构介绍</h2><ul><li><p>网络:</p><ul><li>多个终端设备</li><li>网络传输介质设备实现通讯</li></ul></li><li><p>局域网：最小的网络、本地、公司</p></li><li>广域网：不通的局域网连接</li><li><p>城域网：比广域网小，例如：一个城市</p></li><li><p>无线网（AP）</p><ul><li>CCNA</li><li>CCNP</li></ul></li><li>企业网络远程互联<ul><li>企业网络组网不受地域限制，可以通过各种远程互联技术把分布在不同的地域的网络的网络连接在一起<ul><li>ipsu</li><li>mpls vpn</li><li>专线</li></ul></li></ul></li><li>广域网：逻辑的层次划分</li><li>小型企业组网：扁平</li><li>大型网络组网：层次  <ul><li>思想：<ul><li>业务</li><li>冗余</li><li>层次-安全</li></ul></li></ul></li></ul><p><img src="/2018/12/22/网络基础/企业网络基础结构.png" alt=""><br><img src="/2018/12/22/网络基础/企业网络.png" alt=""></p><h2 id="传输介质介绍"><a href="#传输介质介绍" class="headerlink" title="传输介质介绍"></a>传输介质介绍</h2><ul><li><p>通讯网络除了包含通讯设备的本身之外，还包含连接这些设备的传输介质，如同线缆、双绞线、和光纤等，不同的传输介质具有不用的特征，这些特性直接影响到通讯诸多方面，如线路编码方式、传输速度和传输距离等。</p></li><li><p>路由</p></li><li>交换机</li><li>传输介质：连接设备的线缆<ul><li>网线</li><li>光线</li></ul></li></ul><p><img src="/2018/12/22/网络基础/两台主机连接.png" alt=""></p><ul><li><p>两个终端，用一条能承载数据传输的物理介质（也成为传输介质），连接起来，组成了一个最简单的网络。</p></li><li><p>介质</p></li></ul><p><img src="/2018/12/22/网络基础/同轴电缆.png" alt=""><br><img src="/2018/12/22/网络基础/双绞线.png" alt=""><br><img src="/2018/12/22/网络基础/以太网线线序.png" alt=""><br><img src="/2018/12/22/网络基础/串口电缆.png" alt=""><br><img src="/2018/12/22/网络基础/光纤.png" alt=""></p><ul><li>光猫：光纤设置转换为网络设备进入网络</li><li>白色：单模光纤</li><li>黄色：多模光纤</li></ul><p><img src="/2018/12/22/网络基础/冲突域.png" alt=""></p><ul><li>共享式网络中可能会出现信号冲突现象</li></ul><p><img src="/2018/12/22/网络基础/共享网络冲突域解决方法.png" alt=""></p><ul><li><p>CSMA/CD: 载波侦听多路访问/冲突检测技术</p><ul><li>工作原理：先听先发，边听边发，冲突避让，等待重发。</li></ul></li><li><p>以太网的最大包长和最小包长</p><ul><li>最大包长1518byte,其中三层数据1500byte（称为MTU）只是一个规定而言</li><li>最小包长64byte<ul><li>原因：如果A主机发送的帧很小，很快完成帧的发送，而两台冲突主机相差很远，在主机A发送的帧传输到B的前一刻，B开始发送帧，这样，当A的帧到达B时，B检测到冲突，于是发送冲突信号。假如在B冲突信号传输到A之前，A的帧已经发送完毕，那么A将检测不到冲突而误认为已经发送成功，因此必须有最小包长的限制。</li></ul></li></ul></li></ul><p><img src="/2018/12/22/网络基础/双工模式.png" alt=""></p><ul><li>两种双工模式都支持双向数据传输</li><li>冲突与：半双工模式</li></ul><h2 id="分层模型及以太网帧结构"><a href="#分层模型及以太网帧结构" class="headerlink" title="分层模型及以太网帧结构"></a>分层模型及以太网帧结构</h2><p><img src="/2018/12/22/网络基础/网络通讯协议.png" alt=""></p><ul><li><p>不同的协议栈用于定义和管理不同的网络的数据转发规则</p></li><li><p>什么是协议</p><ul><li>为了使数据可以在网络上从源传递到目标地址，网络上所有设备需要“讲”相同的语言</li></ul></li><li><p>数据通讯协议的定义</p><ul><li>决定数据的格式和传输的一组规则和一组惯例</li></ul></li><li><p>网络通讯的过程很复杂</p><ul><li>数据以电子信号的形式穿越介质到达正确的计算机，然后转换为最初的形式，以便接收者可以阅读</li><li>为了降低网络设计的复杂性，将协议进行了分层设计</li></ul></li><li><p>分层设计的意义</p><ul><li>通讯服务层的模块设计可相对独立于具有的通讯路线和通讯接口的差别</li><li>而通信服务层的模块设计又可相对独立具体用户应用的要求不同</li><li>简化了相关的网络操作，提供了不不同的厂商之间的兼容性；促进了标准化工作，结构上进行了分层；易于学习和操作</li><li>各个层次独立，一层的变化不会影响到邻层</li></ul></li><li><p><code>OSI参考模型</code></p><ul><li>国际标准化组织ISO于1984年提出了OSI RM 。OSI参考模型很快成了计算机网络的基础模型</li><li>OSI参考模型具有的优点：简化了相关的网络操作，提供了不同的厂商之间的兼容性；促进了标准化工作；结构上进行了分层；易于学习和操作</li><li>OSI参考模型各个层次的功能如下：<ul><li>网络层：在设备之间传输比特流，规定了电平、速度和断缆针脚</li><li>数据链路层：将比特流组合成了字节，再将字节组合成帧，使用链路层地址（以太网使用MAC地址）来访问介质，并进行排差错检测</li><li>网络层：提供逻辑地址，供路由确定路径</li><li>传输层：提供面向连接或者非面向连接的数据传递以及进行排差错检测</li><li>会话层：负责建、管理和终止表示层实体之间的通讯会话。该层的通信由不同的设备中的应用程序之间的服务请求和响应组成（通信设备可能存在多个会话）</li><li>表示层：提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能够被另一个系统的应用层识别（数据表、加密、图片、文档、文字）</li><li>应用层：OSI参考模型中最靠近用户的一层，为应用程序提供网络服务</li></ul></li></ul></li></ul><p><img src="/2018/12/22/网络基础/osi参考模型.png" alt=""></p><ul><li>OSI层次设计的理念<ul><li>建立七层模型的主要目的使为解决异种网络互连时所遇到的兼容性问题</li><li>它的优点：将服务、接口和协议这三个概念明确地区分开来<ul><li>服务：某一层为上一层提供什么功能</li><li>接口：上层如何使用下层的服务</li><li>协议：如何实现本层的服务</li></ul></li><li>这样各层之间具有很强的独立性，互联网络中各尸体采用什么样的协议时没有限制的，只要向上提供形同的服务并且不改变相邻层的接口就可以了</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/22/网络基础/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络基础架构" scheme="https://9527dz.top/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="网络基础架构" scheme="https://9527dz.top/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>NFS服务器</title>
    <link href="https://9527dz.top/2018/12/19/nfs%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://9527dz.top/2018/12/19/nfs服务器/</id>
    <published>2018-12-19T09:32:20.163Z</published>
    <updated>2018-12-30T03:00:17.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NFS服务器"><a href="#NFS服务器" class="headerlink" title="NFS服务器"></a>NFS服务器</h1><p><img src="/2018/12/19/nfs服务器/nfs标题.png" alt=""><br><a id="more"></a></p><p><code>NFS：Network File System 网络文件系统，基于内核的文件系统。</code>Sun公司 开发，通过使用NFS，用户和程序可以像访问本地文件一样访问远端系统上的 文件，基于RPC<code>（Remote Procedure Call Protocol远程过程调用）实现</code> </p><p>RPC采用C/S模式。客户机请求程序调用进程发送一个有进程参数的调用信息 到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用 信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发 送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信 息，获得进程结果，然后调用执行继续进行 </p><p>NFS优势：节省本地存储空间，将常用的数据,如home目录,存放在NFS服务 器上且可以通过网络访问，本地终端将可减少自身存储空间的使用 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">常用系统的驱动查看模块</span><br><span class="line">[root@centos7 ~]<span class="comment"># locate xfs.ko</span></span><br><span class="line">/usr/lib/modules/3.10.0-862.el7.x86_64/kernel/fs/xfs/xfs.ko.xz</span><br><span class="line">[root@centos7 ~]<span class="comment"># ls /usr/lib/modules/3.10.0-862.el7.x86_64/kernel/fs/</span></span><br><span class="line">binfmt_misc.ko.xz  cifs    ext4     gfs2   mbcache.ko.xz  nls        udf</span><br><span class="line">btrfs              cramfs  fat      isofs  nfs            overlayfs  xfs</span><br><span class="line">cachefiles         dlm     fscache  jbd2   nfs_common     pstore</span><br><span class="line">ceph               exofs   fuse     lockd  nfsd           squashfs</span><br><span class="line"></span><br><span class="line">linux内核默认已经安装nfs文件系统，已经加载驱动模块</span><br><span class="line">[root@centos7 ~]<span class="comment"># locate nfs.ko</span></span><br><span class="line">/usr/lib/modules/3.10.0-862.el7.x86_64/kernel/drivers/xen/xenfs/xenfs.ko.xz</span><br><span class="line">/usr/lib/modules/3.10.0-862.el7.x86_64/kernel/fs/nfs/nfs.ko.xz</span><br></pre></td></tr></table></figure><h2 id="NFS文件系统"><a href="#NFS文件系统" class="headerlink" title="NFS文件系统"></a>NFS文件系统</h2><p><img src="/2018/12/19/nfs服务器/nfs文件系统.png" alt=""></p><h2 id="NFS工作原理"><a href="#NFS工作原理" class="headerlink" title="NFS工作原理"></a>NFS工作原理</h2><p><img src="/2018/12/19/nfs服务器/nfs工作原理.png" alt=""></p><h2 id="NFS各个版本的对比s"><a href="#NFS各个版本的对比s" class="headerlink" title="NFS各个版本的对比s"></a>NFS各个版本的对比s</h2><p><img src="/2018/12/19/nfs服务器/nfs各个版本的对比.png" alt=""></p><h2 id="NFS服务介绍"><a href="#NFS服务介绍" class="headerlink" title="NFS服务介绍"></a>NFS服务介绍</h2><p>软件包：nfs-utils（并非服务器包时文件系统即工具）<br>Kernel支持:nfs.ko<br>端口：2049(nfsd), 其它端口由portmap(111)分配<br>配置文件：/etc/exports,/etc/exports.d/*.exports<br>CentOS7不支持同一目录同时用nfs和samba共享，因为使用锁机制不同<br>相关软件包:rpcbind（必须rpcbind， 服务如果不可用则nfs服务也不可用），tcp_wrappers<br>CentOS6开始portmap进程由rpcbind代替<br>NFS服务主要进程：<br>&ensp;&ensp;rpc.nfsd    最主要的NFS进程，管理客户端是否可登录<br>&ensp;&ensp;rpc.mountd 挂载和卸载NFS文件系统，包括权限管理<br>&ensp;&ensp;rpc.lockd   非必要，管理文件锁，避免同时写出错<br>&ensp;&ensp;rpc.statd   非必要，检查文件一致性，可修复文件<br>日志：/var/lib/nfs/  </p><p>范例：查看nfs对应的端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># rpcinfo -p</span></span><br><span class="line">   program vers proto   port  service</span><br><span class="line">    100000    4   tcp    111  portmapper</span><br><span class="line">    100000    3   tcp    111  portmapper</span><br><span class="line"></span><br><span class="line">此服务使用的随机端口比较多，所以此服务一般不会跨网络使用，最好在局域网内使用</span><br></pre></td></tr></table></figure></p><p>范例：配置防火墙，将随机端口绑死，实现跨网络<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">配置防火墙，开放NFS服务 </span><br><span class="line">配置NFS使用固定端口 </span><br><span class="line">vim  /etc/sysconfig/nfs </span><br><span class="line">RQUOTAD_PORT=875 </span><br><span class="line">LOCKD_TCPPORT=32803 </span><br><span class="line">LOCKD_UDPPORT=32769 </span><br><span class="line">MOUNTD_PORT=892 </span><br><span class="line">STATD_PORT=662 </span><br><span class="line">STATD_OUTGOING_PORT=2020 </span><br><span class="line">防火墙除开放上述端口，还需开放TCP和UDP的111和2049共4个端</span><br></pre></td></tr></table></figure></p><p><code>范例：实现共享文件夹</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">服务端：</span><br><span class="line"></span><br><span class="line">创建共享的目录</span><br><span class="line">  [root@centos7 ~]<span class="comment"># mkdir /data/a</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># mkdir /data/b</span></span><br><span class="line"></span><br><span class="line">编辑服务器的配置文件（此配置配置文件是系统的基本文件，此文件可以定义共享的目录的策略）</span><br><span class="line">  [root@centos7 ~]<span class="comment"># rpm -qf /etc/exports</span></span><br><span class="line">  setup-2.8.71-9.el7.noarch</span><br><span class="line"></span><br><span class="line">   [root@centos7 ~]<span class="comment"># vim /etc/exports （*代表所有人可以访问）</span></span><br><span class="line">  /data/a  *  </span><br><span class="line">  </span><br><span class="line">  生效配置文件（提示我们没有配置策略使用默认的配置策略，sync直接写磁盘，不放buffer）</span><br><span class="line">  [root@centos7 ~]<span class="comment"># exportfs -r</span></span><br><span class="line">  exportfs: No options <span class="keyword">for</span> /data/a *: suggest *(sync) to avoid warning</span><br><span class="line"></span><br><span class="line">客户端：</span><br><span class="line">  创建挂载点，使用服务端共享的目录进行挂载</span><br><span class="line">  [root@centos7 ~]<span class="comment"># mkdir /data/nfs1 /data/nfs2</span></span><br><span class="line"></span><br><span class="line">  [root@centos7 ~]<span class="comment"># showmount -e 192.168.52.179</span></span><br><span class="line">  Export list <span class="keyword">for</span> 192.168.52.179:</span><br><span class="line">  /data/a *</span><br><span class="line"></span><br><span class="line">  挂载指向服务端的地址</span><br><span class="line">  [root@centos7 ~]<span class="comment"># mount 192.168.52.179:/data/a /data/nfs1</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># df</span></span><br><span class="line">  192.168.52.179:/data/a  20961280   33024  20928256   1% /data/nfs1</span><br><span class="line"></span><br><span class="line">服务端在共享的目录中创建文件，客户端查看是否同步</span><br><span class="line">  [root@centos7 ~]<span class="comment"># touch /data/a/a.txt</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># ls /data/nfs1/</span></span><br><span class="line">  a.txt</span><br><span class="line"></span><br><span class="line">  查看共享默认的权限：只读属性</span><br><span class="line">  [root@centos7 ~]<span class="comment"># touch /data/nfs1/b.txt</span></span><br><span class="line">  touch: cannot touch ‘/data/nfs1/b.txt’: Read-only file system</span><br><span class="line"></span><br><span class="line">  客户端查看挂载属性：默认使用的挂载版本为vers=4</span><br><span class="line">  [root@centos7 ~]<span class="comment"># mount</span></span><br><span class="line">  192.168.52.179:/data/a on /data/nfs1 <span class="built_in">type</span> nfs4 (rw,relatime,vers=4.1,rsize=262144,wsize=262144,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.52.179,local_lock=none,addr=192.168.52.179)</span><br><span class="line"></span><br><span class="line">  客户端挂载指定版本挂载</span><br><span class="line">  [root@centos7 ~]<span class="comment"># mount -o vers=3 192.168.52.179:/data/a /data/nfs1</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># mount | tail -n1</span></span><br><span class="line">  192.168.52.179:/data/a on /data/nfs1 <span class="built_in">type</span> nfs (rw,relatime,vers=3,rsize=262144,wsize=262144,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=192.168.52.179,mountvers=3,mountport=20048,mountproto=udp,local_lock=none,addr=192.168.52.179)</span><br><span class="line"></span><br><span class="line">服务端修改挂载的目录权限</span><br><span class="line">  [root@centos7 ~]<span class="comment"># vim /etc/exports</span></span><br><span class="line"></span><br><span class="line">  /data/a *(sync,ro)        同步，只读</span><br><span class="line">  /data/b *(rw)             可读可写</span><br><span class="line"></span><br><span class="line">  生效并查看权限</span><br><span class="line">  [root@centos7 ~]<span class="comment"># exportfs  -r</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># exportfs  -v  （root_squash压榨root权限   no_all_squash普通用户不压榨）</span></span><br><span class="line">  /data/a       &lt;world&gt;(ro,sync,wdelay,hide,no_subtree_check,sec=sys,secure,root_squash,no_all_squash)</span><br><span class="line">  /data/b       &lt;world&gt;(rw,sync,wdelay,hide,no_subtree_check,sec=sys,secure,root_squash,no_all_squash)</span><br><span class="line"></span><br><span class="line">客户端挂载:挂载也是有读写权限的但是还是不可以创建文件</span><br><span class="line">  [root@centos7 ~]<span class="comment"># mkdir /data/nfs2/</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># mount 192.168.52.179:/data/b /data/nfs2/</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># touch /data/nfs2/a.txt</span></span><br><span class="line">  touch: cannot touch ‘/data/nfs2/a.txt’: Permission denied</span><br><span class="line">  因为客户端访问服务端的共享目录的身份默认的是以nfsnoboby身份</span><br><span class="line"></span><br><span class="line">服务端授权设置acl</span><br><span class="line">  [root@centos7 ~]<span class="comment"># setfacl  -m u:nfsnobody:rwx /data/b/</span></span><br><span class="line"></span><br><span class="line">客户端测试</span><br><span class="line">  [root@centos7 ~]<span class="comment"># touch /data/nfs2/a.txt</span></span><br><span class="line">  [root@centos7 ~]<span class="comment"># ll !$</span></span><br><span class="line">  ll /data/nfs2/a.txt</span><br><span class="line">  -rw-r--r--. 1 nfsnobody nfsnobody 0 Dec 19 20:17 /data/nfs2/a.tx</span><br><span class="line"></span><br><span class="line">客户端使用客户端的普通用户，在服务端共享的目录中创建文件显示权限不足（因为客户端创建的用户为普通用户，如果有同名用户则显示相同的用户，如果没有则显示客户端的用户的id）(映射成id相同的人，普通用户不压榨)</span><br></pre></td></tr></table></figure></p><p><code>导出的文件系统的格式：</code><br>&ensp;&ensp;/dir  主机1(opt1,opt2)   主机2(opt1,opt2)…   </p><p>#开始为注释   </p><p>主机格式：<br>&ensp;&ensp;/单个主机：ipv4，ipv6，FQDN<br>&ensp;&ensp;/IP networks：两种掩码格式均支持<br>&ensp;&ensp;/&ensp;&ensp;/172.18.0.0/255.255.0.0<br>&ensp;&ensp;/&ensp;&ensp;/172.18.0.0/16<br>&ensp;&ensp;/wildcards：主机名通配，例如<em>.magedu.com，IP不可以<br>&ensp;&ensp;/netgroups：NIS域的主机组，@group_name<br>&ensp;&ensp;/anonymous：表示使用</em>通配所有客户端   </p><h2 id="nfs配置文件"><a href="#nfs配置文件" class="headerlink" title="nfs配置文件"></a><code>nfs配置文件</code></h2><p>每个条目指定目录导出到的哪些主机，及相关的权限和选项<br>&ensp;&ensp;默认选项：(ro,sync,root_squash,no_all_squash)<br>&ensp;&ensp;ro,rw 只读和读写 • async 异步，数据变化后不立即写磁盘，性能高<br>&ensp;&ensp;sync（1.0.0后为默认）同步，数据在请求时立即写入共享<br>&ensp;&ensp;no_all_squash （默认）保留共享文件的UID和GID<br>&ensp;&ensp;all_squash 所有远程用户(包括root)都变成nfsnobody<br>&ensp;&ensp;root_squash （默认）远程root映射为nfsnobody,UID为65534，早期版本 是4294967294 (nfsnobody)<br>&ensp;&ensp;no_root_squash 远程root映射成root用户<br>&ensp;&ensp;anonuid和anongid 指明匿名用户映射为特定用户UID和组GID，而非 nfsnobody,可配合all_squash使用   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">不压榨远程root用户的权限</span><br><span class="line">  [root@centos7 ~]<span class="comment"># vim /etc/exports</span></span><br><span class="line">  /data/a *(sync,ro)</span><br><span class="line">  /data/b *(rw,no_root_squash)</span><br><span class="line">  [root@centos7 ~]<span class="comment"># exportfs -v</span></span><br><span class="line">  /data/a       &lt;world&gt;(ro,sync,wdelay,hide,no_subtree_check,sec=sys,secure,root_squash,no_all_squash)</span><br><span class="line">  /data/b       &lt;world&gt;(rw,sync,wdelay,hide,no_subtree_check,sec=sys,secure,root_squash,no_all_squash)</span><br></pre></td></tr></table></figure><h2 id="NFS工具"><a href="#NFS工具" class="headerlink" title="NFS工具"></a>NFS工具</h2><p><code>rpcinfo</code><br>&ensp;&ensp;rpcinfo -p hostname<br>&ensp;&ensp;rpcinfo –s hostname 查看RPC注册程序   </p><p><code>exportfs</code><br>&ensp;&ensp;–v 查看本机所有NFS共享<br>&ensp;&ensp;–r 重读配置文件，并共享目录<br>&ensp;&ensp;–a 输出本机所有共享<br>&ensp;&ensp;–au 停止本机所有共享   </p><p><code>showmount -e hostname</code><br><code>mount.nfs 挂载工具</code><br><code>NFSv4支持通过挂载NFS服务器的共享“根”，从而浏览NFS服务器上的共享 目录列表</code><br>&ensp;&ensp;mount  nfsserver:/    /mnt/nfs   </p><h2 id="客户端NFS挂载"><a href="#客户端NFS挂载" class="headerlink" title="客户端NFS挂载"></a><code>客户端NFS挂载</code></h2><p>基于安全考虑，建议使用nosuid,nodev,noexec挂载选项<br>NFS相关的挂载选项：<br>&ensp;&ensp;fg（默认）前台挂载，bg后台挂载<br>&ensp;&ensp;hard（默认）持续请求，soft 非持续请求<br>&ensp;&ensp;intr 和hard配合，请求可中断<br>&ensp;&ensp;rsize和wsize 一次读和写数据最大字节数，rsize=32768<br>&ensp;&ensp;_netdev 无网络不挂载<br>示例：<br>&ensp;&ensp;mount -o rw,nosuid,fg,hard,intr 172.16.0.1:/testdir /mnt/nfs/<br>开机挂载:/etc/fstab<br>&ensp;&ensp;172.16.0.1:/public   /mnt/nfs   nfs   defaults  0  0   </p><h2 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h2><p>可使用autofs按需要挂载NFS共享，在空闲时自动卸载<br>由autofs包提供<br>系统管理器指定由/etc/auto.master自动挂载器守护进程控制的挂载点<br>自动挂载监视器访问这些目录并按要求挂载文件系统<br>文件系统在失活的指定间隔5分钟后会自动卸载<br>为所有导出到网络中的NFS启用特殊匹配 -host 至“browse”<br>参看帮助：man 5 autofs<br>支持含通配符的目录名<br>&ensp;&ensp;*     server:/export/&amp;   </p><h2 id="直接匹配"><a href="#直接匹配" class="headerlink" title="直接匹配"></a>直接匹配</h2><p>直接匹配包括绝对路径名称<br>不会影响本地目录结构<br>示例：<br>&ensp;&ensp;/etc/auto.master:<br>&ensp;&ensp;/-      /etc/auto.direct   </p><p>&ensp;&ensp;/etc/auto.direct:<br>&ensp;&ensp;/foo    server1:/export/foo<br>&ensp;&ensp;/user/local/  server1:/usr/local   </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NFS服务器&quot;&gt;&lt;a href=&quot;#NFS服务器&quot; class=&quot;headerlink&quot; title=&quot;NFS服务器&quot;&gt;&lt;/a&gt;NFS服务器&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/12/19/nfs服务器/nfs标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="NFS服务器" scheme="https://9527dz.top/categories/NFS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="NFS服务器" scheme="https://9527dz.top/tags/NFS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>linux防火墙</title>
    <link href="https://9527dz.top/2018/03/06/linux%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>https://9527dz.top/2018/03/06/linux防火墙/</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2018-12-23T09:46:29.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux防火墙"><a href="#linux防火墙" class="headerlink" title="linux防火墙"></a>linux防火墙</h1><p><img src="/2018/03/06/linux防火墙/linux防火墙.png" alt=""><br><a id="more"></a></p><h2 id="本章内容"><a href="#本章内容" class="headerlink" title="本章内容"></a>本章内容</h2><h2 id="安全技术"><a href="#安全技术" class="headerlink" title="安全技术"></a>安全技术</h2><ul><li><p>入侵检测与管理系统（Intrusion Detection Systems）：特点是不阻断任何网络 访问，量化、定位来自内外网络的威胁情况，主要以提供报告和事后监督为主， 提供有针对性的指导措施和安全决策依据。一般采用旁路部署方式 </p></li><li><p>入侵防御系统（Intrusion Prevention System）：以透明模式工作，分析数据包 的内容如：溢出攻击、拒绝服务攻击、木马、蠕虫、系统漏洞等进行准确的分析 判断，在判定为攻击行为后立即予以阻断，主动而有效的保护网络的安全，一般 采用在线部署方式 </p></li><li><p>防火墙（ FireWall ）：隔离功能，工作在网络或主机边缘，对进出网络或主机的 数据包基于一定的规则检查，并在匹配某规则时由规则定义的行为进行处理的一 组功能的组件，基本上的实现都是默认情况下关闭所有的通过型访问，只开放允 许访问的策略(防范非授权网络)</p></li></ul><p><code>linux操作系统的空间：内核空间和用户空间</code><br><code>端口：进程地址</code></p><h2 id="防火墙的分类"><a href="#防火墙的分类" class="headerlink" title="防火墙的分类"></a>防火墙的分类</h2><p>防火墙的分类   </p><ul><li>主机防火墙：服务范围为当前主机   <ul><li>网络防火墙：服务范围为防火墙一侧的局域网   </li><li>硬件防火墙：在专用硬件级别实现部分功能的防火墙；另一个部分功能基于软件   </li><li>实现，Checkpoint,NetScreen   </li><li>软件防火墙：运行于通用硬件平台之上的防火墙的应用软件   </li></ul></li><li>网络层防火墙：OSI模型下四层   <ul><li>应用层防火墙/代理服务器：代理网关，OSI模型七层  </li></ul></li></ul><h2 id="网络型防火墙"><a href="#网络型防火墙" class="headerlink" title="网络型防火墙"></a>网络型防火墙</h2><p>网络层防火墙   </p><ul><li>包过滤防火墙   </li><li>网络层对数据包进行选择，选择的依据是系统内设置的过滤逻辑，被称为访问控制 列表（ACL），通过检查数据流中每个数据的源地址，目的地址，所用端口号和协议 状态等因素，或他们的组合来确定是否允许该数据包通过   </li><li>优点：对用户来说透明，处理速度快且易于维护   </li><li>缺点：无法检查应用层数据，如病毒等  </li></ul><p><img src="/2018/03/06/linux防火墙/网路型防火墙.png" alt=""></p><h2 id="应用层防火墙"><a href="#应用层防火墙" class="headerlink" title="应用层防火墙"></a>应用层防火墙</h2><p>应用层防火墙/代理服务型防火墙（Proxy Service）   </p><ul><li>将所有跨越防火墙的网络通信链路分为两段   </li><li>内外网用户的访问都是通过代理服务器上的“链接”来实现   </li><li>优点：在应用层对数据进行检查，比较安全   </li><li>缺点：增加防火墙的负载  </li></ul><p>现实生产环境中所使用的防火墙一般都是二者结合体<br>&ensp;&ensp;即先检查网络数据，通过之后再送到应用层去检查  </p><p><img src="/2018/03/06/linux防火墙/应用层防火墙.png" alt=""></p><h2 id="iptables的基本认识"><a href="#iptables的基本认识" class="headerlink" title="iptables的基本认识"></a>iptables的基本认识</h2><p>Netfilter组件<br>&ensp;&ensp;内核空间，集成在linux内核中<br>&ensp;&ensp;扩展各种网络服务的结构化底层框架<br>&ensp;&ensp;内核中选取五个位置放了五个hook(勾子) function(INPUT、OUTPUT、 FORWARD、PREROUTING、POSTROUTING)，而这五个hook function 向用户开放，用户可以通过一个命令工具（iptables）向其写入规则<br>&ensp;&ensp;由信息过滤表（table）组成，包含控制IP包处理的规则集（rules），规则 被分组放在链（chain）上   </p><p><code>三种报文流向：</code><br><code>netfilter内核级别的框架，，人是不可和内核打交道，使用用户空间的工具iptables，规则编辑器，内核级的系统级别netfilter的调用接口，将写的规则送到内核中的钩子hook上直接生效，直接送到内存中，说明主机关机则规则就没有了，所以想永久生效，可以放在内核启动时初始化时读取到的文件中，或者在或者启动完后，自动执行某个命令或者启动某个服务来调用</code>（即刻生效，但是不会永久有效）<br>路由前：PREROUTING<br>流入：INPUT<br>流出：OUTPUT<br>转发：FORWARD<br>路由后：POSTROUTING    </p><p>&ensp;&ensp;<code>流入本机：PREROUTING --&gt; INPUT--&gt;用户空间进程</code><br>&ensp;&ensp;<code>流出本机：用户空间进程 --&gt;OUTPUT--&gt; POSTROUTING</code><br>&ensp;&ensp;<code>转发：PREROUTING --&gt; FORWARD --&gt; POSTROUTING</code>  </p><p>linux早期没有防火墙的，仿照unix的发行版的OpenBSD，著名的以安全为目标的发行版<br>OpenBSD：纯软件，内核级只负责传输层一下级检测实现，进行工作和防护  </p><p>定制防火墙规则：黑名单、白名单<br>&ensp;&ensp;黑名单适用于知道改拒绝谁<br>&ensp;&ensp;百名单高效的仅授权可以连接的  </p><h2 id="iptables的基本认识-1"><a href="#iptables的基本认识-1" class="headerlink" title="iptables的基本认识"></a>iptables的基本认识</h2><p>防火墙工具<br>iptables<br>&ensp;&ensp;命令行工具，工作在用户空间<br>&ensp;&ensp;用来编写规则，写好的规则被送往netfilter，告诉内核如何去处理信息包   </p><p>firewalld<br>&ensp;&ensp;CentOS 7 引入了新的前端管理工具<br>&ensp;&ensp;管理工具：<br>&ensp;&ensp;&ensp;&ensp;firewall-cmd 命令行<br>&ensp;&ensp;&ensp;&ensp;firewall-config 图形  </p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p><code>ipfw -&gt; ipchains -&gt; iptables -&gt; nftables(rhel8)</code></p><p><code>主机级别防火墙：INPUT---OUTPUTS</code><br><code>网络级别防火墙：FROWARD</code></p><p>NAT：网络地址转换</p><p><code>iptables：四个功能：table</code></p><ul><li>filter:过滤    </li><li>nat:地址转换   </li><li>mangle:报文修改，fwmark</li><li>raw:关闭连接追踪</li></ul><p>Centos：使用iptables的方式</p><ul><li>netfilter:内核框架（framework）</li><li>syscall:系统调用接口，iptables命令行工具，管理规则（服务化的管理工具）</li><li>firewalld:守护进程，firewall-cmd(默认安装，但是尽量不使用)</li></ul><p>禁用firewalld<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl is-enabled firewalld</span></span><br><span class="line">disabled</span><br></pre></td></tr></table></figure></p><p><code>报文流向：</code></p><ul><li>到本机内部：prerouting–&gt;input</li><li>由本机发现：output–&gt;postrouting</li><li>转发：prerouting –&gt;forward–&gt;postrouting</li></ul><p><code>tables&lt;--&gt;CHANS链:</code></p><ul><li>filter: INPUT,PORWARD,OUTPUT</li><li>nat: PREROUTING,INPUT,OUTPUT,POSTROUTING</li><li>mangle: PREROUTING,INPUT,FOREARD,OUTPUT,POSTROUIING</li><li>raw: PREROUTING,OUTPUT</li></ul><p>查看各表中的链的规则：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># iptables -t filter -nL</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br></pre></td></tr></table></figure></p><h2 id="Netfilter表和链对应的关系"><a href="#Netfilter表和链对应的关系" class="headerlink" title="Netfilter表和链对应的关系"></a>Netfilter表和链对应的关系</h2><p><img src="/2018/03/06/linux防火墙/Netfilter表和链对应关系.png" alt=""></p><h2 id="数据包过滤匹配流程"><a href="#数据包过滤匹配流程" class="headerlink" title="数据包过滤匹配流程"></a>数据包过滤匹配流程</h2><p><img src="/2018/03/06/linux防火墙/数据包过滤匹配流程.png" alt=""></p><h2 id="命令的使用格式"><a href="#命令的使用格式" class="headerlink" title="命令的使用格式"></a><code>命令的使用格式</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">SYNOPSIS</span><br><span class="line">       iptables [-t table] &#123;-A|-C|-D&#125; chain rule-specification</span><br><span class="line"></span><br><span class="line">       ip6tables [-t table] &#123;-A|-C|-D&#125; chain rule-specification</span><br><span class="line"></span><br><span class="line">       iptables [-t table] -I chain  [rulenum]  rule-specifica‐</span><br><span class="line">       tion</span><br><span class="line"></span><br><span class="line">       iptables [-t table] -R chain rulenum rule-specification</span><br><span class="line"></span><br><span class="line">       iptables [-t table] -D chain rulenum</span><br><span class="line"></span><br><span class="line">       iptables [-t table] -S [chain [rulenum]]</span><br><span class="line"></span><br><span class="line">       iptables   [-t   table]   &#123;-F|-L|-Z&#125;  [chain  [rulenum]]</span><br><span class="line">       [options...]</span><br><span class="line"></span><br><span class="line">       iptables [-t table] -N chain</span><br><span class="line"></span><br><span class="line">       iptables [-t table] -X [chain]</span><br><span class="line"></span><br><span class="line">       iptables [-t table] -P chain target</span><br><span class="line"></span><br><span class="line">       iptables [-t table] -E old-chain-name new-chain-name</span><br><span class="line"></span><br><span class="line">       rule-specification = [matches...] [target]</span><br><span class="line"></span><br><span class="line">       match = -m matchname [per-match-options]</span><br><span class="line"></span><br><span class="line">       target = -j targetname [per-target-options]</span><br></pre></td></tr></table></figure><p><code>iptables [-t tables,如果不指定则代表使用默认的filter] SUBCMMAND子命令  chain [rulenum规则号码] [rule-spce]</code> </p><p><code>rule-specification=[matches匹配条件][-j target处理动作]</code></p><p>CRUD:增删改查（指定多个规则隐含的是与关系，符合所有的条件才是满足定义的条件的）</p><p>子命令：</p><ul><li>管理规则：<ul><li>-A ：append,尾部追加</li><li>-I ：inset,插入</li><li>-D ：删除</li><li>-R ：替换</li></ul></li><li>管理链<ul><li>-N ：new,新增加一条链</li><li>-X : 删除一条自定义、空的，不可有规则、引用计数为0的链</li><li>-E : rename 改自定义引用技术为0的链</li><li>-P ： policy,设置链的默认策略</li><li>-F ： flush,清空</li><li>-Z ： zero,置零，计数器归零<ul><li>iptables的每条规则和每个链都有专用的两个计数器：pkts规则匹配到的报个数计数器，bytes报文体积计数器kbytes</li></ul></li></ul></li><li>查看 -L<ul><li>-n : 以数字显示主机的地址和端口</li><li>-v : -vv : 显示详细的信息</li><li>-x : exact，避免单位的换算显示精准的信息</li><li>–line-numbers : 显示行号</li></ul></li><li>链<ul><li>内置链</li><li>自定义链</li></ul></li><li><p>匹配条件</p><ul><li>检查报文<ul><li>TCP或UDP首部：源端口，目标端口<ul><li>FSM:有限状态机</li></ul></li><li>IP首部：sip,dip（源ip和目标ip）</li><li>MAC首部:MAC地址</li></ul></li><li><p>匹配条件</p><ul><li>通用匹配<ul><li>[!] -s,–sip,–spurce-ip:报文的源地址,其值可以是ip或者是网络地址，不可使离散的网络（!为取反）</li><li>[!] -d,–dip,–destination:报文的目标地址</li><li>-i,–in-interface : 表示从哪个网卡进入（PREROUTING，INPUT,FORWARD）</li><li>-o,–out-interface : 表示从哪个网卡出去(,OUTPUT,POSTRUTING,FORWARD)</li><li>-p protocol:四层协议，tcp,udp,icmp</li></ul></li><li><p>扩展匹配</p><ul><li><p>隐式扩展</p><ul><li>-p tcp :隐含 -m tcp<ul><li>[!] –source-port ,–sport port [:port] : 匹配报文中的传输层的源端口,连续的端口范围，22，21：22</li><li>[!] –destination-port ,–dport poet [:port] :匹配报文中传输层的目标端口</li><li>[!] –tcp-flags mask comp<ul><li>SYN,ACK,RST,，FIN,URG,PSH</li><li>mask:需要检查的标志位列表，以逗号分隔；</li><li>comp:必须为1的标志列表，余下的出现在mask列表中的标志位则必须为0</li><li>范例:-tcp-flags SYN,ACK,FIN,RST   SYN   表示检查报文tcp首部，syn为1，其余的为0，代表只检查源报文来的第一次握手</li></ul></li><li>[!] –syn : tcp发送报文三次握手的第一次（相当于：–tcp-flags SYN,SCK,FINRST  SYN）</li></ul></li><li>-p udp : 隐含了-m udp:<ul><li>[!] –source-port ,–sport port[:port] :匹配报文中传输层的源端口</li><li>[!] –destination-port,–dport port[:port] :匹配报文中传输层的目标端口</li></ul></li><li>-p icmp(互联网控制协议) ： 隐含了-m udp:<ul><li>[!] –lcmp-type {type[/code]|typename}<ul><li>8 : echo-request回显请求</li><li>0 : echo-reply  回显应答</li></ul></li></ul></li></ul></li><li><p>显示扩展 ； 必须使用-m选项指出matchname(模块),有的match可能存在专用的选项</p><ul><li>1.matchname扩展<br>  以离散的或连续的方式定义多端口匹配条件<ul><li>[!] –source-ports,–sports port[,port|,port:port]…:指定多个源端口,逗号隔开最多制定15个</li><li>[!] –destnation-ports,–dports port[,port|,port:port]…:制定多个目标端口</li><li>[!] –ports port[,port|,port:port]…:指定多个端口</li></ul></li><li>2.iprange扩展<br>  以连续的ip地址范围指明连续的多地址匹配条件</li><li>3.set扩展<br>  依赖于ipset命令行工具<ul><li>set存在的类型：<ul><li>hash:net  : 网络地址的集合</li><li>hash:ip   ：目标ip地址</li></ul></li><li>使用方式：<ul><li>先创建集合 ：ipset create NAMETYPE</li><li>向集合中添加元素 ：ipset add NAMETYPE</li></ul></li></ul></li><li>4.string扩展<br>  对报文的应用层数据做字符串匹配检测<ul><li>[!] –string pattern : 要检测的字符串模式</li><li>[!] –hex-string pattern : 要检测的字符串模式，16进制编码</li><li>–algo {bm|kmp}</li></ul></li><li>5.time扩展<br>  根据报文到达的时间与指定的时间范围进行匹配度检测<ul><li>–datestart YYYY[-MM[-DD]Thh[:mm]:ss]]]]] : 起始日期时间</li><li>–datestop YYYY[-MM[-DD]Thh[:mm]:ss]]]]] : 结束日期时间</li><li>–timestart hh:mm[:ss]</li><li>–timestop  hh:mm[:ss]</li><li>[!] –monthdays day[,day…] ： 每月几号的时间</li><li>[!] –weekdays day[,day…]  ： 每周几的时间</li><li>–kerneltz : 使用内核中的配置的时区</li></ul></li><li><p>6、connlimit扩展<br>  根据每客户端IP做并发连接数匹配；    </p><ul><li>–connlimit-upto n：连接数数量小于等于n，此时应该允许；</li><li>–connlimit-above n：连接数数量大于n，此时应该拒绝；            <ul><li>~]# iptables -A INPUT -d 172.16.100.67 -p tcp –dport 23 -m connlimit –connlimit-upto 2 -j ACCEPT</li></ul></li></ul></li><li><p>7、limit扩展<br>  基于收发报文的速率进行匹配；        </p><ul><li>–limit rate[/second|/minute|/hour|/day]：平均速率</li><li>–limit-burst number：峰值速率</li></ul></li><li><p>8、state扩展<br>  状态检测；连接追踪机制（conntrack）；</p><ul><li>INVALID：无法识别的状态； </li><li>ESTABLISHED：已建立的连接；</li><li>NEW：新连接； </li><li>RELATED：相关联的连接；</li><li><p>UNTRACKED：未追踪的连接；</p><ul><li><p>nf_conntrack内核模块；</p><ul><li>追踪到的连接：/proc/net/nf_conntrack文件中；</li></ul></li><li><p>能追踪的最大连接数量定义在：/proc/sys/net/nf_conntrack_max</p><ul><li>此值可自行定义，建议必要时调整到足够大；</li></ul></li><li><p>不同的协议的连接追踪的时长：</p><ul><li>/proc/sys/net/netfilter/</li></ul></li><li><p>[!] –state STATE</p></li><li><p>如何开放被模式的ftp服务： </p><ul><li>(1) 装载追踪ftp协议的模块；<ul><li># modprobe nf_conntrack_ftp</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>- (2) 放行命令连接    - ~] # iptables -A INPUT -d 172.16.100.67 -p tcp -m state --state ESTABLISHED -j ACCEPT    - ~] # iptables -A INPUT -d 172.16.100.67 -p tcp --dport 21 -m state --state NEW -j ACCEPT- (3) 放行数据连接    - ~] iptables -A INPUT -d 172.16.100.67 -p tcp -m state --state RELATED -j ACCEPT</code></pre><ul><li><p>处理动作target</p><ul><li>DROP : 丢弃</li><li>REJECT : 拒绝</li><li>ACCEPT :  接受</li><li>RETURN : 无匹配的链的时候自动调回</li><li>REDIRECT : 重定向</li><li>SANT : 源地址转换</li><li>DNAT: 目标地址转换</li><li>MASQUERADE : 地址伪装</li><li>LOG : 日志</li><li>自定义链</li></ul></li><li><p>管理机制 ： 两不兼容，最好不要并行</p><ul><li>firewalld : firewalld-cmd</li><li>iptables ： iptables-save,iptables-restore<ul><li>yum install iptables-services<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">每一个内核就是一个扩展  xt开头</span><br><span class="line">[root@centos7 ~]<span class="comment"># cd /lib/modules/3.10.0-862.el7.x86_64/kernel/net/netfilter/</span></span><br><span class="line">[root@centos7 netfilter]<span class="comment"># ls</span></span><br><span class="line">ipset                          xt_connlimit.ko.xz</span><br><span class="line">ipvs                           xt_connmark.ko.xz</span><br><span class="line">nf_conntrack_amanda.ko.xz      xt_CONNSECMARK.ko.xz</span><br><span class="line">nf_conntrack_broadcast.ko.xz   xt_conntrack.ko.xz</span><br><span class="line">nf_conntrack_ftp.ko.xz         xt_cpu.ko.xz</span><br><span class="line">nf_conntrack_h323.ko.xz        xt_CT.ko.xz</span><br><span class="line">nf_conntrack_irc.ko.xz         xt_dccp.ko.xz</span><br><span class="line">nf_conntrack.ko.xz             xt_devgroup.ko.xz</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">查看某表中的规则</span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -t filter -vnL</span></span><br><span class="line"></span><br><span class="line">将某表中的INPUT链计数器置零</span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -t filter -Z INPUT</span></span><br><span class="line"></span><br><span class="line">规则显示详情</span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -t filter -vnL</span></span><br><span class="line"> pkts(报文数) bytes(字节数) target（目标）     prot（协议） opt（选项） <span class="keyword">in</span>（报文流入的接口）     out（报文流出的接口）     <span class="built_in">source</span>（源地址）               destination（目标地址）         </span><br><span class="line"></span><br><span class="line">显示iptables表的本文和自己的精确的显示以及行号的显示</span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -t filter -vxnL --line-numbers</span></span><br><span class="line"></span><br><span class="line">-N 自定义规则链（见名知意）</span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -N web_rules</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -vnL</span></span><br><span class="line">Chain web_rules (0 references) 0个引用</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination   </span><br><span class="line"></span><br><span class="line">-E 修改自定义的规则链名称（改名通常适用于修改自定义规则连0引用的规则链）</span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -E web_rules cifs_rules</span></span><br><span class="line"></span><br><span class="line">-X 删除自定义的规则链：计数为0，若不为0 可以将主链中的调用删除再进行清空删除</span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -F cifs_rules</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables -X cifs_rules</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">内部规则：</span><br><span class="line">    Chain OUTPUT (policy ACCEPT 1 packets, 356 bytes)具有规则链和接收器</span><br></pre></td></tr></table></figure><p>范例：使得iptables定义的规则永久有效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">命令：内核中定义的规则标准输出至屏幕</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables-save</span></span><br><span class="line">    将标准的输入重定向到文件中</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables-save &gt; /data/iptables.txt</span></span><br><span class="line">    模拟清空防火墙规则</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -F</span></span><br><span class="line">    还原防火墙的规则</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables-restore /data/iptables.txt</span></span><br></pre></td></tr></table></figure></p><p>范例：如何将定义的防火墙规则开机自动生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables-services -y</span><br><span class="line"></span><br><span class="line">服务方式管理的iptables</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># /usr/libexec/iptables/iptables.init restrt</span></span><br><span class="line">Usage: iptables &#123;start|stop|reload|restart|condrestart|status|panic|save&#125;</span><br></pre></td></tr></table></figure></p><h2 id="显示扩展"><a href="#显示扩展" class="headerlink" title="显示扩展"></a>显示扩展</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">1：multiport显示扩展：匹配多个源、目标端口</span><br><span class="line">    定义入栈规则</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I INPUT -p tcp -m multiport --dports 21:22,80,139,445</span></span><br><span class="line">    定义出栈规则</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I OUTPUT -p tcp -m multiport --sports 21:22,80,139,445</span></span><br><span class="line"></span><br><span class="line">    删除入栈规则的第<span class="comment">#条</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -D INPUT #</span></span><br><span class="line"></span><br><span class="line">2：iprange扩展：匹配ip地址的连续范围（仅开放给有限的地址去怕ping）</span><br><span class="line">    入栈</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I INPUT 4 -p icmp --icmp-type 8 -m iprange --src-range 192.168.10.10-192.168.10.20 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line">    出栈</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I OUTPUT 4 -p icmp --icmp-type 0 -m iprange --dst-range 192.168.10.10-192.168.10.20 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line">3：<span class="built_in">set</span>扩展:非连续的ip地址，人为定义ip地址集后续调用</span><br><span class="line">    安装</span><br><span class="line">    [root@centos7 ~]<span class="comment"># yum install ipset -y</span></span><br><span class="line">    查看帮助用法</span><br><span class="line">    ipset -h </span><br><span class="line"></span><br><span class="line">    创建集合ip哈希表</span><br><span class="line">    [root@centos7 ~]<span class="comment"># ipset create pinghosts hash:ip  (如果为多个网段hash:net)</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># ipset list</span></span><br><span class="line">    Name: pinghosts</span><br><span class="line">    Type: <span class="built_in">hash</span>:ip</span><br><span class="line">    Revision: 1</span><br><span class="line">    Header: family inet hashsize 1024 maxelem 65536</span><br><span class="line">    Size <span class="keyword">in</span> memory: 16528</span><br><span class="line">    References: 0</span><br><span class="line">    Members:</span><br><span class="line"></span><br><span class="line">    向集合中添加允许的主机地址</span><br><span class="line">    [root@centos7 ~]<span class="comment"># ipset add pinghosts 192.168.10.10</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># ipset add pinghosts 192.168.10.20</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># ipset list</span></span><br><span class="line">    Name: pinghosts</span><br><span class="line">    Type: <span class="built_in">hash</span>:ip</span><br><span class="line">    Revision: 1</span><br><span class="line">    Header: family inet hashsize 1024 maxelem 65536</span><br><span class="line">    Size <span class="keyword">in</span> memory: 16560</span><br><span class="line">    References: 0</span><br><span class="line">    Members:</span><br><span class="line">    192.168.10.20</span><br><span class="line">    192.168.10.10</span><br><span class="line"></span><br><span class="line">    设置规则允许集合表中的主机对本机进行ping</span><br><span class="line">    入栈</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I INPUT 4 -p icmp --icmp-type 8 -m set --match-set pinghosts src -j ACCEPT</span></span><br><span class="line">    出栈</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I OUTPUT 4 -p icmp --icmp-type 0 -m set --match-set pinghosts dst -j ACCEPT</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -vnL</span></span><br><span class="line"></span><br><span class="line">4：string扩展：对报文的应用层数据做字符串匹配检测</span><br><span class="line">    假设web网页中的敏感字体进行字符串匹配检测</span><br><span class="line"></span><br><span class="line">    入栈</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I INPUT -m string --string "敏感字" --algo bm -j REJECT</span></span><br><span class="line">    出栈</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I OUTPUT -m srting --string "敏感字" --algo bm -j REJECT</span></span><br><span class="line"></span><br><span class="line">多个扩展可一起使用，与的关系，满足所有的条件</span><br><span class="line">time扩展 ： 根据报文到达的时间与指定的时间范围进行匹配度检测</span><br><span class="line"></span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I INPUT 5 -p icmp --icmp-type 8 -m set --match-set pinghosts src -m time --timestart 08:00:00 --timestop 14:00:00 --weekdays Tue,Thu,Sat --kerneltz -j ACCEPT</span></span><br><span class="line"></span><br><span class="line">5：connlimit扩展：并发连接数限制</span><br><span class="line">    根据每个客户端ip做并发连接数数量匹配，可防止CC攻击。</span><br><span class="line">    --connlimit-upto <span class="comment"># :连接的数量小于等于#时匹配</span></span><br><span class="line">    --connlimit-above <span class="comment"># : 连接的数量大于#时匹配</span></span><br><span class="line">    通常分别与默认的拒绝或允许策略配合使用（默认的意思并非默认规则，而是定义的规则已经有允许，在此基础上做连接数量限制，定义在已经有的允许的规则之前）</span><br><span class="line"></span><br><span class="line">    限制ssh连接本机的连接数限制</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I INPUT 2 -p tcp --dport 22 -m connlimit --connlimit-above 2 -j REJECT</span></span><br><span class="line"></span><br><span class="line">6：<span class="built_in">limit</span>扩展</span><br><span class="line">    基于收发报文的速度做匹配(报文传输速率限制)</span><br><span class="line">    令牌桶过滤器</span><br><span class="line">    --<span class="built_in">limit</span> <span class="comment"># [/second|/minute|/hour|/day]</span></span><br><span class="line">    --<span class="built_in">limit</span>-burst number</span><br><span class="line"></span><br><span class="line">    允许别人ping自己仅能按照特定的速率进行ping</span><br><span class="line">    出去的速率无需控制，仅控制本机进来的速率</span><br><span class="line">    限制ping速率为每3秒钟一个，限制突发速率为5个</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I INPUT -p icmp --icmmp-type 8 -s 192.168.52.177 -d 192.168.52.182 -m limit --limit 20/minute --limit-burst 5 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line">7：state状态扩展</span><br><span class="line">    根据“连续追踪机制”去检查连接的状态，较消耗资源</span><br><span class="line">    - conntrack机制：追踪本机上的请求和响应之间的关系</span><br><span class="line">        状态有如下几种：</span><br><span class="line">            - NEW：新发出的请求，连接追踪信息库中不存在此链接的相关信息条目，因此，将其识别为第一次触发的请求（新人）</span><br><span class="line">            - ESTABLISHED:NEW状态之后，连接追踪信息库中为其建立的条目失效之前期间内所进行的通讯状态（熟人）</span><br><span class="line">            - RELATED:新发起的但与已有连接相关的连接，如：ftp协议中的数据连接与命令连接之间的关系（熟人的熟人）</span><br><span class="line">            - INVALID:无效的连接，如flag标记不正确（识别不出的连接）</span><br><span class="line">            - UNTRACKED:未进行的追踪的连接，如raw表中关闭追踪（未追踪的）</span><br><span class="line">            - SNAT:源地址转换</span><br><span class="line">            - DNAT:目标地址转换</span><br><span class="line">    示例： </span><br><span class="line">    iptables -A INPUT -d 172.16.1.10 -p tcp -m multiport --dports 22,80 -m state --state NEW,ESTABLISHED -j ACCEPT </span><br><span class="line">    iptables -A OUTPUT -s 172.16.1.10 -p tcp -m multiport --sports 22,80 -m state --state ESTABLISHED -j ACCEPT </span><br><span class="line">    </span><br><span class="line">    已经追踪到的并记录下来的连接信息库 </span><br><span class="line">    /proc/net/nf_conntrack </span><br><span class="line">    调整连接追踪功能所能够容纳的最大连接数量 </span><br><span class="line"></span><br><span class="line">    /proc/sys/net/nf_conntrack_max </span><br><span class="line">        永久生效修改的所能够容纳的最大的连接数量</span><br><span class="line">        [root@centos7 ~]<span class="comment"># vim /etc/sysctl.d/nf_conntrack_max.conf</span></span><br><span class="line">        net.nf_conntrack_max = 10000000</span><br><span class="line">        [root@centos7 ~]<span class="comment"># sysctl -p /etc/sysctl.d/nf_conntrack_max.conf</span></span><br><span class="line">        net.nf_conntrack_max = 100000</span><br><span class="line">        [root@centos7 ~]<span class="comment"># cat /proc/sys/net/nf_conntrack_max </span></span><br><span class="line">        100000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    不同的协议的连接追踪时长 /proc/sys/net/netfilter/ </span><br><span class="line">    注意：CentOS7 需要加载模块： modprobe nf_conntrack</span><br><span class="line"></span><br><span class="line">范例：</span><br><span class="line">    允许所有已经连结果的请求入栈出栈</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -A INPUT  -m state --state ESTABLISHED -j ACCEPT</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -A OUTPUT  -m state --state ESTABLISHED -j ACCEPT</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -A INPUT  -p tcp -m multiport --dports 21:22,80 -m state --state NEW -j ACCEPT</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -A OUTPUT ! -i lo -j REJECT</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -A OUTPUT ! -o lo -j REJECT</span></span><br><span class="line"></span><br><span class="line">    服务端开放客户端ftp服务，客户端主动访问服务端，服务端数据端口为随机端口，在客户端添加规则</span><br><span class="line">    [root@centos7 ~]<span class="comment"># iptables -I INPUT 2 -p tcp -m state --state RELATED -j ACCEPT</span></span><br><span class="line">    实现ftp RELATED 需要手动载入一个模块</span><br><span class="line">    [root@centos7 ~]<span class="comment"># modprobe nf_conntrack</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># modinfo nf_conntrack</span></span><br><span class="line">    [root@centos7 ~]<span class="comment"># lsmod | grep nf_conntrack</span></span><br><span class="line">        手动载入的模块，重启后失效，大量的ftp服务就会被肆意的放行，如何让ftp连接状态iptabless开机继续生效（自动装入模块）</span><br><span class="line">        方法1：</span><br><span class="line">        [root@centos7 ~]<span class="comment"># vim /etc/sysconfig/iptables-config </span></span><br><span class="line">        第六行</span><br><span class="line">        IPTABLES_MODULES=<span class="string">"nf-conntrack_ftp"</span></span><br><span class="line">        方法2：</span><br><span class="line">        [root@centos7 ~]<span class="comment"># vim /etc/sysconfig/modules/nf_conntrack.mudules</span></span><br><span class="line">        <span class="comment">#!/bin/bash</span></span><br><span class="line">        /sbin/modprobe nf_conntrack_ftp</span><br><span class="line">        [root@centos7 ~]<span class="comment"># chmod +x /etc/sysconfig/modules/nf_conntrack.mudules </span></span><br><span class="line">        前提是已经安装启动iptables.services</span><br><span class="line">        [root@centos7 ~]<span class="comment"># systemctl restart iptables</span></span><br><span class="line">        [root@centos7 ~]<span class="comment"># systemctl enable iptables</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux防火墙&quot;&gt;&lt;a href=&quot;#linux防火墙&quot; class=&quot;headerlink&quot; title=&quot;linux防火墙&quot;&gt;&lt;/a&gt;linux防火墙&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/03/06/linux防火墙/linux防火墙.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iptables防火墙" scheme="https://9527dz.top/categories/iptables%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
    
      <category term="iptables防火墙" scheme="https://9527dz.top/tags/iptables%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>旧事-大好河山</title>
    <link href="https://9527dz.top/2017/10/01/%E6%97%A7%E4%BA%8B-%E5%A4%A7%E5%A5%BD%E6%B2%B3%E5%B1%B1/"/>
    <id>https://9527dz.top/2017/10/01/旧事-大好河山/</id>
    <published>2017-10-01T00:00:00.000Z</published>
    <updated>2018-12-17T02:37:16.866Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="hbe-security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 输入密码,PC:Enter查看,Phone:输入法换行查看. " /> <label for="pass"> 输入密码,PC:Enter查看,Phone:输入法换行查看. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1++D6ApL82CLHPpULTrDMS7TQ5CSPTpFWA7hemEL/kGmew6qup0FO/0mj71WvoEzgINo5eeyMLzlKNoPePd/CrfjUEFTlEUahn/vADmmmxiFQRROqt4caFAV0TJU5XKljZcWf4z7SNEh4hQLCDqmgML1+cZo6sQaEkTYCDPHN8MXpYNpCdGaJ8E+JekqjjmlrE4KpRGBJrbf0qtvfUGgSq+NJPCAsx7BDWoIttLbowOrP/hCzzOLJUlTdEmUyBEr0MyeFRNxvVxKARL/HEy5WFQkPG31NMRkCdjiDfZU4m17Gt/vGZe2xxqRu066wmQHZD+dhaSEC5xWKrEOTfBf3NXCfNdngJWRSYAzsydGpWdadbhiLCE1kkZ </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      &lt;font size=3 color=&quot;#FF0000&quot;&gt;私密文章，需要输入密码.&lt;/font&gt;&lt;/br&gt;
    
    </summary>
    
      <category term="旧事，杂记" scheme="https://9527dz.top/categories/%E6%97%A7%E4%BA%8B%EF%BC%8C%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="旧事，杂记" scheme="https://9527dz.top/tags/%E6%97%A7%E4%BA%8B%EF%BC%8C%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
