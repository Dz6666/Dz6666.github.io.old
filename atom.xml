<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dai zhe&#39;s notes</title>
  
  <subtitle>Just Du It</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://daizhe.net.cn/"/>
  <updated>2019-03-16T13:20:46.659Z</updated>
  <id>https://daizhe.net.cn/</id>
  
  <author>
    <name>哆啦A梦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ansible常用模块及实验</title>
    <link href="https://daizhe.net.cn/2019/03/16/ansible%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%8F%8A%E5%AE%9E%E9%AA%8C/"/>
    <id>https://daizhe.net.cn/2019/03/16/ansible常用模块及实验/</id>
    <published>2019-03-15T16:12:18.097Z</published>
    <updated>2019-03-16T13:20:46.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ansible工具概述"><a href="#ansible工具概述" class="headerlink" title="ansible工具概述"></a>ansible工具概述</h1><p><img src="/2019/03/16/ansible常用模块及实验/标题.png" alt=""><br><a id="more"></a></p><h2 id="一、ansible常用模块"><a href="#一、ansible常用模块" class="headerlink" title="一、ansible常用模块"></a>一、<code>ansible常用模块</code></h2><h3 id="ping-模块检查被管理机状态"><a href="#ping-模块检查被管理机状态" class="headerlink" title="ping 模块检查被管理机状态"></a><code>ping 模块检查被管理机状态</code></h3><p><code>范例：简述ping模块，及实验模块基于key验证</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">列出某个模块的说明 </span><br><span class="line"></span><br><span class="line">ping模块:测试主机清单中的ip的主机是否于堡垒机知否可以正常通讯</span><br><span class="line">查看ping模块的说明</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-doc ping</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -m ping（第一次登陆基于ssh验证）</span></span><br><span class="line"></span><br><span class="line">想要使得主机取消ssh连接的账户密码验证修改ansible的配置文件</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># vim /etc/ansible/ansible.cfg</span></span><br><span class="line"><span class="comment">#uncomment this to disable SSH key host checking</span></span><br><span class="line">71 host_key_checking = False</span><br><span class="line"></span><br><span class="line">再次执行ping模块（错误原为为ansible默认为key验证）</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -m ping</span></span><br><span class="line">192.168.131.129 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    想要解决错误可是使用-k选项 提示ssh连接输入连接用户的密码</span><br><span class="line">    [root@ansible ~]<span class="comment"># ansible 192.168.131.129 -m ping -k</span></span><br><span class="line">      SSH password: root口令</span><br><span class="line">          192.168.131.129 | SUCCESS =&gt; &#123;</span><br><span class="line">         <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">         <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">-----------</span><br><span class="line"></span><br><span class="line">    脚本实现基于key验证，避免每次输口令，决绝对端主机口令不一致的现象</span><br><span class="line"></span><br><span class="line">    主机清单：</span><br><span class="line">    [root@ansible ~]<span class="comment"># cat iplist.sh </span></span><br><span class="line">    192.168.131.129</span><br><span class="line">    192.168.131.173</span><br><span class="line">    192.168.131.185</span><br><span class="line"></span><br><span class="line">    安装expect</span><br><span class="line">    [root@ansible ~]<span class="comment"># yum install expect -y</span></span><br><span class="line"></span><br><span class="line">    脚本：（前提是各主机密码统一设置为123456）</span><br><span class="line">    [root@ansible ~]<span class="comment"># cat keyssh.sh </span></span><br><span class="line">     <span class="comment">#!/bin/bash</span></span><br><span class="line">     user=root</span><br><span class="line">     ssh-keygen -t rsa -P <span class="string">""</span> -f /root/.ssh/id_rsa</span><br><span class="line">     <span class="keyword">while</span> <span class="built_in">read</span> line ;<span class="keyword">do</span></span><br><span class="line">     ip=<span class="variable">$line</span></span><br><span class="line">     password=123456</span><br><span class="line">     expect &lt;&lt; EOF</span><br><span class="line">     <span class="built_in">set</span> timeout 10</span><br><span class="line">     spawn ssh-copy-id -i /root/.ssh/id_rsa.pub <span class="variable">$user</span>@<span class="variable">$ip</span></span><br><span class="line">     expect &#123;</span><br><span class="line">       <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\n"</span>;exp_continue &#125;</span><br><span class="line">       <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$password</span>\n"</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     expect eof</span><br><span class="line">     EOF</span><br><span class="line">     <span class="keyword">done</span> &lt; iplist.sh</span><br><span class="line"></span><br><span class="line">    [root@ansible ~]<span class="comment"># bash keyssh.sh </span></span><br><span class="line">    </span><br><span class="line">    ping模块基于key验证验证堡垒机是否与被控制端是否正常通讯</span><br><span class="line"></span><br><span class="line">    [root@ansible ~]<span class="comment"># ansible all -m ping</span></span><br><span class="line">      192.168.131.129 | SUCCESS =&gt; &#123;</span><br><span class="line">         <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">         <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">      &#125;</span><br><span class="line">      192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">         <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">         <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">      &#125;</span><br><span class="line">      192.168.131.185 | SUCCESS =&gt; &#123;</span><br><span class="line">         <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">         <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Command：在远程主机执行命令，默认模块，可忽略-m选项"><a href="#Command：在远程主机执行命令，默认模块，可忽略-m选项" class="headerlink" title="Command：在远程主机执行命令，默认模块，可忽略-m选项"></a><code>Command：在远程主机执行命令，默认模块，可忽略-m选项</code></h3><ul><li>ansible srvs -m command -a ‘service vsftpd start’  </li><li>ansible srvs -m command -a ‘echo magedu |passwd –stdin wang’   不成功 </li><li>此命令不支持 $VARNAME &lt;  &gt;  |  ; &amp; 等，用shell模块实现</li></ul><p>范例：ansible常用模块Command ：在远程主机执行linux命令（默认模块）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">在centos6被控制主机上有一个文件</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]<span class="comment"># ls</span></span><br><span class="line">a.txt    </span><br><span class="line"></span><br><span class="line">在控制机上使用<span class="built_in">command</span>模块删除centos6上的文件 (系统模块名称可省略)</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -m command -a 'rm -f /root/a.txt'</span></span><br><span class="line"> [WARNING]: Consider using file module with state=absent rather than running rm</span><br><span class="line"></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line">查看所有被控制机上的主机列表</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m command -a 'getent passwd'</span></span><br><span class="line">模块名称可省略</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -a 'getent passwd'</span></span><br><span class="line"></span><br><span class="line">在centos6被控制机上创建用户</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -a 'useradd user11'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -a 'getent passwd user11'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">user11:x:501:501::/home/user11:/bin/bash</span><br></pre></td></tr></table></figure></p><h3 id="Shell：和command相似，用shell执行命令"><a href="#Shell：和command相似，用shell执行命令" class="headerlink" title="Shell：和command相似，用shell执行命令"></a><code>Shell：和command相似，用shell执行命令</code></h3><ul><li>ansible srv -m shell -a ‘echo magedu |passwd –stdin wang’  </li><li>调用bash执行命令 类似 cat /tmp/stanley.md | awk -F‘|’ ‘{print $1,$2}’ &amp;&gt; /tmp/example.txt 这些复杂命令，即使使用shell也可能会失败，解决办 法：写到脚本时，copy到远程，执行，再把需要的结果拉回执行命令的机器 </li></ul><p>范例：ansible常用模块shell ：在远程主机执行linux命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">查看shell模块帮助</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-doc -s shell</span></span><br><span class="line"></span><br><span class="line">在centos6上使用shell模块改用户的口令</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -m shell -a 'echo daizhe | passwd --stdin daizhe'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Changing password <span class="keyword">for</span> user daizhe.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br><span class="line">显示所有被控制端的主机名</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m shell -a 'echo $HOSTNAME'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">centos6.com</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">redhat.com</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">redhat7.com</span><br><span class="line"></span><br><span class="line">将所有被控制机的/data目录下的所有文件删除 <span class="built_in">chdir</span></span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m shell -a 'chdir=/data rm -rf *'</span></span><br><span class="line"> [WARNING]: Consider using file module with state=absent rather than running rm</span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m shell -a 'chdir=/data ls'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ansible默认模块为<span class="built_in">command</span> ，shell 模块比较好用我们可以将shell模块设置为默认模块，编辑ansible配置文件</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># vim /etc/ansible/ansible.cfg </span></span><br><span class="line">module_name = shell</span><br></pre></td></tr></table></figure></p><h3 id="Script：运行脚本"><a href="#Script：运行脚本" class="headerlink" title="Script：运行脚本"></a><code>Script：运行脚本</code></h3><ul><li>-a “/PATH/TO/SCRIPT_FILE“ </li><li>snsible websrvs  -m script -a f1.sh </li></ul><p>范例：使用Script 脚本模块 实现将控制端的脚本在所有被控制端的主机上执行一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">查看帮助</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-doc -s script</span></span><br><span class="line">- name: Runs a <span class="built_in">local</span> script on a remote node after transferring it</span><br><span class="line"></span><br><span class="line">脚本：将所有被控制的主机上将selinux修改为disabled</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># cat selinux.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sed -i <span class="string">'s/^SELINUX=.*/SELINUX=disabled/'</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m script -a "/root/selinux.sh"</span></span><br><span class="line">192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">"Shared connection to 192.168.131.173 closed.\r\n"</span>, </span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"stdout_lines"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">192.168.131.129 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">"Shared connection to 192.168.131.129 closed.\r\n"</span>, </span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"stdout_lines"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">192.168.131.185 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">"Shared connection to 192.168.131.185 closed.\r\n"</span>, </span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"stdout_lines"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">shell模块和script模块中都存在的模块用法</span><br><span class="line">creates:如果已经存在此步骤不执行</span><br><span class="line">removes:如果存在，此步骤执行</span><br><span class="line"></span><br><span class="line">fstab文件存在，则后续命令则不执行</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a "creates=/etc/fstab rm -rf /data/*"</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /etc/fstab exists</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /etc/fstab exists</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /etc/fstab exists</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a "removes=/etc/fstab rm -rf /data/*"</span></span><br><span class="line"> [WARNING]: Consider using file module with state=absent rather than running rm</span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br></pre></td></tr></table></figure><p><code>Copy:从服务器复制文件到客户端</code> </p><ul><li>ansible srv -m copy -a “src=/root/f1.sh dest=/tmp/f2.sh    owner=wang  mode=600 backup=yes”     <ul><li>如目标存在，默认覆盖，此处指定先备份 </li></ul></li><li>ansible srv -m copy -a “content=‘test content\n’ dest=/tmp/f1.txt”  <ul><li>利用内容，直接生成目标文件 </li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible-doc -s copy</span></span><br><span class="line">      dest:   到目标文件</span><br><span class="line">      src:    本地源文件 </span><br><span class="line">      源时文件夹，目标也是文件夹</span><br><span class="line">      mode:    设置权限</span><br><span class="line">      group:   修改所属组</span><br><span class="line">      backup:  如果目标主机存在了此文件，则先进行备份再覆盖</span><br><span class="line">      content: 可以代替src,本身含义为内容，src文件，content: 文件内容</span><br><span class="line">      owner:   修改所有者</span><br></pre></td></tr></table></figure><p><code>范例：copy模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">将控制机上的fstab文件保留原名，发送到所有被控制端的主机上，并修改文件的所有者，并设置权限</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m copy -a "src=/etc/fstab dest=/root/ owner=daizhe mode=600"</span></span><br><span class="line"></span><br><span class="line">确认是否成功</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m shell -a 'ls -l /root/fstab'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">-rw-------. 1 daizhe root 595 Nov 22 07:38 /root/fstab</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">root@centos6 ~]<span class="comment"># ll /root/fstab</span></span><br><span class="line">-rw-------. 1 daizhe root 595 Nov 22 07:38 /root/fstab</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">将控制机上的fstab文件保留原名，发送到所有被控制端的主机上，并修改文件的所有者，并设置权限,如果对方有此文件，则先备份再进行修改</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m copy -a "src=/etc/fstab dest=/root/ owner=daizhe mode=600 backup=yes"</span></span><br><span class="line"></span><br><span class="line">拷贝主机上的文件夹到所有的控制端</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m copy -a "src=/data dest=/root/"</span></span><br><span class="line"></span><br><span class="line">使用copy模块中的content 生成所有被控制端的yum配置文件</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m copy -a 'content="[haha]\nbaseurl=https://mirrors.aliyun.com/epel/7/x86_64/\ngpgcheck=0\nenabled=1" dest=/etc/yum.repos.d/haha.repo'</span></span><br><span class="line">192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"0d7ffdd1ba1b53d2b4f3540fc8e77a1ba40b4232"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/etc/yum.repos.d/haha.repo"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"e74dc0b9c50a24d884dc8e8d5d71438b"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0644"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"secontext"</span>: <span class="string">"system_u:object_r:system_conf_t:s0"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 77, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/root/.ansible/tmp/ansible-tmp-1542855358.21-118898081082202/source"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">确认是否生成</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -a 'cat /etc/yum.repos.d/haha.repo' </span></span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">[haha]</span><br><span class="line">baseurl=https://mirrors.aliyun.com/epel/7/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p><h3 id="Fetch-从客户端取文件至服务器端-copy相反，目前fetch仅可以抓取文件，目录可先tar"><a href="#Fetch-从客户端取文件至服务器端-copy相反，目前fetch仅可以抓取文件，目录可先tar" class="headerlink" title="Fetch:从客户端取文件至服务器端,copy相反，目前fetch仅可以抓取文件，目录可先tar"></a><code>Fetch:从客户端取文件至服务器端,copy相反，目前fetch仅可以抓取文件，目录可先tar</code></h3><ul><li>ansible srv -m fetch -a ‘src=/root/a.sh dest=/data/scripts’  </li></ul><p><code>范例：fetch模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">从被控的主机上抓取主机名文件到本地</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m fetch -a 'src=/etc/hosts dest=/data/'</span></span><br><span class="line">192.168.131.129 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/data/192.168.131.129/etc/hosts"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"54fb6627dbaa37721048e4549db3224d"</span>, </span><br><span class="line">    <span class="string">"remote_checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"remote_md5sum"</span>: null</span><br><span class="line">&#125;</span><br><span class="line">192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/data/192.168.131.173/etc/hosts"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"54fb6627dbaa37721048e4549db3224d"</span>, </span><br><span class="line">    <span class="string">"remote_checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"remote_md5sum"</span>: null</span><br><span class="line">&#125;</span><br><span class="line">192.168.131.185 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/data/192.168.131.185/etc/hosts"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"54fb6627dbaa37721048e4549db3224d"</span>, </span><br><span class="line">    <span class="string">"remote_checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"remote_md5sum"</span>: null</span><br><span class="line">&#125;</span><br><span class="line">[root@ansible ~]<span class="comment"># cd /data</span></span><br><span class="line">[root@ansible data]<span class="comment"># ls</span></span><br><span class="line">192.168.131.129  192.168.131.173  192.168.131.185</span><br><span class="line"></span><br><span class="line">fetch 模板不支持抓取目录</span><br><span class="line">想要实现将被控制端的/data目录抓取到本机</span><br><span class="line">打包</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m shell -a 'tar cf /root/data.tar /data'</span></span><br><span class="line"> [WARNING]: Consider using unarchive module rather than running tar</span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">tar: Removing leading `/<span class="string">' from member names</span></span><br><span class="line"><span class="string">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span></span><br><span class="line"><span class="string">tar: Removing leading `/'</span> from member names</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">tar: Removing leading `/<span class="string">' from member names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">抓取</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@ansible ~]# ansible all -m fetch -a '</span>src=/root/data.tar dest=/root<span class="string">'</span></span><br></pre></td></tr></table></figure></p><h3 id="File：设置文件属性-管路目标主机的文件"><a href="#File：设置文件属性-管路目标主机的文件" class="headerlink" title="File：设置文件属性 管路目标主机的文件"></a><code>File：设置文件属性 管路目标主机的文件</code></h3><ul><li>ansible srv -m file -a “path=/root/a.sh owner=wang mode=755“ </li><li>ansible web  -m file  -a ‘src=/app/testfile  dest=/app/testfile-link state=link’</li></ul><p><code>范例：file模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">path:指定创建文件的路径</span><br><span class="line">state:指定对文件进行的操作</span><br><span class="line">    touch：对文件进行创建操作</span><br><span class="line">    absent:删除操作</span><br><span class="line">    link:创建连接文件、软连接</span><br><span class="line">    hard:创建硬链接</span><br><span class="line">dest=path=name 意义相同，目标创建的文件</span><br><span class="line">再所有被管理的终端上的/data目录上创建文件</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m file -a 'path=/data/file state=touch'</span></span><br><span class="line"></span><br><span class="line">删除上面创建的文件</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m file -a 'path=/data/file state=absent'</span></span><br><span class="line"></span><br><span class="line">再被管理终端上创建连接文件</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'ls /data'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">fstab</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">fstab</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">fstab</span><br><span class="line"></span><br><span class="line">对所有终端上的/data/fstab文件创建连接(软连接)</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m file -a 'src=/data/fstab path=/data/fstab.link state=link'</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'ls -l /data'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 595 Nov 22 08:02 fstab</span><br><span class="line">lrwxrwxrwx. 1 root root  11 Nov 22 08:20 fstab.link -&gt; /data/fstab</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'ls -l /data'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--. 2 root root 595 Nov 22 08:02 fstab</span><br><span class="line">-rw-r--r--. 2 root root 595 Nov 22 08:02 fstab2.link</span><br><span class="line"></span><br><span class="line">在被控制端创建文件夹路径为/data/datadir</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m file -a 'dest=/data/datadir state=directory'</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'ls -l /data/'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Nov 22 08:26 datadir</span><br><span class="line"></span><br><span class="line">删除被控制的目录/文件</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m file -a 'dest=/data/datadir state=absent'</span></span><br></pre></td></tr></table></figure></p><h3 id="Hostname：管理主机名"><a href="#Hostname：管理主机名" class="headerlink" title="Hostname：管理主机名"></a><code>Hostname：管理主机名</code></h3><ul><li>ansible node1 -m hostname -a “name=websrv”  </li></ul><p>范例：Hostname模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">修改单独被控制端的主机名</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m hostname -a 'name=redhat6'</span></span><br><span class="line"></span><br><span class="line">查看 立即生效</span><br><span class="line">hosts文件未进行更改</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -a 'hostname'</span></span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">redhat6</span><br></pre></td></tr></table></figure></p><h3 id="Cron：计划任务"><a href="#Cron：计划任务" class="headerlink" title="Cron：计划任务"></a><code>Cron：计划任务</code></h3><ul><li>支持时间：minute，hour，day，month，weekday </li><li>ansible srv -m cron -a “minute=*/5 job=‘/usr/sbin/ntpdate 172.16.0.1 &amp;&gt;/dev/null’ name=Synctime” 创建任务 </li><li>ansible srv -m cron -a ‘state=absent name=Synctime’  删除任务 </li></ul><p>范例：Cron模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">设定计划任务，周六日，每五分钟执行一次，执行同步时间操作</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m cron -a 'minute=*/5 weekday=0,6 job="/usr/sbin/ntpdate 172.18.0.1 &amp;&gt; /dev/null" name=tongbu'</span></span><br><span class="line"></span><br><span class="line">[root@redhat ~]<span class="comment"># crontab -l</span></span><br><span class="line"><span class="comment">#Ansible: tongbu</span></span><br><span class="line">*/5 * * * 0,6 /usr/sbin/ntpdate 172.18.0.1 &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">禁用被控制端的计划任务</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m cron -a 'minute=*/5 weekday=0,6 job="/usr/sbin/ntpdate 172.18.0.1 &amp;&gt; /dev/null" name=tongbu disbaled=ture'</span></span><br><span class="line"></span><br><span class="line">再次启用</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m cron -a 'minute=*/5 weekday=0,6 job="/usr/sbin/ntpdate 172.18.0.1 &amp;&gt; /dev/null" name=tongbu disbaled=false'</span></span><br><span class="line"></span><br><span class="line">彻底铲除此计划任务</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m cron -a 'name=tongbu state=sbsent'</span></span><br></pre></td></tr></table></figure></p><h3 id="Yum：管理包"><a href="#Yum：管理包" class="headerlink" title="Yum：管理包"></a><code>Yum：管理包</code></h3><ul><li>ansible srv -m yum -a ‘name=httpd state=latest’  安装 </li><li>ansible srv -m yum -a ‘name=httpd state=absent’  删除 </li></ul><p>范例：Yum模块,前提被控制机上 yum 是已经配置好的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">name=  指定包的名称</span><br><span class="line"></span><br><span class="line">使用yum模板在被管理终端上安装htop包</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m yum -a 'name=htop'</span></span><br><span class="line"></span><br><span class="line">一次安装多个包，前提是，在原来本机上未安装</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'rpm -q http,vsftpd,memcached'</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m yum -a 'name=httpd,vsftpd,memcached'</span></span><br><span class="line"></span><br><span class="line">卸载被管理机上的应用程序</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m yum -a 'name=httpd state=absent'</span></span><br><span class="line"></span><br><span class="line">更新被管理机yum缓存，同时安装 httpd包</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m yum -a 'name=httpd update_cache=yes'</span></span><br></pre></td></tr></table></figure></p><h3 id="Service：管理服务"><a href="#Service：管理服务" class="headerlink" title="Service：管理服务"></a><code>Service：管理服务</code></h3><ul><li>停止服务<ul><li>ansible srv -m service -a ‘name=httpd state=stopped’ </li></ul></li><li>启动服务<ul><li>ansible srv -m service -a ‘name=httpd state=started’ </li></ul></li><li>加入启动项/关闭启动项<ul><li>ansible srv -m service -a ‘name=httpd state=startes enabled=yes’</li><li>ansible srv –m service –a ‘name=httpd state=reloaded’ </li></ul></li><li>重新启动  <ul><li>ansible srv -m service -a ‘name=httpd state=restarted’   </li></ul></li></ul><p>范例：service模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">启动被管理端的http服务</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m service -a 'name=httpd state=started'</span></span><br><span class="line"></span><br><span class="line">关闭服务</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m service -a 'name=httpd state=stopped</span></span><br><span class="line"></span><br><span class="line">设置为开机启动</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m service -a 'name=httpd state=started enabled=yes'</span></span><br><span class="line"></span><br><span class="line">systemctl is-enabled httpd</span><br><span class="line">chkconfig --list httpd</span><br></pre></td></tr></table></figure></p><h3 id="User：管理用户"><a href="#User：管理用户" class="headerlink" title="User：管理用户"></a><code>User：管理用户</code></h3><ul><li>ansible srv -m user -a ‘name=user1 comment=“test user” uid=2048 home=/app/user1 group=root‘ </li><li>ansible srv  -m user -a ‘name=sysuser1 system=yes home=/app/sysuser1 ’ </li><li>ansible srv -m user -a ‘name=user1 state=absent remove=yes‘    删除用户 及家目录等数据 </li></ul><p><code>范例：user模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">name= 指定用户名</span><br><span class="line">comment= 描述信息</span><br><span class="line">uid= 设定uid</span><br><span class="line">home= 设定家目录</span><br><span class="line">group= 制定主组</span><br><span class="line">groups= 设定附加组</span><br><span class="line">shell=指定shell类型</span><br><span class="line">remove=yes 删除家目录文件</span><br><span class="line">system=yes 设置系统用户、系统组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在被管理终端上创建用户，并指定属性</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m user -a 'name=haha comment="test user" uid=2000 home=/data/ group=root groups=bin shell=/sbin/nologin'</span></span><br><span class="line"></span><br><span class="line">确定用户是否创建</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'getent passwd haha'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">haha:x:2000:0:<span class="built_in">test</span> user:/data/:/sbin/nologin</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">删除被管理终端的用户haha,删除家目录，但是不删除家目录的文件</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m user -a 'name=haha state=absent'</span></span><br><span class="line">192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"force"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"haha"</span>, </span><br><span class="line">    <span class="string">"remove"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"absent"</span></span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">实现删除用户，也将用户的家目录和相关文件删除</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m user -a 'name=hahahaha state=absent remove=yes'</span></span><br></pre></td></tr></table></figure></p><h3 id="Group：管理组"><a href="#Group：管理组" class="headerlink" title="Group：管理组"></a><code>Group：管理组</code></h3><ul><li>ansible  srv -m group -a “name=testgroup system=yes“ </li><li>ansible  srv -m group -a “name=testgroup state=absent” </li></ul><h3 id="ansible-galaxy"><a href="#ansible-galaxy" class="headerlink" title="ansible-galaxy"></a><code>ansible-galaxy</code></h3><ul><li>连接 <a href="https://galaxy.ansible.com" target="_blank" rel="noopener">https://galaxy.ansible.com</a> 下载相应的roles </li><li><p>列出所有已安装的galaxy  </p><ul><li>ansible-galaxy list </li></ul></li><li><p>安装galaxy  </p><ul><li>ansible-galaxy install geerlingguy.redis </li></ul></li><li>删除galaxy  <ul><li>ansible-galaxy remove geerlingguy.redis </li></ul></li></ul><h3 id="ansible-pull"><a href="#ansible-pull" class="headerlink" title="ansible-pull"></a><code>ansible-pull</code></h3><ul><li>推送命令至远程，效率无限提升，对运维要求较高 </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ansible工具概述&quot;&gt;&lt;a href=&quot;#ansible工具概述&quot; class=&quot;headerlink&quot; title=&quot;ansible工具概述&quot;&gt;&lt;/a&gt;ansible工具概述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/16/ansible常用模块及实验/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ansible" scheme="https://daizhe.net.cn/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://daizhe.net.cn/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible自动化实验步骤</title>
    <link href="https://daizhe.net.cn/2019/03/15/ansible%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E9%AA%8C%E6%AD%A5%E9%AA%A4/"/>
    <id>https://daizhe.net.cn/2019/03/15/ansible自动化实验步骤/</id>
    <published>2019-03-15T15:36:24.217Z</published>
    <updated>2019-03-15T16:27:37.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ansible自动化实验步骤"><a href="#ansible自动化实验步骤" class="headerlink" title="ansible自动化实验步骤"></a>ansible自动化实验步骤</h1><p><img src="/2019/03/15/ansible自动化实验步骤/标题.png" alt=""><br><a id="more"></a></p><h2 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h2><ul><li>ansible 并非一个服务，无需长期运行，可以称之为控制机，基于python 2.7.5版本研发，如果后期安装更高版本python时需要保留旧版安装新版的python，保证ansible正常运行，python多版本运行。</li></ul><h2 id="ansible模块"><a href="#ansible模块" class="headerlink" title="ansible模块"></a><code>ansible模块</code></h2><h2 id="范例：ansible实验应用场景"><a href="#范例：ansible实验应用场景" class="headerlink" title="范例：ansible实验应用场景"></a><code>范例：ansible实验应用场景</code></h2><h2 id="安装及测试"><a href="#安装及测试" class="headerlink" title="安装及测试"></a>安装及测试</h2><p><img src="/2019/03/15/ansible自动化实验步骤/1.png" alt=""></p><p>1：准备实验环境：这里准备四台虚拟机：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一台centos7 作为ansible堡垒机  </span><br><span class="line">两台redhat7 作为被控制端  </span><br><span class="line">一台centos6 作为被控制端</span><br><span class="line"></span><br><span class="line">堡垒机ip:192.168.131.184:主机名；ansible  </span><br><span class="line">客户机centos6 ip:192.168.131.129：主机名：centos6    </span><br><span class="line">客户机redhat ip:192.168.131.173:主机名：redhat  </span><br><span class="line">客户机redhat1 ip:192.168.131.185:主机名：redhat7</span><br></pre></td></tr></table></figure></p><p>2：堡垒机安装ansible<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">堡垒机安装ansible服务，是基于epel源的，实验前提，虚拟机是可以连接互联网，已经配置好yum源</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># yum install ansible -y</span></span><br><span class="line">[root@ansible ~]<span class="comment"># rpm -ql ansible | less</span></span><br><span class="line">/etc/ansible/ansible.cfg  主配置文件</span><br><span class="line">/etc/ansible/hosts  主机清单</span><br><span class="line">/usr/bin/ansible   可执行程序（软连接方便升级）</span><br><span class="line">[root@ansible ~]<span class="comment"># ll /usr/bin/ansible</span></span><br><span class="line">lrwxrwxrwx. 1 root root 20 Mar 15 23:44 /usr/bin/ansible -&gt; /usr/bin/ansible-2.7</span><br><span class="line"></span><br><span class="line">确认ansible已经安装以及查看ansible的版本</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible --version </span></span><br><span class="line">ansible 2.7.8</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = [u<span class="string">'/root/.ansible/plugins/modules'</span>, u<span class="string">'/usr/share/ansible/plugins/modules'</span>]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Apr 11 2018, 07:36:10) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]</span><br></pre></td></tr></table></figure></p><p>2：编辑堡垒机上安装的ansible配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">堡垒机的主机清单/etc/ansible/hosts，要想让堡垒机去管理其他主机，就要将被管理的主机ip加入主机清单内</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># vim /etc/ansible/hosts </span></span><br><span class="line">192.168.131.129  单个ip写法/也支持写域名</span><br><span class="line">192.168.131.173</span><br><span class="line">192.168.131.185</span><br><span class="line"></span><br><span class="line">[websrvs]        分组写法</span><br><span class="line">192.168.131.129</span><br><span class="line">192.168.131.173</span><br><span class="line">  </span><br><span class="line">[appsrvs]        分组写法            [组名]   也支持这种写法，代表17和27主机ip</span><br><span class="line">192.168.131.173                      192.168.131.[1:2]7</span><br><span class="line">192.168.131.185           </span><br><span class="line"></span><br><span class="line">修改ansible的配置文件，首先启用ansible的日志信息</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># vim /etc/ansible/ansible.cfg</span></span><br><span class="line">log_path = /var/<span class="built_in">log</span>/ansible.log             日志信息，默认未启用，设置为启用</span><br><span class="line"></span><br><span class="line">查看所有的模块</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-doc -l</span></span><br></pre></td></tr></table></figure></p><p>3：解析ansible的配置文件，保持默认值就可以完成工作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># vim /etc/ansible/ansible.cfg</span></span><br><span class="line">[defaults]                                   以下默认值 </span><br><span class="line">                                        </span><br><span class="line"><span class="comment"># some basic default values...                   </span></span><br><span class="line">                                           </span><br><span class="line"><span class="comment">#inventory      = /etc/ansible/hosts         定义主机清单路径  </span></span><br><span class="line"><span class="comment">#library        = /usr/share/my_modules/     库文件</span></span><br><span class="line"><span class="comment">#module_utils   = /usr/share/my_module_utils/工具存放路径</span></span><br><span class="line"><span class="comment">#remote_tmp     = ~/.ansible/tmp             远程主机临时文件  </span></span><br><span class="line"><span class="comment">#local_tmp      = ~/.ansible/tmp             本地主机临时文件</span></span><br><span class="line"><span class="comment">#forks          = 5                          并发执行数</span></span><br><span class="line"><span class="comment">#poll_interval  = 15                         拉取间隔</span></span><br><span class="line"><span class="comment">#sudo_user      = root                       以谁的身份在远程执行</span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True                        是否询问sudo口令（默认询问）</span></span><br><span class="line"><span class="comment">#ask_pass      = True                        是否询问执行身份的口令（默认询问）</span></span><br><span class="line"><span class="comment">#transport      = smart                      传输协议</span></span><br><span class="line"><span class="comment">#remote_port    = 22                         远程默认端口</span></span><br><span class="line"><span class="comment">#module_lang    = C                         </span></span><br><span class="line"><span class="comment">#module_set_locale = False                   使用的默认语言          </span></span><br><span class="line">log_path = /var/<span class="built_in">log</span>/ansible.log             日志信息，默认未启用，设置为启用    <span class="comment">#启用日志功能</span></span><br><span class="line"></span><br><span class="line">因为ansible不是一个服务，所以改完配置文件无需重启服务。</span><br></pre></td></tr></table></figure></p><h3 id="模块演示"><a href="#模块演示" class="headerlink" title="模块演示"></a>模块演示</h3><p><code>范例：简述ping模块，及实验模块基于key验证</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">列出某个模块的说明 </span><br><span class="line"></span><br><span class="line">ping模块:测试主机清单中的ip的主机是否于堡垒机知否可以正常通讯</span><br><span class="line">查看ping模块的说明</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-doc ping</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -m ping（第一次登陆基于ssh验证）</span></span><br><span class="line"></span><br><span class="line">想要使得主机取消ssh连接的账户密码验证修改ansible的配置文件</span><br><span class="line">[root@ansible ~]<span class="comment"># vim /etc/ansible/ansible.cfg</span></span><br><span class="line"><span class="comment">#uncomment this to disable SSH key host checking</span></span><br><span class="line">host_key_checking = False</span><br><span class="line"></span><br><span class="line">再次执行ping模块（错误原为为ansible默认为key验证）</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -m ping</span></span><br><span class="line">192.168.131.129 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    想要解决错误可是使用-k选项 提示ssh连接输入连接用户的密码</span><br><span class="line">    [root@ansible ~]<span class="comment"># ansible 192.168.131.129 -m ping -k</span></span><br><span class="line">      SSH password: </span><br><span class="line">          192.168.131.129 | SUCCESS =&gt; &#123;</span><br><span class="line">         <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">         <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    脚本实现基于key验证，避免每次输口令，决绝对端主机口令不一致的现象</span><br><span class="line">    主机清单：</span><br><span class="line">    [root@ansible ~]<span class="comment"># cat iplist.sh </span></span><br><span class="line">    192.168.131.129</span><br><span class="line">    192.168.131.173</span><br><span class="line">    192.168.131.185</span><br><span class="line">    安装expect</span><br><span class="line">    [root@ansible ~]<span class="comment"># yum install expect -y</span></span><br><span class="line">    脚本：</span><br><span class="line">    [root@ansible ~]<span class="comment"># cat keyssh.sh </span></span><br><span class="line">     <span class="comment">#!/bin/bash</span></span><br><span class="line">     user=root</span><br><span class="line">     ssh-keygen -t rsa -P <span class="string">""</span> -f /root/.ssh/id_rsa</span><br><span class="line">     <span class="keyword">while</span> <span class="built_in">read</span> line ;<span class="keyword">do</span></span><br><span class="line">     ip=<span class="variable">$line</span></span><br><span class="line">     password=123456</span><br><span class="line">     expect &lt;&lt; EOF</span><br><span class="line">     <span class="built_in">set</span> timeout 10</span><br><span class="line">     spawn ssh-copy-id -i /root/.ssh/id_rsa.pub <span class="variable">$user</span>@<span class="variable">$ip</span></span><br><span class="line">     expect &#123;</span><br><span class="line">       <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\n"</span>;exp_continue &#125;</span><br><span class="line">       <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$password</span>\n"</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     expect eof</span><br><span class="line">     EOF</span><br><span class="line">     <span class="keyword">done</span> &lt; iplist.sh</span><br><span class="line"></span><br><span class="line">    [root@ansible ~]<span class="comment"># bash keyssh.sh </span></span><br><span class="line">    </span><br><span class="line">    ping模块基于key验证验证堡垒机是否与被控制端是否正常通讯</span><br><span class="line">    [root@ansible ~]<span class="comment"># ansible all -m ping</span></span><br><span class="line">      192.168.131.129 | SUCCESS =&gt; &#123;</span><br><span class="line">         <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">         <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">      &#125;</span><br><span class="line">      192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">         <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">         <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">      &#125;</span><br><span class="line">      192.168.131.185 | SUCCESS =&gt; &#123;</span><br><span class="line">         <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">         <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p><code>范例：ansible常用模块Command ：在远程主机执行linux命令（默认模块）</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">在centos6被控制主机上有一个文件</span><br><span class="line">[root@centos6 ~]<span class="comment"># ls</span></span><br><span class="line">a.txt    </span><br><span class="line"></span><br><span class="line">在控制机上使用<span class="built_in">command</span>模块删除centos6上的文件 (系统模块名称可省略)</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -m command -a 'rm -f /root/a.txt'</span></span><br><span class="line"> [WARNING]: Consider using file module with state=absent rather than running rm</span><br><span class="line"></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line">查看所有被控制机上的主机列表</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m command -a 'getent passwd'</span></span><br><span class="line">模块名称可省略</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -a 'getent passwd'</span></span><br><span class="line"></span><br><span class="line">在centos6被控制机上创建用户</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -a 'useradd user11'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -a 'getent passwd user11'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">user11:x:501:501::/home/user11:/bin/bash</span><br></pre></td></tr></table></figure></p><p><code>范例：ansible常用模块shell ：在远程主机执行linux命令</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">查看shell模块帮助</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-doc -s shell</span></span><br><span class="line"></span><br><span class="line">在centos6上使用shell模块改用户的口令</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.129 -m shell -a 'echo daizhe | passwd --stdin daizhe'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Changing password <span class="keyword">for</span> user daizhe.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br><span class="line">显示所有被控制端的主机名</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m shell -a 'echo $HOSTNAME'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">centos6.com</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">redhat.com</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">redhat7.com</span><br><span class="line"></span><br><span class="line">将所有被控制机的/data目录下的所有文件删除 <span class="built_in">chdir</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m shell -a 'chdir=/data rm -rf *'</span></span><br><span class="line"> [WARNING]: Consider using file module with state=absent rather than running rm</span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m shell -a 'chdir=/data ls'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ansible默认模块为<span class="built_in">command</span> ，shell 模块比较好用我们可以将shell模块设置为默认模块，编辑ansible配置文件</span><br><span class="line">[root@ansible ~]<span class="comment"># vim /etc/ansible/ansible.cfg </span></span><br><span class="line">module_name = shell</span><br></pre></td></tr></table></figure></p><p><code>范例：使用Script 脚本模块 实现将控制端的脚本在所有被控制端的主机上执行一下</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">查看帮助</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-doc -s script</span></span><br><span class="line">- name: Runs a <span class="built_in">local</span> script on a remote node after transferring it</span><br><span class="line"></span><br><span class="line">脚本：将所有被控制的主机上将selinux修改为disabled</span><br><span class="line">[root@ansible ~]<span class="comment"># cat selinux.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sed -i <span class="string">'s/^SELINUX=.*/SELINUX=disabled/'</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m script -a "/root/selinux.sh"</span></span><br><span class="line">192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">"Shared connection to 192.168.131.173 closed.\r\n"</span>, </span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"stdout_lines"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">192.168.131.129 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">"Shared connection to 192.168.131.129 closed.\r\n"</span>, </span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"stdout_lines"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">192.168.131.185 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">"Shared connection to 192.168.131.185 closed.\r\n"</span>, </span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"stdout_lines"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">shell模块和script模块中都存在的模块用法</span><br><span class="line">creates:如果已经存在此步骤不执行</span><br><span class="line">removes:如果存在，此步骤执行</span><br><span class="line"></span><br><span class="line">fstab文件存在，则后续命令则不执行</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a "creates=/etc/fstab rm -rf /data/*"</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /etc/fstab exists</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /etc/fstab exists</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /etc/fstab exists</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a "removes=/etc/fstab rm -rf /data/*"</span></span><br><span class="line"> [WARNING]: Consider using file module with state=absent rather than running rm</span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br></pre></td></tr></table></figure><p><code>范例：copy模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">将控制机上的fstab文件保留原名，发送到所有被控制端的主机上，并修改文件的所有者，并设置权限</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m copy -a "src=/etc/fstab dest=/root/ owner=daizhe mode=600"</span></span><br><span class="line"></span><br><span class="line">确认是否成功</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m shell -a 'ls -l /root/fstab'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">-rw-------. 1 daizhe root 595 Nov 22 07:38 /root/fstab</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">root@centos6 ~]<span class="comment"># ll /root/fstab</span></span><br><span class="line">-rw-------. 1 daizhe root 595 Nov 22 07:38 /root/fstab</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">将控制机上的fstab文件保留原名，发送到所有被控制端的主机上，并修改文件的所有者，并设置权限,如果对方有此文件，则先备份再进行修改</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m copy -a "src=/etc/fstab dest=/root/ owner=daizhe mode=600 backup=yes"</span></span><br><span class="line"></span><br><span class="line">拷贝主机上的文件夹到所有的控制端</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m copy -a "src=/data dest=/root/"</span></span><br><span class="line"></span><br><span class="line">使用copy模块中的content 生成所有被控制端的yum配置文件</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m copy -a 'content="[haha]\nbaseurl=https://mirrors.aliyun.com/epel/7/x86_64/\ngpgcheck=0\nenabled=1" dest=/etc/yum.repos.d/haha.repo'</span></span><br><span class="line">192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"0d7ffdd1ba1b53d2b4f3540fc8e77a1ba40b4232"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/etc/yum.repos.d/haha.repo"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"e74dc0b9c50a24d884dc8e8d5d71438b"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0644"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"secontext"</span>: <span class="string">"system_u:object_r:system_conf_t:s0"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 77, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/root/.ansible/tmp/ansible-tmp-1542855358.21-118898081082202/source"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">确认是否生成</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -a 'cat /etc/yum.repos.d/haha.repo' </span></span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">[haha]</span><br><span class="line">baseurl=https://mirrors.aliyun.com/epel/7/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p><p><code>范例：fetch模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">从被控的主机上抓取主机名文件到本地</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m fetch -a 'src=/etc/hosts dest=/data/'</span></span><br><span class="line">192.168.131.129 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/data/192.168.131.129/etc/hosts"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"54fb6627dbaa37721048e4549db3224d"</span>, </span><br><span class="line">    <span class="string">"remote_checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"remote_md5sum"</span>: null</span><br><span class="line">&#125;</span><br><span class="line">192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/data/192.168.131.173/etc/hosts"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"54fb6627dbaa37721048e4549db3224d"</span>, </span><br><span class="line">    <span class="string">"remote_checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"remote_md5sum"</span>: null</span><br><span class="line">&#125;</span><br><span class="line">192.168.131.185 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/data/192.168.131.185/etc/hosts"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"54fb6627dbaa37721048e4549db3224d"</span>, </span><br><span class="line">    <span class="string">"remote_checksum"</span>: <span class="string">"7335999eb54c15c67566186bdfc46f64e0d5a1aa"</span>, </span><br><span class="line">    <span class="string">"remote_md5sum"</span>: null</span><br><span class="line">&#125;</span><br><span class="line">[root@ansible ~]<span class="comment"># cd /data</span></span><br><span class="line">[root@ansible data]<span class="comment"># ls</span></span><br><span class="line">192.168.131.129  192.168.131.173  192.168.131.185</span><br><span class="line"></span><br><span class="line">fetch 模板不支持抓取目录</span><br><span class="line">想要实现将被控制端的/data目录抓取到本机</span><br><span class="line">打包</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m shell -a 'tar cf /root/data.tar /data'</span></span><br><span class="line"> [WARNING]: Consider using unarchive module rather than running tar</span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">tar: Removing leading `/<span class="string">' from member names</span></span><br><span class="line"><span class="string">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span></span><br><span class="line"><span class="string">tar: Removing leading `/'</span> from member names</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">tar: Removing leading `/<span class="string">' from member names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">抓取</span></span><br><span class="line"><span class="string">[root@ansible ~]# ansible all -m fetch -a '</span>src=/root/data.tar dest=/root<span class="string">'</span></span><br></pre></td></tr></table></figure></p><p><code>范例：file模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">path:指定创建文件的路径</span><br><span class="line">state:指定对文件进行的操作</span><br><span class="line">    touch：对文件进行创建操作</span><br><span class="line">    absent:删除操作</span><br><span class="line">    link:创建连接文件、软连接</span><br><span class="line">    hard:创建硬链接</span><br><span class="line">dest=path=name 意义相同，目标创建的文件</span><br><span class="line">再所有被管理的终端上的/data目录上创建文件</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m file -a 'path=/data/file state=touch'</span></span><br><span class="line"></span><br><span class="line">删除上面创建的文件</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m file -a 'path=/data/file state=absent'</span></span><br><span class="line"></span><br><span class="line">再被管理终端上创建连接文件</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'ls /data'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">fstab</span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">fstab</span><br><span class="line">192.168.131.185 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">fstab</span><br><span class="line"></span><br><span class="line">对所有终端上的/data/fstab文件创建连接(软连接)</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m file -a 'src=/data/fstab path=/data/fstab.link state=link'</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'ls -l /data'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 595 Nov 22 08:02 fstab</span><br><span class="line">lrwxrwxrwx. 1 root root  11 Nov 22 08:20 fstab.link -&gt; /data/fstab</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'ls -l /data'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--. 2 root root 595 Nov 22 08:02 fstab</span><br><span class="line">-rw-r--r--. 2 root root 595 Nov 22 08:02 fstab2.link</span><br><span class="line"></span><br><span class="line">在被控制端创建文件夹路径为/data/datadir</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m file -a 'dest=/data/datadir state=directory'</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'ls -l /data/'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Nov 22 08:26 datadir</span><br><span class="line"></span><br><span class="line">删除被控制的目录/文件</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m file -a 'dest=/data/datadir state=absent'</span></span><br></pre></td></tr></table></figure></p><p><code>范例：Hostname模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">修改单独被控制端的主机名</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m hostname -a 'name=redhat6'</span></span><br><span class="line"></span><br><span class="line">查看 立即生效</span><br><span class="line">hosts文件未进行更改</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -a 'hostname'</span></span><br><span class="line">192.168.131.173 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">redhat6</span><br></pre></td></tr></table></figure></p><p><code>范例：Cron模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">设定计划任务，周六日，每五分钟执行一次，执行同步时间操作</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m cron -a 'minute=*/5 weekday=0,6 job="/usr/sbin/ntpdate 172.18.0.1 &amp;&gt; /dev/null" name=tongbu'</span></span><br><span class="line"></span><br><span class="line">[root@redhat ~]<span class="comment"># crontab -l</span></span><br><span class="line"><span class="comment">#Ansible: tongbu</span></span><br><span class="line">*/5 * * * 0,6 /usr/sbin/ntpdate 172.18.0.1 &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">禁用被控制端的计划任务</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m cron -a 'minute=*/5 weekday=0,6 job="/usr/sbin/ntpdate 172.18.0.1 &amp;&gt; /dev/null" name=tongbu disbaled=ture'</span></span><br><span class="line"></span><br><span class="line">再次启用</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m cron -a 'minute=*/5 weekday=0,6 job="/usr/sbin/ntpdate 172.18.0.1 &amp;&gt; /dev/null" name=tongbu disbaled=false'</span></span><br><span class="line"></span><br><span class="line">彻底铲除此计划任务</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m cron -a 'name=tongbu state=sbsent'</span></span><br></pre></td></tr></table></figure></p><p><code>范例：Yum模块,前提被控制机上 yum 是已经配置好的</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">name=  指定包的名称</span><br><span class="line"></span><br><span class="line">使用yum模板在被管理终端上安装htop包</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m yum -a 'name=htop'</span></span><br><span class="line"></span><br><span class="line">一次安装多个包，前提是，在原来本机上未安装</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'rpm -q http,vsftpd,memcached'</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m yum -a 'name=httpd,vsftpd,memcached'</span></span><br><span class="line"></span><br><span class="line">卸载被管理机上的应用程序</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m yum -a 'name=httpd state=absent'</span></span><br><span class="line"></span><br><span class="line">更新被管理机yum缓存，同时安装 httpd包</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m yum -a 'name=httpd update_cache=yes'</span></span><br></pre></td></tr></table></figure></p><p><code>范例：service模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">启动被管理端的http服务</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m service -a 'name=httpd state=started'</span></span><br><span class="line"></span><br><span class="line">关闭服务</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m service -a 'name=httpd state=stopped</span></span><br><span class="line"></span><br><span class="line">设置为开机启动</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.173 -m service -a 'name=httpd state=started enabled=yes'</span></span><br><span class="line"></span><br><span class="line">systemctl is-enabled httpd</span><br><span class="line">chkconfig --list httpd</span><br></pre></td></tr></table></figure></p><p><code>范例：user模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">name= 指定用户名</span><br><span class="line">comment= 描述信息</span><br><span class="line">uid= 设定uid</span><br><span class="line">home= 设定家目录</span><br><span class="line">group= 制定主组</span><br><span class="line">groups= 设定附加组</span><br><span class="line">shell=指定shell类型</span><br><span class="line">remove=yes 删除家目录文件</span><br><span class="line">system=yes 设置系统用户、系统组</span><br><span class="line"></span><br><span class="line">在被管理终端上创建用户，并指定属性</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m user -a 'name=haha comment="test user" uid=2000 home=/data/ group=root groups=bin shell=/sbin/nologin'</span></span><br><span class="line"></span><br><span class="line">确定用户是否创建</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -a 'getent passwd haha'</span></span><br><span class="line">192.168.131.129 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">haha:x:2000:0:<span class="built_in">test</span> user:/data/:/sbin/nologin</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">删除被管理终端的用户haha,删除家目录，但是不删除家目录的文件</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m user -a 'name=haha state=absent'</span></span><br><span class="line">192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"force"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"haha"</span>, </span><br><span class="line">    <span class="string">"remove"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"absent"</span></span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">实现删除用户，也将用户的家目录和相关文件删除</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible all -m user -a 'name=hahahaha state=absent remove=yes'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ansible自动化实验步骤&quot;&gt;&lt;a href=&quot;#ansible自动化实验步骤&quot; class=&quot;headerlink&quot; title=&quot;ansible自动化实验步骤&quot;&gt;&lt;/a&gt;ansible自动化实验步骤&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/15/ansible自动化实验步骤/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ansible" scheme="https://daizhe.net.cn/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://daizhe.net.cn/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible工具概述</title>
    <link href="https://daizhe.net.cn/2019/03/15/ansible%E5%B7%A5%E5%85%B7%E6%A6%82%E8%BF%B0/"/>
    <id>https://daizhe.net.cn/2019/03/15/ansible工具概述/</id>
    <published>2019-03-15T13:54:41.763Z</published>
    <updated>2019-03-16T13:20:50.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ansible工具概述"><a href="#ansible工具概述" class="headerlink" title="ansible工具概述"></a>ansible工具概述</h1><p><img src="/2019/03/15/ansible工具概述/标题.png" alt=""><br><a id="more"></a></p><h2 id="一、ansible学习指南"><a href="#一、ansible学习指南" class="headerlink" title="一、ansible学习指南"></a>一、ansible学习指南</h2><ul><li>运维自动化发展历程及技术应用 </li><li>Ansible命令使用 </li><li>Ansible常用模块详解 </li><li>YAML语法简介 </li><li>Ansible playbook基础 </li><li>Playbook变量、tags、handlers使用 </li><li>Playbook模板templates </li><li>Playbook条件判断 when </li><li>Playbook字典 with_items </li><li>Ansible Roles </li></ul><h2 id="二、运维自动化发展历程及技术应用"><a href="#二、运维自动化发展历程及技术应用" class="headerlink" title="二、运维自动化发展历程及技术应用"></a>二、运维自动化发展历程及技术应用</h2><p><img src="/2019/03/15/ansible工具概述/1.png" alt=""></p><h2 id="三、云计算运维工程师核心职能"><a href="#三、云计算运维工程师核心职能" class="headerlink" title="三、云计算运维工程师核心职能"></a>三、云计算运维工程师核心职能</h2><p><img src="/2019/03/15/ansible工具概述/2.png" alt=""></p><h2 id="四、Linux运维工程师职能划分"><a href="#四、Linux运维工程师职能划分" class="headerlink" title="四、Linux运维工程师职能划分"></a>四、Linux运维工程师职能划分</h2><p><img src="/2019/03/15/ansible工具概述/3.png" alt=""></p><h2 id="五、企业实际应用场景分析"><a href="#五、企业实际应用场景分析" class="headerlink" title="五、企业实际应用场景分析"></a>五、企业实际应用场景分析</h2><ul><li>Dev开发环境  <ul><li>使用者：程序员  </li><li>功能：程序员开发软件，测试BUG的环境  </li><li>管理者：程序员 </li></ul></li><li><p>测试环境  </p><ul><li>使用者：QA测试工程师  </li><li>功能：测试经过Dev环境测试通过的软件的功能  </li><li>管理者：运维  </li><li>说明：测试环境往往有多套,测试环境满足测试功能即可，不宜过多  <ul><li>1、测试人员希望测试环境有多套,公司的产品多产品线并发，即多个版本， 意味着多个版本同步测试  </li><li>2、通常测试环境有多少套和产品线数量保持一样 </li></ul></li></ul></li><li><p>发布环境：代码发布机，有些公司为堡垒机（安全屏障）  </p><ul><li>使用者：运维  </li><li>功能：发布代码至生产环境  </li><li>管理者：运维（有经验）  </li><li>发布机：往往需要有2台（主备） </li></ul></li><li><p>生产环境  </p><ul><li>使用者：运维，少数情况开放权限给核心开发人员，极少数公司将权限完全 开放给开发人员并其维护  </li><li>功能：对用户提供公司产品的服务  </li><li>管理者：只能是运维  </li><li>生产环境服务器数量：一般比较多，且应用非常重要。往往需要自动工具协 助部署配置应用 </li></ul></li><li><p>灰度环境（生产环境的一部分）  </p><ul><li>使用者：运维  </li><li>功能：在全量发布代码前将代码的功能面向少量精准用户发布的环境,可基 于主机或用户执行灰度发布  </li><li>案例：共100台生产服务器，先发布其中的10台服务器，这10台服务器就 是灰度服务器  </li><li>管理者：运维  </li><li>灰度环境：往往该版本功能变更较大，为保险起见特意先让一部分用户优化 体验该功能，待这部分用户使用没有重大问题的时候，再全量发布至所有服务器 </li></ul></li></ul><h2 id="六、程序发布"><a href="#六、程序发布" class="headerlink" title="六、程序发布"></a>六、程序发布</h2><ul><li>程序发布要求：  <ul><li>不能导致系统故障或造成系统完全不可用  </li><li>不能影响用户体验 </li></ul></li><li>预发布验证：  <ul><li>新版本的代码先发布到服务器（跟线上环境配置完全相同，只是未接入到调度器） </li></ul></li><li>灰度发布：  <ul><li>基于主机，用户，业务 </li></ul></li><li>发布路径：  <ul><li>/webapp/tuangou  </li><li>/webapp/tuangou-1.1  </li><li>/webapp/tuangou-1.2 </li></ul></li><li>发布过程：在调度器上下线一批主机(标记为maintanance状态) –&gt; 关闭服务 –&gt; 部 署新版本的应用程序 –&gt; 启动服务 –&gt; 在调度器上启用这一批服务器 </li><li>自动化灰度发布：脚本、发布平台 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">发布更新</span><br><span class="line">100台 v1.0  </span><br><span class="line">90 up v1.0  </span><br><span class="line">10 down v1.0 --升级-&gt;v2.0  </span><br><span class="line">/app/pp-1.0 ---软连接--&gt;/app/pp  </span><br><span class="line">升级  </span><br><span class="line">/app/pp-2.0---新建连接-&gt;/app/aa  </span><br><span class="line">90 up v1.0  </span><br><span class="line">10 up v2.0  </span><br><span class="line">.....逐渐上线...灰度发布（金丝雀发布）.....</span><br><span class="line"></span><br><span class="line">发布方式  </span><br><span class="line">用户类型  </span><br><span class="line">地区  等</span><br><span class="line"></span><br><span class="line">蓝绿发布  </span><br><span class="line">主备两套环境  </span><br><span class="line">主：活动，绿  </span><br><span class="line">备：非活动，蓝  </span><br><span class="line">备用升级，互换化境状态</span><br><span class="line"></span><br><span class="line">发布过程：在调度器上下线一批主机(标记为maintanance状态) --&gt; 关闭服务 --&gt; 部 署新版本的应用程序 --&gt; 启动服务 --&gt; 在调度器上启用这一批服务器 </span><br><span class="line"></span><br><span class="line">自动化灰度发布：脚本、发布平台</span><br></pre></td></tr></table></figure><h2 id="七、自动化运维应用场景"><a href="#七、自动化运维应用场景" class="headerlink" title="七、自动化运维应用场景"></a>七、自动化运维应用场景</h2><ul><li>文件传输 </li><li>应用部署 </li><li>配置管理 </li><li>任务流编排</li></ul><h2 id="八、常用自动化运维工具"><a href="#八、常用自动化运维工具" class="headerlink" title="八、常用自动化运维工具"></a>八、常用自动化运维工具</h2><ul><li>Ansible:python,Agentless,中小型应用环境 </li><li>Saltstack:python，一般需部署agent，执行效率更高 </li><li>Puppet:ruby, 功能强大,配置复杂，重型,适合大型环境 </li><li>Fabric：python，agentless </li><li>Chef: ruby,国内应用少 </li><li>Cfengine </li><li>func </li></ul><h2 id="九、企业级自动化运维工具应用实战ansible"><a href="#九、企业级自动化运维工具应用实战ansible" class="headerlink" title="九、企业级自动化运维工具应用实战ansible"></a>九、企业级自动化运维工具应用实战ansible</h2><ul><li>公司计划在年底做一次大型市场促销活动， 全面冲刺下交易额，为明年的上市做准备。公 司要求各业务组对年底大促做准备，运维部要 求所有业务容量进行三倍的扩容，并搭建出多 套环境可以共开发和测试人员做测试，运维老 大为了在年底有所表现，要求运维部门同学尽 快实现，当你接到这个任务时，有没有更快的 解决方案？ <h2 id="十、Ansible发展史"><a href="#十、Ansible发展史" class="headerlink" title="十、Ansible发展史"></a>十、Ansible发展史</h2></li><li>Ansible <ul><li>创始人，Michael DeHaan（ Cobbler 与 Func 的作者） </li><li>2012-03-09，发布0.0.1版，红帽收购 </li><li>2015-10-17，Red Hat宣布收购 </li></ul></li><li>同类自动化工具GitHub关注程度（2016-07-10） </li></ul><p><img src="/2019/03/15/ansible工具概述/4.png" alt=""></p><h2 id="十一、ansible特性"><a href="#十一、ansible特性" class="headerlink" title="十一、ansible特性"></a><code>十一、ansible特性</code></h2><ul><li>模块化：调用特定的模块，完成特定任务 </li><li>有Paramiko，PyYAML，Jinja2（模板语言）三个关键模块 </li><li>支持自定义模块 </li><li>基于Python语言实现 </li><li>部署简单，基于python和SSH(默认已安装)，agentless </li><li>安全，基于OpenSSH </li><li>支持playbook编排任务 </li><li>幂等性：一个任务执行1遍和执行n遍效果一样，不因重复执行带来意外情况 </li><li>无需代理不依赖PKI（无需ssl） </li><li>可使用任何编程语言写模块 </li><li>YAML格式，编排任务，支持丰富的数据结构 </li><li>较强大的多层解决方案 </li></ul><h2 id="十二、ansible架构"><a href="#十二、ansible架构" class="headerlink" title="十二、ansible架构"></a>十二、ansible架构</h2><p><img src="/2019/03/15/ansible工具概述/5.png" alt=""></p><h2 id="十三、Ansible工作原理"><a href="#十三、Ansible工作原理" class="headerlink" title="十三、Ansible工作原理"></a>十三、Ansible工作原理</h2><p><img src="/2019/03/15/ansible工具概述/6.png" alt=""></p><ul><li>CMDB：配置管理数据库</li></ul><h2 id="十四、Ansible主要组成部分"><a href="#十四、Ansible主要组成部分" class="headerlink" title="十四、Ansible主要组成部分"></a>十四、Ansible主要组成部分</h2><ul><li>ANSIBLE PLAYBOOKS：任务剧本（任务集），编排定义Ansible任务集的配置 文件，由Ansible顺序依次执行，通常是JSON格式的YML文件 </li><li>INVENTORY：Ansible管理主机的清单/etc/anaible/hosts </li><li>MODULES：Ansible执行命令的功能模块，多数为内置核心模块，也可自定义 </li><li>PLUGINS：模块功能的补充，如连接类型插件、循环插件、变量插件、过滤插 件等，该功能不常用 </li><li>API：供第三方程序调用的应用程序编程接口 </li><li><p>ANSIBLE：组合INVENTORY、API、MODULES、PLUGINS的绿框，可以理解 为是ansible命令工具，其为核心执行工具 </p></li><li><p>Ansible命令执行来源： </p><ul><li>USER，普通用户，即SYSTEM ADMINISTRATOR </li><li>CMDB（配置管理数据库） API 调用 </li><li>PUBLIC/PRIVATE CLOUD API调用 </li><li>USER-&gt; Ansible Playbook -&gt; Ansibile </li></ul></li><li>利用ansible实现管理的方式： <ul><li>Ad-Hoc 即ansible命令，主要用于临时命令使用场景 </li><li>Ansible-playbook 主要用于长期规划好的，大型项目的场景，需要有前提 的规划 </li></ul></li><li>Ansible-playbook（剧本）执行过程： <ul><li>将已有编排好的任务集写入Ansible-Playbook </li><li>通过ansible-playbook命令分拆任务集至逐条ansible命令，按预定规则逐 条执行 </li></ul></li><li>Ansible主要操作对象：  <ul><li>HOSTS主机 </li><li>NETWORKING网络设备 </li></ul></li><li>注意事项 <ul><li>执行ansible的主机一般称为主控端，中控，master或堡垒机 </li><li>主控端Python版本需要2.6或以上 </li><li>被控端Python版本小于2.4需要安装python-simplejson </li><li>被控端如开启SELinux需要安装libselinux-python </li><li>windows不能做为主控端</li></ul></li></ul><h2 id="十五、安装ansible及查看配置文件"><a href="#十五、安装ansible及查看配置文件" class="headerlink" title="十五、安装ansible及查看配置文件"></a>十五、安装ansible及查看配置文件</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><code>rpm包安装: EPEL源</code><ul><li>yum install ansible </li></ul></li><li><code>编译安装:</code><ul><li>yum -y install python-jinja2 PyYAML python-paramiko python-babel python-crypto </li><li>tar xf ansible-1.5.4.tar.gz </li><li>cd ansible-1.5.4 </li><li>python setup.py build </li><li>python setup.py install </li><li>mkdir /etc/ansible </li><li>cp -r examples/* /etc/ansible </li></ul></li><li><code>Git方式:（github）</code>   <ul><li>git clone git://github.com/ansible/ansible.git –recursive    </li><li>cd ./ansible    </li><li>source ./hacking/env-setup </li></ul></li><li><code>pip安装：</code> pip是安装Python包的管理器，类似python中的yum    <ul><li>yum install python-pip python-devel    </li><li>yum install gcc glibc-devel zibl-devel  rpm-bulid openssl-devel    </li><li>pip install  –upgrade pip    </li><li>pip install ansible –upgrade </li><li>确认安装： ansible –version </li></ul></li></ul><h3 id="ansible相关文件"><a href="#ansible相关文件" class="headerlink" title="ansible相关文件"></a>ansible相关文件</h3><ul><li><code>配置文件</code> <ul><li>/etc/ansible/ansible.cfg 主配置文件，配置ansible工作特性 </li><li>/etc/ansible/hosts 主机清单 </li><li>/etc/ansible/roles/ 存放角色的目录 </li></ul></li><li><code>程序</code> <ul><li>/usr/bin/ansible 主程序，临时命令执行工具 </li><li>/usr/bin/ansible-doc 查看配置文档，模块功能查看工具，可以理解为ansible的man帮助 </li><li>/usr/bin/ansible-galaxy 下载/上传优秀代码或Roles模块的官网平台 </li><li>/usr/bin/ansible-playbook 定制自动化任务，编排剧本工具/usr/bin/ansiblepull 远程执行命令的工具 </li><li>/usr/bin/ansible-vault  文件加密工具 </li><li>/usr/bin/ansible-console  基于Console界面与用户交互的执行工具</li></ul></li></ul><h3 id="主机清单的编写"><a href="#主机清单的编写" class="headerlink" title="主机清单的编写"></a>主机清单的编写</h3><ul><li><code>主机清单inventory</code> <ul><li>Inventory 主机清单    </li><li>ansible的主要功用在于批量主机操作，为了便捷地使用其中的部分主机，可以 在inventory file中将其分组命名 </li><li>默认的inventory file为/etc/ansible/hosts </li><li>inventory file可以有多个，且也可以通过Dynamic Inventory来动态生成</li></ul></li><li><p><code>/etc/ansible/hosts文件格式</code> </p><ul><li>inventory文件遵循INI文件风格，中括号中的字符为组名。可以将同一个主机 同时归并到多个不同的组中；此外，当如若目标主机使用了非默认的SSH端口， 还可以在主机名称之后使用冒号加端口号来标明  <ul><li>ntp.a.com  </li><li>[webservers]  </li><li>www1.a.com:2222  #也支持填写端口号，因为ansiable运行是基于ssh，如果此主机的ssh服务使用的为非标准端口，需要填写端口号信息</li><li>www2.a.com  </li><li>[dbservers]  </li><li>db1.a.com  </li><li>db2.a.com  </li><li>db3.a.com </li></ul></li></ul></li><li><p>如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机 </p></li><li>示例： <ul><li>[websrvs] </li><li>www[01:100].example.com </li><li>[dbsrvs] </li><li>db-[a:f].example.com </li></ul></li></ul><h2 id="十六、ansible-配置文件"><a href="#十六、ansible-配置文件" class="headerlink" title="十六、ansible 配置文件"></a>十六、<code>ansible 配置文件</code></h2><p>解析ansible的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># vim /etc/ansible/ansible.cfg</span></span><br><span class="line">[defaults]                                   以下默认值 </span><br><span class="line">                                        </span><br><span class="line"><span class="comment"># some basic default values...                   </span></span><br><span class="line">                                           </span><br><span class="line"><span class="comment">#inventory      = /etc/ansible/hosts         定义主机清单路径  </span></span><br><span class="line"><span class="comment">#library        = /usr/share/my_modules/     库文件</span></span><br><span class="line"><span class="comment">#module_utils   = /usr/share/my_module_utils/工具存放路径</span></span><br><span class="line"><span class="comment">#remote_tmp     = ~/.ansible/tmp             远程主机临时文件  </span></span><br><span class="line"><span class="comment">#local_tmp      = ~/.ansible/tmp             本地主机临时文件</span></span><br><span class="line"><span class="comment">#forks          = 5                          并发执行数</span></span><br><span class="line"><span class="comment">#poll_interval  = 15                         拉取间隔</span></span><br><span class="line"><span class="comment">#sudo_user      = root                       以谁的身份在远程执行</span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True                        是否询问sudo口令（默认询问）</span></span><br><span class="line"><span class="comment">#ask_pass      = True                        是否询问执行身份的口令（默认询问）</span></span><br><span class="line"><span class="comment">#transport      = smart                      传输协议</span></span><br><span class="line"><span class="comment">#remote_port    = 22                         远程默认端口</span></span><br><span class="line"><span class="comment">#module_lang    = C                         </span></span><br><span class="line"><span class="comment">#module_set_locale = False                   使用的默认语言          </span></span><br><span class="line">log_path = /var/<span class="built_in">log</span>/ansible.log             日志信息，默认未启用，设置为启用</span><br><span class="line"></span><br><span class="line">因为ansible不是一个服务，所以改完配置文件无需重启服务。</span><br></pre></td></tr></table></figure><h2 id="十七、ansible系列命令"><a href="#十七、ansible系列命令" class="headerlink" title="十七、ansible系列命令"></a><code>十七、ansible系列命令</code></h2><ul><li><p><code>Ansible系列命令</code>  </p><ul><li>ansible ansible-doc &ensp;&ensp; ansible-playbook    </li><li>ansible-vault &ensp;&ensp;    ansible-console&ensp;&ensp;   ansible-galaxy   &ensp;&ensp;ansible-pull  </li><li>ansible-doc: 显示模块帮助  </li></ul></li><li><p>ansible通过ssh实现配置管理、应用部署、任务执行等功能，建议配置ansible 端能基于密钥认证的方式联系各被管理节点 </p></li><li>ansible <host-pattern> [-m module_name] [-a args]  <ul><li>–version  显示版本         </li><li>-m module   指定模块，默认为command  </li><li>-v 详细过程 –vv  </li><li>-vvv更详细  </li><li>–list-hosts  显示主机列表，可简写 –list          </li><li>-k, –ask-pass      提示输入ssh连接密码，默认Key验证  </li><li>-K, –ask-become-pass  提示输入sudo时的口令          </li><li>-C, –check   检查，并不执行          </li><li>-T, –timeout=TIMEOUT 执行命令的超时时间，默认10s  </li><li>-u, –user=REMOTE_USER 执行远程执行的用户  </li><li>-b, –become  代替旧版的sudo 切换 </li></ul></host-pattern></li></ul><hr><ul><li>ansible-doc [options] [module…]  <ul><li>-a   显示所有模块的文档   </li><li>-l, –list         列出可用模块    </li><li>-s, –snippet显示指定模块的playbook片段 </li><li>示例： <ul><li>ansible-doc –l  列出所有模块 </li><li>ansible-doc ping  查看指定模块帮助用法 </li><li>ansible-doc –s  ping 查看指定模块帮助用法</li></ul></li></ul></li></ul><p>查看ansible 模块所有的模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看所有的模块</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-doc -l </span></span><br><span class="line"></span><br><span class="line">列出某个模块的说明 </span><br><span class="line">查看ping模块的说明</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-doc ping</span></span><br><span class="line"></span><br><span class="line">模块简要说明</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-doc -s ping</span></span><br></pre></td></tr></table></figure></p><h2 id="十八、ansible的Host-pattern（匹配主机的列表）"><a href="#十八、ansible的Host-pattern（匹配主机的列表）" class="headerlink" title="十八、ansible的Host-pattern（匹配主机的列表）"></a>十八、ansible的Host-pattern（匹配主机的列表）</h2><ul><li><code>ansible的Host-pattern</code><ul><li><code>匹配主机的列表</code></li><li>All:表示所有的Inventory中的所有主机<ul><li>ansible all -m ping</li></ul></li><li><code>*:通配符</code><ul><li>ansible “*” -m ping    =ansible all -m ping</li><li>ansible 192.168.1.* -m ping</li><li>ansible “srvs” -m ping </li></ul></li></ul></li></ul><p>范例：通配符使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.131.12* -m ping</span></span><br><span class="line">192.168.131.129 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>范例：列出管理机中主机清单中的所有主机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible all --list-hosts</span></span><br><span class="line">  hosts (3):</span><br><span class="line">    192.168.131.129</span><br><span class="line">    192.168.131.173</span><br><span class="line">    192.168.131.185</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible websrvs --list-hosts</span></span><br><span class="line">  hosts (2):</span><br><span class="line">    192.168.131.129</span><br><span class="line">    192.168.131.173</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible appsrvs --list-hosts</span></span><br><span class="line">  hosts (2):</span><br><span class="line">    192.168.131.173</span><br><span class="line">    192.168.131.185</span><br></pre></td></tr></table></figure></p><h3 id="或关系"><a href="#或关系" class="headerlink" title="或关系"></a><code>或关系</code></h3><ul><li>ansible “websrvs:appsrvs” -m ping</li><li>ansible “192.168.131.129:192.168.131.130” -m ping</li></ul><p>范例：实现主机清单中两个清单中或的关系执行此模板<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible "appsrvs:websrvs" --list-hosts</span></span><br><span class="line">  hosts (3):</span><br><span class="line">    192.168.131.173</span><br><span class="line">    192.168.131.185</span><br><span class="line">    192.168.131.129</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible "appsrvs:websrvs" -m ping</span></span><br><span class="line">192.168.131.129 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.131.185 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a><code>逻辑与</code></h3><ul><li>ansible “websrvs:&amp;dbsrvs” –m ping   </li><li>在websrvs组并且在dbsrvs组中的主机 </li></ul><p>范例：实现主机清单中两个清单中与的关系执行此模板<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible "appsrvs:&amp;websrvs" --list-hosts</span></span><br><span class="line">  hosts (1):</span><br><span class="line">    192.168.131.173</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible "appsrvs:&amp;websrvs" -m ping</span></span><br><span class="line">192.168.131.173 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a><code>逻辑非</code></h3><ul><li>ansible ‘websrvs:!dbsrvs’ –m ping   </li><li>在websrvs组，但不在dbsrvs组中的主机  <ul><li>注意：此处为单引号 </li></ul></li></ul><p>范例：实现主机清单中两个清单中非的关系执行此模板（取反）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">此处为单引号</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 'appsrvs:!websrvs' --list-hosts</span></span><br><span class="line">  hosts (1):</span><br><span class="line">    192.168.131.185</span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 'appsrvs:!websrvs' -m ping</span></span><br><span class="line">192.168.131.185 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="综合逻辑"><a href="#综合逻辑" class="headerlink" title="综合逻辑"></a><code>综合逻辑</code></h3><ul><li>ansible ‘websrvs:dbsrvs:&amp;appsrvs:!ftpsrvs’ –m ping  </li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><code>正则表达式</code></h3><ul><li>ansible “websrvs:&amp;dbsrvs” –m ping   </li><li>ansible “~(web|db).*.magedu.com” –m ping</li></ul><h2 id="十九、ansible命令执行过程"><a href="#十九、ansible命令执行过程" class="headerlink" title="十九、ansible命令执行过程"></a>十九、<code>ansible命令执行过程</code></h2><h3 id="ansible命令执行过程"><a href="#ansible命令执行过程" class="headerlink" title="ansible命令执行过程"></a><code>ansible命令执行过程</code></h3><ul><li><ol><li>加载自己的配置文件 默认/etc/ansible/ansible.cfg </li></ol></li><li><ol start="2"><li>加载自己对应的模块文件，如command </li></ol></li><li><ol start="3"><li>通过ansible将模块或命令生成对应的临时py文件，并将该 文件传输至远程 服务器的对应执行用户$HOME/.ansible/tmp/ansible-tmp-数字/XXX.PY文件 </li></ol></li><li><ol start="4"><li>给文件+x执行 </li></ol></li><li><ol start="5"><li>执行并返回结果 </li></ol></li><li><ol start="6"><li>删除临时py文件，sleep 0退出 </li></ol></li></ul><h3 id="执行状态："><a href="#执行状态：" class="headerlink" title="执行状态："></a><code>执行状态：</code></h3><ul><li>绿色：执行成功并且不需要做改变的操作</li><li>黄色：执行成功并且对目标主机做变更 </li><li>红色：执行失败 </li></ul><h2 id="二十、ansible使用示例"><a href="#二十、ansible使用示例" class="headerlink" title="二十、ansible使用示例"></a>二十、ansible使用示例</h2><p>示例 （visudo）</p><ul><li>以wang用户执行ping存活检测   <ul><li>ansible all -m ping -u wang  -k </li></ul></li><li>以wang sudo至root执行ping存活检测    <ul><li>ansible all -m ping -u wang –b -k </li></ul></li><li>以wang sudo至dai用户执行ping存活检测    <ul><li>ansible all -m ping -u wang –b -k –become-user dai </li></ul></li><li>以wang sudo至root用户执行ls    <ul><li>ansible all -m command  -u wang –become-user=root -a ‘ls /root’  -b -k -K </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ansible工具概述&quot;&gt;&lt;a href=&quot;#ansible工具概述&quot; class=&quot;headerlink&quot; title=&quot;ansible工具概述&quot;&gt;&lt;/a&gt;ansible工具概述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/15/ansible工具概述/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ansible" scheme="https://daizhe.net.cn/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://daizhe.net.cn/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统调优</title>
    <link href="https://daizhe.net.cn/2019/03/15/Linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98/"/>
    <id>https://daizhe.net.cn/2019/03/15/Linux系统调优/</id>
    <published>2019-03-15T03:44:19.515Z</published>
    <updated>2019-03-15T13:30:05.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统调优"><a href="#Linux系统调优" class="headerlink" title="Linux系统调优"></a>Linux系统调优</h1><p><img src="/2019/03/15/Linux系统调优/标题.png" alt=""><br><a id="more"></a></p><h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><ul><li>现代计算机的操作的系统：将cpu、内存虚拟后，在所谓的操作系统也成为进程监视器的管理基础之上，能够给进程按需求或者按照调度标准将其运行的资源尾数并不充沛的cpu和内存之上完成运行</li><li>现代计算机的运行频率都很高所以使得很多进程所需要的完成量，在很短的时间内就能完成由此假象就是看似很多进程在cpu看似都是在同时运行，但实际上单颗cpu上仅能运行单个进程（并行运行的假象），也是这种技术在cpu的数量在远远少于进程数量基础上实现了多程序共同运行。所以不得不需要有监控程序将进程运行需要的资源调度到cpu和内存中完成运行</li></ul><hr><ul><li>操作系统-OS：计算机硬件抽象，虚拟计算机<ul><li>程序员在编程时本身是在调用的硬件规格来实现的，但是有了操作系统后程序员不直接面对硬件，而是面对操作系统接口编程<ul><li>system call </li></ul></li></ul></li><li><p>cpu</p><ul><li>CPU在抽象虚拟能被OS运行多个进程的方式是通过时间分片机制</li><li>time slice : 时间片（对cpu的虚拟化）<ul><li>范例：每五毛秒做一个片段，将这些片段根据某种机制，分配给嗷嗷待哺的进程，进而实现进程都可以运行，当时间片到期后无论进程是否愿意都要退场释放cpu资源</li></ul></li><li>优先级，获得cpu顺序的优先级<ul><li>进程的优先级：0~139<ul><li>实时优先级：0~99</li><li>静态优先级：100~139</li></ul></li></ul></li><li>调度器：CFS完全公平调度器<ul><li>调度器本身也是一个程序，根据某种算法对进程的数量进行调度，是由内核中的调度系统的子系统提供（算法越低越好，越短时间内可以完成调度越好，代表着可以将更多的cpu资源来处理进程）</li><li>linux内核使用的调度器：<ul><li>时间的复杂度 Big O</li></ul></li></ul></li></ul></li><li><p>Memory</p><ul><li>对于内存而言，可以分隔为两段（内核使用/进程使用），称之为用户空间和内核空间</li><li>内存被进程看到后也都是虚拟后的内存称之为虚拟地址空间<ul><li>内核使用–内核空间</li><li>进程使用–用户空间</li></ul></li><li><p>inter早期引入一个PAE机制 ：物理地址扩展，线性地址空间未被扩展</p></li><li><p>mysql：本身为单进程多线程模型，基于时间调度机制，一个进程内部有多个事件流程处理多种不同任务和流程的</p></li><li><p>对于整个进程运行而言由于要将线性地址空间映射至物理地址空间，需要将地址空间分页: page frame:</p><ul><li></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux系统调优&quot;&gt;&lt;a href=&quot;#Linux系统调优&quot; class=&quot;headerlink&quot; title=&quot;Linux系统调优&quot;&gt;&lt;/a&gt;Linux系统调优&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/15/Linux系统调优/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux system tuning" scheme="https://daizhe.net.cn/categories/Linux-system-tuning/"/>
    
    
      <category term="Linux system tuning" scheme="https://daizhe.net.cn/tags/Linux-system-tuning/"/>
    
  </entry>
  
  <entry>
    <title>jenkins安装介绍及简单job实现</title>
    <link href="https://daizhe.net.cn/2019/03/12/jenkins%E5%AE%89%E8%A3%85%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%AE%80%E5%8D%95job%E5%AE%9E%E7%8E%B0/"/>
    <id>https://daizhe.net.cn/2019/03/12/jenkins安装介绍及简单job实现/</id>
    <published>2019-03-12T09:50:11.862Z</published>
    <updated>2019-03-16T10:41:27.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jenkins安装介绍及简单job实现"><a href="#jenkins安装介绍及简单job实现" class="headerlink" title="jenkins安装介绍及简单job实现"></a>jenkins安装介绍及简单job实现</h1><p><img src="/2019/03/12/jenkins安装介绍及简单job实现/标题.png" alt=""><br><a id="more"></a></p><p>jenkins官网：<a href="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a></p><h2 id="一、Jenkins部署与基础配置"><a href="#一、Jenkins部署与基础配置" class="headerlink" title="一、Jenkins部署与基础配置"></a>一、Jenkins部署与基础配置</h2><p><img src="/2019/03/12/jenkins安装介绍及简单job实现/1.png" alt=""></p><p>1：jenkins版本选择<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/2.png" alt=""></p><p>2：下载安装jenkins</p><p><img src="/2019/03/12/jenkins安装介绍及简单job实现/3.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">安装jenkins是依赖于java环境的，所以也需要安装JDK</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">    src]<span class="comment"># ls</span></span><br><span class="line">    jdk-8u192-linux-x64.rpm  jenkins-2.138.4-1.1.noarch.rpm</span><br><span class="line"></span><br><span class="line">    src]<span class="comment"># rpm -ivh jdk-8u192-linux-x64.rpm jenkins-2.138.4-1.1.noarch.rpm </span></span><br><span class="line"></span><br><span class="line">查看jenkins的文件</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># rpm -qpl /usr/local/src/jenkins-2.138.4-1.1.noarch.rpm </span></span><br><span class="line">    /etc/init.d/jenkins <span class="comment">#启动脚本</span></span><br><span class="line">    /etc/sysconfig/jenkins  <span class="comment">#主配置文件</span></span><br></pre></td></tr></table></figure><p>3：编辑jenkins配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/sysconfig/jenkins </span></span><br><span class="line">10 JENKINS_HOME=<span class="string">"/var/lib/jenkins"</span>  </span><br><span class="line"><span class="comment">#jenkins启动之后，生成的所有的文件放置文件（下载下来的代码，项目等，整个的工作的目录）</span></span><br><span class="line"></span><br><span class="line">29 JENKINS_USER=<span class="string">"root"</span></span><br><span class="line"><span class="comment">#jenkins的用户，以什么身份启动jenkins，默认为jenkins，修改为root</span></span><br><span class="line"></span><br><span class="line">47 JENKINS_JAVA_OPTIONS=<span class="string">"-Djava.awt.headless=true \</span></span><br><span class="line"><span class="string">48 -Dcom.sun.management.jmxremote \</span></span><br><span class="line"><span class="string">49 -Dcom.sun.management.jmxremote.port=12345 \</span></span><br><span class="line"><span class="string">50 -Dcom.sun.management.jmxremote.authenticate=false \</span></span><br><span class="line"><span class="string">51 -Dcom.sun.management.jmxremote.ssl=false \</span></span><br><span class="line"><span class="string">52 -Djava.rmi.server.hostname="</span>172.20.101.29<span class="string">" \ "</span>    <span class="comment">#jenkins IP地址</span></span><br><span class="line"><span class="comment">#java选项，如果使用zabbix监控jenkins，则添加以上配置</span></span><br><span class="line"></span><br><span class="line">61 JENKINS_PORT=<span class="string">"8080"</span></span><br><span class="line"><span class="comment">#jenkins默认的端口</span></span><br><span class="line"></span><br><span class="line">70 JENKINS_LISTEN_ADDRESS=<span class="string">"172.20.101.29"</span></span><br><span class="line"><span class="comment">#jenkins默认的监听地址，默认的为0.0.0.0，核心的虚拟机禁跑单个服务</span></span><br><span class="line"></span><br><span class="line">79 JENKINS_HTTPS_PORT=<span class="string">""</span></span><br><span class="line">88 JENKINS_HTTPS_KEYSTORE=<span class="string">""</span></span><br><span class="line">97 JENKINS_HTTPS_KEYSTORE_PASSWORD=<span class="string">""</span></span><br><span class="line">106 JENKINS_HTTPS_LISTEN_ADDRESS=<span class="string">""</span></span><br><span class="line"><span class="comment">#是否使用了https，默认的情况下是关闭https</span></span><br><span class="line"></span><br><span class="line">116 JENKINS_DEBUG_LEVEL=<span class="string">"5"</span></span><br><span class="line"><span class="comment">#日志相关的配置，默认是info级别，级别越高信息越详细，确认配置好jenkins后建议将日志的级别调小，避免生成大量的日志沾满磁盘，0为关闭日志，范围为1~9</span></span><br><span class="line"></span><br><span class="line">124 JENKINS_ENABLE_ACCESS_LOG=<span class="string">"no"</span></span><br><span class="line"><span class="comment">#记录jenkins的访问日志，默认为关闭</span></span><br><span class="line"></span><br><span class="line">132 JENKINS_HANDLER_MAX=<span class="string">"100"</span></span><br><span class="line"><span class="comment">#最大的工作线程数，默认为100个</span></span><br><span class="line"></span><br><span class="line">140 JENKINS_HANDLER_IDLE=<span class="string">"20"</span></span><br><span class="line"><span class="comment">#最大工作口空闲数，默认为20个</span></span><br><span class="line"></span><br><span class="line">149 JENKINS_ARGS=<span class="string">""</span></span><br><span class="line"><span class="comment">#其他的java参数，保持默认就好</span></span><br></pre></td></tr></table></figure></p><p>已经修改完的配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># grep "^[a-Z]" /etc/sysconfig/jenkins </span></span><br><span class="line">JENKINS_HOME=<span class="string">"/var/lib/jenkins"</span></span><br><span class="line">JENKINS_JAVA_CMD=<span class="string">""</span></span><br><span class="line">JENKINS_USER=<span class="string">"root"</span></span><br><span class="line">JENKINS_JAVA_OPTIONS=<span class="string">"-Djava.awt.headless=true \</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote \</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.port=12345 \</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.authenticate=false \</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.ssl=false \</span></span><br><span class="line"><span class="string">-Djava.rmi.server.hostname="</span>172.20.101.29<span class="string">" \  </span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">JENKINS_PORT=<span class="string">"8080"</span></span><br><span class="line">JENKINS_LISTEN_ADDRESS=<span class="string">""</span></span><br><span class="line">JENKINS_HTTPS_PORT=<span class="string">""</span></span><br><span class="line">JENKINS_HTTPS_KEYSTORE=<span class="string">""</span></span><br><span class="line">JENKINS_HTTPS_KEYSTORE_PASSWORD=<span class="string">""</span></span><br><span class="line">JENKINS_HTTPS_LISTEN_ADDRESS=<span class="string">""</span></span><br><span class="line">JENKINS_DEBUG_LEVEL=<span class="string">"5"</span></span><br><span class="line">JENKINS_ENABLE_ACCESS_LOG=<span class="string">"no"</span></span><br><span class="line">JENKINS_HANDLER_MAX=<span class="string">"100"</span></span><br><span class="line">JENKINS_HANDLER_IDLE=<span class="string">"20"</span></span><br><span class="line">JENKINS_ARGS=<span class="string">""</span></span><br></pre></td></tr></table></figure></p><p>4：启动jenkins<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    ~]<span class="comment"># systemctl start jenkins</span></span><br><span class="line">    ~]<span class="comment"># systemctl enable jenkins</span></span><br><span class="line">    </span><br><span class="line">如果报错可以查看日志信息</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># tail -f /var/log/jenkins/jenkins.log</span></span><br></pre></td></tr></table></figure></p><p>5：查看jenkins的数据目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># tail -f /var/lib/jenkins/failed-boot-attempts.txt</span></span><br></pre></td></tr></table></figure></p><p>6：查看放置jenkins初始密码的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat /var/lib/jenkins/secrets/initialAdminPassword </span></span><br><span class="line">dd37bd56796a42d1a4a4a0976e047900</span><br></pre></td></tr></table></figure></p><p>7：windows访问jenkins的8080端口<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/4.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/5.png" alt=""></p><p>8：根据要求将jenkins初始密码复制到页面上<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/6.png" alt=""></p><p>9：密码输入正确后跳转至插件安装的目录</p><ul><li>jenkins是完全模块化的</li><li>每一个模块就是一个插件</li><li>每一个插件就是一个功能</li></ul><p>安装推荐的插件<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/7.png" alt=""></p><h2 id="二、创建jenkins账号"><a href="#二、创建jenkins账号" class="headerlink" title="二、创建jenkins账号"></a>二、创建jenkins账号</h2><p>1：创建一个账号，默认权限为管理员<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/8.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/9.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/10.png" alt=""></p><p>2：启动jenkins默认界面显示<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/11.png" alt=""></p><ul><li>可以完成支持部署</li><li>但是不具备代码检测的功能，需要借助插件完成代码检测的功能</li></ul><p>3：创建账号会分给不同的开发和不同的运维来完成代码的发布</p><ul><li>配置jenkins 权限管理：<ul><li>基于角色的权限管理，先创建角色和用户，给角色授权，然后把用户管理到角色。</li><li>创建完的用户默认是有所有的权限的</li></ul></li></ul><p><img src="/2019/03/12/jenkins安装介绍及简单job实现/12.png" alt=""></p><h2 id="三、jenkins插件管理及安装"><a href="#三、jenkins插件管理及安装" class="headerlink" title="三、jenkins插件管理及安装"></a>三、jenkins插件管理及安装</h2><ul><li>插件下载地址：<a href="http://updates.jenkins-ci.org/download/plugins/" target="_blank" rel="noopener">http://updates.jenkins-ci.org/download/plugins/</a></li></ul><p>1：安装的插件的本地存放的路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在同版本的jenkins插件可以互相拷贝使用</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ll /var/lib/jenkins/plugins/    #安装的插件的保存的路径</span></span><br></pre></td></tr></table></figure></p><hr><p>修改默认的用户权限配置</p><ul><li>设置一个用户可以对其他用户进行授权</li><li>普通用户登陆进来只有默认的一些权限</li></ul><hr><p>2：安装插件gitlab相关的插件<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/13.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/14.png" alt=""></p><p>点击可选插件，安装核心插件</p><ul><li>安装gitlab和Blue Ocean插件<ul><li>gitlab插件：拉取代码调用gitlab的插件</li><li>gitlab Hook ：触发功能的钩子，功能是结合gitlab实现，当gitlab代码更新的情况下gitlab会触发此钩子，jenkins会直接进行构建（版本或许不支持所以未安装）</li><li>Gitlab Authentication：gitlab认证像相关的功能插件</li><li>Blue Ocean插件：2.0版本后新加的功能，安装插件后会在jenkins新增加一个菜单选项（显示界面美化）</li></ul></li></ul><p>2.1：Blue Ocean插件安装（选的是下载但是当下次重新启动jenkins时插件生效）<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/15.png" alt=""></p><p>2.2：插件的安装也是存在依赖的<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/16.png" alt=""></p><p>2.3：gitlab插件安装（上一个插件下载完返回原页面）<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/17.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/18.png" alt=""></p><p>3：安装用户认证相关的插件<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/19.png" alt=""></p><p>3.1：如果勾选的直接安装的化开启允许自动刷新<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/20.png" alt=""></p><h2 id="四、账号认证授权"><a href="#四、账号认证授权" class="headerlink" title="四、账号认证授权"></a>四、账号认证授权</h2><p>1：创建一个测试的账号用户测试权限划分</p><ul><li>此时用户已经创建完，但是此时用户登陆进来默认的管理员的权限</li></ul><p><img src="/2019/03/12/jenkins安装介绍及简单job实现/22.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/23.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/24.png" alt=""></p><p>2：对新创建的用户做权限的限制（启用 Role-Based Strategy 插件）<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/21.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/25.png" alt=""></p><p>2.1：启用Role-Based Strategy 插件后会生成一个菜单选项<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/26.png" alt=""></p><p>2.2：点击插件创建角色<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/27.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/28.png" alt=""></p><p>2.3：将角色组和用户进行关联<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/29.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/30.png" alt=""></p><p>3：切换添加的用户登陆验证是否还具有管理员的权限<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/31.png" alt=""></p><h2 id="五、jenkins配置邮箱通知系统"><a href="#五、jenkins配置邮箱通知系统" class="headerlink" title="五、jenkins配置邮箱通知系统"></a>五、jenkins配置邮箱通知系统</h2><p>1：jenkins 邮箱配置-定义系统管理员的邮件地址<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/32.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/33.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/34.png" alt=""></p><p>passwd密码来自qq邮箱验证<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/35.png" alt=""></p><p>2：接收到测试邮箱<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/36.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/37.png" alt=""></p><h2 id="六、测试jenkins拉代码-代码克隆"><a href="#六、测试jenkins拉代码-代码克隆" class="headerlink" title="六、测试jenkins拉代码(代码克隆)"></a>六、测试jenkins拉代码(代码克隆)</h2><p>1：创建一个job(任务)<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/38.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/39.png" alt=""></p><hr><p>执行一个简单测试的构建<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/40.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/41.png" alt=""></p><p>查看执行的构建的控制台输出（可以查看执行的过程）<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/42.png" alt=""></p><hr><h2 id="七、代码克隆"><a href="#七、代码克隆" class="headerlink" title="七、代码克隆"></a>七、代码克隆</h2><h3 id="代码克隆–shell命令"><a href="#代码克隆–shell命令" class="headerlink" title="代码克隆–shell命令"></a>代码克隆–shell命令</h3><p>1：jenkins服务器中生成ssh-key（基于ssh认证克隆，此key仅用于克隆不能用于提交代码）</p><ul><li>jenkins上生成公钥私钥对</li><li><p>gitlab上放置jenkins的公钥</p></li><li><p>基于ssh认证克隆，此key仅用于克隆不能用于提交代码也成为提交key</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">生成公钥</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ssh-keygen </span></span><br><span class="line">    Generating public/private rsa key pair.</span><br><span class="line">    Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">    Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">    Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">    Enter same passphrase again: </span><br><span class="line">    Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">    Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">    The key fingerprint is:</span><br><span class="line">    SHA256:DqsRWkblI6AEZLkY30mmCtSuOxntygCwX5TGitFDA6s root@centos77</span><br><span class="line">    The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">    +---[RSA 2048]----+</span></span><br><span class="line"><span class="string">    |==*   .          |</span></span><br><span class="line"><span class="string">    |+B =o+           |</span></span><br><span class="line"><span class="string">    |Bo==B.o          |</span></span><br><span class="line"><span class="string">    |==oBo. .         |</span></span><br><span class="line"><span class="string">    |E.+ = . S        |</span></span><br><span class="line"><span class="string">    |o+ * . +         |</span></span><br><span class="line"><span class="string">    |. B . . .        |</span></span><br><span class="line"><span class="string">    |o+ . o           |</span></span><br><span class="line"><span class="string">    | oo .            |</span></span><br><span class="line"><span class="string">    +----[SHA256]-----+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看公钥</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ~]# cat /root/.ssh/id_rsa.pub </span></span><br><span class="line"><span class="string">    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnqBFpvMFlCpQWxf/Pblyo8SYX4iMRmxRNOXox9WEInZLiyTwNP17T8lHOlM6r7g5oX2pJXJqFmgabkjkoItEULy7S3PFTxj8xYQVUJU7raQeuhxt07bmUPZXPEfeOnVjK+qRgM/q2jpTQQJVjba0+ymgWvhfd5PcDcwa9H4e4fPFO+FILBTmyEqCPh0vuThfVixigmu1gSaCMRsmnjsfuTa4nwcgSkdCcw1f/NAu3TGSPTQDKYapmytLftEC1C/gftXfJAqBq5uuuGXF/xbRiHziFwDSAS67roJlCf6SGSFqoxn76C3YLK/+W4Dl+sh1d1WBp7eAA8Tuo8z4y+h+1 root@centos77</span></span><br></pre></td></tr></table></figure><p>2：将jenkins上的公钥配置在gitlab上<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/43.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/44.png" alt=""></p><p>3：测试使用jenkins基于ssh方式克隆</p><p><img src="/2019/03/12/jenkins安装介绍及简单job实现/45.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">安装git</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># yum install git -y</span></span><br><span class="line"></span><br><span class="line">代码克隆</span><br><span class="line"></span><br><span class="line">    data]<span class="comment"># git clone git@172.20.141.79:group1/project1.git</span></span><br><span class="line">    data]<span class="comment"># ls</span></span><br><span class="line">    project1</span><br></pre></td></tr></table></figure><p>3：将此克隆的命令放置在jenkins上的工程中</p><p><img src="/2019/03/12/jenkins安装介绍及简单job实现/46.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/47.png" alt=""></p><p>4:执行此项目并在本地查看此工程<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/48.png" alt=""><br><img src="/2019/03/12/jenkins安装介绍及简单job实现/49.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># ll /var/lib/jenkins/workspace/demo-project1</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 3 root root 53 Mar 16 18:18 project1</span><br></pre></td></tr></table></figure><h2 id="八、jenkins将代码部署至后端WEB服务器"><a href="#八、jenkins将代码部署至后端WEB服务器" class="headerlink" title="八、jenkins将代码部署至后端WEB服务器"></a>八、jenkins将代码部署至后端WEB服务器</h2><ul><li>可以将jenkins从gitlab拉取下来的代码拷贝到后端的web服务器上</li></ul><p>1：实现jenkins和后端的web服务器实现免密钥登陆<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jenkins服务器</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ssh-copy-id tomcat@TomcatA_IP</span></span><br><span class="line">    ~]<span class="comment"># ssh-copy-id tomcat@TomcatB_IP</span></span><br><span class="line"></span><br><span class="line">链接测试</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ssh tomcat@TomcatA/B_IP</span></span><br><span class="line"></span><br><span class="line">执行命令测试</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># ssh tomcat@172.20.101.221 "pwd"</span></span><br><span class="line">    /home/tomcat</span><br></pre></td></tr></table></figure></p><p>2：使用jenkins实现代码拷贝到后端的web服务器<br><img src="/2019/03/12/jenkins安装介绍及简单job实现/50.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jenkins安装介绍及简单job实现&quot;&gt;&lt;a href=&quot;#jenkins安装介绍及简单job实现&quot; class=&quot;headerlink&quot; title=&quot;jenkins安装介绍及简单job实现&quot;&gt;&lt;/a&gt;jenkins安装介绍及简单job实现&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/12/jenkins安装介绍及简单job实现/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="jenkins" scheme="https://daizhe.net.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="https://daizhe.net.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>慕课网之redis</title>
    <link href="https://daizhe.net.cn/2019/03/11/%E6%85%95%E8%AF%BE%E7%BD%91%E4%B9%8Bredis/"/>
    <id>https://daizhe.net.cn/2019/03/11/慕课网之redis/</id>
    <published>2019-03-11T10:41:57.617Z</published>
    <updated>2019-03-11T12:57:29.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="企业级Redis开发运维"><a href="#企业级Redis开发运维" class="headerlink" title="企业级Redis开发运维"></a>企业级Redis开发运维</h1><p><img src="/2019/03/11/慕课网之redis/标题.png" alt=""><br><a id="more"></a></p><h2 id="一、Redis初识"><a href="#一、Redis初识" class="headerlink" title="一、Redis初识"></a>一、Redis初识</h2><ul><li>性能优势<ul><li>开源</li><li>高性能key-value服务器</li><li>多种数据结构</li><li>丰富的功能</li><li>高可用分布式支持</li></ul></li><li>Redis的特性<ul><li>速度快</li><li>持久化功能</li><li>多数据结构</li><li>支持多种编辑语言</li><li>功能丰富</li><li>代码简单，使用简单</li><li>支持主从复制</li><li>高可用、分布式</li></ul></li></ul><h3 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h3><ul><li>在服务器硬件较好的前提下，每秒可达10W次读写</li><li>redis的数据是放置在内存中</li><li>单线程(多线程会成为并发的瓶颈)，redis的单线程不会成为快速读取数据的瓶颈</li></ul><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><ul><li>断电不丢数据即redis所有的数据是保存在内存中，对数据的更新将异步地保存在磁盘上（RDB/AOF数据持久化的方式）</li></ul><h3 id="多种数据结构"><a href="#多种数据结构" class="headerlink" title="多种数据结构"></a>多种数据结构</h3><ul><li>redis支持的数据结构<ul><li>string（字符串）</li><li>list（列表）</li><li>set（集合）</li><li>zset（有序集合）</li><li>hash（哈希数据）等数据结构的存储</li></ul></li></ul><h3 id="支持多种的客户端语言"><a href="#支持多种的客户端语言" class="headerlink" title="支持多种的客户端语言"></a>支持多种的客户端语言</h3><ul><li>java</li><li>php</li><li>python</li><li>ruby</li><li>lua</li><li>nodc js</li></ul><h3 id="功能丰富"><a href="#功能丰富" class="headerlink" title="功能丰富"></a>功能丰富</h3><ul><li>发布订阅</li><li>lua脚本</li><li>简单事务</li><li>pipeline 提升并发</li></ul><hr><h2 id="二、API的理解和使用"><a href="#二、API的理解和使用" class="headerlink" title="二、API的理解和使用"></a>二、API的理解和使用</h2><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><ul><li>通用命令<ul><li>keys ：显示所有的key（一般不在生产环境使用，如果真的要查看所有的key，使用scan命令）<ul><li>keys * ：遍历所有的key</li><li>keys ha* : 显示所有以ha开头的key</li><li>keys h[a-z] </li><li>keys ha?  : 代表一位数值</li></ul></li><li>get key ：查看key 对用的value</li><li>dbsize：计算数据库的大小</li><li>exists key ：判断一个key是否存在</li><li>del key [key..] ：删除key/可以删除多个</li><li>expire key seconds ：为key设置过期时间</li><li>ttl key ： 查看此key剩余的过期时长</li><li>type key ：查看数据的类型 </li></ul></li><li>数据结构和内部编码</li><li>单线程架构</li></ul><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><h3 id="哈希类型"><a href="#哈希类型" class="headerlink" title="哈希类型"></a>哈希类型</h3><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><h3 id="有序集合类型"><a href="#有序集合类型" class="headerlink" title="有序集合类型"></a>有序集合类型</h3><h2 id="三、Resi客户端的使用"><a href="#三、Resi客户端的使用" class="headerlink" title="三、Resi客户端的使用"></a>三、Resi客户端的使用</h2><h2 id="四、瑞士军刀Redis"><a href="#四、瑞士军刀Redis" class="headerlink" title="四、瑞士军刀Redis"></a>四、瑞士军刀Redis</h2><h2 id="五、Redis持久化的取舍和选择"><a href="#五、Redis持久化的取舍和选择" class="headerlink" title="五、Redis持久化的取舍和选择"></a>五、Redis持久化的取舍和选择</h2><h2 id="六、Redis复制的原则和优化"><a href="#六、Redis复制的原则和优化" class="headerlink" title="六、Redis复制的原则和优化"></a>六、Redis复制的原则和优化</h2><h2 id="七、Redis-Sentinel"><a href="#七、Redis-Sentinel" class="headerlink" title="七、Redis Sentinel"></a>七、Redis Sentinel</h2><h2 id="八、Redis-Cluster"><a href="#八、Redis-Cluster" class="headerlink" title="八、Redis Cluster"></a>八、Redis Cluster</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;企业级Redis开发运维&quot;&gt;&lt;a href=&quot;#企业级Redis开发运维&quot; class=&quot;headerlink&quot; title=&quot;企业级Redis开发运维&quot;&gt;&lt;/a&gt;企业级Redis开发运维&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/11/慕课网之redis/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="redis_慕课网" scheme="https://daizhe.net.cn/categories/redis-%E6%85%95%E8%AF%BE%E7%BD%91/"/>
    
    
      <category term="redis_慕课网" scheme="https://daizhe.net.cn/tags/redis-%E6%85%95%E8%AF%BE%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>web架构单机时代</title>
    <link href="https://daizhe.net.cn/2019/03/11/Oldboy%E4%B9%8Bweb%E6%9E%B6%E6%9E%84%E5%8D%95%E6%9C%BA%E6%97%B6%E4%BB%A3/"/>
    <id>https://daizhe.net.cn/2019/03/11/Oldboy之web架构单机时代/</id>
    <published>2019-03-11T05:47:47.909Z</published>
    <updated>2019-03-11T10:47:26.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web架构单机时代"><a href="#web架构单机时代" class="headerlink" title="web架构单机时代"></a>web架构单机时代</h1><p><img src="/2019/03/11/Oldboy之web架构单机时代/标题.png" alt=""><br><a id="more"></a></p><h2 id="一、单机性能优化基础"><a href="#一、单机性能优化基础" class="headerlink" title="一、单机性能优化基础"></a>一、单机性能优化基础</h2><p><img src="/2019/03/11/Oldboy之web架构单机时代/1.png" alt=""></p><ul><li><p>1）用户浏览器发送请求经过网络到达web服务器</p></li><li><p>2）web服务器处理请求并响应数据</p></li><li><p>3）响应数据从web服务器发送到用户端</p></li><li><p>4）用户浏览器接收数据，本地计算和渲染</p></li></ul><p>范例：</p><p><img src="/2019/03/11/Oldboy之web架构单机时代/2.png" alt=""></p><p>用户请求的时间消耗？<br><img src="/2019/03/11/Oldboy之web架构单机时代/3.png" alt=""></p><ul><li><p>如何缩短处理时间？</p><ul><li>方法：<ul><li>1）单机性能优化</li><li>2）使用集群</li><li>3）使用缓存</li><li>4）瓶颈点优化</li><li>5）多机房部署，就近访问</li></ul></li></ul></li><li><p>流程：</p><ul><li>单机时代–&gt;系统集群–&gt;文件存储–&gt;缓存应用–&gt;数据存储–&gt;异地灾备</li></ul></li></ul><p>单机时代架构图–单机<br><img src="/2019/03/11/Oldboy之web架构单机时代/4.png" alt=""></p><p>单机时代架构图–动静分离<br><img src="/2019/03/11/Oldboy之web架构单机时代/5.png" alt=""></p><p>单机时代架构图–数据库分离<br><img src="/2019/03/11/Oldboy之web架构单机时代/6.png" alt=""></p><p>单机时代架构图–组件分离<br><img src="/2019/03/11/Oldboy之web架构单机时代/7.png" alt=""></p><ul><li><p>什么是Sockit？（优化优选：Socket套接字受资源限制）</p><ul><li>Socket五元组<ul><li>1：源地址</li><li>2：源端口</li><li>3：目的IP地址</li><li>4：目的端口</li><li>5：类型：TCP/UDP</li></ul></li><li>TCP Socket四元组<ul><li>1：源IP地址</li><li>2：源端口</li><li>3：目的IP地址</li><li>4：目的端口</li></ul></li></ul></li><li><p>吞吐率</p></li><li>响应时间</li></ul><h2 id="二、Socket基础和TCP三次握手"><a href="#二、Socket基础和TCP三次握手" class="headerlink" title="二、Socket基础和TCP三次握手"></a>二、Socket基础和TCP三次握手</h2><p>查看客户端请求服务端服务的随机端口范围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查看默认的随机端口范围</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cat /proc/sys/net/ipv4/ip_local_port_range </span></span><br><span class="line">  3276860999</span><br><span class="line"></span><br><span class="line">自定义优化随机端口范围</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># echo "10000 61000" &gt;  /proc/sys/net/ipv4/ip_local_port_range </span></span><br><span class="line">  ~]<span class="comment"># cat /proc/sys/net/ipv4/ip_local_port_range </span></span><br><span class="line">  1000061000</span><br></pre></td></tr></table></figure><p>调整可以打开的最大文件描述符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">默认的打开最大文件</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ulimit -n</span></span><br><span class="line">  1024</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/security/limits.conf </span></span><br><span class="line"></span><br><span class="line">*                soft    core               unlimited</span><br><span class="line">*                hard    core             unlimited</span><br><span class="line">*                    soft    nproc            1000000</span><br><span class="line">*                    hard    nproc          1000000</span><br><span class="line">*                    soft    nofile            1000000</span><br><span class="line">*                hard    nofile          1000000</span><br><span class="line">*                soft    memlock      32000</span><br><span class="line">*                hard    memlock    32000</span><br><span class="line">*                soft    msgqueue    8192000</span><br><span class="line">*                hard    msgqueue  8192000</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># reboot</span></span><br><span class="line">  ~]<span class="comment"># ulimit -n</span></span><br><span class="line">  1000000</span><br></pre></td></tr></table></figure></p><p>使用ab命令对apache性能进行测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装ab命令压力测试工具</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install httpd-devel -y</span></span><br><span class="line">   </span><br><span class="line">ab 命令参数解释</span><br><span class="line">  -n ： 指定总共发起的并发</span><br><span class="line">  -c ： 每次并发</span><br></pre></td></tr></table></figure></p><p>nc<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">nc [-hlnruz][-g&lt;网关...&gt;][-G&lt;指向器数目&gt;][-i&lt;延迟秒数&gt;][-o&lt;输出文件&gt;][-p&lt;通信端口&gt;][-s&lt;来源地址&gt;][-v...][-w&lt;超时秒数&gt;][主机名称][通信端口...]</span><br><span class="line">补充说明：执行本指令可设置路由器的相关参数。</span><br><span class="line">参　　数：</span><br><span class="line">-g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。</span><br><span class="line">-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。</span><br><span class="line">-h 在线帮助。</span><br><span class="line">-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。</span><br><span class="line">-l 使用监听模式，管控传入的资料。</span><br><span class="line">-n 直接使用IP地址，而不通过域名服务器。</span><br><span class="line">-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。</span><br><span class="line">-p&lt;通信端口&gt; 设置本地主机使用的通信端口。</span><br><span class="line">-r 乱数指定本地与远端主机的通信端口。</span><br><span class="line">-s&lt;来源地址&gt; 设置本地主机送出数据包的IP地址。</span><br><span class="line">-u 使用UDP传输协议。</span><br><span class="line">-v 显示指令执行过程。</span><br><span class="line">-w&lt;超时秒数&gt; 设置等待连线的时间。</span><br><span class="line">-z 使用0输入/输出模式，只在扫描通信端口时使用。</span><br><span class="line"></span><br><span class="line">服务端指定一个端口监控</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nc -l -4 -p 9999 -k</span></span><br><span class="line"></span><br><span class="line">客户端创建一个套接字链接服务端</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nc 172.20.101.228 9999  #指定服务端的IP地址记忆监听的端口</span></span><br><span class="line">  haha</span><br><span class="line"></span><br><span class="line">服务端也收到客户端发送来的消息</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nc -l -4 -p 9999 -k</span></span><br><span class="line">  haha</span><br><span class="line"></span><br><span class="line">服务端查看Socket （可以查看到四源组）</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># netstat -na | grep 9999</span></span><br><span class="line">  tcp        0      0 0.0.0.0:9999            0.0.0.0:*               LISTEN     </span><br><span class="line">  tcp        0      0 192.168.35.115:9999     172.20.101.221:54594    ESTABLISHED</span><br><span class="line"></span><br><span class="line">客户端以伪终端的方式向服务端监听的套接字发送信息（伪设备）</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># echo "hellow" &gt; /dev/tcp/172.20.101.228/9999</span></span><br><span class="line"></span><br><span class="line">服务端接收到客户端的消息</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nc -l -4 -p 9999 -k</span></span><br><span class="line">  hellow</span><br></pre></td></tr></table></figure></p><p>TCP状态转换图</p><p><img src="/2019/03/11/Oldboy之web架构单机时代/8.png" alt=""></p><h2 id="三、Time-wait优化"><a href="#三、Time-wait优化" class="headerlink" title="三、Time_wait优化"></a>三、Time_wait优化</h2><p>time_wait优化的参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1为开启，0为关闭</span><br><span class="line"></span><br><span class="line">复用socekt链接</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cat /proc/sys/net/ipv4/tcp_tw_reuse </span></span><br><span class="line">  0</span><br><span class="line"></span><br><span class="line">时间戳</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cat /proc/sys/net/ipv4/tcp_timestamps </span></span><br><span class="line">  1</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp_tw_reuse 建议开启，但是前提时tcp_timestamps 已经打开</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">快速销毁socket,不等60s（快速回收）</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cat /proc/sys/net/ipv4/tcp_tw_recycle </span></span><br><span class="line">  0   <span class="comment">#建议打开，但是用户的网络为NAT网络时则不建议打开</span></span><br></pre></td></tr></table></figure></p><h2 id="四、HTTP长连接和短链接"><a href="#四、HTTP长连接和短链接" class="headerlink" title="四、HTTP长连接和短链接"></a>四、HTTP长连接和短链接</h2><ul><li><p>1：HTTP协议与TCP/IP协议的关系</p><ul><li>HTTP的长连接和短连接本质上是TCP长连接和短连接。HTTP属于应用层协议，在传输层使用TCP协议，在网络层使用IP协议。 IP协议主要解决网络路由和寻址问题，TCP协议主要解决如何在IP层之上可靠地传递数据包，使得网络上接收端收到发送端所发出的所有包，并且顺序与发送顺序一致。TCP协议是可靠的、面向连接的。</li></ul></li><li><p>2：如何理解HTTP协议是无状态的</p><ul><li>HTTP协议是无状态的，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和上一次打开这个服务器上的网页之间没有任何联系。HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）。</li></ul></li><li><p>3：什么是长连接、短连接？</p><ul><li>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</li><li>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：<ul><li>Connection:keep-alive</li></ul></li><li>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</li><li><code>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</code></li></ul></li><li><p>3.1: TCP连接</p><ul><li>当网络通信时采用TCP协议时，在真正的读写操作之前，客户端与服务器端之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接时可以释放这个连接。连接的建立依靠“三次握手”，而释放则需要“四次握手”，所以每个连接的建立都是需要资源消耗和时间消耗的。</li></ul></li></ul><p>经典的三次握手建立连接示意图：</p><p><img src="/2019/03/11/Oldboy之web架构单机时代/9.png" alt=""></p><p><img src="/2019/03/11/Oldboy之web架构单机时代/10.png" alt=""></p><p>经典的四次握手关闭连接示意图：</p><p><img src="/2019/03/11/Oldboy之web架构单机时代/11.png" alt=""></p><p><img src="/2019/03/11/Oldboy之web架构单机时代/12.png" alt=""></p><ul><li><p>3.2. TCP短连接</p><ul><li><p>模拟一下TCP短连接的情况：client向server发起连接请求，server接到请求，然后双方建立连接。client向server发送消息，server回应client，然后一次请求就完成了。这时候双方任意都可以发起close操作，不过一般都是client先发起close操作。上述可知，短连接一般只会在 client/server间传递一次请求操作。</p></li><li><p>短连接的优点是：管理起来比较简单，存在的连接都是有用的连接，不需要额外的控制手段。</p></li></ul></li><li><p>3.3. TCP长连接</p><ul><li><p>我们再模拟一下长连接的情况：client向server发起连接，server接受client连接，双方建立连接，client与server完成一次请求后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。</p></li><li><p>TCP的保活功能主要为服务器应用提供。如果客户端已经消失而连接未断开，则会使得服务器上保留一个半开放的连接，而服务器又在等待来自客户端的数据，此时服务器将永远等待客户端的数据。保活功能就是试图在服务端器端检测到这种半开放的连接。</p></li><li><p>如果一个给定的连接在两小时内没有任何动作，服务器就向客户发送一个探测报文段，根据客户端主机响应探测4个客户端状态：</p></li><li><p>客户主机依然正常运行，且服务器可达。此时客户的TCP响应正常，服务器将保活定时器复位。</p></li><li>客户主机已经崩溃，并且关闭或者正在重新启动。上述情况下客户端都不能响应TCP。服务端将无法收到客户端对探测的响应。服务器总共发送10个这样的探测，每个间隔75秒。若服务器没有收到任何一个响应，它就认为客户端已经关闭并终止连接。</li><li>客户端崩溃并已经重新启动。服务器将收到一个对其保活探测的响应，这个响应是一个复位，使得服务器终止这个连接。</li><li>客户机正常运行，但是服务器不可达。这种情况与第二种状态类似。</li></ul></li><li><p>4: 长连接和短连接的优点和缺点</p><ul><li><p>由上可以看出，长连接可以省去较多的TCP建立和关闭的操作，减少浪费，节约时间。对于频繁请求资源的客户端适合使用长连接。在长连接的应用场景下，client端一般不会主动关闭连接，当client与server之间的连接一直不关闭，随着客户端连接越来越多，server会保持过多连接。这时候server端需要采取一些策略，如关闭一些长时间没有请求发生的连接，这样可以避免一些恶意连接导致server端服务受损；如果条件允许则可以限制每个客户端的最大长连接数，这样可以完全避免恶意的客户端拖垮整体后端服务。</p></li><li><p>短连接对于服务器来说管理较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但如果客户请求频繁，将在TCP的建立和关闭操作上浪费较多时间和带宽。</p></li><li><p>长连接和短连接的产生在于client和server采取的关闭策略。不同的应用场景适合采用不同的策略。</p></li><li><p>由上可以看出，长连接可以省去较多的TCP建立和关闭的操作，减少浪费，节约时间。对于频繁请求资源的客户来说，较适用长连接。不过这里存在一个问题，存活功能的探测周期太长，还有就是它只是探测TCP连接的存活，属于比较斯文的做法，遇到恶意的连接时，保活功能就不够使了。在长连接的应用场景下，client端一般不会主动关闭它们之间的连接，Client与server之间的连接如果一直不关闭的话，会存在一个问题，随着客户端连接越来越多，server早晚有扛不住的时候，这时候server端需要采取一些策略，如关闭一些长时间没有读写事件发生的连接，这样可 以避免一些恶意连接导致server端服务受损；如果条件再允许就可以以客户端机器为颗粒度，限制每个客户端的最大长连接数，这样可以完全避免某个蛋疼的客户端连累后端服务。</p></li><li><p>短连接对于服务器来说管理较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但如果客户请求频繁，将在TCP的建立和关闭操作上浪费时间和带宽。</p></li><li><p>长连接和短连接的产生在于client和server采取的关闭策略，具体的应用场景采用具体的策略，没有十全十美的选择，只有合适的选择。</p></li></ul></li><li><p>长连接短连接操作过程</p><ul><li>短连接的操作步骤是：<ul><li>建立连接——数据传输——关闭连接…建立连接——数据传输——关闭连接</li></ul></li></ul></li><li>长连接的操作步骤是：<ul><li>建立连接——数据传输…（保持连接）…数据传输——关闭连接</li></ul></li><li><p>什么时候用长连接，短连接？  　　</p><ul><li><p>长连接多用于操作频繁，点对点的通讯，而且连接数不能太多情况，。每个TCP连接都需要三步握手，这需要时间，如果每个操作都是先连接，再操作的话那么处理速度会降低很多，所以每个操作完后都不断开，次处理时直接发送数据包就OK了，不用建立TCP连接。例如：数据库的连接用长连接， 如果用短连接频繁的通信会造成socket错误，而且频繁的socket 创建也是对资源的浪费。 </p></li><li><p>而像WEB网站的http服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源，而像WEB网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源，如果用长连接，而且同时有成千上万的用户，如果每个用户都占用一个连接的话，那可想而知吧。所以并发量大，但每个用户无需频繁操作情况下需用短连好。</p></li></ul></li></ul><h2 id="五、运维知识体系"><a href="#五、运维知识体系" class="headerlink" title="五、运维知识体系"></a>五、运维知识体系</h2><ul><li>安装<ul><li>包管理工具：yum、apt-get</li><li>编译安装：./configure –prefix=/path/xxx</li><li>二进制安装</li></ul></li><li>配置<ul><li>网络</li><li>路径</li><li>容量</li><li>性能</li><li>安装</li><li>功能</li><li>日志</li></ul></li><li>启动<ul><li>systemctl</li><li>./执行</li><li>nohup/screen</li></ul></li><li>管理</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;web架构单机时代&quot;&gt;&lt;a href=&quot;#web架构单机时代&quot; class=&quot;headerlink&quot; title=&quot;web架构单机时代&quot;&gt;&lt;/a&gt;web架构单机时代&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/11/Oldboy之web架构单机时代/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Oldboy" scheme="https://daizhe.net.cn/categories/Oldboy/"/>
    
    
      <category term="Oldboy" scheme="https://daizhe.net.cn/tags/Oldboy/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令及wab环境准备</title>
    <link href="https://daizhe.net.cn/2019/03/10/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8Awab%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <id>https://daizhe.net.cn/2019/03/10/git常用命令及wab环境准备/</id>
    <published>2019-03-10T08:19:14.444Z</published>
    <updated>2019-03-16T04:54:45.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用命令及wab环境准备"><a href="#git常用命令及wab环境准备" class="headerlink" title="git常用命令及wab环境准备"></a>git常用命令及wab环境准备</h1><p><img src="/2019/03/10/git常用命令及wab环境准备/标题.png" alt=""><br><a id="more"></a></p><p><img src="/2019/03/10/git常用命令及wab环境准备/41.png" alt=""></p><h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><h2 id="一、创建用户和组及项目"><a href="#一、创建用户和组及项目" class="headerlink" title="一、创建用户和组及项目"></a>一、创建用户和组及项目</h2><p>1：创建一个用户<br><img src="/2019/03/10/git常用命令及wab环境准备/13.png" alt=""></p><p><img src="/2019/03/10/git常用命令及wab环境准备/14.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/15.png" alt=""></p><p>2：查看此用户是否创建成功，并设置密码<br><img src="/2019/03/10/git常用命令及wab环境准备/16.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/17.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/18.png" alt=""></p><p>3：使用新为开发创建的账号登陆测试<br><img src="/2019/03/10/git常用命令及wab环境准备/19.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/20.png" alt=""></p><p>4：给开发的账号设置密码，也可以管理员不设置密码，直接测试登陆，然后开发账号预留的邮箱会接收到初始化设置密码的连接，可以点击链接设置新的密码</p><p>5：使用root用户关闭首页注册功能<br><img src="/2019/03/10/git常用命令及wab环境准备/21.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/22.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/23.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/24.png" alt=""></p><p>6：验证页面是否还有无注册功能<br><img src="/2019/03/10/git常用命令及wab环境准备/25.png" alt=""></p><p>7：创建组：</p><ul><li>使用管理员root创建组，一个组里面可以有多个项目分支，可以将开发添加到组里面进行设置权限，不同的组就是公司不同的开发项目或者服务模块，不同的组添加不同的开发即可实现对开发设置权限的管理。</li></ul><p><img src="/2019/03/10/git常用命令及wab环境准备/1.png" alt=""></p><p><img src="/2019/03/10/git常用命令及wab环境准备/2.png" alt=""></p><p><img src="/2019/03/10/git常用命令及wab环境准备/3.png" alt=""></p><p>8：创建项目<br><img src="/2019/03/10/git常用命令及wab环境准备/4.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/5.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/6.png" alt=""></p><p>9：用户可以有权限查看到的项目（root用户可以查看到所有组中的项目）<br><img src="/2019/03/10/git常用命令及wab环境准备/7.png" alt=""></p><p>10：将此组授权给开发部门的老大，去维护此项目</p><ul><li>授权可以对组授权，可以对项目授权</li></ul><p><img src="/2019/03/10/git常用命令及wab环境准备/8.png" alt=""></p><p><img src="/2019/03/10/git常用命令及wab环境准备/9.png" alt=""></p><p>11：授权完普通用户权限后使用普通用户登陆(这里为了演示授予属主属组权限)</p><ul><li>将相当于此项目交给开发部门维护</li></ul><p><img src="/2019/03/10/git常用命令及wab环境准备/10.png" alt=""></p><p>12：在此项目中添加一个README<br><img src="/2019/03/10/git常用命令及wab环境准备/26.png" alt=""></p><p><img src="/2019/03/10/git常用命令及wab环境准备/27.png" alt=""></p><p>README已经添加<br><img src="/2019/03/10/git常用命令及wab环境准备/28.png" alt=""></p><hr><h2 id="二、如何从github上克隆项目"><a href="#二、如何从github上克隆项目" class="headerlink" title="二、如何从github上克隆项目"></a>二、如何从github上克隆项目</h2><p>1：在github上查找项目的链接（下载时支持的协议 ： ssh/http）</p><ul><li>ssh：克隆下载是使用密钥认证的</li><li>http：是使用帐户名密码认证的</li></ul><p><img src="/2019/03/10/git常用命令及wab环境准备/29.png" alt=""></p><p>2：使用客户端命令克隆下载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">解释</span><br><span class="line"></span><br><span class="line">安装客户端命令</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install git -y </span></span><br><span class="line"></span><br><span class="line">下载克隆此项目</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># git clone 项目链接</span></span><br><span class="line"></span><br><span class="line">修改完项目上传</span><br><span class="line"></span><br><span class="line">  在<span class="built_in">clone</span>下来的项目的目录下，先添加到本地的暂停区</span><br><span class="line"></span><br><span class="line">  项目目录]<span class="comment"># git add  添加的文件/目录/.代表当前目录下的所有的文件</span></span><br><span class="line"></span><br><span class="line">  上传到github</span><br><span class="line"></span><br><span class="line">  项目目录]<span class="comment"># git commit -m "自定义标签"</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">演示执行命令</span><br><span class="line"></span><br><span class="line">  root@jenkins:/<span class="built_in">source</span><span class="comment"># git clone http://192.168.8.3/test-service/test-project.git</span></span><br><span class="line">  Cloning into <span class="string">'test-project'</span>...</span><br><span class="line">  Username <span class="keyword">for</span> <span class="string">'http://192.168.8.3'</span>: jack</span><br><span class="line">  Password <span class="keyword">for</span> <span class="string">'http://jack@192.168.8.3'</span>: </span><br><span class="line">  remote: Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">  remote: Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">  remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">  Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">  root@jenkins:/<span class="built_in">source</span><span class="comment"># cat  test-project/index.html </span></span><br><span class="line">  &lt;h1&gt;11111111111&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  编辑文件并测试提交：</span><br><span class="line"></span><br><span class="line">  root@jenkins:/<span class="built_in">source</span><span class="comment"># cd 项目目录/</span></span><br><span class="line">  root@jenkins:/<span class="built_in">source</span>/项目目录<span class="comment"># git config --global user.name "jack"</span></span><br><span class="line">  root@jenkins:/<span class="built_in">source</span>/项目目录<span class="comment"># git config --global user.email 2973707860@qq.com</span></span><br><span class="line">  root@jenkins:/<span class="built_in">source</span>/项目目录<span class="comment"># vim index.html </span></span><br><span class="line">  root@jenkins:/<span class="built_in">source</span>/项目目录<span class="comment"># cat index.html </span></span><br><span class="line">  &lt;h1&gt;11111111111&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;22222222222&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  root@jenkins:/<span class="built_in">source</span>/项目目录<span class="comment"># git add index.html </span></span><br><span class="line">  root@jenkins:/<span class="built_in">source</span>/项目目录<span class="comment"># git commit -m "v1"</span></span><br></pre></td></tr></table></figure><p>3：上传</p><p><img src="/2019/03/10/git常用命令及wab环境准备/31.png" alt=""></p><p>4：github验证数据</p><p><img src="/2019/03/10/git常用命令及wab环境准备/30.png" alt=""></p><hr><h2 id="三、将gitlab上创建的项目下载到本地"><a href="#三、将gitlab上创建的项目下载到本地" class="headerlink" title="三、将gitlab上创建的项目下载到本地"></a>三、将gitlab上创建的项目下载到本地</h2><p>1：使用git命令下载（http协议）</p><p><img src="/2019/03/10/git常用命令及wab环境准备/32.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">下载克隆此项目</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /data/</span></span><br><span class="line">  data]<span class="comment"># git clone http://172.18.135.1/group1/project1.git</span></span><br><span class="line">  Cloning into <span class="string">'project1'</span>...</span><br><span class="line">  Username <span class="keyword">for</span> <span class="string">'http://172.18.135.1'</span>: daizhe</span><br><span class="line">  Password <span class="keyword">for</span> <span class="string">'http://daizhe@172.18.135.1'</span>: </span><br><span class="line">  remote: Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">  remote: Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">  remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">  Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>2：查看下载下来的项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">下载下来的目录是以项目名称命名的</span><br><span class="line"></span><br><span class="line">  data]<span class="comment"># ls</span></span><br><span class="line">  project1</span><br><span class="line">  data]<span class="comment"># cd project1/</span></span><br><span class="line">  project1]<span class="comment"># ls</span></span><br><span class="line">  README.md</span><br><span class="line">  project1]<span class="comment"># cat README.md </span></span><br><span class="line">  <span class="comment"># 一级标题</span></span><br><span class="line">  <span class="comment">## 二级标题</span></span><br></pre></td></tr></table></figure></p><p>3：修改项目内容并上传<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改项目内容</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># vim README.md </span></span><br><span class="line">  <span class="comment"># 一级标题</span></span><br><span class="line">  <span class="comment">## 二级标题</span></span><br><span class="line">  <span class="comment">### 三级标题</span></span><br></pre></td></tr></table></figure></p><p>4：上传至Gitlab<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">先添加到本地的暂停区</span><br><span class="line"></span><br><span class="line">project1]<span class="comment"># git add README.md </span></span><br><span class="line"></span><br><span class="line">上传至Gitlab</span><br><span class="line"></span><br><span class="line">project1]<span class="comment"># git commit -m "v1"</span></span><br><span class="line">[master dd12ca1] v1</span><br><span class="line">Committer: root &lt;root@centos7.com&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">  git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">  git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used <span class="keyword">for</span> this commit with:</span><br><span class="line"></span><br><span class="line">  git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">project1]<span class="comment"># git push</span></span><br><span class="line">warning: push.default is <span class="built_in">unset</span>; its implicit value is changing <span class="keyword">in</span></span><br><span class="line">Git 2.0 from <span class="string">'matching'</span> to <span class="string">'simple'</span>. To squelch this message</span><br><span class="line">and maintain the current behavior after the default changes, use:</span><br><span class="line"></span><br><span class="line">git config --global push.default matching</span><br><span class="line"></span><br><span class="line">To squelch this message and adopt the new behavior now, use:</span><br><span class="line"></span><br><span class="line">git config --global push.default simple</span><br><span class="line"></span><br><span class="line">See <span class="string">'git help config'</span> and search <span class="keyword">for</span> <span class="string">'push.default'</span> <span class="keyword">for</span> further information.</span><br><span class="line">(the <span class="string">'simple'</span> mode was introduced <span class="keyword">in</span> Git 1.7.11. Use the similar mode</span><br><span class="line"><span class="string">'current'</span> instead of <span class="string">'simple'</span> <span class="keyword">if</span> you sometimes use older versions of Git)</span><br><span class="line"></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'http://172.18.135.1'</span>: daizhe</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'http://daizhe@172.18.135.1'</span>: </span><br><span class="line">Counting objects: 5, <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 256 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To http://172.18.135.1/group1/project1.git</span><br><span class="line"> a259ec8..dd12ca1  master -&gt; master</span><br></pre></td></tr></table></figure></p><p>4：Gitlab服务端进行验证是否已经上传成功</p><p><img src="/2019/03/10/git常用命令及wab环境准备/33.png" alt=""></p><p>5：在命令行本地添加一个测试页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">编写测试页面</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># vim index.html</span></span><br><span class="line"></span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;你好代哲&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h1&gt;测试页面 v1&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">  &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">上传至gitlab</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># git add .</span></span><br><span class="line">  project1]<span class="comment"># git commit -m "v1"</span></span><br><span class="line">  project1]<span class="comment"># git push</span></span><br></pre></td></tr></table></figure></p><p>6：在gitlab 页面验证是否已经上传<br><img src="/2019/03/10/git常用命令及wab环境准备/34.png" alt=""></p><h2 id="四、gitlab-分支操作"><a href="#四、gitlab-分支操作" class="headerlink" title="四、gitlab 分支操作"></a>四、gitlab 分支操作</h2><ul><li>分支：命名空间上的一个隔离<ul><li>默认情况下全是对master上的操作</li></ul></li></ul><p>1：项目中创建一个新的分支（此分支适用于开发上传的代码先在测试环境测试，测试完成无误后在合并到master分支）<br><img src="/2019/03/10/git常用命令及wab环境准备/35.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/36.png" alt=""></p><p>2：验证测试的develop分支是否创建成功<br><img src="/2019/03/10/git常用命令及wab环境准备/37.png" alt=""></p><p>3：客户端继续编写测试的项目，并上传到develop分支上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">克隆一下gitlab上的develop分支</span><br><span class="line">  -b选项指定分支，如果不指定，默认的情况下为master分支</span><br><span class="line"></span><br><span class="line">  data]<span class="comment"># git clone -b develop http://172.18.135.1/group1/project1.git</span></span><br><span class="line">  Cloning into <span class="string">'project1'</span>...</span><br><span class="line">  Username <span class="keyword">for</span> <span class="string">'http://172.18.135.1'</span>: daizhe</span><br><span class="line">  Password <span class="keyword">for</span> <span class="string">'http://daizhe@172.18.135.1'</span>: </span><br><span class="line">  remote: Enumerating objects: 11, <span class="keyword">done</span>.</span><br><span class="line">  remote: Counting objects: 100% (11/11), <span class="keyword">done</span>.</span><br><span class="line">  remote: Compressing objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">  remote: Total 11 (delta 0), reused 0 (delta 0)</span><br><span class="line">  Unpacking objects: 100% (11/11), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">编辑新的测试版本</span><br><span class="line"></span><br><span class="line">  data]<span class="comment"># ls</span></span><br><span class="line">  project1</span><br><span class="line">  project1]<span class="comment"># ls</span></span><br><span class="line">  index.html</span><br><span class="line">  project1]<span class="comment"># vim index.html </span></span><br><span class="line"></span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;你好代哲&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h1&gt;测试页面 v1&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;测试页面 v2&lt;/h1&gt;</span><br><span class="line">  &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">上传到gitlab的develop测试分支</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># git add .</span></span><br><span class="line">  project1]<span class="comment"># git commit -m "v2"</span></span><br><span class="line">  project1]<span class="comment"># git push</span></span><br></pre></td></tr></table></figure></p><p>4：gitlab查看develop测试分支是否成功上传新的测试页面<br><img src="/2019/03/10/git常用命令及wab环境准备/38.png" alt=""></p><h2 id="五、git常用命令"><a href="#五、git常用命令" class="headerlink" title="五、git常用命令"></a>五、git常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “name“ <span class="comment">#设置全局用户名 </span></span><br><span class="line">git config --global user.email xxx@xx.com <span class="comment">#设置全局邮箱</span></span><br><span class="line">git config --global –list <span class="comment">#列出用户全局设置</span></span><br><span class="line">git add index.html / . <span class="comment">#添加指定文件、目录或当前目录下所有数据到暂存区</span></span><br><span class="line">git commit -m “11“ <span class="comment">#提交文件到工作区</span></span><br><span class="line">git status <span class="comment">#查看工作区的状态</span></span><br><span class="line">git push <span class="comment">#提交代码到服务器</span></span><br><span class="line">git pull <span class="comment">#获取代码到本地</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#查看操作日志</span></span><br><span class="line">vim .gitignore <span class="comment">#定义忽略文件</span></span><br><span class="line">git reset --hard HEAD^^ <span class="comment">#git版本回滚， HEAD为当前版本，加一个^为上一个，^^为上上一个版本</span></span><br><span class="line">git reflog <span class="comment"># #获取每次提交的ID，可以使用--hard根据提交的ID进行版本回退</span></span><br><span class="line">git reset --hard 5ae4b06 <span class="comment">#回退到指定id的版本</span></span><br><span class="line"><span class="comment"># git branch #查看当前所处的分支</span></span><br><span class="line"><span class="comment">#git checkout  -b develop #创建并切换到一个新分支</span></span><br><span class="line"><span class="comment">#git checkout   develop #切换分支</span></span><br></pre></td></tr></table></figure><p>1：设置全局的用户名和邮箱地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">在克隆的项目下有一个隐藏的文件</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># pwd</span></span><br><span class="line">  /data/project1</span><br><span class="line">  project1]<span class="comment"># ls -a</span></span><br><span class="line">  .git    <span class="comment">#保存的配置信息</span></span><br><span class="line">  project1]<span class="comment"># vim .git/config  #这也是在git push时不用指定gitlab服务器的地址直接给上传到gitlab上的原因</span></span><br><span class="line">  [core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = <span class="literal">true</span></span><br><span class="line">        bare = <span class="literal">false</span></span><br><span class="line">        logallrefupdates = <span class="literal">true</span></span><br><span class="line">  [remote <span class="string">"origin"</span>]</span><br><span class="line">        url = http://172.18.135.1/group1/project1.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">  [branch <span class="string">"develop"</span>]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/develop</span><br><span class="line"></span><br><span class="line">设置全局的用户和邮箱（指定以下命令需要在项目目录下）</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># git config --global user.name "daizhe"</span></span><br><span class="line">  project1]<span class="comment"># git config --global user.email "1284808408@qq.com"</span></span><br><span class="line">  project1]<span class="comment"># git config --global --list</span></span><br><span class="line">  user.name=daizhe</span><br><span class="line">  user.email=1284808408@qq.com</span><br></pre></td></tr></table></figure></p><p>2：查看当前工作目录的状态信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">project1]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># On branch develop</span></span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line"></span><br><span class="line">project1]<span class="comment"># vim index.html </span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">      &lt;title&gt;你好代哲&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;测试页面 v1&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试页面 v2&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试页面 v3&lt;/h1&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">project1]<span class="comment"># git add index.html</span></span><br><span class="line">project1]<span class="comment"># git status</span></span><br><span class="line"><span class="comment"># On branch develop</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#   (use "git reset HEAD &lt;file&gt;..." to unstage)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#modified:   index.html</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>3：获取代码到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">project1]<span class="comment"># git pull</span></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'http://172.18.135.1'</span>: daizhe</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'http://daizhe@172.18.135.1'</span>: </span><br><span class="line">Already up-to-date. <span class="comment">#显示当前代码为最新的</span></span><br></pre></td></tr></table></figure></p><p>4：查看操作历史记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">project1]<span class="comment"># git log</span></span><br><span class="line">commit 67c23338f9305ff655d6820b1f011e84727d9663</span><br><span class="line">Author: root &lt;root@centos7.com&gt;</span><br><span class="line">Date:   Tue Mar 12 13:37:11 2019 +0800</span><br><span class="line"></span><br><span class="line">  v2</span><br><span class="line"></span><br><span class="line">commit b348f8abf5f7870ac25cd9072e1bfd5359fb21b5</span><br><span class="line">Author: daizhe &lt;1284808408@qq.com&gt;</span><br><span class="line">Date:   Tue Mar 12 13:23:00 2019 +0800  <span class="comment">#操作的时间</span></span><br><span class="line"></span><br><span class="line">  Delete README.md    <span class="comment">#操作的文件</span></span><br><span class="line"></span><br><span class="line">commit 8a388405bd4f517eac2d6144466aef897f2de30d</span><br><span class="line">Author: root &lt;root@centos7.com&gt;</span><br><span class="line">Date:   Tue Mar 12 13:20:45 2019 +0800</span><br></pre></td></tr></table></figure></p><p>5：版本回滚</p><p>比如说现在的代码版本已经到了v3了<br><img src="/2019/03/10/git常用命令及wab环境准备/39.png" alt=""></p><p>从v3回滚到v2版本（HEAD^ ：代表当前版本的前上一个版本、HEAD^^ : 回滚到当前版本的前两个版本）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">回滚到上一个版本</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># git reset --hard HEAD^</span></span><br><span class="line">  HEAD is now at 67c2333 v2</span><br><span class="line"></span><br><span class="line">  验证本地客户端是否已经混滚到上一个版本</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># vim index.html </span></span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;你好代哲&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h1&gt;测试页面 v1&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;测试页面 v2&lt;/h1&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>6：可以回滚到gitlab指定的版本号</p><p>什么是版本号<br><img src="/2019/03/10/git常用命令及wab环境准备/40.png" alt=""></p><p>根据指定的版本号克隆回滚<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">project1]<span class="comment"># git reset --hard 7aeb57e677633c4e7b80058c1acd525637633f52</span></span><br><span class="line">HEAD is now at 7aeb57e v3</span><br><span class="line"></span><br><span class="line">project1]<span class="comment"># vim index.html </span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">      &lt;title&gt;你好代哲&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;测试页面 v1&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试页面 v2&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试页面 v3&lt;/h1&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>7：分支相关的操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">查看当前所处的分支</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># git branch</span></span><br><span class="line">  * develop</span><br><span class="line"></span><br><span class="line">切换到项目的master分支</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># git checkout master</span></span><br><span class="line">  Branch master <span class="built_in">set</span> up to track remote branch master from origin.</span><br><span class="line">  Switched to a new branch <span class="string">'master'</span></span><br><span class="line">  project1]<span class="comment"># git branch</span></span><br><span class="line">      develop</span><br><span class="line">    * master    <span class="comment">#切换到master就可以将客户端本地的代码上传到master分支上了（前提是在测试端已经测试通过的代码）</span></span><br><span class="line"></span><br><span class="line">创建新的分支并切换到此分支</span><br><span class="line"></span><br><span class="line">  project1]<span class="comment"># git checkout  -b develop #创建并切换到一个新分支</span></span><br></pre></td></tr></table></figure></p><h1 id="Web环境准备"><a href="#Web环境准备" class="headerlink" title="Web环境准备"></a>Web环境准备</h1><p><img src="/2019/03/10/git常用命令及wab环境准备/41.png" alt=""></p><h2 id="一、安装两台tomcat作为后端的web服务器"><a href="#一、安装两台tomcat作为后端的web服务器" class="headerlink" title="一、安装两台tomcat作为后端的web服务器"></a>一、安装两台tomcat作为后端的web服务器</h2><p>1：二进制安装java 8环境（JDK）</p><p><img src="/2019/03/10/git常用命令及wab环境准备/42.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">两台tomcat的jdk的安装步骤相同</span><br><span class="line"></span><br><span class="line">标准化目录规划</span><br><span class="line">  web应用路劲/apps  <span class="comment">#运行身份为tomcat，运行java不可使用root用户运行</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ls</span></span><br><span class="line">  dk-8u192-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line">创建应用放置路径</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># mkdir /apps </span></span><br><span class="line">  ~]<span class="comment"># mv jdk-8u192-linux-x64.tar.gz /apps</span></span><br><span class="line"></span><br><span class="line">创建运行tomcat的用户</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># useradd tomcat -u 2001</span></span><br><span class="line">  ~]<span class="comment"># passwd tomcat   #设置密码  （强制删除用户命令 userdel -rf user）</span></span><br><span class="line"></span><br><span class="line">解压jdk</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /apps/</span></span><br><span class="line">  apps]<span class="comment"># tar xvf jdk-8u192-linux-x64.tar.gz </span></span><br><span class="line"></span><br><span class="line">设置环境变量</span><br><span class="line"></span><br><span class="line">  apps]<span class="comment">#  vim /etc/profile</span></span><br><span class="line">  最后面添加</span><br><span class="line">  <span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">"%F %T `whoami` "</span></span><br><span class="line">  <span class="built_in">export</span> <span class="built_in">export</span> LANG=<span class="string">"en_US.utf-8"</span></span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME=/apps/jdk</span><br><span class="line">  <span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">  apps]<span class="comment"># source /etc/profile</span></span><br><span class="line"></span><br><span class="line">为了方便升级JDK制作软连接</span><br><span class="line"></span><br><span class="line">  apps]<span class="comment"># ln -sv /apps/jdk1.8.0_192/ /apps/jdk</span></span><br><span class="line"></span><br><span class="line">验证是否已经安装java环境</span><br><span class="line"></span><br><span class="line">  apps]<span class="comment"># java -version</span></span><br><span class="line">  java version <span class="string">"1.8.0_192"</span></span><br><span class="line">  Java(TM) SE Runtime Environment (build 1.8.0_192-b12)</span><br><span class="line">  Java HotSpot(TM) 64-Bit Server VM (build 25.192-b12, mixed mode)</span><br></pre></td></tr></table></figure><p>2：二进制安装tomcat（版本为8.5.37）</p><p>版本下载站点：<a href="http://mirrors.shu.edu.cn/apache/tomcat/" target="_blank" rel="noopener">http://mirrors.shu.edu.cn/apache/tomcat/</a></p><p><img src="/2019/03/10/git常用命令及wab环境准备/43.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">两台tomcat的安装步骤相同</span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line"></span><br><span class="line">  apps]<span class="comment"># pwd</span></span><br><span class="line">  /apps</span><br><span class="line">  apps]<span class="comment"># ls</span></span><br><span class="line">  apache-tomcat-8.5.37.tar.gz</span><br><span class="line"></span><br><span class="line">解压</span><br><span class="line"></span><br><span class="line">  apps]<span class="comment"># tar xvf apache-tomcat-8.5.37.tar.gz </span></span><br><span class="line"></span><br><span class="line">制作软链接</span><br><span class="line"></span><br><span class="line">  apps]<span class="comment"># ln -sv /apps/apache-tomcat-8.5.37/ /apps/tomcat</span></span><br></pre></td></tr></table></figure><p>手动测试启动tomcat<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /apps/tomcat/bin/catalina.sh start</span></span><br></pre></td></tr></table></figure></p><p>tomcatA<br><img src="/2019/03/10/git常用命令及wab环境准备/44.png" alt=""></p><p>tomcatB<br><img src="/2019/03/10/git常用命令及wab环境准备/45.png" alt=""></p><h2 id="二、tomcat各服务器上创建数据目录"><a href="#二、tomcat各服务器上创建数据目录" class="headerlink" title="二、tomcat各服务器上创建数据目录"></a>二、tomcat各服务器上创建数据目录</h2><ul><li>代码路径标准化<ul><li>/data/tomcat_webdir : 存放解压完后的应用程序</li><li>/data/tomcat_appdir : 存放远程服务器发来的打包文件</li></ul></li></ul><p>1：创建数据目录及项目目录、测试文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">创建数据目录</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># mkdir -pv /data/tomcat_webdir /data/tomcat_appdir</span></span><br><span class="line"></span><br><span class="line">编辑tomcatA和tomcatB各主机的配置文件</span><br><span class="line"></span><br><span class="line">  修改tomcat服务器的应用路径：/data/tomcat_webdir</span><br><span class="line">  打算在/data/tomcat_webdir放置项目名称</span><br><span class="line">  禁用自动解压、自动部署（unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;）</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /apps/tomcat/conf/server.xml </span></span><br><span class="line">  148       &lt;Host name=<span class="string">"localhost"</span>  :appBase=<span class="string">"/data/tomcat_webdir"</span></span><br><span class="line">  149             unpackWARs=<span class="string">"false"</span> autoDeploy=<span class="string">"false"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建项目目录及项目文件</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># mkdir /data/tomcat_webdir/myapp</span></span><br><span class="line"></span><br><span class="line">  TomcatA 的测试项目文件</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /data/tomcat_webdir/myapp/index.html</span></span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;Tomcat A&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h1&gt;Tomcat A v1&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">  &lt;/html&gt;</span><br><span class="line"></span><br><span class="line">  TomcatB 的测试项目文件</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /data/tomcat_webdir/myapp/index.html</span></span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;Tomcat B&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h1&gt;Tomcat B v1&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>2：先以root用户测试启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">两台tomcat A/B 都要启动测试</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># /apps/tomcat/bin/catalina.sh stop</span></span><br><span class="line">  ~]<span class="comment"># /apps/tomcat/bin/catalina.sh start</span></span><br></pre></td></tr></table></figure></p><p>3：web界面访问测试<br><img src="/2019/03/10/git常用命令及wab环境准备/46.png" alt=""><br><img src="/2019/03/10/git常用命令及wab环境准备/47.png" alt=""><br>4：tomcatA/B 各tomcat服务器 ，停掉tomcat修改为以普通用户启动tomcat<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">停掉tomcat</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># /apps/tomcat/bin/catalina.sh stop</span></span><br><span class="line"></span><br><span class="line">修改权限</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># chown tomcat.tomcat /data/ /apps/ -R</span></span><br></pre></td></tr></table></figure></p><p>使用脚本启动tomcat<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat /etc/init.d/tomcat </span></span><br><span class="line"><span class="comment">#!/bin/bash：</span></span><br><span class="line"><span class="comment"># #########################################################</span></span><br><span class="line"><span class="comment"># Tomcat init script for     "代哲编写"####</span></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 96 14 ###################################</span></span><br><span class="line"><span class="comment"># description: 2018/11/1. 代哲##########################</span></span><br><span class="line"><span class="comment"># #########################################################</span></span><br><span class="line"></span><br><span class="line">JDK_HOME=/apps/jdk</span><br><span class="line">CATALINA_HOME=/apps/tomcat</span><br><span class="line"><span class="built_in">export</span> JDK_HOME CATALINA_HOME</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment">#PID=`ps -ef  | grep  -v grep  | grep java | awk  '&#123;print $2&#125;'`</span></span><br><span class="line"><span class="comment">#NUM=`ps -ef  | grep  -v grep  | grep java | awk  '&#123;print $2&#125;' | wc -l`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#case $1 in</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"正在判断服务状态，请稍等！"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"请稍等3秒钟"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"3"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"2"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"1"</span>;sleep 1</span><br><span class="line">   <span class="keyword">if</span>netstat -an | grep 8080 | grep LISTEN &gt;/dev/null</span><br><span class="line">     <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Tomcat已经正在运行了！"</span>  </span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Tomcat没有运行，1秒后启动！"</span></span><br><span class="line"><span class="built_in">echo</span> 1;sleep 1  </span><br><span class="line">  <span class="variable">$CATALINA_HOME</span>/bin/catalina.sh start </span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">"Tomcat 已经成功启动完成,5秒后判断是否启动成功"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"5"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"4"</span>;sleep 1</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"3"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"2"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"1"</span>;sleep 1</span><br><span class="line"><span class="keyword">if</span>  netstat -an | grep 8080 | grep LISTEN &gt;/dev/null</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">PID=`ps -ef | grep  tomcat | grep jdk | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">NUM=`ps -ef | grep  tomcat | grep jdk | awk <span class="string">'&#123;print $2&#125;'</span> | wc -l`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Tomcat 已经成功启动<span class="variable">$&#123;NUM&#125;</span> 个Tomcat进程!,PID为<span class="variable">$&#123;PID&#125;</span>"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Tomcat启动失败，请重新启动！"</span></span><br><span class="line">        <span class="built_in">echo</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">PID=`ps -ef  | grep  -v grep  | grep java | awk  <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">NUM=`ps -ef | grep  -v <span class="string">"color"</span>  | grep tomcat | awk <span class="string">'&#123;print $2&#125;'</span> | wc -l`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"正在判断服务状态，请稍等3秒钟！"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"3"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"2"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"1"</span>;sleep 1</span><br><span class="line"><span class="keyword">if</span>  netstat -an | grep 8080 | grep LISTEN &gt;/dev/null </span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Tomcat运行中，1秒后关闭！"</span></span><br><span class="line"><span class="built_in">echo</span>  1;sleep 1 </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"即将关闭Tomcat服务，请稍等！"</span> </span><br><span class="line">        <span class="variable">$CATALINA_HOME</span>/bin/catalina.sh stop ;<span class="built_in">echo</span> <span class="string">"已经执行关闭命令,正在检查关闭了多少Tomcat进程，请稍等30秒钟！"</span></span><br><span class="line">sleep 8</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"3"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"2"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"1"</span>;sleep 1</span><br><span class="line">pkill java &amp;&amp; pkill tomcat</span><br><span class="line"><span class="keyword">if</span>  netstat -an | grep 8080 | grep LISTEN &gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">PID=`ps -ef  | grep  -v grep  | grep java | awk  <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">NUM=`ps -ef | grep  -v <span class="string">"color"</span>  | grep tomcat | awk <span class="string">'&#123;print $2&#125;'</span> | wc -l`</span><br><span class="line"><span class="built_in">kill</span> -9 <span class="variable">$PID</span> ;<span class="built_in">echo</span> <span class="string">"已成功关闭<span class="variable">$&#123;NUM&#125;</span> 个tomcat进程"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">"Tomcat 已经关闭完成！"</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"3"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"2"</span>;sleep 1;<span class="built_in">echo</span> <span class="string">"1"</span>;sleep 1 </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Tomcat 没有运行"</span></span><br><span class="line"><span class="built_in">echo</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span>  netstat -an | grep 8080 | grep LISTEN &gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">            PID=`ps -ef  | grep  -v grep  | grep java | awk  <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="comment">#NUM=`ps -ef | grep  -v "color"  | grep tomcat | awk '&#123;print $2&#125;' | wc -l`</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"关闭失败，即将强制删除tomcat进程!"</span></span><br><span class="line">            sleep 2</span><br><span class="line">            pkill tomcat ;sleep 2 </span><br><span class="line">            <span class="keyword">if</span>  netstat -an | grep 8080 | grep LISTEN &gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"强制关闭失败，即将再次强制删除tomcat进程!"</span></span><br><span class="line">                pkill java; sleep 2</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">stop </span><br><span class="line">start </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span> </span><br><span class="line">start) </span><br><span class="line">start </span><br><span class="line">;; </span><br><span class="line"></span><br><span class="line">stop) </span><br><span class="line">stop </span><br><span class="line">;; </span><br><span class="line"></span><br><span class="line">restart) </span><br><span class="line">restart </span><br><span class="line">;; </span><br><span class="line"></span><br><span class="line">*) </span><br><span class="line"><span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart|status&#125;"</span> </span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># chmod a+x /etc/init.d/tomcat</span></span><br></pre></td></tr></table></figure></p><p>切换tomcat普通用户启动tomcat<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># su - tomcat</span></span><br><span class="line">~]$ bash /etc/init.d/tomcat start</span><br><span class="line">正在判断服务状态，请稍等！</span><br><span class="line">请稍等3秒钟</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">Tomcat没有运行，1秒后启动！</span><br><span class="line">1</span><br><span class="line">Using CATALINA_BASE:   /apps/tomcat</span><br><span class="line">Using CATALINA_HOME:   /apps/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /apps/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /apps/jdk</span><br><span class="line">Using CLASSPATH:       /apps/tomcat/bin/bootstrap.jar:/apps/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line">Tomcat 已经成功启动完成,5秒后判断是否启动成功</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">Tomcat 已经成功启动2 个Tomcat进程!,PID为3797</span><br><span class="line">3826</span><br></pre></td></tr></table></figure></p><h1 id="LB-HA-负载均衡-高可用-环境部署"><a href="#LB-HA-负载均衡-高可用-环境部署" class="headerlink" title="LB + HA 负载均衡+高可用 环境部署"></a>LB + HA 负载均衡+高可用 环境部署</h1><h2 id="一、两台机器安装-haproxy-keepalived"><a href="#一、两台机器安装-haproxy-keepalived" class="headerlink" title="一、两台机器安装 haproxy+keepalived"></a>一、两台机器安装 haproxy+keepalived</h2><h3 id="配置keepalived"><a href="#配置keepalived" class="headerlink" title="配置keepalived"></a>配置keepalived</h3><p>1:安装haproxy+keepalived 实现负载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用yum源安装</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install haproxy keepalived -y</span></span><br></pre></td></tr></table></figure><p>2：两台主机编辑keepalived的配置文件</p><ul><li>主</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">其中一台主机上配置172.20.141.88为VIP</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/keepalived/keepalived.conf  </span></span><br><span class="line">  ! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">  global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     1284808408@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from root@example.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">   <span class="comment">#vrrp_mcast_group4 224.0.0.18</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vrrp_instance VRRP-V1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">172.20.141.88 dev ens37 label ens37:1 </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">启动keepalived</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start keepalived</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable keepalived</span></span><br><span class="line"></span><br><span class="line">验证是否配置VIP</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ping 172.20.141.80</span></span><br></pre></td></tr></table></figure><ul><li>从：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  ~]<span class="comment"># cat /etc/keepalived/keepalived.conf </span></span><br><span class="line">  ! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">  global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     1284808408@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from root@example.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">   <span class="comment">#vrrp_mcast_group4 224.0.0.18</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vrrp_instance VRRP-V1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">172.20.141.88 dev ens33 label ens33:1 </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">启动keepalived</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start keepalived</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable keepalived</span></span><br><span class="line"></span><br><span class="line">验证是否配置VIP(可以停掉主查看从是否会飘到从节点上)</span><br></pre></td></tr></table></figure><h3 id="配置haproxy"><a href="#配置haproxy" class="headerlink" title="配置haproxy"></a>配置haproxy</h3><ul><li>两台主机配置相同</li></ul><p>1：编辑haproxy的配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line"><span class="comment">#门户网站入口</span></span><br><span class="line">listen myapp</span><br><span class="line">      <span class="built_in">bind</span> 172.20.141.88:80 <span class="comment">#VIP</span></span><br><span class="line">      balance roundrobin</span><br><span class="line">      server 172.20.101.81    172.20.101.81:8080 check    <span class="comment">#后端tomcat A</span></span><br><span class="line">      server 172.20.101.221   172.20.101.221:8080 check   <span class="comment">#后端tomcat B</span></span><br></pre></td></tr></table></figure></p><p>2：由于要绑定一个虚拟路由冗余协议上的一个虚拟地址，则需要优化内核参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat sysctl.conf </span></span><br><span class="line"><span class="comment"># Controls source route verification</span></span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.ip_nonlocal_bind = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not accept source routing</span></span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls the System Request debugging functionality of the kernel</span></span><br><span class="line">kernel.sysrq = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls whether core dumps will append the PID to the core filename.</span></span><br><span class="line"><span class="comment"># Useful for debugging multi-threaded applications.</span></span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls the use of TCP syncookies</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable netfilter on bridges.</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 0</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 0</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls the default maxmimum size of a mesage queue</span></span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Controls the maximum size of a message, in bytes</span></span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls the maximum shared segment size, in bytes</span></span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Controls the maximum number of shared memory segments, in pages</span></span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP kernel paramater</span></span><br><span class="line">net.ipv4.tcp_mem = 786432 1048576 1572864</span><br><span class="line">net.ipv4.tcp_rmem = 4096        87380   4194304</span><br><span class="line">net.ipv4.tcp_wmem = 4096        16384   4194304</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># socket buffer</span></span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.core.somaxconn = 20480</span><br><span class="line">net.core.optmem_max = 81920</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP conn</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_syn_retries = 3</span><br><span class="line">net.ipv4.tcp_retries1 = 3</span><br><span class="line">net.ipv4.tcp_retries2 = 15</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp conn reuse</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 20000</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.tcp_timestamps = 1 <span class="comment">#?</span></span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># keepalive conn</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 300</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line">net.ipv4.ip_local_port_range = 10001    65000</span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">vm.overcommit_memory = 0</span><br><span class="line">vm.swappiness = 10</span><br><span class="line"></span><br><span class="line"><span class="comment">#net.ipv4.conf.eth1.rp_filter = 0</span></span><br><span class="line"><span class="comment">#net.ipv4.conf.lo.arp_ignore = 1</span></span><br><span class="line"><span class="comment">#net.ipv4.conf.lo.arp_announce = 2</span></span><br><span class="line"><span class="comment">#net.ipv4.conf.all.arp_ignore = 1</span></span><br><span class="line"><span class="comment">#net.ipv4.conf.all.arp_announce = 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># mv sysctl.conf /etc/</span></span><br><span class="line">mv: overwrite ‘/etc/sysctl.conf’? y</span><br><span class="line">[root@centos7 ~]<span class="comment"># cat /etc/sys</span></span><br><span class="line">sysconfig/          sysctl.d/           system-release      </span><br><span class="line">sysctl.conf         systemd/            system-release-cpe  </span><br><span class="line">[root@centos7 ~]<span class="comment"># cat /etc/sysctl.conf </span></span><br><span class="line"><span class="comment"># Controls source route verification</span></span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.ip_nonlocal_bind = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not accept source routing</span></span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls the System Request debugging functionality of the kernel</span></span><br><span class="line">kernel.sysrq = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls whether core dumps will append the PID to the core filename.</span></span><br><span class="line"><span class="comment"># Useful for debugging multi-threaded applications.</span></span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls the use of TCP syncookies</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable netfilter on bridges.</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 0</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 0</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls the default maxmimum size of a mesage queue</span></span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Controls the maximum size of a message, in bytes</span></span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls the maximum shared segment size, in bytes</span></span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Controls the maximum number of shared memory segments, in pages</span></span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP kernel paramater</span></span><br><span class="line">net.ipv4.tcp_mem = 786432 1048576 1572864</span><br><span class="line">net.ipv4.tcp_rmem = 4096        87380   4194304</span><br><span class="line">net.ipv4.tcp_wmem = 4096        16384   4194304</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># socket buffer</span></span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.core.somaxconn = 20480</span><br><span class="line">net.core.optmem_max = 81920</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP conn</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_syn_retries = 3</span><br><span class="line">net.ipv4.tcp_retries1 = 3</span><br><span class="line">net.ipv4.tcp_retries2 = 15</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp conn reuse</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 20000</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.tcp_timestamps = 1 <span class="comment">#?</span></span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># keepalive conn</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 300</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line">net.ipv4.ip_local_port_range = 10001    65000</span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">vm.overcommit_memory = 0</span><br><span class="line">vm.swappiness = 10</span><br><span class="line"></span><br><span class="line"><span class="comment">#net.ipv4.conf.eth1.rp_filter = 0</span></span><br><span class="line"><span class="comment">#net.ipv4.conf.lo.arp_ignore = 1</span></span><br><span class="line"><span class="comment">#net.ipv4.conf.lo.arp_announce = 2</span></span><br><span class="line"><span class="comment">#net.ipv4.conf.all.arp_ignore = 1</span></span><br><span class="line"><span class="comment">#net.ipv4.conf.all.arp_announce = 2</span></span><br><span class="line"></span><br><span class="line">将其生效</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure></p><p>3：启动haproxy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl start haproxy</span></span><br><span class="line">~]<span class="comment"># systemctl enable haproxy</span></span><br></pre></td></tr></table></figure></p><h1 id="客户段访问–访问调度器上的VIP"><a href="#客户段访问–访问调度器上的VIP" class="headerlink" title="客户段访问–访问调度器上的VIP"></a>客户段访问–访问调度器上的VIP</h1><h2 id="一、测试访问"><a href="#一、测试访问" class="headerlink" title="一、测试访问"></a>一、测试访问</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">客户端访问VIP</span><br><span class="line">~]<span class="comment"># curl 172.20.141.88:80/myapp</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git常用命令及wab环境准备&quot;&gt;&lt;a href=&quot;#git常用命令及wab环境准备&quot; class=&quot;headerlink&quot; title=&quot;git常用命令及wab环境准备&quot;&gt;&lt;/a&gt;git常用命令及wab环境准备&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/10/git常用命令及wab环境准备/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="jenkins" scheme="https://daizhe.net.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="https://daizhe.net.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>keepalived加lvs实现高可用</title>
    <link href="https://daizhe.net.cn/2019/03/10/keepalived%E5%8A%A0lvs%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <id>https://daizhe.net.cn/2019/03/10/keepalived加lvs实现高可用/</id>
    <published>2019-03-10T03:23:02.467Z</published>
    <updated>2019-03-10T06:40:41.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keepalived加lvs实现高可用"><a href="#keepalived加lvs实现高可用" class="headerlink" title="keepalived加lvs实现高可用"></a>keepalived加lvs实现高可用</h1><p><img src="/2019/03/10/keepalived加lvs实现高可用/标题.gif" alt=""><br><a id="more"></a></p><h2 id="tcpdump抓包"><a href="#tcpdump抓包" class="headerlink" title="tcpdump抓包"></a>tcpdump抓包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># tcpdump -i ens37 -nn host 172.18.135.1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;keepalived加lvs实现高可用&quot;&gt;&lt;a href=&quot;#keepalived加lvs实现高可用&quot; class=&quot;headerlink&quot; title=&quot;keepalived加lvs实现高可用&quot;&gt;&lt;/a&gt;keepalived加lvs实现高可用&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/10/keepalived加lvs实现高可用/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="keepalived" scheme="https://daizhe.net.cn/categories/keepalived/"/>
    
    
      <category term="keepalived" scheme="https://daizhe.net.cn/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>keepalived及haproxy生产负载和高可用应用（编译安装）</title>
    <link href="https://daizhe.net.cn/2019/03/09/keepalived%E5%8F%8Ahaproxy%E7%94%9F%E4%BA%A7%E8%B4%9F%E8%BD%BD%E5%92%8C%E9%AB%98%E5%8F%AF%E7%94%A8%E5%BA%94%E7%94%A8%EF%BC%88%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%EF%BC%89/"/>
    <id>https://daizhe.net.cn/2019/03/09/keepalived及haproxy生产负载和高可用应用（编译安装）/</id>
    <published>2019-03-09T03:07:58.276Z</published>
    <updated>2019-03-09T03:20:45.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keepalived配置多vip及实现双主模式"><a href="#keepalived配置多vip及实现双主模式" class="headerlink" title="keepalived配置多vip及实现双主模式"></a>keepalived配置多vip及实现双主模式</h1><p><img src="/2019/03/09/keepalived及haproxy生产负载和高可用应用（编译安装）/标题.gif" alt=""><br><a id="more"></a></p><p>一：在生产环境中haproxy广泛用于四层和七层的反向负载，haproxy则通过VRRP技术实现虚拟IP高可用从而实现haproxy的高可用，本文将侧重于介绍keepalived方面的知识及相关配置介绍，haproxy只用于测试web代理，具体如下：</p><p>1.1：安装haproxy：</p><p>1.1.1：编译安装haproxy：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@linux-node137 src]<span class="comment"># wget http://www.haproxy.org/download/1.7/src/haproxy-1.7.3.tar.gz</span></span><br><span class="line">[root@linux-node137 src]<span class="comment"># tar xvf haproxy-1.7.3.tar.gz</span></span><br><span class="line">[root@linux-node137 src]<span class="comment"># cd haproxy-1.7.3/</span></span><br><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment">#  yum install gcc pcre pcre-devel openssl  openssl-devel -y</span></span><br><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment"># vim README #安装文档及相关帮助信息</span></span><br><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment"># make TARGET=linux2628 USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1  PREFIX=/usr/local/haproxy</span></span><br><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment"># make install PREFIX=/usr/local/haproxy</span></span><br></pre></td></tr></table></figure></p><p>1.1.2：准备启动脚本文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment"># vim /usr/lib/systemd/system/haproxy.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=HAProxy Load Balancer</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/etc/sysconfig/haproxy</span><br><span class="line">ExecStart=/usr/sbin/haproxy-systemd-wrapper -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid <span class="variable">$OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -USR2 <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>1.1.3：复制启动脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment"># cp haproxy-systemd-wrapper  /usr/sbin/haproxy-systemd-wrapper</span></span><br><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment"># cp haproxy /usr/sbin/haproxy</span></span><br></pre></td></tr></table></figure></p><p>1.1.4：准备sysconfig配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment"># vim /etc/sysconfig/haproxy</span></span><br><span class="line"><span class="comment"># Add extra options to the haproxy daemon here. This can be useful for</span></span><br><span class="line"><span class="comment"># specifying multiple configuration files with multiple -f options.</span></span><br><span class="line"><span class="comment"># See haproxy(1) for a complete list of options.</span></span><br><span class="line">OPTIONS=<span class="string">""</span></span><br></pre></td></tr></table></figure></p><p>1.1.5：主备配置文件，简单配置，后续完善：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment"># mkdir /etc/haproxy</span></span><br><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">global</span><br><span class="line">maxconn 100000</span><br><span class="line">chroot /usr/<span class="built_in">local</span>/haproxy</span><br><span class="line">uid 99</span><br><span class="line">gid 99</span><br><span class="line">daemon</span><br><span class="line">nbproc 1</span><br><span class="line">pidfile /usr/<span class="built_in">local</span>/haproxy/run/haproxy.pid</span><br><span class="line"><span class="built_in">log</span> 127.0.0.1 local3 info</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">option http-keep-alive</span><br><span class="line">option  forwardfor</span><br><span class="line">maxconn 100000</span><br><span class="line">mode http</span><br><span class="line">timeout connect 300000ms</span><br><span class="line">timeout client  300000ms</span><br><span class="line">timeout server  300000ms</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line"> mode http</span><br><span class="line"> <span class="built_in">bind</span> 0.0.0.0:9999</span><br><span class="line"> stats <span class="built_in">enable</span></span><br><span class="line"> <span class="built_in">log</span> global</span><br><span class="line"> stats uri     /haproxy-status</span><br><span class="line"> stats auth    haadmin:q1w2e3r4ys</span><br><span class="line"></span><br><span class="line">listen  web_port</span><br><span class="line"> <span class="built_in">bind</span> 0.0.0.0:80</span><br><span class="line"> mode http</span><br><span class="line"> <span class="built_in">log</span> global</span><br><span class="line"> server web1  172.10.1.238:80  check inter 3000 fall 2 rise 5</span><br></pre></td></tr></table></figure></p><p>1.1.6：启动haproxy:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 haproxy-1.7.3]<span class="comment"># systemctl  restart haproxy</span></span><br></pre></td></tr></table></figure></p><p>1.1.7：验证haproxy监听的端口：<br><img src="/2019/03/09/keepalived及haproxy生产负载和高可用应用（编译安装）/1.png" alt=""></p><p>1.1.8：后端web服务器安装http：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@aqdl ~]<span class="comment"># yum install httpd</span></span><br><span class="line">[root@aqdl html]<span class="comment"># echo "Haptoxy Page" &gt; /var/www/html/index.html</span></span><br><span class="line">[root@aqdl ~]<span class="comment"># systemctl  restart httpd</span></span><br></pre></td></tr></table></figure></p><p>1.1.9：访问haproxy的80端口:<br><img src="/2019/03/09/keepalived及haproxy生产负载和高可用应用（编译安装）/2.png" alt=""></p><p>1.1.10：开启haproxy日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 ~]<span class="comment"># vim /etc/rsyslog.conf</span></span><br><span class="line"> 15 <span class="variable">$ModLoad</span> imudp</span><br><span class="line"> 16 <span class="variable">$UDPServerRun</span> 514</span><br><span class="line"> 92 local3.*         /var/<span class="built_in">log</span>/haproxy.log <span class="comment">#保存后的日志目录</span></span><br></pre></td></tr></table></figure></p><p>1.1.11：重启rsyslog服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 ~]<span class="comment"># systemctl  restart  rsyslog</span></span><br></pre></td></tr></table></figure></p><p>1.1.12：配置haproxy调用rsyslog：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line"> 9 <span class="built_in">log</span> 127.0.0.1 local3 info</span><br><span class="line">[root@linux-node137 ~]<span class="comment"># systemctl  restart haproxy</span></span><br></pre></td></tr></table></figure></p><p>1.1.13：访问web界面并验证haproxy日志目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 ~]<span class="comment"># tail /var/log/haproxy.log </span></span><br><span class="line">Mar  9 16:04:40 localhost haproxy[55688]: Proxy stats started.</span><br><span class="line">Mar  9 16:04:40 localhost haproxy[55688]: Proxy web_port started.</span><br><span class="line">Mar  9 16:06:45 localhost haproxy[55689]: Connect from 192.168.10.1:2623 to 192.168.10.137:80 (web_port/TCP)</span><br></pre></td></tr></table></figure></p><p>二：keepalived安装及配置：</p><p>2.1：编译安装keepalived：</p><p>2.1.1：源码编译安装keepalived：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@linux-node137 src]<span class="comment"># wget http://www.keepalived.org/software/keepalived-1.3.4.tar.gz</span></span><br><span class="line">[root@linux-node137 src]<span class="comment"># tar xvf keepalived-1.3.4.tar.gz</span></span><br><span class="line">[root@linux-node137 src]<span class="comment"># cd keepalived-1.3.4/</span></span><br><span class="line">[root@linux-node137 keepalived-1.3.4]<span class="comment"># yum install libnfnetlink-devel libnfnetlink ipvsadm  libnl libnl-devel  \</span></span><br><span class="line">libnl3 libnl3-devel   lm_sensors-libs net-snmp-agent-libs net-snmp-libs  openssh-server openssh-clients  openssl \</span><br><span class="line">openssl-devel automake iproute </span><br><span class="line"></span><br><span class="line">[root@localhost keepalived-1.3.4]<span class="comment">#  ./configure --prefix=/usr/local/keepalived --disable-fwmark   #传递参数关闭管理防火墙功能</span></span><br></pre></td></tr></table></figure></p><p><img src="/2019/03/09/keepalived及haproxy生产负载和高可用应用（编译安装）/3.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 keepalived-1.3.4]<span class="comment"># make &amp;&amp; amke install</span></span><br></pre></td></tr></table></figure><p>2.1.2：安装完成界面如下：<br><img src="/2019/03/09/keepalived及haproxy生产负载和高可用应用（编译安装）/4.png" alt=""></p><p>2.1.3：复制相关配置文件及启动脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 keepalived-1.3.4]<span class="comment"># cp /usr/local/src/keepalived-1.3.4/keepalived/etc/init.d/keepalived.rh.init /etc/sysconfig/keepalived.sysconfig</span></span><br><span class="line">[root@linux-node137 keepalived-1.3.4]<span class="comment"># cp /usr/local/src/keepalived-1.3.4/keepalived/keepalived.service  /usr/lib/systemd/system/</span></span><br><span class="line">[root@linux-node137 keepalived-1.3.4]<span class="comment"># cp  /usr/local/src/keepalived-1.3.4/bin/keepalived  /usr/sbin/</span></span><br></pre></td></tr></table></figure></p><p>2.1.4：准备一个简单的配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node137 keepalived-1.3.4]<span class="comment"># mkdir /etc/keepalived</span></span><br><span class="line">[root@linux-node137 keepalived-1.3.4]<span class="comment"># vim /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 80</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment">#unicast_src_ip 172.10.1.37</span></span><br><span class="line">    <span class="comment">#unicast_peer &#123;</span></span><br><span class="line">    <span class="comment">#    172.10.1.38</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.15 dev eth0 label eth0:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.1.5：测试keepalived能否正常启动并绑定VIP到本地网卡<br><img src="/2019/03/09/keepalived及haproxy生产负载和高可用应用（编译安装）/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;keepalived配置多vip及实现双主模式&quot;&gt;&lt;a href=&quot;#keepalived配置多vip及实现双主模式&quot; class=&quot;headerlink&quot; title=&quot;keepalived配置多vip及实现双主模式&quot;&gt;&lt;/a&gt;keepalived配置多vip及实现双主模式&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/09/keepalived及haproxy生产负载和高可用应用（编译安装）/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="keepalived" scheme="https://daizhe.net.cn/categories/keepalived/"/>
    
    
      <category term="keepalived" scheme="https://daizhe.net.cn/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>keepalived配置多vip及实现双主模式</title>
    <link href="https://daizhe.net.cn/2019/03/09/keepalived%E9%85%8D%E7%BD%AE%E5%A4%9Avip%E5%8F%8A%E5%AE%9E%E7%8E%B0%E5%8F%8C%E4%B8%BB%E6%A8%A1%E5%BC%8F/"/>
    <id>https://daizhe.net.cn/2019/03/09/keepalived配置多vip及实现双主模式/</id>
    <published>2019-03-09T02:53:27.468Z</published>
    <updated>2019-03-10T06:40:42.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keepalived配置多vip及实现双主模式"><a href="#keepalived配置多vip及实现双主模式" class="headerlink" title="keepalived配置多vip及实现双主模式"></a>keepalived配置多vip及实现双主模式</h1><p><img src="/2019/03/09/keepalived配置多vip及实现双主模式/标题.gif" alt=""><br><a id="more"></a></p><h2 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h2><p>1：实验准备</p><ul><li>各节点同步时时间</li><li>各节点关闭selinux</li></ul><p>2：安装keepalived （本地yum源安装）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># yum info keepalived</span></span><br><span class="line">Version     : 1.3.5</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># yum install keepalived -y</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># rpm -ql keepalived</span></span><br><span class="line">/etc/keepalived/keepalived.conf <span class="comment">#主配置文件</span></span><br><span class="line">/etc/sysconfig/keepalived   <span class="comment">#环境初始化的配置文件</span></span><br><span class="line">/usr/lib/systemd/system/keepalived.service  <span class="comment">#程序启动的脚本</span></span><br><span class="line">/usr/sbin/keepalived    <span class="comment">#可执行程序</span></span><br></pre></td></tr></table></figure></p><p>3：keepalived配置文件解析</p><ul><li><p>keepalived的所有的配置文件都在一个配置文件中设置，支持的配置项也比较多。但分为三类</p><ul><li>1：全局配置（Global Configuration）</li><li>2: VRRP 配置</li><li>3：LVS配置</li></ul></li><li><p>很明显，全局配置就是对整个keepalived起效的配置，不管是否使用LVS,VRRPD是keepalived的核心，LVS配置只在要使用的keepalived来配置和管理LVS时需要使用，如果仅使用Keepalived来做HA，LVS的配置完全是不需要的</p></li><li>配置文件都是以块（block）形式组织的，每隔块都在{和}包围的范围内，#和开头的行都是注释行</li></ul><hr><p>使用mailx发送邮件测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># yum install mailx</span></span><br><span class="line">~]<span class="comment"># echo "hellow" | mail -s "biaoti" 1284808408@qq.com</span></span><br></pre></td></tr></table></figure></p><hr><p>4：养成良好的习惯，编辑服务的配置文件之前就要备份配置文件及解析配置文件</p><p>配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     1284808408@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from root@example.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">   <span class="comment">#vrrp_mcast_group4 224.0.0.18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VRRP-V1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">172.18.135.8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解析配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">备份配置文件</span><br><span class="line">  ~]<span class="comment"># cd /etc/keepalived/</span></span><br><span class="line">  keepalived]<span class="comment"># cp keepalived.conf keepalived.conf.bak</span></span><br><span class="line"></span><br><span class="line">编辑配置文件</span><br><span class="line">  ! Configuration File <span class="keyword">for</span> keepalived   <span class="comment">#提示注释的信息可以使用！/#添加注释信息</span></span><br><span class="line">  global_defs &#123;   <span class="comment">#全局配置段</span></span><br><span class="line">   notification_email &#123;   <span class="comment">#定义接收邮件的邮箱</span></span><br><span class="line">    1284808408@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from     <span class="comment">#定义通知邮箱发件人的地址</span></span><br><span class="line">   smtp_server 127.0.0.1    <span class="comment">#定义邮件服务器的地址</span></span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id                <span class="comment">#此处不用定义，默认为本机的主机名称</span></span><br><span class="line">   <span class="comment">#vrrp_mcast_group4 224.0.0.18 #默认组播地址 224.0.0.0~239.255.255.255</span></span><br><span class="line">   vrrp_skip_check_adv_addr <span class="comment">#如果收到的报文和上一个报文是同一个路由器则跳过检查报文中的源地址</span></span><br><span class="line">   vrrp_strict  <span class="comment">#严格遵守VRRP协议，不允许状态 ：1.没有VIP地址，2.单播邻居，3.在VRRP版本2中有IPV6地址</span></span><br><span class="line">   vrrp_garp_interval 0 <span class="comment">#ARP报文发送延迟，一般设置为0表示不延迟</span></span><br><span class="line">   vrrp_gna_interval 0  <span class="comment">#消息发送延迟一般设置为0表示不延迟</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance 自定义实例的名称 &#123;  <span class="comment">#VRRP相关的配置</span></span><br><span class="line">    state MASTER  <span class="comment">#当前的初始状态   MASTER | BACKUP  主/备份</span></span><br><span class="line">    interface eth0  <span class="comment">#指定当前keepalived在启动以后监听的网卡，组播会从此网卡发出</span></span><br><span class="line">    virtual_router_id 51    <span class="comment">#定义ID 地址范围为0-255 ID号不能冲突</span></span><br><span class="line">    priority 100    <span class="comment">#定义优先级，数字越大优先级越高，一般master的优先级一定是高于backup的，会将VIP绑定在优先级比较高的keepalived服务器上，一般建议将master的优先级要高于backup50个数值，实际上高出一个数值就可以</span></span><br><span class="line">    advert_int 1  <span class="comment">#探测信息，默认一秒发送一个广播包，此包是发送到组播中的</span></span><br><span class="line">     authentication &#123;   <span class="comment">#定义认证的方式（PASS|AH）</span></span><br><span class="line">        auth_type PASS    <span class="comment">#简单的密码认证</span></span><br><span class="line">        auth_pass 66666666    <span class="comment">#指定认证的密码 ，默认的密码为1111，仅支持前8位密码</span></span><br><span class="line">    &#125;</span><br><span class="line">  virtual_ipaddress &#123;   <span class="comment">#VIP相关的配置  ，定义的VIP地址一定是和指定interface 网卡在相同的网段中</span></span><br><span class="line">      172.18.135.8</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5：此节点上启动HA节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">启动节点的keepalived</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start keepalived</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable keepalived</span></span><br><span class="line"></span><br><span class="line">查看进程的状态</span><br><span class="line"></span><br><span class="line">   ~]<span class="comment"># ps -ef | grep keepalived</span></span><br><span class="line">  root       6412      1  0 15:03 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class="line">  root       6413   6412  0 15:03 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class="line">  root       6414   6412  0 15:03 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class="line">  root       6508   6466  0 15:06 pts/0    00:00:00 grep --color=auto keepalived</span><br><span class="line"></span><br><span class="line">  查看VIP</span><br><span class="line"></span><br><span class="line">  ~] <span class="comment"># ip addr</span></span><br><span class="line">  ens37: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:14:4d:6c brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.135.1/24 brd 172.18.135.255 scope global noprefixroute ens37</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.18.135.8/32 scope global ens37</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::4587:5c47:4c05:570b/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></p><p>6：启动keepalived会默认生成访问墙的规则<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy ACCEPT)     <span class="comment">#拒绝从任何地址到VIP地址的访问</span></span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">DROP       all  --  anywhere             anywhere         match-set keepalived dst</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br></pre></td></tr></table></figure></p><p>7：解决yum安装的keepalived启动时默认生成的防火墙额规则的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"></span><br><span class="line">  直接清空防火墙</span><br><span class="line">  ~]<span class="comment"># iptables -F</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  可以在keepalived启动时跳过生成防火墙的规则</span><br><span class="line">  编辑配置文件</span><br><span class="line">  global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     1284808408@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from root@example.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">   <span class="comment">#vrrp_mcast_group4 224.0.0.18</span></span><br><span class="line">   vrrp_iptables    <span class="comment">#不生成防火墙策略</span></span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br></pre></td></tr></table></figure></p><p>8：其他节点ping  keepalived VIP地址测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># ping 172.18.135.8</span></span><br><span class="line">PING 172.18.135.8 (172.18.135.8) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.135.8: icmp_seq=1 ttl=64 time=0.077 ms</span><br><span class="line">64 bytes from 172.18.135.8: icmp_seq=2 ttl=64 time=0.106 ms</span><br><span class="line">64 bytes from 172.18.135.8: icmp_seq=3 ttl=64 time=0.090 ms</span><br></pre></td></tr></table></figure></p><hr><h2 id="将VIP在HA主机上设置一个单独的子接口"><a href="#将VIP在HA主机上设置一个单独的子接口" class="headerlink" title="将VIP在HA主机上设置一个单独的子接口"></a>将VIP在HA主机上设置一个单独的子接口</h2><p>1：编辑keepalived的配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~]<span class="comment"># cat /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     1284808408@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from root@example.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">   <span class="comment">#vrrp_mcast_group4 224.0.0.18</span></span><br><span class="line">   vrrp_iptables</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VRRP-V1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">172.18.135.8 dev ens37 label ens37:1   <span class="comment">#定义lable，也可以在地址后面添加掩码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2：重新启动查看网卡接口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl restart keepalived</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="高可用集群部署"><a href="#高可用集群部署" class="headerlink" title="高可用集群部署"></a>高可用集群部署</h2><p><img src="/2019/03/09/keepalived配置多vip及实现双主模式/1.png" alt=""></p><p>1：node1配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     1284808408@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from root@example.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">   <span class="comment">#vrrp_mcast_group4 224.0.0.18</span></span><br><span class="line">   vrrp_iptables</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VRRP-V1 &#123;</span><br><span class="line">    state MASTER        <span class="comment">#主</span></span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100        <span class="comment">#100优先级</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">172.18.135.8/24 dev ens37 label ens37:01</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2：启动keepalived<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl start keepalived</span></span><br></pre></td></tr></table></figure></p><p>3：node2 配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># yum install keepalived -y</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/keepalived/keepalived.conf </span></span><br><span class="line"></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     1284808408@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from root@example.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">   <span class="comment">#vrrp_mcast_group4 224.0.0.18</span></span><br><span class="line">   vrrp_iptables</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VRRP-V1 &#123;</span><br><span class="line">    state BACKUP          <span class="comment">#备</span></span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 90           <span class="comment">#90优先级要低于MASTER</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.135.8/24 dev ens37 label ens37:01</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4：node2 启动keepalived<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl start keepalived</span></span><br><span class="line">~]<span class="comment"># systemctl enable keepalived</span></span><br></pre></td></tr></table></figure></p><p>5：测试在node1节点上ens37网卡断掉，是否会将vip飘到node2上(可以查看日志信息)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># ifconfig ens37 down</span></span><br><span class="line"></span><br><span class="line">node2</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># ip addr</span></span><br><span class="line">ens37: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 00:0c:29:97:a5:a7 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.135.2/24 brd 172.18.135.255 scope global ens37</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.18.135.8/24 scope global secondary ens37:01</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::8aad:e002:aea0:6f27/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果node1节点挂掉了，node2可以继续对外提供服务，但是node1的优先级要高于node2 如果node1恢复则vip会继续飘回node1上</span><br></pre></td></tr></table></figure></p><hr><h2 id="指定当主节点VIP宕机时自动发送报警邮件信息"><a href="#指定当主节点VIP宕机时自动发送报警邮件信息" class="headerlink" title="指定当主节点VIP宕机时自动发送报警邮件信息"></a>指定当主节点VIP宕机时自动发送报警邮件信息</h2><p>1：编辑keepalived配置文件（node1 和node2 配置文件相同）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">  notify_master</span><br><span class="line">  <span class="comment">#当前节点成为主节点时触发的脚本</span></span><br><span class="line">  notify_backup</span><br><span class="line">  <span class="comment">#当前节点转为备份节点时触发的脚本</span></span><br><span class="line">  notify_fault</span><br><span class="line">  <span class="comment">#当前节点转为“失败”状态时触发的脚本</span></span><br><span class="line"></span><br><span class="line">定义报警时触发的脚本</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim  /etc/keepalived/notify.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">contact=<span class="string">'1284808408@qq.com'</span></span><br><span class="line"><span class="function"><span class="title">notify</span></span>() &#123;</span><br><span class="line">        <span class="built_in">local</span> mailsubject=<span class="string">"<span class="variable">$(hostname)</span> to be <span class="variable">$1</span>, vip floating"</span></span><br><span class="line">        <span class="built_in">local</span> mailbody=<span class="string">"<span class="variable">$(date +'%F %T')</span>: vrrp transition, <span class="variable">$(hostname)</span> changed to be <span class="variable">$1</span>"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$mailbody</span>"</span> | mail -s <span class="string">"<span class="variable">$mailsubject</span>"</span> <span class="variable">$contact</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        master)</span><br><span class="line">        notify master</span><br><span class="line">        ;;</span><br><span class="line">        backup)</span><br><span class="line">        notify backup</span><br><span class="line">        ;;</span><br><span class="line">        fault)</span><br><span class="line">        notify fault</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$(basename $0)</span> &#123;master|backup|fault&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">        ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># chmod +x /etc/keepalived/notify.sh </span></span><br><span class="line"></span><br><span class="line">编辑keepalived配置文件调用脚本</span><br><span class="line">~]<span class="comment"># cat /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     1284808408@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from root@example.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">   <span class="comment">#vrrp_mcast_group4 224.0.0.18</span></span><br><span class="line">   vrrp_iptables</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VRRP-V1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">172.18.135.8/24 dev ens37 label ens37:01    <span class="comment">#可配置多个VIP地址</span></span><br><span class="line">  172.18.135.9/24 dev ens37 label ens37:02</span><br><span class="line">    &#125;</span><br><span class="line">  notify_master <span class="string">"/etc/keepalived/notify.sh master"</span></span><br><span class="line">  notify_backup <span class="string">"/etc/keepalived/notify.sh backup"</span></span><br><span class="line">  notify_fault <span class="string">"/etc/keepalived/notify.sh fault"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">重启服务</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart keepalived</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="keepalived-双主模式"><a href="#keepalived-双主模式" class="headerlink" title="keepalived 双主模式"></a>keepalived 双主模式</h2><p><img src="/2019/03/09/keepalived配置多vip及实现双主模式/2.png" alt=""></p><ul><li>互为主备</li><li>VIP: 172.18.135.8 - KP_server1 MASTER  - KP_server2 BACKUP</li><li>VIP: 172.18.135.9 - KP_server2 MASTER  - KP_server1 BACKUP</li></ul><p>KP_server1配置文件(主VIP ： 172.18.135.8   备VIP ：172.18.135.9)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/keepalived/keepalived.conf</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from root@example.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.135.8/24 dev ens37 label ens37:01</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  notify_master <span class="string">"/etc/keepalived/notify.sh master"</span></span><br><span class="line">  notify_backup <span class="string">"/etc/keepalived/notify.sh backup"</span></span><br><span class="line">  notify_fault <span class="string">"/etc/keepalived/notify.sh fault"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VRRP-V2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.135.9/24 dev ens37 label ens37:01</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  notify_master <span class="string">"/etc/keepalived/notify.sh master"</span></span><br><span class="line">  notify_backup <span class="string">"/etc/keepalived/notify.sh backup"</span></span><br><span class="line">  notify_fault <span class="string">"/etc/keepalived/notify.sh fault"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>KP_server2配置文件(主VIP ： 172.18.135.9   备VIP ：172.18.135.8)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/keepalived/keepalived.conf </span></span><br><span class="line"></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     1284808408@qq.com</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.135.8/24 dev ens37 label ens37:01</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VRRP-V2 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.135.9/24 dev ens37 label ens37:01</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个节点的重新启动keepalived服务</p><p>KP_server1<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl restart keepalived</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># ip addr</span></span><br><span class="line">ens37: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:14:4d:6c brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.135.1/24 brd 172.18.135.255 scope global noprefixroute ens37</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.18.135.8/24 scope global secondary ens37:01</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></p><p>KP_server2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl restart keepalived</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># ip addr</span></span><br><span class="line">ens37: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 00:0c:29:97:a5:a7 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.135.2/24 brd 172.18.135.255 scope global ens37</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.18.135.9/24 scope global secondary ens37:01</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;keepalived配置多vip及实现双主模式&quot;&gt;&lt;a href=&quot;#keepalived配置多vip及实现双主模式&quot; class=&quot;headerlink&quot; title=&quot;keepalived配置多vip及实现双主模式&quot;&gt;&lt;/a&gt;keepalived配置多vip及实现双主模式&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/09/keepalived配置多vip及实现双主模式/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="keepalived" scheme="https://daizhe.net.cn/categories/keepalived/"/>
    
    
      <category term="keepalived" scheme="https://daizhe.net.cn/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>ELK之filebeat多个文件日志收集</title>
    <link href="https://daizhe.net.cn/2019/03/06/ELK%E4%B9%8Bfilebeat%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    <id>https://daizhe.net.cn/2019/03/06/ELK之filebeat多个文件日志收集/</id>
    <published>2019-03-06T01:51:36.026Z</published>
    <updated>2019-03-06T11:40:34.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK之filebeat多个文件日志收集"><a href="#ELK之filebeat多个文件日志收集" class="headerlink" title="ELK之filebeat多个文件日志收集"></a>ELK之filebeat多个文件日志收集</h1><p><img src="/2019/03/06/ELK之filebeat多个文件日志收集/标题.png" alt=""><br><a id="more"></a></p><h2 id="filebeat日志收集实战："><a href="#filebeat日志收集实战：" class="headerlink" title="filebeat日志收集实战："></a>filebeat日志收集实战：</h2><ul><li>架构规划：<ul><li>在下面的图当中从左向右看，当要访问ELK日志统计平台的时候，首先访问的是两台nginx+keepalived做的负载高可用，访问的地址是keepalived的IP，当一台nginx代理服务器挂掉之后也不影响访问，然后nginx将请求转发到kibana，kibana再去elasticsearch获取数据，elasticsearch是两台做的集群，数据会随机保存在任意一台elasticsearch服务器，redis服务器做数据的临时保存，避免web服务器日志量过大的时候造成的数据收集与保存不一致导致的日志丢失，可以临时保存到redis，redis可以是集群，然后再由logstash服务器在非高峰时期从redis持续的取出即可，另外有一台mysql数据库服务器，用于持久化保存特定的数据，web服务器的日志由filebeat收集之后发送给另外的一台logstash，再有其写入到redis即可完成日志的收集，从图中可以看出，redis服务器处于前端结合的最中间，其左右都要依赖于redis的正常运行，web服务删个日志经过filebeat收集之后通过日志转发层的logstash写入到redis不同的key当中，然后提取层logstash再从redis将数据提取并安按照不同的类型写入到elasticsearch的不同index当中，用户最终通过nginx代理的kibana查看到收集到的日志的具体内容：</li></ul></li></ul><p><img src="/2019/03/06/ELK之filebeat多个文件日志收集/1.png" alt=""></p><p>1：filebeat收集日志转发至logstash(基于beats模块)</p><p>官方文档：<a href="https://www.elastic.co/guide/en/beats/filebeat/current/logstash-output.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/logstash-output.html</a></p><p>目前只收集了系统日志，下面将tomcat的访问日志和启动时生成的catalina.txt文件的日志进行收集，另外测试多行匹配，并将输出改为logstash进根据日志类型判断写入到不同的redis key当中，在一个filebeat服务上面同时收集不同类型的日志，比如收集系统日志的时候还要收集tomcat的访问日志，那么直接带来的问题就是要在写入至redis的时候要根据不同的日志类型写入到reids不通的key当中，首先通过logstash监听一个端口，并做标准输出测试，具体配置为：</p><p>配置Logstash配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cd /etc/logstash/conf.d/</span></span><br><span class="line">conf.d]<span class="comment"># cat beats-test.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">        beats &#123;</span><br><span class="line">        port =&gt; 5044</span><br><span class="line">        codec =&gt; <span class="string">"json"</span> <span class="comment">#指定编码格式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#将输出改为文件进行临时输出测试</span></span><br><span class="line">output &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/tmp/filebeat.txt"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>logstash配置文件测试语法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conf.d]<span class="comment"># /usr/share/logstash/bin/logstash -f  /etc/logstash/conf.d/beats-test.conf  -t</span></span><br><span class="line">conf.d]<span class="comment"># systemctl  restart  logstash #重启服务</span></span><br></pre></td></tr></table></figure></p><p>2：更改web服务器的filebeat配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置filebeat配置文件，配置收集nginx的访问日志，标准输出至Logstash中</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/filebeat/filebeat.yml </span></span><br><span class="line">12 filebeat.prospectors:</span><br><span class="line"></span><br><span class="line">18 - input_type: <span class="built_in">log</span></span><br><span class="line">21   paths:</span><br><span class="line">22     - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line"></span><br><span class="line">39   fields:</span><br><span class="line">40      <span class="built_in">type</span>: nginx-accesslog</span><br><span class="line"></span><br><span class="line">116 output.logstash:</span><br><span class="line">117   hosts: [<span class="string">"172.18.135.2:5044"</span>] <span class="comment">#logstash 服务器地址，可以是多个</span></span><br><span class="line">118   enabled: <span class="literal">true</span>   <span class="comment">#是否开启输出至logstash，默认即为true</span></span><br><span class="line">119   worker: 1  <span class="comment">#工作线程数</span></span><br><span class="line">120   <span class="comment">#compression_level: 3 #压缩级别，数值越大，压缩比越高（1~9），一般情况下不使用，因为会占用cpu资源</span></span><br><span class="line">121   <span class="comment">#loadbalance: true #多个输出的时候开启负载,在输出到多个logstash时开启此项</span></span><br></pre></td></tr></table></figure></p><p>重启filebeat<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl  restart filebeat</span></span><br></pre></td></tr></table></figure></p><p>3：客户端模拟访问web服务器，logstash查看是记录日志文件<br><img src="/2019/03/06/ELK之filebeat多个文件日志收集/2.png" alt=""></p><p>4：Logstash中配置将filebeat发送来的日志发送到redis<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">前面配置logstash是将filebeat发来的日志信息，存储到本地的文件中</span><br><span class="line"></span><br><span class="line">编辑logstahs配置文件</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># cd /etc/logstash/conf.d/</span></span><br><span class="line">conf.d]<span class="comment"># cat beats-test.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">        beats &#123;</span><br><span class="line">        port =&gt; 5044</span><br><span class="line">        codec =&gt; <span class="string">"json"</span> <span class="comment">#指定编码格式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#将输出改为文件进行临时输出测试</span></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [fields] [<span class="built_in">type</span>] == <span class="string">"nginx-accesslog"</span> &#123;</span><br><span class="line">    redis &#123;</span><br><span class="line">      host =&gt; <span class="string">"172.18.135.2"</span> <span class="comment">#redis服务器的地址</span></span><br><span class="line">      prot =&gt; <span class="string">"6379"</span></span><br><span class="line">      password =&gt; <span class="string">"123456"</span></span><br><span class="line">      data_type =&gt; <span class="string">"list"</span></span><br><span class="line">      key =&gt; <span class="string">"nginx-accesslog"</span>  <span class="comment">#日志数据存储到redis时的key的名称 </span></span><br><span class="line">      db =&gt; 1</span><br><span class="line">      codec =&gt; <span class="string">"json"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>logstash配置文件测试语法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conf.d]<span class="comment"># /usr/share/logstash/bin/logstash -f  /etc/logstash/conf.d/beats-test.conf  -t</span></span><br><span class="line">conf.d]<span class="comment"># systemctl  restart  logstash #重启服务</span></span><br></pre></td></tr></table></figure></p><p>5：在redis上查看是否已经存入1库中</p><p>6：配置logstash从redis中读取键值并存储到ES集群中做日志收集<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/logstash/conf.d/redis-systemlog-es.conf </span></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  redis &#123;</span><br><span class="line">    host =&gt; <span class="string">"172.18.135.2"</span> <span class="comment">#redis主机地址</span></span><br><span class="line">    password =&gt; <span class="string">"123456"</span></span><br><span class="line">    port =&gt; <span class="string">"6379"</span></span><br><span class="line">    db =&gt; <span class="string">"1"</span></span><br><span class="line">    key =&gt; <span class="string">"nginx-accesslog"</span></span><br><span class="line">    data_type =&gt; <span class="string">"list"</span></span><br><span class="line">    codec =&gt; <span class="string">"json"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [fields][<span class="built_in">type</span>] == <span class="string">"nginx-accesslog"</span> &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [<span class="string">"172.18.135.1:9200"</span>] <span class="comment">#ES集群主机地址</span></span><br><span class="line">      index =&gt; <span class="string">"nginx-log-135-1-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">      codec =&gt; <span class="string">"json"</span></span><br><span class="line">&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>语法检测并启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/redis-systemlog-es.conf -t</span></span><br><span class="line">~]<span class="comment"># systemctl restart logstash</span></span><br></pre></td></tr></table></figure></p><p>7：ES主机上head插件查看日志索引是否存储</p><p>8：kibana根据定义的索引展示日志记录</p><hr><h2 id="filebeat收集多类型的日志文件"><a href="#filebeat收集多类型的日志文件" class="headerlink" title="filebeat收集多类型的日志文件"></a>filebeat收集多类型的日志文件</h2><p>1：编辑用来收集日志的filebeat配置文件，收集本机的多个日子文件(收集本机上的nginx的访问日志和本机的所有的文件)，发送到Logstash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># grep -v "#" /etc/filebeat/filebeat.yml | grep -v "^$"</span></span><br><span class="line">filebeat.prospectors:</span><br><span class="line">- input_type: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  fields:</span><br><span class="line">     <span class="built_in">type</span>: nginx-accesslog  <span class="comment">#标识nginx访问日志的类型（需要将nginx的日志类型改为json）</span></span><br><span class="line">     - input_type: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/message</span><br><span class="line">  fields:</span><br><span class="line">     <span class="built_in">type</span>: systemlog  <span class="comment">#标识message日志的类型</span></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"172.18.135.1:5044"</span>]  </span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  worker: 1</span><br><span class="line">  compression_level: 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2：编辑logstash配置文件，将filebeat发送来的日志信息，根据定义的<span class="built_in">type</span>类型存储到redis中</span><br><span class="line">```bash</span><br><span class="line">~]<span class="comment"># cd /etc/logstash/conf.d/</span></span><br><span class="line">conf.d]<span class="comment"># cat beats-test.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">        beats &#123;</span><br><span class="line">        port =&gt; 5044</span><br><span class="line">        codec =&gt; <span class="string">"json"</span> <span class="comment">#指定编码格式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#将输出改为文件进行临时输出测试</span></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [fields] [<span class="built_in">type</span>] == <span class="string">"nginx-accesslog"</span> &#123;</span><br><span class="line">    redis &#123;</span><br><span class="line">      host =&gt; <span class="string">"172.18.135.2"</span> <span class="comment">#redis服务器的地址</span></span><br><span class="line">      prot =&gt; <span class="string">"6379"</span></span><br><span class="line">      password =&gt; <span class="string">"123456"</span></span><br><span class="line">      data_type =&gt; <span class="string">"list"</span></span><br><span class="line">      key =&gt; <span class="string">"nginx-accesslog"</span>  <span class="comment">#日志数据存储到redis时的key的名称 </span></span><br><span class="line">      db =&gt; 1</span><br><span class="line">      codec =&gt; <span class="string">"json"</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="keyword">if</span> [fields] [<span class="built_in">type</span>] == <span class="string">"systemlog"</span> &#123;</span><br><span class="line">    redis &#123;</span><br><span class="line">      host =&gt; <span class="string">"172.18.135.2"</span> <span class="comment">#redis服务器的地址</span></span><br><span class="line">      prot =&gt; <span class="string">"6379"</span></span><br><span class="line">      password =&gt; <span class="string">"123456"</span></span><br><span class="line">      data_type =&gt; <span class="string">"list"</span></span><br><span class="line">      key =&gt; <span class="string">"systemlog"</span>  <span class="comment">#日志数据存储到redis时的key的名称 </span></span><br><span class="line">      db =&gt; 1</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>语法检测并启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/redis-systemlog-es.conf -t</span></span><br><span class="line">~]<span class="comment"># systemctl restart logstash</span></span><br></pre></td></tr></table></figure></p><p>3：在redis上查看是否已经存入1库中</p><p>4：编辑另一台logstash主机配置文件，从redis中服务日志键值，存储到后端的ES存储集群中，进行日志存储<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/logstash/conf.d/redis-systemlog-es.conf </span></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  redis &#123;</span><br><span class="line">    host =&gt; <span class="string">"172.18.135.2"</span> <span class="comment">#redis主机地址</span></span><br><span class="line">    password =&gt; <span class="string">"123456"</span></span><br><span class="line">    port =&gt; <span class="string">"6379"</span></span><br><span class="line">    db =&gt; <span class="string">"1"</span></span><br><span class="line">    key =&gt; <span class="string">"nginx-accesslog"</span></span><br><span class="line">    data_type =&gt; <span class="string">"list"</span></span><br><span class="line">    codec =&gt; <span class="string">"json"</span></span><br><span class="line"> &#125;</span><br><span class="line">   redis &#123;</span><br><span class="line">    host =&gt; <span class="string">"172.18.135.2"</span> <span class="comment">#redis主机地址</span></span><br><span class="line">    password =&gt; <span class="string">"123456"</span></span><br><span class="line">    port =&gt; <span class="string">"6379"</span></span><br><span class="line">    db =&gt; <span class="string">"1"</span></span><br><span class="line">    key =&gt; <span class="string">"systemlog"</span></span><br><span class="line">    data_type =&gt; <span class="string">"list"</span></span><br><span class="line">    <span class="comment">#codec =&gt; "json"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [fields][<span class="built_in">type</span>] == <span class="string">"nginx-accesslog"</span> &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [<span class="string">"172.18.135.1:9200"</span>] <span class="comment">#ES集群主机地址</span></span><br><span class="line">      index =&gt; <span class="string">"nginx-log-135-1-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">      codec =&gt; <span class="string">"json"</span></span><br><span class="line">&#125;&#125;</span><br><span class="line">  <span class="keyword">if</span> [fields][<span class="built_in">type</span>] == <span class="string">"systemlog"</span> &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [<span class="string">"172.18.135.1:9200"</span>] <span class="comment">#ES集群主机地址</span></span><br><span class="line">      index =&gt; <span class="string">"message-log-135-1-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">      codec =&gt; <span class="string">"json"</span></span><br><span class="line">&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>语法检测并启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/redis-systemlog-es.conf -t</span></span><br><span class="line">~]<span class="comment"># systemctl restart logstash</span></span><br></pre></td></tr></table></figure></p><p>5：ES主机上head插件查看日志索引是否存储</p><p>6：kibana根据定义的索引展示日志记录</p><hr><h2 id="脚本编写进行监控"><a href="#脚本编写进行监控" class="headerlink" title="脚本编写进行监控"></a>脚本编写进行监控</h2><ul><li>依据判断logstash存储到redis数据的数据长度来判断存储redis数据的logstash程序是否已经宕机</li><li>实际环境当中，可能会出现reids当中堆积了大量的数据而logstash由于种种原因未能及时提取日志，此时会导致redis服务器的内存被大量使用，甚至出现如下内存即将被使用完毕的情景</li></ul><p>1：查看reids中的日志队列长度发现有大量的日志堆积在redis 当中<br><img src="/2019/03/06/ELK之filebeat多个文件日志收集/3.png" alt=""></p><p>2：在写入redis日志信息的logstash主机上编写python脚本（编写python脚本，获取redis中列表长度并返回值）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~] <span class="comment"># cat redis-llen.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-</span></span><br><span class="line"><span class="comment">#Author Dai zhe</span></span><br><span class="line">import redis</span><br><span class="line">def redis_conn():</span><br><span class="line">    pool=redis.ConnectionPool(host=<span class="string">"Redis主机地址"</span>,port=6379,db=1,password=123456)</span><br><span class="line">    conn = redis.Redis(connection_pool=pool)</span><br><span class="line">    data = conn.llen(<span class="string">'存储在redis的KEY名称'</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">redis_conn()</span><br></pre></td></tr></table></figure></p><p>3：安装管理模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># yum install python-pip</span></span><br><span class="line">~]<span class="comment"># pip install redis</span></span><br></pre></td></tr></table></figure></p><p>4：执行脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># python redis-llen.py</span></span><br><span class="line">这里显示redia KEY对应的值的大小</span><br></pre></td></tr></table></figure></p><hr><h2 id="脚本编写进行ES存储定期清理"><a href="#脚本编写进行ES存储定期清理" class="headerlink" title="脚本编写进行ES存储定期清理"></a>脚本编写进行ES存储定期清理</h2><p>在ES主机上</p><ul><li>关于elasticsearch存储index的定期删除，elasticsearch存储的日志较多的时候会影响搜索性能，因此建议定期清理，脚本如下，这次是shell脚本：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@els-s2 ~]<span class="comment"># vim els_delete.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=`date -d <span class="string">"2 days ago"</span> +%Y.%m.%d`</span><br><span class="line">LOG_NAME=<span class="string">"api4-systemlog-7-103"</span>   <span class="comment">#索引名称,定义的索引尽量使用含有日期格式的索引</span></span><br><span class="line">FILE_NAME=<span class="variable">$&#123;LOG_NAME&#125;</span>-<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line">curl -XDELETE  http://ES主机地址:9200/<span class="variable">$&#123;FILE_NAME&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;FILE_NAME&#125;</span> delete success"</span></span><br><span class="line"></span><br><span class="line">[root@els-s2 ~]<span class="comment"># chmod  a+x /root/els_delete.sh </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">测试执行：</span><br><span class="line"></span><br><span class="line">[root@els-s2 ~]<span class="comment"># bash -x /root/els_delete.sh</span></span><br><span class="line">++ date -d <span class="string">'30 days ago'</span> +%Y.%m.%d</span><br><span class="line">+ DATE=2016.08.05</span><br><span class="line">+ LOG_NAME=api4-systemlog</span><br><span class="line">+ FILE_NAME=api4-systemlog-2016.08.05</span><br><span class="line">+ curl -XDELETE http://hfelk.chinacloudapp.cn:9200/api4-systemlog-2016.08.05</span><br><span class="line">&#123;<span class="string">"acknowledged"</span>:<span class="literal">true</span>&#125;+ <span class="built_in">echo</span> <span class="string">'api4-systemlog-2016.08.05 delete success'</span></span><br><span class="line">api4-systemlog-2016.08.05 delete success</span><br><span class="line">6.2：添加任务计定期执行即可：</span><br><span class="line"></span><br><span class="line">[root@els-s2 ~]<span class="comment"># crontab  -e</span></span><br><span class="line">1 * * * * /root/els_delete.sh <span class="comment">#每天凌晨一点清除一月之前的日志</span></span><br></pre></td></tr></table></figure><p>备注：</p><ul><li>千万不要直接去ES主机上删除数据<ul><li>/data/esdata/</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ELK之filebeat多个文件日志收集&quot;&gt;&lt;a href=&quot;#ELK之filebeat多个文件日志收集&quot; class=&quot;headerlink&quot; title=&quot;ELK之filebeat多个文件日志收集&quot;&gt;&lt;/a&gt;ELK之filebeat多个文件日志收集&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/06/ELK之filebeat多个文件日志收集/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/categories/ELK-Stack/"/>
    
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/tags/ELK-Stack/"/>
    
  </entry>
  
  <entry>
    <title>ELK之使用filebeat替换logstash</title>
    <link href="https://daizhe.net.cn/2019/03/03/ELK%E4%B9%8B%E4%BD%BF%E7%94%A8filebeat%E6%9B%BF%E6%8D%A2logstash/"/>
    <id>https://daizhe.net.cn/2019/03/03/ELK之使用filebeat替换logstash/</id>
    <published>2019-03-03T03:29:01.771Z</published>
    <updated>2019-03-06T08:01:02.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK之使用filebeat替换logstash"><a href="#ELK之使用filebeat替换logstash" class="headerlink" title="ELK之使用filebeat替换logstash"></a>ELK之使用filebeat替换logstash</h1><p><img src="/2019/03/03/ELK之使用filebeat替换logstash/标题.png" alt=""><br><a id="more"></a></p><h2 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h2><ul><li>Filebeat是轻量级单用途的日志收集工具，用于在没有安装java的服务器上专门收集日志，可以将日志转发到logstash、elasticsearch或redis及kafka等场景中进行下一步处理。</li><li>官网下载地址：<a href="https://www.elastic.co/downloads/beats/filebeat" target="_blank" rel="noopener">https://www.elastic.co/downloads/beats/filebeat</a></li><li>官方文档：<a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-</a></li></ul><h2 id="将本机的json格式的日志通过filebeat收集并标准输出至屏幕"><a href="#将本机的json格式的日志通过filebeat收集并标准输出至屏幕" class="headerlink" title="将本机的json格式的日志通过filebeat收集并标准输出至屏幕"></a>将本机的json格式的日志通过filebeat收集并标准输出至屏幕</h2><ul><li><p>确认日志格式为json格式：<br>先访问web服务器，以产生一定的日志，然后确认是json格式，因为下面的课程中会使用到：</p></li><li><p>这里演示的本机的json日志格式为web服务器tomcat的访问日志格式</p></li></ul><p>1：访问tomcat WEB站点，生成访问日志信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># ab -n100 -c100 http://192.168.15.16:8080/web</span></span><br></pre></td></tr></table></figure></p><p>2：确认日志格式，后续会用日志做统计<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># tail  /usr/local/tomcat/logs/localhost_access_log.2017-04-28.txt </span></span><br><span class="line">&#123;<span class="string">"clientip"</span>:<span class="string">"192.168.15.15"</span>,<span class="string">"ClientUser"</span>:<span class="string">"-"</span>,<span class="string">"authenticated"</span>:<span class="string">"-"</span>,<span class="string">"AccessTime"</span>:<span class="string">"[28/Apr/2017:21:16:46 +0800]"</span>,<span class="string">"method"</span>:<span class="string">"GET /webdir/ HTTP/1.0"</span>,<span class="string">"status"</span>:<span class="string">"200"</span>,<span class="string">"SendBytes"</span>:<span class="string">"12"</span>,<span class="string">"Query?string"</span>:<span class="string">""</span>,<span class="string">"partner"</span>:<span class="string">"-"</span>,<span class="string">"AgentVersion"</span>:<span class="string">"ApacheBench/2.3"</span>&#125;</span><br><span class="line">&#123;<span class="string">"clientip"</span>:<span class="string">"192.168.15.15"</span>,<span class="string">"ClientUser"</span>:<span class="string">"-"</span>,<span class="string">"authenticated"</span>:<span class="string">"-"</span>,<span class="string">"AccessTime"</span>:<span class="string">"[28/Apr/2017:21:16:46 +0800]"</span>,<span class="string">"method"</span>:<span class="string">"GET /webdir/ HTTP/1.0"</span>,<span class="string">"status"</span>:<span class="string">"200"</span>,<span class="string">"SendBytes"</span>:<span class="string">"12"</span>,<span class="string">"Query?string"</span>:<span class="string">""</span>,<span class="string">"partner"</span>:<span class="string">"-"</span>,<span class="string">"AgentVersion"</span>:<span class="string">"ApacheBench/2.3"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>3：安装配置filebeat<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    ~]<span class="comment"># systemctl  stop logstash  #停止logstash服务(如果有安装)</span></span><br><span class="line">    src]<span class="comment"># wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-5.3.2-x86_64.rpm</span></span><br><span class="line">    src]<span class="comment"># yum install filebeat-5.3.2-x86_64.rpm  -y</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>4：配置filebeat收集系统日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    ~]<span class="comment"># cd /etc/filebeat/</span></span><br><span class="line">    filebeat~]<span class="comment"># cp filebeat.yml filebeat.yml.bak #备份源配置文件</span></span><br><span class="line"></span><br><span class="line">filebeat收集多个系统日志并输出到本地文件</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># grep -v "#"  /etc/filebeat/filebeat.yml | grep -v "^$"</span></span><br><span class="line">filebeat.prospectors:</span><br><span class="line">- input_type: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/messages</span><br><span class="line">    - /var/<span class="built_in">log</span>/*.<span class="built_in">log</span></span><br><span class="line">  exclude_lines: [<span class="string">"^DBG"</span>,<span class="string">"^$"</span>] <span class="comment">#不收取的</span></span><br><span class="line">  <span class="comment">#include_lines: ["^ERR", "^WARN"]  #只收取的</span></span><br><span class="line">  document_type: system-log-1512 <span class="comment">#类型，会在每条日志中插入标记</span></span><br><span class="line">output.file:</span><br><span class="line">  path: <span class="string">"/tmp"</span></span><br><span class="line">  filename: <span class="string">"filebeat.txt"</span></span><br></pre></td></tr></table></figure></p><p>5：启动filebeat服务并验证本地文件是否有数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebeat]<span class="comment"># systemctl  start filebeat</span></span><br></pre></td></tr></table></figure></p><p><img src="/2019/03/03/ELK之使用filebeat替换logstash/1.png" alt=""></p><hr><hr><h2 id="使用Filebeat收集本机的Nginx的访问日志并存储到后端的ES主机上"><a href="#使用Filebeat收集本机的Nginx的访问日志并存储到后端的ES主机上" class="headerlink" title="使用Filebeat收集本机的Nginx的访问日志并存储到后端的ES主机上"></a>使用Filebeat收集本机的Nginx的访问日志并存储到后端的ES主机上</h2><p><img src="/2019/03/03/ELK之使用filebeat替换logstash/2.png" alt=""></p><p>Filebeat官方参考手册：<a href="https://www.elastic.co/products/beats" target="_blank" rel="noopener">https://www.elastic.co/products/beats</a></p><p>1：rpm包安装Filebeat<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># ls</span></span><br><span class="line">filebeat-5.6.13-x86_64.rpm</span><br><span class="line">~]<span class="comment"># rpm -ivh filebeat-5.6.13-x86_64.rpm</span></span><br></pre></td></tr></table></figure></p><p>Filebeat配置文件解析<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/filebeat/filebeat.yml  #yml语法格式</span></span><br><span class="line">21  paths:      <span class="comment">#基于path参数，指定收集的哪个日志文件，支持模糊匹配</span></span><br><span class="line">22    - /var/<span class="built_in">log</span>/*.<span class="built_in">log</span></span><br><span class="line">23    <span class="comment">#- c:\programdata\elasticsearch\logs\*    #windows收集windows日志文件语法</span></span><br><span class="line"></span><br><span class="line">27    <span class="comment">#exclude_lines: ["^DBG"]  #排除日志文件中开头以DBU开头的行不做收集</span></span><br><span class="line"></span><br><span class="line">31    <span class="comment">#include_lines: ["^ERR", "^WARN"]     #指定日志文件中只收集的行</span></span><br><span class="line"></span><br><span class="line">35    <span class="comment">#exclude_files: [".gz$"]      #排除文件，范例排除收集压缩的文件</span></span><br><span class="line"></span><br><span class="line">39   <span class="comment">#fields:   </span></span><br><span class="line">40   <span class="comment">#  level: debug    #在收集的每条日志中插入debug</span></span><br><span class="line">41   <span class="comment">#  review: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 多行合并</span></span><br><span class="line">49   <span class="comment">#multiline.pattern: ^\[</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================ Outputs ================================    =====</span></span><br><span class="line"></span><br><span class="line">81 output.elasticsearch:   <span class="comment">#将收集的日志存储到ES主机上格式</span></span><br><span class="line"></span><br><span class="line">83   hosts: [<span class="string">"localhost:9200"</span>]</span><br><span class="line"></span><br><span class="line">86   <span class="comment">#protocol: "https"     #支持安全认证机制</span></span><br><span class="line">87   <span class="comment">#username: "elastic"</span></span><br><span class="line">88   <span class="comment">#password: "changeme"</span></span><br></pre></td></tr></table></figure></p><p>2：编辑配置文件修改nginx日志的格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">http &#123;</span><br><span class="line"><span class="comment">#    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line"><span class="comment">#                      '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line"><span class="comment">#                      '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    access_log  /var/log/nginx/access.log  main;</span></span><br><span class="line"></span><br><span class="line">log_format access_json <span class="string">'&#123;"@timestamp":"$time_iso8601",'</span>        <span class="comment">#定义日志的格式</span></span><br><span class="line">        <span class="string">'"host":"$server_addr",'</span></span><br><span class="line">        <span class="string">'"clientip":"$remote_addr",'</span></span><br><span class="line">        <span class="string">'"size":$body_bytes_sent,'</span></span><br><span class="line">        <span class="string">'"responsetime":$request_time,'</span></span><br><span class="line">        <span class="string">'"upstreamtime":"$upstream_response_time",'</span></span><br><span class="line">        <span class="string">'"upstreamhost":"$upstream_addr",'</span></span><br><span class="line">        <span class="string">'"http_host":"$host",'</span></span><br><span class="line">        <span class="string">'"url":"$uri",'</span></span><br><span class="line">        <span class="string">'"domain":"$host",'</span></span><br><span class="line">        <span class="string">'"xff":"$http_x_forwarded_for",'</span></span><br><span class="line">        <span class="string">'"referer":"$http_referer",'</span></span><br><span class="line">        <span class="string">'"status":"$status"&#125;'</span>;</span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  access_json;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># mkdir -p /var/log/nginx/</span></span><br><span class="line">~]<span class="comment"># systemctl start nginx </span></span><br><span class="line">~]<span class="comment"># systemctl enable nginx</span></span><br></pre></td></tr></table></figure></p><p>3：使用filebeat收集nginx访问日志，配置filebeat收集系统日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cd /etc/filebeat/</span></span><br><span class="line">filebeat]<span class="comment"># cp filebeat.yml  filebeat.yml.bak #备份源配置文件</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/filebeat/filebeat.yml </span></span><br><span class="line">21   paths:</span><br><span class="line">22     - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line"></span><br><span class="line">39   fields:        <span class="comment">#定义type</span></span><br><span class="line">40         <span class="built_in">type</span>: nginx-accesslog</span><br><span class="line"></span><br><span class="line">82 output.elasticsearch:    <span class="comment">#指定将filebeat收集来的日志存储在ES中</span></span><br><span class="line">83   <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">84   hosts: [<span class="string">"172.18.135.1:9200"</span>]</span><br><span class="line">85   index <span class="string">"filebeat-nginx-accesslog"</span>   <span class="comment">#默认的index名称 filebeat-%&#123;+yyyy.MM.DD&#125;</span></span><br></pre></td></tr></table></figure></p><p>4：启动filebeat<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl start filebeat</span></span><br><span class="line">~]<span class="comment"># systemctl enable filebeat</span></span><br></pre></td></tr></table></figure></p><p>5：在ES主机上的head插件查看索引  </p><p>6：在kinban展示日志</p><hr><h2 id="filebeat收集nginx访问日志并写入redis（nginx日志格式需要改为json格式）"><a href="#filebeat收集nginx访问日志并写入redis（nginx日志格式需要改为json格式）" class="headerlink" title="filebeat收集nginx访问日志并写入redis（nginx日志格式需要改为json格式）"></a>filebeat收集nginx访问日志并写入redis（nginx日志格式需要改为json格式）</h2><p>Filebeat支持将数据直接写入到redis服务器，本步骤为写入到redis当中的一个可以，另外filebeat还支持写入到elasticsearch、logstash等服务器。</p><p>1：filebeat配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/filebeat/filebeat.yml </span></span><br><span class="line">21   paths:</span><br><span class="line">22     - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line"></span><br><span class="line">39   fields:        <span class="comment">#定义type，格式很重要</span></span><br><span class="line">40         <span class="built_in">type</span>: nginx-accesslog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">116 output.redis:       <span class="comment">#将日志输出至redis</span></span><br><span class="line">117   hosts: [<span class="string">"172.18.135.5"</span>]       <span class="comment">#redis地址</span></span><br><span class="line">118   password: <span class="string">"123456"</span>            <span class="comment">#redis密码</span></span><br><span class="line">119   key: <span class="string">"system-log-5612"</span>        <span class="comment">#KEY名称（自定义）</span></span><br><span class="line">120   db: 1                         <span class="comment">#存储到redis的库</span></span><br><span class="line">121   timeout: 5                    <span class="comment">#超时时长</span></span><br></pre></td></tr></table></figure></p><p>2：启动filebeat<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl start filebeat</span></span><br><span class="line">~]<span class="comment"># systemctl enable filebeat</span></span><br></pre></td></tr></table></figure></p><p>3：测试访问nginx 默认的web页面,验证日志的格式是否为json<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># curl 172.18.135.5:80</span></span><br><span class="line"> ~]<span class="comment"># cat /var/log/nginx/access.log </span></span><br><span class="line">&#123;<span class="string">"@timestamp"</span>:<span class="string">"2019-03-03T16:38:24+08:00"</span>,<span class="string">"host"</span>:<span class="string">"172.18.135.5"</span>,<span class="string">"clientip"</span>:<span class="string">"172.18.135.5"</span>,<span class="string">"size"</span>:3700,<span class="string">"responsetime"</span>:0.000,<span class="string">"upstreamtime"</span>:<span class="string">"-"</span>,<span class="string">"upstreamhost"</span>:<span class="string">"-"</span>,<span class="string">"http_host"</span>:<span class="string">"172.18.135.5"</span>,<span class="string">"url"</span>:<span class="string">"/index.html"</span>,<span class="string">"domain"</span>:<span class="string">"172.18.135.5"</span>,<span class="string">"xff"</span>:<span class="string">"-"</span>,<span class="string">"referer"</span>:<span class="string">"-"</span>,<span class="string">"status"</span>:<span class="string">"200"</span>&#125;</span><br><span class="line">&#123;<span class="string">"@timestamp"</span>:<span class="string">"2019-03-03T16:38:25+08:00"</span>,<span class="string">"host"</span>:<span class="string">"172.18.135.5"</span>,<span class="string">"clientip"</span>:<span class="string">"172.18.135.5"</span>,<span class="string">"size"</span>:3700,<span class="string">"responsetime"</span>:0.000,<span class="string">"upstreamtime"</span>:<span class="string">"-"</span>,<span class="string">"upstreamhost"</span>:<span class="string">"-"</span>,<span class="string">"http_host"</span>:<span class="string">"172.18.135.5"</span>,<span class="string">"url"</span>:<span class="string">"/index.html"</span>,<span class="string">"domain"</span>:<span class="string">"172.18.135.5"</span>,<span class="string">"xff"</span>:<span class="string">"-"</span>,<span class="string">"referer"</span>:<span class="string">"-"</span>,<span class="string">"status"</span>:<span class="string">"200"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>3：验证redis是否有数据(指定查看对用的库)<br><img src="/2019/03/03/ELK之使用filebeat替换logstash/3.png" alt=""></p><p>4：查看redis中的日志数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意选择的db是否和filebeat写入一致</span><br><span class="line"></span><br><span class="line">172.18.135.2:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">172.18.135.2:6379[1]&gt; RPOP system-log-5612</span><br><span class="line"><span class="string">"&#123;\"@timestamp\":\"2019-03-03T10:04:39.966Z\",\"beat\":&#123;\"hostname\":\"centos77\",\"name\":\"centos77\",\"version\":\"5.6.13\"&#125;,\"fields\":&#123;\"type\":\"nginx-accesslog\"&#125;,\"input_type\":\"log\",\"message\":\"&#123;\\\"@timestamp\\\":\\\"2019-03-03T18:04:37+08:00\\\",\\\"host\\\":\\\"172.18.135.5\\\",\\\"clientip\\\":\\\"172.18.135.5\\\",\\\"size\\\":3700,\\\"responsetime\\\":0.000,\\\"upstreamtime\\\":\\\"-\\\",\\\"upstreamhost\\\":\\\"-\\\",\\\"http_host\\\":\\\"172.18.135.5\\\",\\\"url\\\":\\\"/index.html\\\",\\\"domain\\\":\\\"172.18.135.5\\\",\\\"xff\\\":\\\"-\\\",\\\"referer\\\":\\\"-\\\",\\\"status\\\":\\\"200\\\"&#125;\",\"offset\":9248,\"source\":\"/var/log/nginx/access.log\",\"type\":\"log\"&#125;"</span></span><br></pre></td></tr></table></figure></p><p><img src="/2019/03/03/ELK之使用filebeat替换logstash/11.png" alt=""></p><p>截图补充：对应关系要对应好<br><img src="/2019/03/03/ELK之使用filebeat替换logstash/12.png" alt=""></p><p>5：配置logstash从redis读取上面的日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim   /etc/logstash/conf.d/redis-systemlog-es.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">  redis &#123;</span><br><span class="line">    host =&gt; <span class="string">"192.168.15.12"</span>         <span class="comment">#指定redis地址</span></span><br><span class="line">    port =&gt; <span class="string">"6379"</span></span><br><span class="line">    password =&gt; <span class="string">"123456"</span>           <span class="comment">#指定redis密码         </span></span><br><span class="line">    db =&gt; <span class="string">"1"</span>                      <span class="comment">#从redis哪个库中取数据，需要和filebeat存储时指定的库序号保持一致</span></span><br><span class="line">    key =&gt; <span class="string">"system-log-1512"</span>       <span class="comment">#从redis取出的KEY的名称，需要和filebeat存储仅redis时的KEY名称保持一致</span></span><br><span class="line">    data_type =&gt; <span class="string">"list"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [fields][<span class="built_in">type</span>] == <span class="string">"nginx-accesslog"</span> &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [<span class="string">"192.168.15.11:9200"</span>]   <span class="comment">#ES主机地址</span></span><br><span class="line">       index =&gt; <span class="string">"system-log-1512"</span>  <span class="comment">#定义存储的索引名称</span></span><br><span class="line">      codec =&gt; <span class="string">"json"</span></span><br><span class="line">&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># systemctl  restart logstash #重启logstash服务</span></span><br></pre></td></tr></table></figure></p><p>6：查看logstash服务日志<br><img src="/2019/03/03/ELK之使用filebeat替换logstash/5.png" alt=""></p><p><img src="/2019/03/03/ELK之使用filebeat替换logstash/6.png" alt=""></p><p>7：查看redis中是否有数据</p><p><img src="/2019/03/03/ELK之使用filebeat替换logstash/7.png" alt=""></p><p>8：在ES的head插件验证索引是否创建<br><img src="/2019/03/03/ELK之使用filebeat替换logstash/8.png" alt=""></p><p>9：kibana界面添加索引<br><img src="/2019/03/03/ELK之使用filebeat替换logstash/9.png" alt=""></p><p>10：在kibana验证system日志<br><img src="/2019/03/03/ELK之使用filebeat替换logstash/10.png" alt=""></p><p>11：监控redis数据长度</p><p>实际环境当中，可能会出现reids当中堆积了大量的数据而logstash由于种种原因未能及时提取日志，此时会导致redis服务器的内存被大量使用，甚至出现如下内存即将被使用完毕的情景：</p><p><img src="/2019/03/03/ELK之使用filebeat替换logstash/13.png" alt=""></p><p>12：查看reids中的日志队列长度发现有大量的日志堆积在redis 当中</p><p><img src="/2019/03/03/ELK之使用filebeat替换logstash/14.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ELK之使用filebeat替换logstash&quot;&gt;&lt;a href=&quot;#ELK之使用filebeat替换logstash&quot; class=&quot;headerlink&quot; title=&quot;ELK之使用filebeat替换logstash&quot;&gt;&lt;/a&gt;ELK之使用filebeat替换logstash&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/03/03/ELK之使用filebeat替换logstash/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/categories/ELK-Stack/"/>
    
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/tags/ELK-Stack/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper和kafka</title>
    <link href="https://daizhe.net.cn/2019/02/23/ELK%E4%B9%8Bzookeeper%E5%92%8Ckafka/"/>
    <id>https://daizhe.net.cn/2019/02/23/ELK之zookeeper和kafka/</id>
    <published>2019-02-23T08:47:13.894Z</published>
    <updated>2019-03-03T04:13:42.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper和kafka"><a href="#zookeeper和kafka" class="headerlink" title="zookeeper和kafka"></a>zookeeper和kafka</h1><p><img src="/2019/02/23/ELK之zookeeper和kafka/标题.png" alt=""><br><a id="more"></a></p><h1 id="kafka及zookeeper简介："><a href="#kafka及zookeeper简介：" class="headerlink" title="kafka及zookeeper简介："></a>kafka及zookeeper简介：</h1><ul><li>Kafka （默认port：9092）被称为下一代分布式消息系统，是非营利性组织ASF(Apache Software Foundation，简称为ASF)基金会中的一个开源项目，比如HTTP Server、Hadoop、ActiveMQ、Tomcat等开源软件都属于Apache基金会的开源软件，类似的消息系统还有RbbitMQ、ActiveMQ、ZeroMQ，最主要的优势是其具备分布式功能、并且结合zookeeper可以实现动态扩容。</li><li>官方站点：<a href="http://www.infoq.com/cn/articles/apache-kafka" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/apache-kafka</a></li></ul><p><img src="/2019/02/23/ELK之zookeeper和kafka/1.png" alt=""></p><ul><li>ZooKeeper（默认port：2181）是一个分布式且开源的分布式应用程序协调服务。<ul><li>zookeeper集群特性：整个集群中只要有超过集群数量一半的zookeeper工作是正常的，那么整个集群对外就是可用的，假如有2台服务器做了一个zookeeper集群，只要有任何一台故障或宕机，那么这个zookeeper集群就不可用了，因为剩下的一台没有超过集群一半的数量，但是假如有三台zookeeper组成一个集群，那么损坏一台就还剩两台，大于3台的一半，所以损坏一台还是可以正常运行的，但是再损坏一台就只剩一台集群就不可用了。那么要是4台组成一个zookeeper集群，损坏一台集群肯定是正常的，那么损坏两台就还剩两台，那么2台不大于集群数量的一半，所以3台的zookeeper集群和4台的zookeeper集群损坏两台的结果都是集群不可用，一次类推5台和6台以及7台和8台都是同理，所以这也就是为什么集群一般都是奇数的原因。</li></ul></li></ul><p><img src="/2019/02/23/ELK之zookeeper和kafka/3.png" alt=""></p><h1 id="zookeeper集群部署"><a href="#zookeeper集群部署" class="headerlink" title="zookeeper集群部署"></a>zookeeper集群部署</h1><h2 id="安装zookeeper："><a href="#安装zookeeper：" class="headerlink" title="安装zookeeper："></a>安装zookeeper：</h2><p>三台服务器：  备注：也可以将ZK和KF集群安装在6台主机上各三台<br>IP分别是：172.18.135.1 &ensp;&ensp;  172.18.135.2  &ensp;&ensp; 172.18.135.5  </p><p>1：三台服务器分别配置hosts文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">172.18.135.1  es1.com</span><br><span class="line">172.18.135.2  es2.com</span><br><span class="line">172.18.135.5  es5.com</span><br></pre></td></tr></table></figure></p><p>2：zookeeper的安装是依赖java环境的,三台主机安装java，JDK<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># java -version</span></span><br><span class="line">openjdk version <span class="string">"1.8.0_161"</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_161-b14)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode)</span><br></pre></td></tr></table></figure></p><p>3：下载安装并验证zookeeper：<br>kafka下载地址：<br><a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">http://kafka.apache.org/downloads.html</a>  </p><p>zookeeper 下载地址：<br><a href="http://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">http://zookeeper.apache.org/releases.html</a>  </p><p>4：三台主机安装zookeeper(需要依赖java环境)：</p><ul><li>ZooKeeper是一个分布式且开源的分布式应用程序协调服务。<ul><li>zookeeper集群特性：整个集群中只要有超过集群数量一半的zookeeper工作是正常的，那么整个集群对外就是可用的，假如有2台服务器做了一个zookeeper集群，只要有任何一台故障或宕机，那么这个zookeeper集群就不可用了，因为剩下的一台没有超过集群一半的数量，但是假如有三台zookeeper组成一个集群，那么损坏一台就还剩两台，大于3台的一半，所以损坏一台还是可以正常运行的，但是再损坏一台就只剩一台集群就不可用了。那么要是4台组成一个zookeeper集群，损坏一台集群肯定是正常的，那么损坏两台就还剩两台，那么2台不大于集群数量的一半，所以3台的zookeeper集群和4台的zookeeper集群损坏两台的结果都是集群不可用，一次类推5台和6台以及7台和8台都是同理，所以这也就是为什么集群一般都是奇数的原因。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">三台主机都要编译安装zookeeper（配置相同，配置如下）</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">  src]<span class="comment"># ls</span></span><br><span class="line">  zookeeper-3.4.13.tar.gz</span><br><span class="line"></span><br><span class="line">  src]<span class="comment"># tar xvf zookeeper-3.4.13.tar.gz </span></span><br><span class="line"></span><br><span class="line">创建软连接方便下次升级</span><br><span class="line"></span><br><span class="line">  src]<span class="comment"># ln -sv /usr/local/src/zookeeper-3.4.13 /usr/local/zookeeper</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三台主机配置zookeeper配置的文件</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cp  /usr/local/zookeeper/conf/zoo_sample.cfg  /usr/local/zookeeper/conf/zoo.cfg </span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># grep "^[a-Z]" /usr/local/zookeeper/conf/zoo.cfg</span></span><br><span class="line">  tickTime=2000</span><br><span class="line">  initLimit=10</span><br><span class="line">  syncLimit=5</span><br><span class="line">  dataDir=/usr/<span class="built_in">local</span>/zookeeper/data</span><br><span class="line">  clientPort=2181</span><br><span class="line">  maxClientCnxns=4096</span><br><span class="line">  autopurge.snapRetainCount=3</span><br><span class="line">  autopurge.purgeInterval=72</span><br><span class="line">  server.1=172.18.135.1:2888:3888</span><br><span class="line">  server.2=172.18.135.2:2888:3888</span><br><span class="line">  server.3=172.18.135.5:2888:3888</span><br><span class="line"></span><br><span class="line">三台主机创建zookeeper数据目录</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># mkdir  /usr/local/zookeeper/data</span></span><br><span class="line"></span><br><span class="line">在三台主机上手动生成serverID</span><br><span class="line"></span><br><span class="line">172.18.135.1</span><br><span class="line">  ~]<span class="comment"># echo "1" &gt; /usr/local/zookeeper/data/myid</span></span><br><span class="line"></span><br><span class="line">172。18.135.2</span><br><span class="line">  ~]<span class="comment"># echo "2" &gt; /usr/local/zookeeper/data/myid</span></span><br><span class="line"></span><br><span class="line">172.18.135.5</span><br><span class="line">  ~]<span class="comment"># echo "3" &gt; /usr/local/zookeeper/data/myid</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三台机器启动zookeeper</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ls /usr/local/zookeeper/bin/</span></span><br><span class="line">  zkServer.sh   <span class="comment">#启动服务端脚本</span></span><br><span class="line">  zkCli.sh      <span class="comment">#启动客户端脚本</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># /usr/local/zookeeper/bin/zkServer.sh  start</span></span><br><span class="line">  ZooKeeper JMX enabled by default</span><br><span class="line">  Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">  Starting zookeeper ... STARTED</span><br><span class="line"></span><br><span class="line">查看各主机的端口是否监听  </span><br><span class="line"><span class="comment">#启动zookeeper进程时，已经将角色身份分配好，如果为领导者端口为3888，2181，2888，如果身份为跟随者端口为2181，2888</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  ::ffff:172.18.135.2:3888   </span><br><span class="line">                   :::2181                                                              </span><br><span class="line">  ::ffff:172.18.135.2:2888</span><br></pre></td></tr></table></figure><p>zookeeper配置文件详解<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">src]<span class="comment"># grep "^[a-Z]" /usr/local/zookeeper/conf/zoo.cfg </span></span><br><span class="line">tickTime=2000  <span class="comment">#服务器与服务器之间和客户端与服务器之间的单次心跳检测时间间隔，单位为毫秒</span></span><br><span class="line">initLimit=5  <span class="comment">#集群中leader服务器与follower服务器初始连接心跳次数，即多少个2000毫秒</span></span><br><span class="line">syncLimit=5  <span class="comment"># leader与follower之间连接完成之后，后期检测发送和应答的心跳次数，如果该follower 在设置的时间内(5*2000)不能与leader 进行通信，那么此 follower 将被视为不可用。</span></span><br><span class="line">clientPort=2181 <span class="comment">#客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求</span></span><br><span class="line">dataDir=/usr/<span class="built_in">local</span>/zookeeper/data  <span class="comment">#自定义的zookeeper保存数据的目录</span></span><br><span class="line">autopurge.snapRetainCount=3 <span class="comment">#设置zookeeper保存保留多少次客户端连接的数据</span></span><br><span class="line">autopurge.purgeInterval=1 <span class="comment">#设置zookeeper间隔多少小时清理一次保存的客户端数据（单位为小时，0为关闭自动清理）</span></span><br><span class="line">server.1=192.168.15.211:2888:3888  <span class="comment">#服务器编号=服务器IP:LF数据同步端口:LF选举端口</span></span><br><span class="line">server.2=192.168.15.212:2888:3888</span><br><span class="line">server.3=192.168.15.213:2888:3888</span><br></pre></td></tr></table></figure></p><p>5：查看各主机的zookeeper节点状态信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">java程序往leader中写入数据，从follower中读取数据，此功能是基于底层的java库实现的</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment">#  /usr/local/zookeeper/bin/zkServer.sh  status</span></span><br><span class="line">  ZooKeeper JMX enabled by default</span><br><span class="line">  Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">  Mode: leader    <span class="comment">#角色：领导者/追随者</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># /usr/local/zookeeper/bin/zkServer.sh  status</span></span><br><span class="line">  ZooKeeper JMX enabled by default</span><br><span class="line">  Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">  Mode: follower  </span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># /usr/local/zookeeper/bin/zkServer.sh  status</span></span><br><span class="line">  ZooKeeper JMX enabled by default</span><br><span class="line">  Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">  Mode: follower</span><br></pre></td></tr></table></figure></p><h2 id="zookeeper简单操作测试"><a href="#zookeeper简单操作测试" class="headerlink" title="zookeeper简单操作测试"></a>zookeeper简单操作测试</h2><p>6：连接到leader节点生成数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">客户端链接至领导者节点</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment">#  /usr/local/zookeeper/bin/zkCli.sh -server 172.18.135.2:2181    #指定server端的节点地址和端口</span></span><br><span class="line"></span><br><span class="line">在/下创建消息</span><br><span class="line"></span><br><span class="line">  [zk: 172.18.135.2:2181(CONNECTED) 0]  create /<span class="built_in">test</span> <span class="string">"hello"</span></span><br><span class="line">  Created /<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>7：链接到follower节点查看消息是否同步leader节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">客户端连接至跟随者节点查看消息</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># /usr/local/zookeeper/bin/zkCli.sh -server 172.18.135.1:2181</span></span><br><span class="line">  [zk: 172.18.135.1:2181(CONNECTED) 0] get /<span class="built_in">test</span></span><br><span class="line">  hello</span><br><span class="line">  cZxid = 0x100000004</span><br><span class="line">  ctime = Sat Feb 23 19:11:52 CST 2019</span><br><span class="line">  mZxid = 0x100000004</span><br><span class="line">  mtime = Sat Feb 23 19:11:52 CST 2019</span><br><span class="line">  pZxid = 0x100000004</span><br><span class="line">  cversion = 0</span><br><span class="line">  dataVersion = 0</span><br><span class="line">  aclVersion = 0</span><br><span class="line">  ephemeralOwner = 0x0</span><br><span class="line">  dataLength = 5</span><br><span class="line">  numChildren = 0</span><br></pre></td></tr></table></figure></p><hr><h1 id="kafka-集群部署"><a href="#kafka-集群部署" class="headerlink" title="kafka 集群部署"></a>kafka 集群部署</h1><ul><li>kafka：（端口9092）<ul><li>Broker <ul><li>Kafka集群包含一个或多个服务器，这种服务器被称为broker</li></ul></li><li>Topic <ul><li>每条发布到Kafka集群的消息都有一个类别，这个类别被称为topic。（物理上不同topic的消息分开存储，逻辑上一个topic的消息虽然保存于一个或多个broker上但用户只需指定消息的topic即可生产或消费数据而不必关心数据存于何处）</li></ul></li><li>Partition <ul><li>parition是物理上的概念，每个topic包含一个或多个partition，创建topic时可指定parition数量。每个partition对应于一个文件夹，该文件夹下存储该partition的数据和索引文件</li></ul></li><li>Producer <ul><li>生产消息，负责发布消息到Kafka broker</li></ul></li><li>Consumer <ul><li>消费消息。每个consumer属于一个特定的consuer group（可为每个consumer指定group name，若不指定group name则属于默认的group）。使用consumer high level API时，同一topic的一条消息只能被同一个consumer group内的一个consumer消费，但多个consumer group可同时消费这一消息。</li></ul></li></ul></li></ul><p>1：在上面安装zookeeper的三台主机上安装kafka<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">安装解压</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">  src]<span class="comment"># ls</span></span><br><span class="line">  kafka_2.12-2.1.0.tgz </span><br><span class="line"></span><br><span class="line">  src]<span class="comment"># tar xvf kafka_2.12-2.1.0.tgz </span></span><br><span class="line"></span><br><span class="line">  src]<span class="comment"># ln -sv /usr/local/src/kafka_2.12-2.1.0 /usr/local/kafka</span></span><br><span class="line">  ‘/usr/<span class="built_in">local</span>/kafka’ -&gt; ‘/usr/<span class="built_in">local</span>/src/kafka_2.12-2.1.0’</span><br><span class="line"></span><br><span class="line">编辑各配置文件</span><br><span class="line"></span><br><span class="line">  172.18.135.1</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /usr/local/kafka/config/server.properties </span></span><br><span class="line">  21 broker.id=1  <span class="comment">#设置每个代理全局唯一的整数ID</span></span><br><span class="line">  31 listeners=PLAINTEXT://172.18.135.1:9092  <span class="comment">#指定kafka监听的本机地址</span></span><br><span class="line">  60 log.dirs=/usr/<span class="built_in">local</span>/kafka/logs   <span class="comment">#指定kafka保存日志的位置</span></span><br><span class="line">  65 num.partitions=1 <span class="comment">#kafka分区，一个数据仅保留一个分区</span></span><br><span class="line">  103 log.retention.hours=72  <span class="comment">#保留指定小时的日志内容</span></span><br><span class="line">  123 zookeeper.connect=172.18.135.1:2181,172.18.135.2:2181,172.18.135.5:2181 <span class="comment">#所有的zookeeper地址，让zookeeper注册在kafka中</span></span><br><span class="line"></span><br><span class="line">  创建日志存放的目录</span><br><span class="line">  ~]<span class="comment"># mkdir -p /usr/local/kafka/logs</span></span><br><span class="line"></span><br><span class="line">  172.18.135.2</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /usr/local/kafka/config/server.properties </span></span><br><span class="line">  21 broker.id=2</span><br><span class="line">  31 listeners=PLAINTEXT://172.18.135.2:9092</span><br><span class="line">  60 log.dirs=/usr/<span class="built_in">local</span>/kafka/logs</span><br><span class="line">  65 num.partitions=1</span><br><span class="line">  103 log.retention.hours=72</span><br><span class="line">  123 zookeeper.connect=172.18.135.1:2181,172.18.135.2:2181,172.18.135.5:2181</span><br><span class="line">  创建日志存放的目录</span><br><span class="line">  ~]<span class="comment"># mkdir -p /usr/local/kafka/logs</span></span><br><span class="line"></span><br><span class="line">  172.18.135.5</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /usr/local/kafka/config/server.properties </span></span><br><span class="line">  21 broker.id=3</span><br><span class="line">  31 listeners=PLAINTEXT://172.18.135.5:9092</span><br><span class="line">  60 log.dirs=/usr/<span class="built_in">local</span>/kafka/logs</span><br><span class="line">  65 num.partitions=1</span><br><span class="line">  103 log.retention.hours=72</span><br><span class="line">  123 zookeeper.connect=172.18.135.1:2181,172.18.135.2:2181,172.18.135.5:2181</span><br><span class="line">  创建日志存放的目录</span><br><span class="line">  ~]<span class="comment"># mkdir -p /usr/local/kafka/logs</span></span><br></pre></td></tr></table></figure></p><p>2：各主机启动kafka<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/local/kafka/bin/kafka-server-start.sh -daemon /usr/local/kafka/config/server.properties  #以守护进程的方式启动</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># ss -tnl</span></span><br><span class="line">::ffff:172.18.135.2:9092  <span class="comment">#kafka监听端口</span></span><br></pre></td></tr></table></figure></p><h2 id="将zookeeper和kafka加入开机启动项中"><a href="#将zookeeper和kafka加入开机启动项中" class="headerlink" title="将zookeeper和kafka加入开机启动项中"></a>将zookeeper和kafka加入开机启动项中</h2><p>将各主机的kafka和zookeeper程序设置为开机自启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/rc.d/rc.local </span></span><br><span class="line">/usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh  start</span><br><span class="line">sleep 20</span><br><span class="line">/usr/<span class="built_in">local</span>/kafka/bin/kafka-server-start.sh -daemon /usr/<span class="built_in">local</span>/kafka/config/server.properties</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># chmod +x /etc/rc.d/rc.local</span></span><br></pre></td></tr></table></figure></p><h2 id="zookeeper命令测试"><a href="#zookeeper命令测试" class="headerlink" title="zookeeper命令测试"></a>zookeeper命令测试</h2><p>1：验证kafka进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># jps</span></span><br><span class="line">26450 Jps</span><br><span class="line">1079 Elasticsearch</span><br><span class="line">10905 QuorumPeerMain</span><br><span class="line">19790 Kafka</span><br></pre></td></tr></table></figure></p><p>2：测试zookeeper创建topic：创建名为logstashtest，partitions(分区)为3，replication(复制)为3的topic(主题)：<br>在任意kafaka服务器操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/local/kafka/bin/kafka-topics.sh --create  --zookeeper 172.18.135.1:2181,172.18.135.2:2181,172.18.135.5:2181 --partitions 3 --replication-factor 3 --topic logstashtest</span></span><br><span class="line">Created topic <span class="string">"logstashtest"</span>.</span><br></pre></td></tr></table></figure></p><p>3：测试zookeeper获取topic<br>可以在任意一台kafka服务器进行测试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/local/kafka/bin/kafka-topics.sh  --describe --zookeeper 172.18.135.1:2181,172.18.135.2:2181,172.18.135.5:2181  --topic logstashtest</span></span><br><span class="line">Topic:logstashtestPartitionCount:3ReplicationFactor:3Configs:</span><br><span class="line"> Topic: logstashtestPartition: 0Leader: 1     Replicas: 1,3,2Isr: 1,2,3</span><br><span class="line"> Topic: logstashtestPartition: 1Leader: 2     Replicas: 2,1,3Isr: 2,1,3</span><br><span class="line"> Topic: logstashtestPartition: 2Leader: 3     Replicas: 3,2,1Isr: 3,2,1</span><br></pre></td></tr></table></figure></p><ul><li>状态说明：logstashtest有三个分区分别为0、1、2，分区0的leader是3（broker.id），分区0有三个副本，并且状态都为lsr（ln-sync，表示可以参加选举成为leader）。</li></ul><p>4：获取所有topic<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/local/kafka/bin/kafka-topics.sh  --list --zookeeper 172.18.135.1:2181,172.18.135.2:2181,172.18.135.5:2181</span></span><br><span class="line">logstashtest</span><br></pre></td></tr></table></figure></p><p>5：删除topic<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment">#/usr/local/kafka/bin/kafka-topics.sh --delete --zookeeper 172.18.135.1:2181,172.18.135.2:2181,172.18.135.5:2181  --topic logstashtest</span></span><br></pre></td></tr></table></figure></p><h2 id="kafka命令测试消息发送"><a href="#kafka命令测试消息发送" class="headerlink" title="kafka命令测试消息发送"></a>kafka命令测试消息发送</h2><p>1：创建topic<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/local/kafka/bin/kafka-topics.sh --create --zookeeper 172.18.135.1:2181,172.18.135.2:2181,172.18.135.5:2181 --partitions 3 --replication-factor 3 --topic  messagetest</span></span><br><span class="line">Created topic <span class="string">"messagetest"</span>.</span><br></pre></td></tr></table></figure></p><p>2：发送消息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/local/kafka/bin/kafka-console-producer.sh --broker-list  172.18.135.1:9092,172.18.135.2:9092,172.18.135.3:9092 --topic  messagetest</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="使用logstash测试向kafka写入数据"><a href="#使用logstash测试向kafka写入数据" class="headerlink" title="使用logstash测试向kafka写入数据"></a>使用logstash测试向kafka写入数据</h2><p><img src="/2019/02/23/ELK之zookeeper和kafka/2.png" alt=""></p><h3 id="测试使用logstash测试向kafka写入数据"><a href="#测试使用logstash测试向kafka写入数据" class="headerlink" title="测试使用logstash测试向kafka写入数据"></a>测试使用logstash测试向kafka写入数据</h3><p>logstash收集日志标准输出至kafka参考官方文档:<a href="https://www.elastic.co/guide/en/logstash/5.6/plugins-outputs-kafka.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/5.6/plugins-outputs-kafka.html</a></p><p>1：编辑logstash配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/logstash/conf.d/logstash-kafka.sh</span></span><br><span class="line"></span><br><span class="line">input &#123;     <span class="comment">#标准输入为收集桌面信息</span></span><br><span class="line">  stdin &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;    <span class="comment">#logstash收集日志写入kafka中</span></span><br><span class="line">  kafka &#123;</span><br><span class="line">      codec =&gt; json </span><br><span class="line">      topic_id =&gt; <span class="string">"messagetest"</span>   <span class="comment">#指定写入的topic，如果指定的topic在kafka集群中不存在，则kafka自动创建此topic</span></span><br><span class="line">      bootstrap_servers =&gt; <span class="string">"172.18.135.1:9092"</span>    <span class="comment">#指定集群中任意kafka的地址</span></span><br><span class="line">      batch_size =&gt; 5   </span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123;    <span class="comment">#logstash收集的日志再在终端中打印一份</span></span><br><span class="line">      codec =&gt; rubydebug  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2：检查logstash配置文件的语法格式并启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash-kafka.sh -t</span></span><br><span class="line">WARNING: Could not find logstash.yml <span class="built_in">which</span> is typically located <span class="keyword">in</span> <span class="variable">$LS_HOME</span>/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaults</span><br><span class="line">Could not find log4j2 configuration at path /usr/share/logstash/config/log4j2.properties. Using default config <span class="built_in">which</span> logs errors to the console</span><br><span class="line">Configuration OK</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash-kafka.sh</span></span><br></pre></td></tr></table></figure></p><p>3：验证kafka收到logstash数据</p><p>3.1：logstash启动，标准输入为桌面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash-kafka.sh</span></span><br><span class="line">[INFO ] 2019-03-02 18:44:19.332 [[main]-pipeline-manager] AppInfoParser - Kafka version : 0.10.0.1</span><br><span class="line">[INFO ] 2019-03-02 18:44:19.333 [[main]-pipeline-manager] AppInfoParser - Kafka commitId : a7a17cdec9eaa6c5</span><br><span class="line">The stdin plugin is now waiting <span class="keyword">for</span> input:</span><br><span class="line">haha</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"@version"</span> =&gt; <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"host"</span> =&gt; <span class="string">"es3.com"</span>,</span><br><span class="line">  <span class="string">"@timestamp"</span> =&gt; 2019-03-02T10:45:27.185Z,</span><br><span class="line">     <span class="string">"message"</span> =&gt; <span class="string">"haha"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logstash</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"@version"</span> =&gt; <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"host"</span> =&gt; <span class="string">"es3.com"</span>,</span><br><span class="line">  <span class="string">"@timestamp"</span> =&gt; 2019-03-02T10:49:07.782Z,</span><br><span class="line">     <span class="string">"message"</span> =&gt; <span class="string">"logstash"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.2：kafka集群也监听的messagetest topic<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/local/kafka/bin/kafka-console-consumer.sh --topic messagetest --bootstrap-server 172.18.135.1:9092 --from-beginning</span></span><br><span class="line">haha</span><br><span class="line">&#123;<span class="string">"@version"</span>:<span class="string">"1"</span>,<span class="string">"host"</span>:<span class="string">"es3.com"</span>,<span class="string">"@timestamp"</span>:<span class="string">"2019-03-02T10:45:27.185Z"</span>,<span class="string">"message"</span>:<span class="string">"haha"</span>&#125;</span><br><span class="line">&#123;<span class="string">"@version"</span>:<span class="string">"1"</span>,<span class="string">"host"</span>:<span class="string">"es3.com"</span>,<span class="string">"@timestamp"</span>:<span class="string">"2019-03-02T10:49:07.782Z"</span>,<span class="string">"message"</span>:<span class="string">"logstash"</span>&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="后端logstash收集单个Nginx日志文件缓存到zk和KF集群，ZK和KF集群上的logstash再取走存储到ES中"><a href="#后端logstash收集单个Nginx日志文件缓存到zk和KF集群，ZK和KF集群上的logstash再取走存储到ES中" class="headerlink" title="后端logstash收集单个Nginx日志文件缓存到zk和KF集群，ZK和KF集群上的logstash再取走存储到ES中"></a>后端logstash收集单个Nginx日志文件缓存到zk和KF集群，ZK和KF集群上的logstash再取走存储到ES中</h3><p>1：编辑Logstash配置文件，收集nginx日志的logstash，再将收集的日志文件存储到ZK和KF集群中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim  /etc/logstash/conf.d/nginx-kafka.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/var/log/nginx/access.log"</span></span><br><span class="line">    start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"nginx-accesslog-1512"</span></span><br><span class="line">    codec =&gt; <span class="string">"json"</span> <span class="comment">#声明json编码格式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"nginx-accesslog-1512"</span> &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        bootstrap_servers =&gt; <span class="string">"192.168.15.11:9092"</span> <span class="comment">#任意kafka集群中服务器地址</span></span><br><span class="line">        topic_id =&gt; <span class="string">"nginx-accesslog-1512"</span>    <span class="comment">#日志保存在KF中的topic主题名称</span></span><br><span class="line">        codec =&gt; <span class="string">"json"</span>   <span class="comment">#指定日志编码格式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file &#123;</span><br><span class="line">      path =&gt; <span class="string">"/tmp/nginx-jsog-log.txt"</span> <span class="comment">#将日志保存在本地文件中一份</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2：测试logstash配置文件语法格式，并启动logstash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/nginx-kafka.conf -t</span></span><br><span class="line">WARNING: Could not find logstash.yml <span class="built_in">which</span> is typically located <span class="keyword">in</span> <span class="variable">$LS_HOME</span>/config or /etc/logstash. You can specify the path using --path.sett</span><br><span class="line">ings. Continuing using the defaultsCould not find log4j2 configuration at path /usr/share/logstash/config/log4j2.properties. Using default config <span class="built_in">which</span> logs errors to the console</span><br><span class="line">Configuration OK</span><br><span class="line">~]<span class="comment"># systemctl  restart logstash</span></span><br></pre></td></tr></table></figure></p><p>3:访问Nginx Web界面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># ab -n100 -c10 http://nginx地址/index.html</span></span><br></pre></td></tr></table></figure></p><p>4：验证日志写入到/tmp 文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># head /tmp/nginx-jsog-log.txt</span></span><br></pre></td></tr></table></figure></p><p><img src="/2019/02/23/ELK之zookeeper和kafka/4.png" alt=""></p><p>5：配置logstash从kafka读取日志（logstash可以安装在ZK和KF集群中的任何一台主机上都可以）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim  /etc/logstash/conf.d/nginx-kafka.conf </span></span><br><span class="line">input &#123;   <span class="comment">#标准输入从KAFKA输入</span></span><br><span class="line">  kafka &#123;</span><br><span class="line">    bootstrap_servers =&gt; <span class="string">"192.168.15.11:9092"</span>   <span class="comment">#任意kafka集群中服务器地址</span></span><br><span class="line">    topics =&gt; <span class="string">"nginx-accesslog-1512"</span>  <span class="comment">#logstash从KF中取走topic的主题名称</span></span><br><span class="line">    codec =&gt; <span class="string">"json"</span> </span><br><span class="line">    consumer_threads =&gt; 1</span><br><span class="line">    <span class="comment">#decorate_events =&gt; true </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;  <span class="comment">#输出至后端的ES中</span></span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"nginx-accesslog-1512"</span> &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"ES主机地址:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"nginx-accesslog-kafka-1512-%&#123;+YYYY.MM.dd&#125;"</span>    <span class="comment">#指定索引格式</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6：测试语法并重启logstash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/kafka-es.conf -t</span></span><br><span class="line">~]<span class="comment"># systemctl  restart logstash</span></span><br></pre></td></tr></table></figure></p><p>7：在ES主机上head插件验证数据<br><img src="/2019/02/23/ELK之zookeeper和kafka/5.png" alt=""></p><p>8：kibana添加Nginx访问日志索引<br><img src="/2019/02/23/ELK之zookeeper和kafka/6.png" alt=""></p><p>9：kibana验证数据<br><img src="/2019/02/23/ELK之zookeeper和kafka/7.png" alt=""></p><hr><h3 id="使用logstash收集多日志文件并写入kafka："><a href="#使用logstash收集多日志文件并写入kafka：" class="headerlink" title="使用logstash收集多日志文件并写入kafka："></a>使用logstash收集多日志文件并写入kafka：</h3><p>1：配置logstash收集message日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  ~]<span class="comment"># chmod  644 /var/log/messages</span></span><br><span class="line">  conf.d]<span class="comment"># cat nginx-kafka.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/var/log/nginx/access.log"</span></span><br><span class="line">    start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"nginx-accesslog-1512"</span></span><br><span class="line">    codec =&gt; <span class="string">"json"</span></span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/var/log/messages"</span></span><br><span class="line">    start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"system-log-1512"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"nginx-accesslog-1512"</span> &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">      bootstrap_servers =&gt; <span class="string">"192.168.15.11:9092"</span></span><br><span class="line">      topic_id =&gt; <span class="string">"nginx-accesslog-1512"</span></span><br><span class="line">      batch_size =&gt; 5</span><br><span class="line">      codec =&gt; <span class="string">"json"</span> </span><br><span class="line">   &#125; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"system-log-1512"</span> &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">      bootstrap_servers =&gt; <span class="string">"192.168.15.11:9092"</span></span><br><span class="line">      topic_id =&gt; <span class="string">"system-log-1512"</span></span><br><span class="line">      batch_size =&gt; 5</span><br><span class="line">      codec =&gt; <span class="string">"json"</span> <span class="comment">#写入的时候使用json编码，因为logstash收集后会转换成json格式</span></span><br><span class="line">  &#125;</span><br><span class="line">    file &#123;</span><br><span class="line">      path =&gt; <span class="string">"/tmp/systemlog-1512-log.txt"</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2：测试并重启logstash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/nginx-kafka.conf  -t</span></span><br><span class="line">~]<span class="comment"># systemctl  restart logstash</span></span><br></pre></td></tr></table></figure></p><p>3：验证logstash启动完成<br><img src="/2019/02/23/ELK之zookeeper和kafka/8.png" alt=""></p><p>4：验证日志写入到目标文件<br><img src="/2019/02/23/ELK之zookeeper和kafka/9.png" alt=""></p><p>5：配置logstash从kafka读取系统日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此步骤如果没有从kafka正确收集日志或者将日志从kafka读取并写入到文件没有输出，可以使用/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/kafka-es.conf 进行标准输出测试。</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># cat /etc/logstash/conf.d/kafka-es.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    bootstrap_servers =&gt; <span class="string">"192.168.15.11:9092"</span> </span><br><span class="line">    topics =&gt; <span class="string">"nginx-accesslog-1512"</span> </span><br><span class="line">    codec =&gt; <span class="string">"json"</span> </span><br><span class="line">    consumer_threads =&gt; 1</span><br><span class="line">    decorate_events =&gt; <span class="literal">true</span> </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  kafka &#123;</span><br><span class="line">    bootstrap_servers =&gt; <span class="string">"192.168.15.11:9092"</span></span><br><span class="line">    topics =&gt; <span class="string">"system-log-1512"</span></span><br><span class="line">    consumer_threads =&gt; 1</span><br><span class="line">    decorate_events =&gt; <span class="literal">true</span></span><br><span class="line">    codec =&gt; <span class="string">"json"</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"nginx-accesslog-1512"</span> &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"192.168.15.11:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"nginx-accesslog-1512-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"system-log-1512"</span> &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"192.168.15.12:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"system-log-1512-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; <span class="string">"rubydebug"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6：验证配置并启动logstash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/kafka-es.conf –t</span></span><br><span class="line">~]<span class="comment"># systemctl  start logstash</span></span><br></pre></td></tr></table></figure></p><p>7：在head插件验证数据<br><img src="/2019/02/23/ELK之zookeeper和kafka/10.png" alt=""></p><p>8：在kibana添加索引<br><img src="/2019/02/23/ELK之zookeeper和kafka/11.png" alt=""></p><p>9：kibana验证数据<br><img src="/2019/02/23/ELK之zookeeper和kafka/12.png" alt=""></p><hr><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><ul><li>也可以将logstash开启两个进程去同时收集日志<ul><li>/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/kafka-es.conf    #systemcd 管理的进程去收集日志</li><li>/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/kafka-es.conf &amp;   # 手动管理的进程去收集日志</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;zookeeper和kafka&quot;&gt;&lt;a href=&quot;#zookeeper和kafka&quot; class=&quot;headerlink&quot; title=&quot;zookeeper和kafka&quot;&gt;&lt;/a&gt;zookeeper和kafka&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/23/ELK之zookeeper和kafka/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/categories/ELK-Stack/"/>
    
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/tags/ELK-Stack/"/>
    
  </entry>
  
  <entry>
    <title>ELK之Logstash收集日志并写入redis</title>
    <link href="https://daizhe.net.cn/2019/02/22/ELK%E4%B9%8BLogstash%E6%94%B6%E9%9B%86%E6%97%A5%E5%BF%97%E5%B9%B6%E5%86%99%E5%85%A5redis/"/>
    <id>https://daizhe.net.cn/2019/02/22/ELK之Logstash收集日志并写入redis/</id>
    <published>2019-02-22T09:34:58.811Z</published>
    <updated>2019-03-03T03:46:42.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK之Logstash收集日志并写入redis"><a href="#ELK之Logstash收集日志并写入redis" class="headerlink" title="ELK之Logstash收集日志并写入redis"></a>ELK之Logstash收集日志并写入redis</h1><p><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/标题.png" alt=""><br><a id="more"></a></p><p><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/4.png" alt=""></p><h2 id="logstash收集日志并写入redis："><a href="#logstash收集日志并写入redis：" class="headerlink" title="logstash收集日志并写入redis："></a>logstash收集日志并写入redis：</h2><ul><li>用一台服务器按照部署redis服务，专门用于日志缓存使用，用于web服务器产生大量日志的场景，例如下面的服务器内存即将被使用完毕，查看是因为redis服务保存了大量的数据没有被读取而占用了大量的内存空间。</li></ul><p>Redis output plugin 官网解释：<a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-redis.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-outputs-redis.html</a></p><p>1：部署redis<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># yum install redis -y</span></span><br></pre></td></tr></table></figure></p><p>2：设置redis持久化及访问密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为安全考虑，生产环境必须设置reids连接密码：</span><br><span class="line">[root@linux-host2 redis]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass 12345678  <span class="comment">#动态设置，重启后无效</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">202~204 注释掉不需要做快照，改为</span><br><span class="line">    save <span class="string">""</span>   <span class="comment">#logstash从redis中将日志数据取走，数据则从redis消失，所以不做快照</span></span><br><span class="line">480 requirepass  123456 <span class="comment">#redis.conf配置文件</span></span><br></pre></td></tr></table></figure></p><p><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/1.png" alt=""></p><p>3:启动并测试redis服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis]<span class="comment"># redis-server  /usr/local/redis/redis.conf #启动服务</span></span><br><span class="line">redis]<span class="comment"># redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure></p><p>4：配置logstash服务器将日志写入至redis：<br>将tomcat服务器的logstash收集之后的tomcat 访问日志写入到redis服务器，然后通过另外的logstash将redis服务器的数据取出在写入到elasticsearch服务器。</p><p>官方文档：<a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-redis.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-outputs-redis.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat /etc/logstash/conf.d/tomcat_tcp.conf</span></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/usr/local/tomcat/logs/tomcat_access_log.*.log"</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"tomcat-accesslog-1512"</span></span><br><span class="line">    start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">    stat_interval =&gt; <span class="string">"2"</span></span><br><span class="line">  &#125;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 7800</span><br><span class="line">    mode =&gt; <span class="string">"server"</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"tcplog-1512"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"tomcat-accesslog-1512"</span> &#123;</span><br><span class="line">    redis &#123;</span><br><span class="line">      data_type =&gt; <span class="string">"list"</span><span class="comment">#以列表的方式写入</span></span><br><span class="line">      key =&gt; <span class="string">"tomcat-accesslog-1512"</span>    <span class="comment">#日志写入redis的key名称</span></span><br><span class="line">      host =&gt; <span class="string">"192.168.15.12"</span>   <span class="comment">#指定redis服务器地址</span></span><br><span class="line">      port =&gt; <span class="string">"6379"</span></span><br><span class="line">      db =&gt; <span class="string">"0"</span><span class="comment">#指定写入的库</span></span><br><span class="line">      password =&gt; <span class="string">"123456"</span>  <span class="comment">#redis密码</span></span><br><span class="line"> &#125;&#125;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"tcplog-1512"</span> &#123;</span><br><span class="line">    redis &#123;</span><br><span class="line">      data_type =&gt; <span class="string">"list"</span></span><br><span class="line">      key =&gt; <span class="string">"tcplog-1512"</span></span><br><span class="line">      host =&gt; <span class="string">"192.168.15.12"</span></span><br><span class="line">      port =&gt; <span class="string">"6379"</span></span><br><span class="line">      db =&gt; <span class="string">"1"</span></span><br><span class="line">      password =&gt; <span class="string">"123456"</span></span><br><span class="line">&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5：测试logstash配置文件语法是否正确<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/tomcat.conf</span></span><br></pre></td></tr></table></figure></p><p>6:访问tomcat的web界面并生成系统日志<br><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/2.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># echo "伪设备1"  &gt; /dev/tcp/192.168.15.12/7800</span></span><br></pre></td></tr></table></figure></p><p>7:验证redis是否有数据<br><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/3.png" alt=""></p><p>8: 配置Redis主机上的logstash服务器从redis读取数据：<br>配置专门logstash服务器从redis读取指定的key的数据，并写入到elasticsearch。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-host3 ~]<span class="comment"># cat /etc/logstash/conf.d/redis-to-els.conf </span></span><br><span class="line">[root@linux-host1 conf.d]<span class="comment"># cat /etc/logstash/conf.d/redis-tomcat-es.conf</span></span><br><span class="line">input &#123;</span><br><span class="line">  redis &#123;</span><br><span class="line">    data_type =&gt; <span class="string">"list"</span></span><br><span class="line">    key =&gt; <span class="string">"tomcat-accesslog-1512"</span></span><br><span class="line">    host =&gt; <span class="string">"192.168.15.12"</span></span><br><span class="line">    port =&gt; <span class="string">"6379"</span></span><br><span class="line">    db =&gt; <span class="string">"0"</span></span><br><span class="line">    password =&gt; <span class="string">"123456"</span></span><br><span class="line">    codec =&gt; <span class="string">"json"</span>   <span class="comment">#指定取出的日志格式</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  redis &#123;</span><br><span class="line">    data_type =&gt; <span class="string">"list"</span></span><br><span class="line">    key =&gt; <span class="string">"tcplog-1512"</span></span><br><span class="line">    host =&gt; <span class="string">"192.168.15.12"</span></span><br><span class="line">    port =&gt; <span class="string">"6379"</span></span><br><span class="line">    db =&gt; <span class="string">"1"</span></span><br><span class="line">    password =&gt; <span class="string">"123456"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"tomcat-accesslog-1512"</span> &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [<span class="string">"192.168.15.11:9200"</span>]</span><br><span class="line">      index =&gt; <span class="string">"logstash-tomcat1512-accesslog-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"tcplog-1512"</span> &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [<span class="string">"192.168.15.11:9200"</span>]</span><br><span class="line">      index =&gt; <span class="string">"logstash-tcplog1512-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9：测试logstash及启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conf.d]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/redis-to-els.conf</span></span><br></pre></td></tr></table></figure></p><p>10：验证redis的数据是否被取出<br><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/5.png" alt=""></p><p>11：在head插件验证数据<br><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/6.png" alt=""></p><p>12：kibana添加tomcat访问日志索引<br><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/7.png" alt=""></p><p>13：kibana添加tcp日志索引<br><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/8.png" alt=""></p><p>14：kibana验证tomcat访问日志<br><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/9.png" alt=""></p><p>15：kibana 验证tcp日志<br><img src="/2019/02/22/ELK之Logstash收集日志并写入redis/10.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ELK之Logstash收集日志并写入redis&quot;&gt;&lt;a href=&quot;#ELK之Logstash收集日志并写入redis&quot; class=&quot;headerlink&quot; title=&quot;ELK之Logstash收集日志并写入redis&quot;&gt;&lt;/a&gt;ELK之Logstash收集日志并写入redis&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/22/ELK之Logstash收集日志并写入redis/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/categories/ELK-Stack/"/>
    
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/tags/ELK-Stack/"/>
    
  </entry>
  
  <entry>
    <title>ELK之Logstash收集rsyslog中记录的haproxy服务的日志</title>
    <link href="https://daizhe.net.cn/2019/02/21/ELK%E4%B9%8BLogstash%E6%94%B6%E9%9B%86rsyslog%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84haproxy%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%97%A5%E5%BF%97/"/>
    <id>https://daizhe.net.cn/2019/02/21/ELK之Logstash收集rsyslog中记录的haproxy服务的日志/</id>
    <published>2019-02-21T11:39:18.153Z</published>
    <updated>2019-03-03T03:46:51.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK之Logstash收集rsyslog中记录的haproxy服务的日志"><a href="#ELK之Logstash收集rsyslog中记录的haproxy服务的日志" class="headerlink" title="ELK之Logstash收集rsyslog中记录的haproxy服务的日志"></a>ELK之Logstash收集rsyslog中记录的haproxy服务的日志</h1><p><img src="/2019/02/21/ELK之Logstash收集rsyslog中记录的haproxy服务的日志/标题.png" alt=""><br><a id="more"></a></p><p><img src="/2019/02/21/ELK之Logstash收集rsyslog中记录的haproxy服务的日志/1.png" alt=""></p><h2 id="通过rsyslog收集haproxy日志："><a href="#通过rsyslog收集haproxy日志：" class="headerlink" title="通过rsyslog收集haproxy日志："></a>通过rsyslog收集haproxy日志：</h2><ul><li><code>logstash和rsyslog可以不在同一台主机</code></li><li><p><code>ES和kibana也可以不在同一台主机运行</code></p></li><li><p>在centos 6及之前的版本叫做syslog，centos 7开始叫做rsyslog，根据官方的介绍，rsyslog(2013年版本)可以达到每秒转发百万条日志的级别，官方网址：<a href="http://www.rsyslog.com/，确认系统安装的版本命令如下：" target="_blank" rel="noopener">http://www.rsyslog.com/，确认系统安装的版本命令如下：</a></p></li></ul><p>1：安装rsyslog和haproxy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装haproxy</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install haproxy -y</span></span><br><span class="line"></span><br><span class="line">安装rsyslog</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install rsyslog -y</span></span><br></pre></td></tr></table></figure></p><p>2：编辑rsyslog服务配置文件，打开rsyslog服务用来保存haproxy的日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">编辑rsyslog配置文件</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/rsyslog.conf </span></span><br><span class="line">  15 <span class="variable">$ModLoad</span> imudp</span><br><span class="line">  16 <span class="variable">$UDPServerRun</span> 514</span><br><span class="line"></span><br><span class="line">  19 <span class="variable">$ModLoad</span> imtcp</span><br><span class="line">  20 <span class="variable">$InputTCPServerRun</span> 514</span><br><span class="line"></span><br><span class="line">  74 local2.*                       /var/<span class="built_in">log</span>/haproxy.log  <span class="comment">#自定义日志级别，将此日志级别的日志存放在本机的此文件中</span></span><br><span class="line">  75 local2.*       @@本机地址:1514       <span class="comment">#端口自定义不和其他服务冲突即可              </span></span><br><span class="line">  <span class="comment">#也将此日志的级别存放在本主机上，定义监听的端口为1514（使用本机的logstash主机监听此地址）#最后面一行添加，local2对应haproxy配置文件定义的local级别</span></span><br><span class="line"></span><br><span class="line">查看haproxy配置文件</span><br><span class="line">  <span class="comment">#20~26行默认的配置文件解释：如果要设置将haproxy的日志记录在本机rsyslog服务器中就要在rsyslog配置文件中添加local2.*                       /var/log/haproxy.log</span></span><br><span class="line">    <span class="comment"># 2) configure local2 events to go to the /var/log/haproxy.log</span></span><br><span class="line">    <span class="comment">#   file. A line like the following can be added to</span></span><br><span class="line">    <span class="comment">#   /etc/sysconfig/syslog</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#    local2.*                       /var/log/haproxy.log</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="built_in">log</span>         127.0.0.1 local2</span><br></pre></td></tr></table></figure></p><p>3：重新启动haproxy和rsyslog服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl start rsyslog</span></span><br><span class="line">~]<span class="comment"># systemctl enable rsyslog</span></span><br><span class="line">~]<span class="comment"># systemctl start haproxy</span></span><br><span class="line">~]<span class="comment"># systemctl enable haproxy</span></span><br></pre></td></tr></table></figure></p><h3 id="测试标准输出至屏幕"><a href="#测试标准输出至屏幕" class="headerlink" title="测试标准输出至屏幕"></a>测试标准输出至屏幕</h3><p>4：配置本机的logstash来监听此端口的日志—&gt;测试标准输出至屏幕<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">编辑配置文件</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/logstash/conf.d/rsyslog.conf</span></span><br><span class="line"></span><br><span class="line">  input&#123;</span><br><span class="line">      syslog &#123;</span><br><span class="line">        <span class="built_in">type</span> =&gt; <span class="string">"ststem-rsyslog"</span></span><br><span class="line">        port =&gt; <span class="string">"1514"</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line"></span><br><span class="line">  output&#123;</span><br><span class="line">        stdout&#123;</span><br><span class="line">                codec =&gt; rubydebug</span><br><span class="line">  &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">检测配置文件启动logstash</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/rsyslog.conf -t</span></span><br><span class="line">  ~]<span class="comment"># systemctl restart logstash</span></span><br><span class="line"></span><br><span class="line">查看logstash收集rsyslogs日志的端口（rsyslog使用本机定义的端口，将haproxy的日志发送到本机logstash上做收集）</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  :::1514   logstash监听（定义的rsyslog使用此端口将haproxy日志发送给本机的logstash中做收集）</span><br><span class="line">  *:514    rsyslog端口 UDP协议</span><br><span class="line">  *:5000   haproxy端口</span><br></pre></td></tr></table></figure></p><p>5：开启haproxy的状态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  最后面定义list</span><br><span class="line"></span><br><span class="line">  listen stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:9999</span><br><span class="line">  stats <span class="built_in">enable</span></span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats auth    haadmin:q1w2e3r4ys</span><br><span class="line"></span><br><span class="line">重启haproxy</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  9999  <span class="comment">#自定义haproxy开启的状态页监听端口</span></span><br><span class="line">  5000</span><br></pre></td></tr></table></figure><p>6：客户端web界面访问haproxy状态页面</p><p><img src="/2019/02/21/ELK之Logstash收集rsyslog中记录的haproxy服务的日志/2.png" alt=""></p><p>7:查看本机的命令行页面查看本机的logstash是否收集到rsyslog收集的haproxy日志<br><img src="/2019/02/21/ELK之Logstash收集rsyslog中记录的haproxy服务的日志/3.png" alt=""></p><h3 id="将logstash收集的rsyslog的日志输出至远端的ES集群中存储"><a href="#将logstash收集的rsyslog的日志输出至远端的ES集群中存储" class="headerlink" title="将logstash收集的rsyslog的日志输出至远端的ES集群中存储"></a>将logstash收集的rsyslog的日志输出至远端的ES集群中存储</h3><p>8：编辑logstash配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/logstash/conf.d/haproxy.conf </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input&#123;</span><br><span class="line">    syslog &#123;</span><br><span class="line">      <span class="built_in">type</span> =&gt; <span class="string">"ststem-rsyslog"</span></span><br><span class="line">      port =&gt; <span class="string">"1514"</span></span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">      <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"syslog"</span> &#123;</span><br><span class="line">      elasticsearch &#123;</span><br><span class="line">      hosts =&gt; <span class="string">"172.18.135.1:9200"</span>    <span class="comment">#ES主机地址</span></span><br><span class="line">      index =&gt; <span class="string">"rsyslog-7-103-%&#123;+YYYY.MM&#125;"</span></span><br><span class="line">&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9：检测logstash配置文件及启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/haproxy.conf -t</span></span><br><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/haproxy.conf</span></span><br></pre></td></tr></table></figure></p><p>10：客户端web界面访问haproxy状态页面</p><p><img src="/2019/02/21/ELK之Logstash收集rsyslog中记录的haproxy服务的日志/2.png" alt=""></p><p>11：head插件web界面访问haproxy以生成新日志：</p><p><img src="/2019/02/21/ELK之Logstash收集rsyslog中记录的haproxy服务的日志/4.png" alt=""></p><p>12：kibana界面添加索引<br><img src="/2019/02/21/ELK之Logstash收集rsyslog中记录的haproxy服务的日志/5.png" alt=""></p><p>13：kibana验证数据<br><img src="/2019/02/21/ELK之Logstash收集rsyslog中记录的haproxy服务的日志/6.png" alt=""></p><hr><h2 id="OUTPUT输出中index查看支持的输出的索引的格式时间格式"><a href="#OUTPUT输出中index查看支持的输出的索引的格式时间格式" class="headerlink" title="OUTPUT输出中index查看支持的输出的索引的格式时间格式"></a>OUTPUT输出中index查看支持的输出的索引的格式时间格式</h2><p>官方文档：<a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html#plugins-outputs-elasticsearch-index</a></p><p><a href="https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html" target="_blank" rel="noopener">https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ELK之Logstash收集rsyslog中记录的haproxy服务的日志&quot;&gt;&lt;a href=&quot;#ELK之Logstash收集rsyslog中记录的haproxy服务的日志&quot; class=&quot;headerlink&quot; title=&quot;ELK之Logstash收集rsyslog中记录的haproxy服务的日志&quot;&gt;&lt;/a&gt;ELK之Logstash收集rsyslog中记录的haproxy服务的日志&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/21/ELK之Logstash收集rsyslog中记录的haproxy服务的日志/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/categories/ELK-Stack/"/>
    
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/tags/ELK-Stack/"/>
    
  </entry>
  
  <entry>
    <title>ELK之Logstash收集TCP和UDP日志</title>
    <link href="https://daizhe.net.cn/2019/02/21/ELK%E4%B9%8BLogstash%E6%94%B6%E9%9B%86TCP%E5%92%8CUDP%E6%97%A5%E5%BF%97/"/>
    <id>https://daizhe.net.cn/2019/02/21/ELK之Logstash收集TCP和UDP日志/</id>
    <published>2019-02-21T03:01:44.367Z</published>
    <updated>2019-03-03T03:46:37.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK之Logstash收集TCP和UDP日志"><a href="#ELK之Logstash收集TCP和UDP日志" class="headerlink" title="ELK之Logstash收集TCP和UDP日志"></a>ELK之Logstash收集TCP和UDP日志</h1><p><img src="/2019/02/21/ELK之Logstash收集TCP和UDP日志/标题.png" alt=""><br><a id="more"></a></p><h2 id="Logstash收集TCP和UDP日志"><a href="#Logstash收集TCP和UDP日志" class="headerlink" title="Logstash收集TCP和UDP日志"></a>Logstash收集TCP和UDP日志</h2><ul><li><p>通过logstash的tcp/udp插件收集日志，通常用于在向elasticsearch日志补录丢失的部分日志，可以将丢失的日志写到一个文件，然后通过TCP日志收集方式直接发送给logstash然后再写入到elasticsearch服务器。</p></li><li><p>官方介绍：<a href="https://www.elastic.co/guide/en/logstash/5.6/input-plugins.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/5.6/input-plugins.html</a></p></li></ul><p>Logstash配置文件解释<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">logstash配置文件，先进行收集测试：</span><br><span class="line">[root@linux-host6 ~]<span class="comment"># cat /etc/logstash/conf.d/tcp.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;             <span class="comment">#指定收集tcp的日志</span></span><br><span class="line">    port =&gt; 9889    </span><br><span class="line">    host =&gt; <span class="string">"0.0.0.0"</span>  <span class="comment">#指定监听的本机地址，如果不指定默认时0.0.0.0监听本机的所有可用的地址</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"tcplog"</span>  <span class="comment">#指定类型</span></span><br><span class="line">    mode =&gt; <span class="string">"server"</span>   <span class="comment">#是定server或者client ，如果不指定默认的为server</span></span><br><span class="line">    codec =&gt; json</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="标准输出测试（测试基于tcp收集日志，是否可以收到日志）"><a href="#标准输出测试（测试基于tcp收集日志，是否可以收到日志）" class="headerlink" title="标准输出测试（测试基于tcp收集日志，是否可以收到日志）"></a>标准输出测试（测试基于tcp收集日志，是否可以收到日志）</h3><p>1:logstash收集本机的tcp链接的日志文件，编辑logstash配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat /etc/logstash/conf.d/tcp.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 12345</span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"tcplog"</span></span><br><span class="line">    mode =&gt; <span class="string">"server"</span>  </span><br><span class="line">   codec =&gt; json</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2：测试logstash配置文件并启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">测试配置文件语法</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/tcplog.cof -t</span></span><br><span class="line"></span><br><span class="line">前台启动logstash测试是否可以接收到tcp日志</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/tcplog.cof</span></span><br><span class="line"></span><br><span class="line">验证端口是否启动</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  :::12345</span><br></pre></td></tr></table></figure></p><p>3：其他主机测试：在其他服务器安装nc命令：<br>NetCat简称nc，在网络工具中有“瑞士军刀”美誉，其功能实用，是一个简单、可靠的网络工具，可通过TCP或UDP协议传输读写数据，另外还具有很多其他功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装测试工具</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment">#  yum instll nc –y</span></span><br><span class="line"></span><br><span class="line">发送tcp消息到logstash主机</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># echo "nc test" | nc 172.20.101.221(logstash主机地址) 12345</span></span><br></pre></td></tr></table></figure></p><p>4：查看logstash主机是否接收到日志消息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/tcplog.cof</span></span><br><span class="line">WARNING: Could not find logstash.yml <span class="built_in">which</span> is typically located <span class="keyword">in</span> <span class="variable">$LS_HOME</span>/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaults</span><br><span class="line">Could not find log4j2 configuration at path /usr/share/logstash/config/log4j2.properties. Using default config <span class="built_in">which</span> logs errors to the console</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"@timestamp"</span> =&gt; 2019-02-21T03:34:35.041Z,</span><br><span class="line">        <span class="string">"port"</span> =&gt; 43030,</span><br><span class="line">    <span class="string">"@version"</span> =&gt; <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"host"</span> =&gt; <span class="string">"172.20.0.1"</span>,</span><br><span class="line">     <span class="string">"message"</span> =&gt; <span class="string">"nc test"</span>,</span><br><span class="line">        <span class="string">"type"</span> =&gt; <span class="string">"tcplog"</span>,</span><br><span class="line">        <span class="string">"tags"</span> =&gt; [</span><br><span class="line">      [0] <span class="string">"_jsonparsefailure"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5:其他主机测试：通过nc命令发送一个文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过nc命令发送一个文件：</span><br><span class="line">  ~]<span class="comment"># nc 172.20.101.221 12345 &lt; /etc/passwd</span></span><br></pre></td></tr></table></figure></p><p>6：logstash主机查看验证数据<br><img src="/2019/02/21/ELK之Logstash收集TCP和UDP日志/1.png" alt=""></p><p>7：其他主机测试：<br>通过伪设备的方式发送消息：<br>在类Unix操作系统中，块设备有硬盘、内存的硬件，但是还有设备节点并不一定要对应物理设备，我们把没有这种对应关系的设备是伪设备，比如/dev/null，/dev/zero，/dev/random以及/dev/tcp和/dev/upd等，Linux操作系统使用这些伪设备提供了多种不通的功能，tcp通信只是dev下面众多伪设备当中的一种设备。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># echo "伪设备"  &gt; /dev/tcp/172.20.101.221/12345</span></span><br></pre></td></tr></table></figure></p><p>8：logstash主机查看验证数据<br><img src="/2019/02/21/ELK之Logstash收集TCP和UDP日志/2.png" alt=""></p><hr><h3 id="Lgstash收集本机TCP日志将输出改为elasticsearch"><a href="#Lgstash收集本机TCP日志将输出改为elasticsearch" class="headerlink" title="Lgstash收集本机TCP日志将输出改为elasticsearch"></a>Lgstash收集本机TCP日志将输出改为elasticsearch</h3><p>1：logstash收集本机的tcp链接的日志文件，编辑logstash配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  ~]<span class="comment"># vim /etc/logstash/conf.d/tcplog.cof </span></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 12345</span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"tcplog"</span></span><br><span class="line">    mode =&gt; <span class="string">"server"</span></span><br><span class="line">    host =&gt; <span class="string">"0.0.0.0"</span></span><br><span class="line">    codec =&gt; json</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"tcplog"</span> &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"172.18.135.1:9200"</span>]</span><br><span class="line">    index =&gt;  <span class="string">"logstash-tcplog-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2：测试logstash配置文件语法并启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/tcplog.cof -t</span></span><br><span class="line">~]<span class="comment"># systemctl restart logstash</span></span><br></pre></td></tr></table></figure></p><p>3；通过nc命令或伪设备输入日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># nc 172.20.101.221 12345 &lt; /etc/passwd</span></span><br></pre></td></tr></table></figure></p><p>4：在kibana界面添加索引<br><img src="/2019/02/21/ELK之Logstash收集TCP和UDP日志/3.png" alt=""></p><p>5：kibana验证数据<br><img src="/2019/02/21/ELK之Logstash收集TCP和UDP日志/4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ELK之Logstash收集TCP和UDP日志&quot;&gt;&lt;a href=&quot;#ELK之Logstash收集TCP和UDP日志&quot; class=&quot;headerlink&quot; title=&quot;ELK之Logstash收集TCP和UDP日志&quot;&gt;&lt;/a&gt;ELK之Logstash收集TCP和UDP日志&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/21/ELK之Logstash收集TCP和UDP日志/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/categories/ELK-Stack/"/>
    
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/tags/ELK-Stack/"/>
    
  </entry>
  
  <entry>
    <title>ELK之Logstash收集Nginx日志</title>
    <link href="https://daizhe.net.cn/2019/02/20/ELK%E4%B9%8BLogstash%E6%94%B6%E9%9B%86Nginx%E6%97%A5%E5%BF%97/"/>
    <id>https://daizhe.net.cn/2019/02/20/ELK之Logstash收集Nginx日志/</id>
    <published>2019-02-20T13:21:02.812Z</published>
    <updated>2019-03-03T03:46:09.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK之Logstash收集Nginx日志"><a href="#ELK之Logstash收集Nginx日志" class="headerlink" title="ELK之Logstash收集Nginx日志"></a>ELK之Logstash收集Nginx日志</h1><p><img src="/2019/02/20/ELK之Logstash收集Nginx日志/标题.png" alt=""><br><a id="more"></a></p><h2 id="收集nginx访问日志"><a href="#收集nginx访问日志" class="headerlink" title="收集nginx访问日志"></a>收集nginx访问日志</h2><p><img src="/2019/02/20/ELK之Logstash收集Nginx日志/1.png" alt=""></p><p>1.安装nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">编译安装</span><br><span class="line"></span><br><span class="line">    src]<span class="comment"># pwd</span></span><br><span class="line">    /usr/share/src</span><br><span class="line">    src]<span class="comment"># ls</span></span><br><span class="line">    nginx-1.2.9.tar.gz</span><br><span class="line">    src]<span class="comment"># tar xzvf nginx-1.2.9.tar.gz </span></span><br><span class="line"></span><br><span class="line">    nginx-1.2.9]<span class="comment"># pwd</span></span><br><span class="line">    /usr/share/src/nginx-1.2.9</span><br><span class="line"></span><br><span class="line">指定安装位置并编译安装</span><br><span class="line"></span><br><span class="line">    nginx-1.2.9]<span class="comment"># ./configure --prefix=/usr/share/nginx &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure></p><p>2：修改nginx日志格式(将输出的日志格式修改为json格式的日志格式)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat /usr/share/nginx/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line">    <span class="comment">#注意定义的日志的位置</span></span><br><span class="line">log_format access_json <span class="string">'&#123;"@timestamp":"$time_iso8601",'</span>        <span class="comment">#定义日志的格式</span></span><br><span class="line">        <span class="string">'"host":"$server_addr",'</span></span><br><span class="line">        <span class="string">'"clientip":"$remote_addr",'</span></span><br><span class="line">        <span class="string">'"size":$body_bytes_sent,'</span></span><br><span class="line">        <span class="string">'"responsetime":$request_time,'</span></span><br><span class="line">        <span class="string">'"upstreamtime":"$upstream_response_time",'</span></span><br><span class="line">        <span class="string">'"upstreamhost":"$upstream_addr",'</span></span><br><span class="line">        <span class="string">'"http_host":"$host",'</span></span><br><span class="line">        <span class="string">'"url":"$uri",'</span></span><br><span class="line">        <span class="string">'"domain":"$host",'</span></span><br><span class="line">        <span class="string">'"xff":"$http_x_forwarded_for",'</span></span><br><span class="line">        <span class="string">'"referer":"$http_referer",'</span></span><br><span class="line">        <span class="string">'"status":"$status"&#125;'</span>;</span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  access_json;         <span class="comment">#调用此日志格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建对应的保存日志的目录</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># mkdir /var/log/nginx</span></span><br></pre></td></tr></table></figure></p><p>3：启动nginx并访问默认页面查看日志格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">启动nginx</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># /usr/share/nginx/sbin/nginx -t</span></span><br><span class="line">    nginx: the configuration file /usr/share/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">    nginx: configuration file /usr/share/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">    ~]<span class="comment"># /usr/share/nginx/sbin/nginx</span></span><br><span class="line"></span><br><span class="line">访问默认页面</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># curl 172.20.101.221:80</span></span><br><span class="line"></span><br><span class="line">查看日志格式</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># cat /var/log/nginx/access.log </span></span><br><span class="line">    &#123;<span class="string">"@timestamp"</span>:<span class="string">"2019-02-21T10:44:15+08:00"</span>,<span class="string">"host"</span>:<span class="string">"192.168.35.103"</span>,<span class="string">"clientip"</span>:<span class="string">"172.20.101.221"</span>,<span class="string">"size"</span>:612,<span class="string">"responsetime"</span>:0.000,<span class="string">"upstreamtime"</span>:<span class="string">"-"</span>,<span class="string">"upstreamhost"</span>:<span class="string">"-"</span>,<span class="string">"http_host"</span>:<span class="string">"172.20.101.221"</span>,<span class="string">"url"</span>:<span class="string">"/index.html"</span>,<span class="string">"domain"</span>:<span class="string">"172.20.101.221"</span>,<span class="string">"xff"</span>:<span class="string">"-"</span>,<span class="string">"referer"</span>:<span class="string">"-"</span>,<span class="string">"status"</span>:<span class="string">"200"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>4：配置本机上的logstash收集本机的nginx日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/logstash/conf.d/nginxlog.conf</span></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/var/log/nginx/access.log"</span></span><br><span class="line">    start_position =&gt; <span class="string">"end"</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"nginx-accesslog"</span></span><br><span class="line">    codec =&gt; json</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"nginx-accesslog"</span> &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [<span class="string">"172.18.135.1:9200"</span>]</span><br><span class="line">      index =&gt; <span class="string">"logstash-nginx-accesslog-1516-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5：logstash进行配置文件语法检测及重启服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/nginxlog.conf -t</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># systemctl restart logstash</span></span><br></pre></td></tr></table></figure></p><p>6：kibana界面添加索引<br><img src="/2019/02/20/ELK之Logstash收集Nginx日志/2.png" alt=""></p><p>7：kibana界面验证数据<br><img src="/2019/02/20/ELK之Logstash收集Nginx日志/3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ELK之Logstash收集Nginx日志&quot;&gt;&lt;a href=&quot;#ELK之Logstash收集Nginx日志&quot; class=&quot;headerlink&quot; title=&quot;ELK之Logstash收集Nginx日志&quot;&gt;&lt;/a&gt;ELK之Logstash收集Nginx日志&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/20/ELK之Logstash收集Nginx日志/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/categories/ELK-Stack/"/>
    
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/tags/ELK-Stack/"/>
    
  </entry>
  
  <entry>
    <title>ELK之Logstash收集本机ES服务json类型日志</title>
    <link href="https://daizhe.net.cn/2019/02/20/ELK%E4%B9%8BLogstash%E6%94%B6%E9%9B%86%E6%9C%AC%E6%9C%BAES%E6%9C%8D%E5%8A%A1json%E7%B1%BB%E5%9E%8B%E6%97%A5%E5%BF%97/"/>
    <id>https://daizhe.net.cn/2019/02/20/ELK之Logstash收集本机ES服务json类型日志/</id>
    <published>2019-02-20T13:10:43.136Z</published>
    <updated>2019-03-03T03:46:30.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK之Logstash收集本机ES服务json类型日志"><a href="#ELK之Logstash收集本机ES服务json类型日志" class="headerlink" title="ELK之Logstash收集本机ES服务json类型日志"></a>ELK之Logstash收集本机ES服务json类型日志</h1><p><img src="/2019/02/20/ELK之Logstash收集本机ES服务json类型日志/标题.png" alt=""><br><a id="more"></a></p><h2 id="收集java日志："><a href="#收集java日志：" class="headerlink" title="收集java日志："></a>收集java日志：</h2><ul><li>java日志的格式长度不统一，有的条日志很短而有的一条记录很长好几行</li><li>使用codec的multiline插件实现多行匹配，这是一个可以将多行进行合并的插件，而且可以使用what指定将匹配到的行与前面的行合并还是和后面的行合并</li></ul><p>multiline（匹配多行输入官方解释）：<a href="https://www.elastic.co/guide/en/logstash/current/plugins-codecs-multiline.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-codecs-multiline.html</a></p><h3 id="这里演示收集ES机器上的日志-ES程序的运行是要求部署JAVA环境的，射门生成的日志格式也是java格式类型-但是日志格式的开头都是以-开头"><a href="#这里演示收集ES机器上的日志-ES程序的运行是要求部署JAVA环境的，射门生成的日志格式也是java格式类型-但是日志格式的开头都是以-开头" class="headerlink" title="这里演示收集ES机器上的日志(ES程序的运行是要求部署JAVA环境的，射门生成的日志格式也是java格式类型,但是日志格式的开头都是以[开头)"></a>这里演示收集ES机器上的日志(ES程序的运行是要求部署JAVA环境的，射门生成的日志格式也是java格式类型,但是日志格式的开头都是以[开头)</h3><p>1: ES主机上安装收集日志的logstash程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># ls</span></span><br><span class="line">logstash-5.6.13.rpm </span><br><span class="line">~]<span class="comment"># rpm -ivh logstash-5.6.13.rpm</span></span><br></pre></td></tr></table></figure></p><h3 id="收集ES日志语法测试"><a href="#收集ES日志语法测试" class="headerlink" title="收集ES日志语法测试"></a>收集ES日志语法测试</h3><p>2：配置ES主机上用来收集日志的logstash程序的配置文件<br>解释<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat /etc/logstash/conf.d/java.conf</span></span><br><span class="line">input &#123;</span><br><span class="line">        stdin &#123;</span><br><span class="line">        codec =&gt; multiline &#123;</span><br><span class="line">        pattern =&gt; <span class="string">"^\["</span> <span class="comment">#当遇到[开头的行时候将多行进行合并</span></span><br><span class="line">        negate =&gt; <span class="literal">true</span>  <span class="comment">#true为匹配成功进行操作，false为不成功进行操作</span></span><br><span class="line">        what =&gt; <span class="string">"previous"</span>  <span class="comment">#与上面的行合并，如果是下面的行合并就是next</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123; <span class="comment">#日志过滤，如果所有的日志都过滤就写这里，如果只针对某一个过滤就写在input里面的日志输入里面</span></span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">        stdout &#123;</span><br><span class="line">        codec =&gt; rubydebug</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat /etc/logstash/conf.d/es.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">      stdin &#123;</span><br><span class="line">      codec =&gt; multiline &#123;</span><br><span class="line">      pattern =&gt; <span class="string">"^\["</span></span><br><span class="line">      negate =&gt; <span class="literal">true</span></span><br><span class="line">      what =&gt; <span class="string">"previous"</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">      stdout &#123;</span><br><span class="line">      codec =&gt; rubydebug</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>2：检测配置文件的语法格式并启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/es.conf -t</span></span><br><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/es.conf</span></span><br></pre></td></tr></table></figure></p><p>3：日志输入输出测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/es.conf </span></span><br><span class="line">WARNING: Could not find logstash.yml <span class="built_in">which</span> is typically located <span class="keyword">in</span> <span class="variable">$LS_HOME</span>/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaults</span><br><span class="line">Could not find log4j2 configuration at path /usr/share/logstash/config/log4j2.properties. Using default config <span class="built_in">which</span> logs errors to the console</span><br><span class="line">The stdin plugin is now waiting <span class="keyword">for</span> input:</span><br><span class="line">1111</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1122432</span><br><span class="line">4324324324</span><br><span class="line">234234</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[v1</span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">"@version"</span> =&gt; <span class="string">"1"</span>,</span><br><span class="line">          <span class="string">"host"</span> =&gt; <span class="string">"es1.com"</span>,</span><br><span class="line">    <span class="string">"@timestamp"</span> =&gt; 2019-02-20T12:54:38.873Z,</span><br><span class="line">       <span class="string">"message"</span> =&gt; <span class="string">"1111\n1122432\n4324324324\n234234"</span>,</span><br><span class="line">          <span class="string">"tags"</span> =&gt; [</span><br><span class="line">        [0] <span class="string">"multiline"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">[123</span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">"@version"</span> =&gt; <span class="string">"1"</span>,</span><br><span class="line">          <span class="string">"host"</span> =&gt; <span class="string">"es1.com"</span>,</span><br><span class="line">    <span class="string">"@timestamp"</span> =&gt; 2019-02-20T12:54:42.617Z,</span><br><span class="line">       <span class="string">"message"</span> =&gt; <span class="string">"[v1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="搜集ES日志实战"><a href="#搜集ES日志实战" class="headerlink" title="搜集ES日志实战"></a>搜集ES日志实战</h3><p>1：logstash配置文件标准输出至文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@linux-host1 ~]<span class="comment"># vim /etc/logstash/conf.d/java.conf</span></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/data/eslogs/ES.log"</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"javalog"</span></span><br><span class="line">    start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">    codec =&gt; multiline &#123;</span><br><span class="line">    pattern =&gt; <span class="string">"^\["</span></span><br><span class="line">    negate =&gt; <span class="literal">true</span></span><br><span class="line">    what =&gt; <span class="string">"previous"</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"javalog"</span> &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">      codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt;  <span class="string">"/tmp/m.txt"</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2:语法验证：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-host1 ~]<span class="comment"># /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/java.conf  -t</span></span><br></pre></td></tr></table></figure></p><p>3：将输出改为elasticsearch和本地的一个文件中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">更改后的内容如下：</span><br><span class="line">[root@linux-host1 ~]<span class="comment"># cat /etc/logstash/conf.d/java.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/data/eslogs/ES.log"</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"javalog"</span></span><br><span class="line">    start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">    codec =&gt; multiline &#123;</span><br><span class="line">    pattern =&gt; <span class="string">"^\["</span></span><br><span class="line">    negate =&gt; <span class="literal">true</span></span><br><span class="line">    what =&gt; <span class="string">"previous"</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"javalog"</span> &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/tmp/java.txt"</span></span><br><span class="line">  &#125;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt;  [<span class="string">"192.168.15.11:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"javalog-1511-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@linux-host1 ~]<span class="comment"># systemctl  restart logstash</span></span><br></pre></td></tr></table></figure></p><p>4:然后重启一下elasticsearch服务，目前是为了生成新的日志，以验证logstash能否自动收集新生成的日志。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-host1 ~]<span class="comment"># systemctl  restart elasticsearch</span></span><br></pre></td></tr></table></figure></p><p>5：kibana界面添加javalog-1511索引：<br><img src="/2019/02/20/ELK之Logstash收集本机ES服务json类型日志/1.png" alt=""></p><p>6：模拟生成数据查看kibana界面查看数据：<br><img src="/2019/02/20/ELK之Logstash收集本机ES服务json类型日志/2.png" alt=""></p><p>7：关于sincedb：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-host1~]<span class="comment"># cat /var/lib/logstash/plugins/inputs/file/.sincedb_1ced15cfacdbb0380466be84d620085a</span></span><br><span class="line">134219868 0 2064 29465 <span class="comment">#记录了收集文件的inode信息</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ELK之Logstash收集本机ES服务json类型日志&quot;&gt;&lt;a href=&quot;#ELK之Logstash收集本机ES服务json类型日志&quot; class=&quot;headerlink&quot; title=&quot;ELK之Logstash收集本机ES服务json类型日志&quot;&gt;&lt;/a&gt;ELK之Logstash收集本机ES服务json类型日志&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/20/ELK之Logstash收集本机ES服务json类型日志/标题.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/categories/ELK-Stack/"/>
    
    
      <category term="ELK Stack" scheme="https://daizhe.net.cn/tags/ELK-Stack/"/>
    
  </entry>
  
  <entry>
    <title>mysql之存储引擎和服务器配置</title>
    <link href="https://daizhe.net.cn/2019/02/20/mysql%E4%B9%8B%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://daizhe.net.cn/2019/02/20/mysql之存储引擎和服务器配置/</id>
    <published>2019-02-20T07:08:47.059Z</published>
    <updated>2019-02-20T07:17:57.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql之存储引擎和服务器配置"><a href="#mysql之存储引擎和服务器配置" class="headerlink" title="mysql之存储引擎和服务器配置"></a>mysql之存储引擎和服务器配置</h1><p><img src="/2019/02/20/mysql之存储引擎和服务器配置/标题.gif" alt=""><br><a id="more"></a></p><p><img src="/2019/02/20/mysql之存储引擎和服务器配置/1.png" alt=""></p><p>存储引擎：如何去管理数据库的数据文件<br><img src="/2019/02/20/mysql之存储引擎和服务器配置/2.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">查看当前数据库的存储引擎</span><br><span class="line">MariaDB [(none)]&gt; show engines;</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                                    | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| MEMORY             | YES     | Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables                  | NO           | NO   | NO         |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                                      | NO           | NO   | NO         |</span><br><span class="line">| CSV                | YES     | CSV storage engine                                                         | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears)             | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                                      | NO           | NO   | NO         |</span><br><span class="line">| InnoDB             | DEFAULT | Percona-XtraDB, Supports transactions, row-level locking, and foreign keys | YES          | YES  | YES        |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                                     | NO           | NO   | NO         |</span><br><span class="line">| FEDERATED          | YES     | FederatedX pluggable storage engine                                        | YES          | NO   | YES        |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                                         | NO           | NO   | NO         |</span><br><span class="line">| Aria               | YES     | Crash-safe tables with MyISAM heritage                                     | NO           | NO   | NO         |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p><code>MyISAM引擎特点：</code><br>不支持事务<br>表级锁定<br>读写相互阻塞，写入不能读，读时不能写<br>只缓存索引<br>不支持外键约束<br>不支持聚簇索引<br>读取数据较快，占用资源较少<br>不支持MVCC（多版本并发控制机制）高并发<br>崩溃恢复性较差<br>MySQL5.5.5前默认的数据库引擎  </p><p>MyISAM存储引擎适用场景<br>&ensp;&ensp;只读（或者写较少）、表较小（可以接受长时间进行修复操作）<br>&ensp;&ensp;MyISAM引擎文件<br>&ensp;&ensp;tbl_name.frm 表格式定义<br>&ensp;&ensp;tbl_name.MYD 数据文件<br>&ensp;&ensp;tbl_name.MYI 索引文件   </p><p><code>InnoDB引擎特点</code><br>行级锁<br>支持事务，适合处理大量短期事务<br>读写阻塞与事务隔离级别相关<br>可缓存数据和索引<br>支持聚簇索引<br>崩溃恢复性更好<br>支持MVCC高并发<br>从MySQL5.5后支持全文索引<br>从MySQL5.5.5开始为默认的数据库引擎   </p><p>InnoDB数据库文件<br>所有InnoDB表的数据和索引放置于同一个表空间中<br>&ensp;&ensp;表空间文件：datadir定义的目录下<br>&ensp;&ensp;数据文件：ibddata1, ibddata2, …<br>每个表单独使用一个表空间存储表的数据和索引<br>&ensp;&ensp;启用：innodb_file_per_table=ON<br>&ensp;&ensp;参看：<a href="https://mariadb.com/kb/en/library/xtradbinnodb-serversystem-variables/#innodb_file_per_table" target="_blank" rel="noopener">https://mariadb.com/kb/en/library/xtradbinnodb-serversystem-variables/#innodb_file_per_table</a>   ON (&gt;= MariaDB 5.5)<br>两类文件放在数据库独立目录中<br>&ensp;&ensp;数据文件(存储数据和索引)：tb_name.ibd<br>&ensp;&ensp;表格式定义：tb_name.frm   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果想让老版本的数据库创建的库以及表支持innodb搜索引擎需要编辑配置文件中添加</span><br><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine=innodb</span><br><span class="line"></span><br><span class="line">删除hellodb这个数据库</span><br><span class="line">mysql -e <span class="string">'drop database hellodb'</span></span><br></pre></td></tr></table></figure><p><code>其它存储引擎</code><br>Performance_Schema：Performance_Schema数据库使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use information_schema</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [information_schema]&gt; show tables;(这些表都是基于此搜索引擎的)</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| Tables_in_information_schema          |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| CHARACTER_SETS                        |</span><br><span class="line">| CLIENT_STATISTICS                     |</span><br><span class="line">| COLLATIONS                            |</span><br><span class="line">| COLLATION_CHARACTER_SET_APPLICABILITY |</span><br><span class="line">| COLUMNS                               |</span><br><span class="line">| COLUMN_PRIVILEGES                     |</span><br><span class="line">| ENGINES                               |</span><br><span class="line">| EVENTS                                |</span><br><span class="line">| FILES                                 |</span><br><span class="line">| GLOBAL_STATUS                         |</span><br><span class="line">| GLOBAL_VARIABLES                      |</span><br><span class="line">| INDEX_STATISTICS                      |</span><br><span class="line">| KEY_CACHES                            |</span><br><span class="line">| KEY_COLUMN_USAGE                      |</span><br><span class="line">| PARAMETERS                            |</span><br><span class="line">| PARTITIONS                            |</span><br><span class="line">| PLUGINS                               |</span><br><span class="line">| PROCESSLIST                           |</span><br><span class="line">| PROFILING                             |</span><br><span class="line">| REFERENTIAL_CONSTRAINTS               |</span><br><span class="line">| ROUTINES                              |</span><br><span class="line">| SCHEMATA                              |</span><br><span class="line">| SCHEMA_PRIVILEGES                     |</span><br><span class="line">| SESSION_STATUS                        |</span><br><span class="line">| SESSION_VARIABLES                     |</span><br><span class="line">| STATISTICS                            |</span><br><span class="line">| TABLES                                |</span><br><span class="line">| TABLESPACES                           |</span><br><span class="line">| TABLE_CONSTRAINTS                     |</span><br><span class="line">| TABLE_PRIVILEGES                      |</span><br><span class="line">| TABLE_STATISTICS                      |</span><br><span class="line">| TRIGGERS                              |</span><br><span class="line">| USER_PRIVILEGES                       |</span><br><span class="line">| USER_STATISTICS                       |</span><br><span class="line">| VIEWS                                 |</span><br><span class="line">| INNODB_CMPMEM_RESET                   |</span><br><span class="line">| INNODB_RSEG                           |</span><br><span class="line">| INNODB_UNDO_LOGS                      |</span><br><span class="line">| INNODB_CMPMEM                         |</span><br><span class="line">| INNODB_SYS_TABLESTATS                 |</span><br><span class="line">| INNODB_LOCK_WAITS                     |</span><br><span class="line">| INNODB_INDEX_STATS                    |</span><br><span class="line">| INNODB_CMP                            |</span><br><span class="line">| INNODB_CMP_RESET                      |</span><br><span class="line">| INNODB_CHANGED_PAGES                  |</span><br><span class="line">| INNODB_BUFFER_POOL_PAGES              |</span><br><span class="line">| INNODB_TRX                            |</span><br><span class="line">| INNODB_BUFFER_POOL_PAGES_INDEX        |</span><br><span class="line">| INNODB_LOCKS                          |</span><br><span class="line">| INNODB_BUFFER_POOL_PAGES_BLOB         |</span><br><span class="line">| INNODB_SYS_TABLES                     |</span><br><span class="line">| INNODB_SYS_FIELDS                     |</span><br><span class="line">| INNODB_SYS_COLUMNS                    |</span><br><span class="line">| INNODB_SYS_STATS                      |</span><br><span class="line">| INNODB_SYS_FOREIGN                    |</span><br><span class="line">| INNODB_SYS_INDEXES                    |</span><br><span class="line">| XTRADB_ADMIN_COMMAND                  |</span><br><span class="line">| INNODB_TABLE_STATS                    |</span><br><span class="line">| INNODB_SYS_FOREIGN_COLS               |</span><br><span class="line">| INNODB_BUFFER_PAGE_LRU                |</span><br><span class="line">| INNODB_BUFFER_POOL_STATS              |</span><br><span class="line">| INNODB_BUFFER_PAGE                    |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">62 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [information_schema]&gt; show table status from performance_schema;</span><br><span class="line">+----------------------------------------------+--------------------+---------+------------+-------+----------------+-------------+-----------------+--------------+-----------+----------------+-------------+-------------+------------+-----------------+----------+----------------+---------+</span><br><span class="line">| Name                                         | Engine             | Version | Row_format | Rows  | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time | Update_time | Check_time | Collation       | Checksum | Create_options | Comment |</span><br><span class="line">+----------------------------------------------+--------------------+---------+------------+-------+----------------+-------------+-----------------+--------------+-----------+----------------+-------------+-------------+------------+-----------------+----------+----------------+---------+</span><br><span class="line">| cond_instances                               | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| events_waits_current                         | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| events_waits_history                         | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| events_waits_history_long                    | PERFORMANCE_SCHEMA |      10 | Dynamic    | 10000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| events_waits_summary_by_instance             | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| events_waits_summary_by_thread_by_event_name | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| events_waits_summary_global_by_event_name    | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| file_instances                               | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| file_summary_by_event_name                   | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| file_summary_by_instance                     | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| mutex_instances                              | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| performance_timers                           | PERFORMANCE_SCHEMA |      10 | Fixed      |     5 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| rwlock_instances                             | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| setup_consumers                              | PERFORMANCE_SCHEMA |      10 | Dynamic    |     8 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| setup_instruments                            | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| setup_timers                                 | PERFORMANCE_SCHEMA |      10 | Dynamic    |     1 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| threads                                      | PERFORMANCE_SCHEMA |      10 | Dynamic    |  1000 |              0 |           0 |               0 |            0 |         0 |           NULL | NULL        | NULL        | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">+----------------------------------------------+--------------------+---------+------------+-------+----------------+-------------+-----------------+--------------+-----------+----------------+-------------+-------------+------------+-----------------+----------+----------------+---------+</span><br><span class="line">17 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">该数据库是存储性能相关</span><br></pre></td></tr></table></figure></p><p>Memory ：将所有数据存储在RAM（内存）中，以便在需要快速查找参考和其他类似 数据的环境中进行快速访问。适用存放临时数据。引擎以前被称为HEAP引擎  </p><p>MRG_MyISAM：使MySQL DBA或开发人员能够对一系列相同的  MyISAM表 进行逻辑分组，并将它们作为一个对象引用。适用于VLDB(Very Large Data Base)环境，如数据仓库   </p><p>Archive ：为存储和检索大量很少参考的存档或安全审核信息，只支持 SELECT和INSERT操作；支持行级锁和专用缓存区</p><p>Federated联合：用于访问其它远程MySQL服务器一个代理，它通过创建一 个到远程MySQL服务器的客户端连接，并将查询传输到远程服务器执行，而 后完成数据存取，提供链接单独MySQL服务器的能力，以便从多个物理服务 器创建一个逻辑数据库。非常适合分布式或数据集市环境 </p><p>BDB：可替代InnoDB的事务引擎，支持COMMIT、ROLLBACK和其他事务特性<br>Cluster/NDB：MySQL的簇式数据库引擎，尤其适合于具有高性能查找要求的 应用程序，这类查找需求还要求具有最高的正常工作时间和可用性  </p><p>CSV：CSV存储引擎使用逗号分隔值格式将数据存储在文本文件中。可以使用 CSV引擎以CSV格式导入和导出其他软件和应用程序之间的数据交换  </p><p>BLACKHOLE ：黑洞存储引擎接受但不存储数据，检索总是返回一个空集。该功 能可用于分布式数据库设计，数据自动复制，但不是本地存储   </p><p>example：“stub”引擎，它什么都不做。可以使用此引擎创建表，但不能将数 据存储在其中或从中检索。目的是作为例子来说明如何开始编写新的存储引擎   </p><p>MariaDB支持的其它存储引擎：<br>OQGraph<br>SphinxSE<br>TokuDB<br>Cassandra<br>CONNECT<br>SQUENCE   </p><p><code>查看mysql支持的存储引擎</code><br>show engines;<br><code>查看当前默认的存储引擎</code><br>show variables like ‘%storage_engine%’;<br><code>设置默认的存储引擎</code><br>vim /etc/my.conf  [mysqld]<br>default_storage_engine= InnoDB<br><code>查看库中所有表使用的存储引擎</code><br>show table status from db_name;<br><code>查看库中指定表的存储引擎</code><br>show table status like  ‘ tb_name ‘;<br>show create table tb_name;<br><code>设置表的存储引擎：</code><br>CREATE TABLE tb_name(… ) ENGINE=InnoDB;<br>ALTER TABLE tb_name ENGINE=InnoDB;   </p><h2 id="MySQL中的系统数据库"><a href="#MySQL中的系统数据库" class="headerlink" title="MySQL中的系统数据库"></a>MySQL中的系统数据库</h2><p><code>mysql数据库</code><br>是mysql的核心数据库，类似于Sql  Server中的master库，主要负责存储数据 库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息<br><code>performance_schema数据库</code><br>MySQL 5.5开始新增的数据库，主要用于收集数据库服务器性能参数,库里表的 存储引擎均为PERFORMANCE_SCHEMA，用户不能创建存储引擎为 PERFORMANCE_SCHEMA的表<br><code>information_schema数据库</code><br>MySQL 5.0之后产生的，一个虚拟数据库，物理上并不存在 information_schema数据库类似与“数据字典”，提供了访问数据库元数据的 方式，即数据的数据。比如数据库名或表名，列类型，访问权限（更加细化的 访问方式） </p><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a><code>服务器配置</code></h2><p><code>mysqld选项cmd-line和option file(可以写在配置文件中即服务器选项)</code>  </p><p><code>服务器系统变量 system var（服务器在内存中存放的状态，登陆服务器之后，show variables like &#39;变量名&#39; 可以看到的）</code>  </p><p><code>服务器状态变量  status var（只读性的变量，当前数据库的状态）</code><br>&ensp;&ensp;<a href="https://dev.mysql.com/doc/refman/5.7/en/mysqld-optiontables.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/mysqld-optiontables.html</a><br>&ensp;&ensp;<a href="https://mariadb" target="_blank" rel="noopener">https://mariadb</a>. com/kb/en/library/full-list-of-mariadb-optionssystem-and-status-variables/<br>注意：其中有些参数支持运行时修改，会立即生效；有些参数不支持，且 只能通过修改配置文件，并重启服务器程序生效；有些参数作用域是全局 的，且不可改变；有些可以为每个用户提供单独（会话）的设置  </p><p><code>获取mysqld的可用选项列表：服务器选项</code><br>&ensp;&ensp;<code>mysqld --help --verbose</code><br>&ensp;&ensp;<code>mysqld --print-defaults  获取默认设置</code> </p><h2 id="服务器配置-1"><a href="#服务器配置-1" class="headerlink" title="服务器配置"></a>服务器配置</h2><p><code>服务器系统变量：分全局和会话两种</code><br><code>服务器状态变量：分全局和会话两种</code><br>获取运行中的mysql进程使用各服务器参数及其值<br>&ensp;&ensp;mysql&gt; SHOW GLOBAL VARIABLES;<br>&ensp;&ensp;mysql&gt; SHOW [SESSION] VARIABLES;<br>设置服务器选项方法：<br>&ensp;&ensp;在命令行中设置<br>&ensp;&ensp;&ensp;&ensp;shell&gt; ./mysqld_safe –skip-name-resolve=1<br>&ensp;&ensp;在配置文件my.cnf中设置<br>&ensp;&ensp;&ensp;&ensp;skip_name_resolve=1   </p><h2 id="服务器端设置"><a href="#服务器端设置" class="headerlink" title="服务器端设置"></a>服务器端设置</h2><p><code>服务器系统变量：分全局和会话两种</code><br>获取系统变量：<br>&ensp;&ensp;mysql&gt; show global variables;  显示所有的全局变量<br>&ensp;&ensp;mysql&gt; show [session] variables;  显示所有的会话变量<br>&ensp;&ensp;mysql&gt; select @@varriables;  显示系统变量</p><p>修改服务器变量的值：<br>&ensp;&ensp;mysql&gt; help SET<br>修改全局变量：仅对修改后新创建的会话有效；对已经建立的会话无效<br>&ensp;&ensp;mysql&gt; SET GLOBAL system_var_name=value;<br>&ensp;&ensp;mysql&gt; SET @@global.system_var_name=value;<br>修改会话变量：<br>&ensp;&ensp;mysql&gt; SET [SESSION] system_var_name=value;<br>&ensp;&ensp;mysql&gt; SET @@[session.]system_var_name=value;<br>状态变量（只读）：用于保存mysqld运行中的统计数据的变量，不可更改<br>&ensp;&ensp;mysql&gt; SHOW GLOBAL STATUS;<br>&ensp;&ensp;mysql&gt; SHOW [SESSION] STATUS;   </p><h2 id="服务器变量SQL-MODE"><a href="#服务器变量SQL-MODE" class="headerlink" title="服务器变量SQL_MODE"></a><code>服务器变量SQL_MODE</code></h2><p>SQL_MODE：对其设置可以完成一些约束检查的工作,可分别进行全局的设置或当前会 话的设置，参看：<a href="https://mariadb.com/kb/en/library/sql-mode/" target="_blank" rel="noopener">https://mariadb.com/kb/en/library/sql-mode/</a><br>常见MODE:<br>&ensp;&ensp;NO_AUTO_CREATE_USER<br>&ensp;&ensp;&ensp;&ensp;禁止GRANT创建密码为空的用户<br>&ensp;&ensp;NO_ZERO_DATE<br>&ensp;&ensp;&ensp;&ensp;在严格模式，不允许使用‘0000-00-00’的时间<br>&ensp;&ensp;ONLY_FULL_GROUP_BY<br>&ensp;&ensp;&ensp;&ensp;对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么 将认为这个SQL是不合法的<br>&ensp;&ensp;NO_BACKSLASH_ESCAPES<br>&ensp;&ensp;&ensp;&ensp;反斜杠“\”作为普通字符而非转义字符<br>&ensp;&ensp;PIPES_AS_CONCAT<br>&ensp;&ensp;&ensp;&ensp;将”||”视为连接操作符而非“或运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">主要影响对数据库的操作</span><br><span class="line"></span><br><span class="line">查看sql_mode值</span><br><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'sql_mode'</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| sql_mode      |       |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">创建一个表，限制输入的name记录的字段的字符长度为3个字符</span><br><span class="line">MariaDB [hellodb]&gt; create table <span class="built_in">test</span> (id int,name char(3));</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; show create table <span class="built_in">test</span>\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: <span class="built_in">test</span></span><br><span class="line">Create Table: CREATE TABLE `<span class="built_in">test</span>` (</span><br><span class="line">  `id` int(11) DEFAULT NULL,</span><br><span class="line">  `name` char(3) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">添加长字段测试，添加字段未被限制不让添加仅仅是报警</span><br><span class="line">MariaDB [hellodb]&gt; insert <span class="built_in">test</span> value (2,<span class="string">'abcde'</span>);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">查看报警信息</span><br><span class="line">MariaDB [hellodb]&gt; show warnings;</span><br><span class="line">+---------+------+-------------------------------------------+</span><br><span class="line">| Level   | Code | Message                                   |</span><br><span class="line">+---------+------+-------------------------------------------+</span><br><span class="line">| Warning | 1265 | Data truncated <span class="keyword">for</span> column <span class="string">'name'</span> at row 1 |</span><br><span class="line">+---------+------+-------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">查看表中的所有的字段，虽然添加超过限制的字段，但是录入了在限制内的字段，显示的字段为3个所以留下了三个字段</span><br><span class="line">MariaDB [hellodb]&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | name |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | abc  |</span><br><span class="line">|    2 | abc  |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">修改sql_mode变量</span><br><span class="line">  5.5版本的数据库默认sql_mod的值为空</span><br><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'sql_mode'</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| sql_mode      |       |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">修改sql_mode值限制在添加字段的时候的值不能超长，未修改之前只是报警，截取可以限制的长度内的字段则被记录</span><br><span class="line">MariaDB [hellodb]&gt; <span class="built_in">set</span> sql_mode=<span class="string">'traditional'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'sql_mode'</span>;</span><br><span class="line">+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Variable_name | Value                                                                                                                                                |</span><br><span class="line">+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| sql_mode      | STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |</span><br><span class="line">+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">再次添加超长字段测试：直接不是报警了，直接报错</span><br><span class="line">MariaDB [hellodb]&gt; insert <span class="built_in">test</span> value (3,<span class="string">'abcdeddd'</span>);</span><br><span class="line">ERROR 1406 (22001): Data too long <span class="keyword">for</span> column <span class="string">'name'</span> at row 1</span><br><span class="line"></span><br><span class="line">查看添加的记录是否添加进入：未被添加进去</span><br><span class="line">MariaDB [hellodb]&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | name |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | abc  |</span><br><span class="line">|    2 | abc  |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>在命令外显示系统自带的变量：数据库的状态信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mysql -e 'show status' | grep select </span></span><br><span class="line">Com_insert_select0</span><br><span class="line">Com_replace_select0</span><br><span class="line">Com_select1                  查询的次数</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use hellodb;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [hellodb]&gt; show status like <span class="string">'com_select'</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Com_select    | 2     |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">再次查询查看是否会增长</span><br><span class="line">MariaDB [hellodb]&gt; select * from <span class="built_in">test</span>;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | name |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | abc  |</span><br><span class="line">|    2 | abc  |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; show status like <span class="string">'com_select'</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Com_select    | 3     |   记录执行查询命令的次数</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">状态变量不可使用<span class="built_in">set</span>修改</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mysql之存储引擎和服务器配置&quot;&gt;&lt;a href=&quot;#mysql之存储引擎和服务器配置&quot; class=&quot;headerlink&quot; title=&quot;mysql之存储引擎和服务器配置&quot;&gt;&lt;/a&gt;mysql之存储引擎和服务器配置&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/20/mysql之存储引擎和服务器配置/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://daizhe.net.cn/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://daizhe.net.cn/tags/mysql/"/>
    
  </entry>
  
</feed>
