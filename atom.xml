<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dai zhe&#39;s notes</title>
  
  <subtitle>Just Du It</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://daizhe.net.cn/"/>
  <updated>2019-02-17T12:51:21.513Z</updated>
  <id>https://daizhe.net.cn/</id>
  
  <author>
    <name>哆啦A梦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ELK亮哥版</title>
    <link href="https://daizhe.net.cn/2019/02/17/ELK%E4%BA%AE%E5%93%A5%E7%89%88/"/>
    <id>https://daizhe.net.cn/2019/02/17/ELK亮哥版/</id>
    <published>2019-02-17T12:44:14.137Z</published>
    <updated>2019-02-17T12:51:21.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES集群组件如图"><a href="#ES集群组件如图" class="headerlink" title="ES集群组件如图"></a>ES集群组件如图</h2><p><img src="/2019/02/17/ELK亮哥版/1.png" alt=""></p><h2 id="ES服务器示意图"><a href="#ES服务器示意图" class="headerlink" title="ES服务器示意图"></a>ES服务器示意图</h2><p><img src="/2019/02/17/ELK亮哥版/2.png" alt=""></p><h2 id="源码编译安装ES"><a href="#源码编译安装ES" class="headerlink" title="源码编译安装ES"></a>源码编译安装ES</h2><p>官方Elasticsearchhttps TAR 下载站点:<a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES集群组件如图&quot;&gt;&lt;a href=&quot;#ES集群组件如图&quot; class=&quot;headerlink&quot; title=&quot;ES集群组件如图&quot;&gt;&lt;/a&gt;ES集群组件如图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/17/ELK亮哥版/1.png&quot; alt=&quot;&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="ELK亮哥版" scheme="https://daizhe.net.cn/categories/ELK%E4%BA%AE%E5%93%A5%E7%89%88/"/>
    
    
      <category term="ELK亮哥版" scheme="https://daizhe.net.cn/tags/ELK%E4%BA%AE%E5%93%A5%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>ELK介绍及集群安装</title>
    <link href="https://daizhe.net.cn/2019/02/16/ELK%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>https://daizhe.net.cn/2019/02/16/ELK介绍及集群安装/</id>
    <published>2019-02-16T11:13:38.360Z</published>
    <updated>2019-02-18T13:33:12.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK介绍及集群安装"><a href="#ELK介绍及集群安装" class="headerlink" title="ELK介绍及集群安装"></a>ELK介绍及集群安装</h1><p><img src="/2019/02/16/ELK介绍及集群安装/标题.gif" alt=""><br><a id="more"></a></p><h2 id="什么是ELK？"><a href="#什么是ELK？" class="headerlink" title="什么是ELK？"></a>什么是ELK？</h2><ul><li>通俗来讲，ELK是由Elasticsearch、Logstash、Kibana 、filebeat三个开源软件的组成的一个组合体，这三个软件当中，每个软件用于完成不同的功能，ELK 又称为ELK stack，官方域名为stactic.co，ELK stack的主要优点有如下几个：<ul><li><code>1.处理方式灵活： elasticsearch是实时全文索引，具有强大的搜索功能</code></li><li><code>2.配置相对简单：elasticsearch全部使用JSON 接口，logstash使用模块配置，kibana的配置文件部分更简单。</code></li><li><code>3.检索性能高效：基于优秀的设计，虽然每次查询都是实时，但是也可以达到百亿级数据的查询秒级响应。</code></li><li><code>4.集群线性扩展：elasticsearch和logstash都可以灵活线性扩展</code></li><li><code>5.前端操作绚丽：kibana的前端设计比较绚丽，而且操作简单（前端前端展示界面）</code></li></ul></li></ul><h2 id="什么是Elasticsearch："><a href="#什么是Elasticsearch：" class="headerlink" title="什么是Elasticsearch："></a>什么是Elasticsearch：</h2><ul><li>是一个高度可扩展的开源全文搜索和分析引擎，它可实现数据的实时全文搜索搜索、支持分布式可实现高可用、提供API接口，可以处理大规模日志数据，比如Nginx、Tomcat、系统日志等功能。</li></ul><p><img src="/2019/02/16/ELK介绍及集群安装/1.png" alt=""></p><h2 id="什么是Logstash"><a href="#什么是Logstash" class="headerlink" title="什么是Logstash"></a>什么是Logstash</h2><ul><li>可以通过插件实现日志收集和转发，支持日志过滤，支持普通log、自定义json格式的日志解析。</li></ul><p><img src="/2019/02/16/ELK介绍及集群安装/2.png" alt=""></p><h2 id="什么是kibana："><a href="#什么是kibana：" class="headerlink" title="什么是kibana："></a>什么是kibana：</h2><ul><li>主要是通过接口调用elasticsearch的数据，并进行前端数据可视化的展现。</li></ul><p><img src="/2019/02/16/ELK介绍及集群安装/3.png" alt=""></p><h2 id="为什么使用-ELK？"><a href="#为什么使用-ELK？" class="headerlink" title="为什么使用 ELK？"></a>为什么使用 ELK？</h2><ul><li><p>ELK组件在海量日志系统的运维中，可用于解决以下主要问题：</p><ul><li>分布式日志数据统一收集，实现集中式查询和管理</li><li>故障排查</li><li>安全信息和事件管理</li><li>报表功能</li></ul></li><li><p>ELK组件在大数据运维系统中，主要可解决的问题如下：</p><ul><li>日志查询，问题排查，故障恢复，故障自愈</li><li>应用日志分析，错误报警</li><li>性能分析，用户行为分析</li></ul></li></ul><hr><h2 id="ELK使用场景"><a href="#ELK使用场景" class="headerlink" title="ELK使用场景"></a>ELK使用场景</h2><p><img src="/2019/02/16/ELK介绍及集群安装/4.png" alt=""></p><hr><h2 id="一：elasticsearch（ES）部署："><a href="#一：elasticsearch（ES）部署：" class="headerlink" title="一：elasticsearch（ES）部署："></a>一：elasticsearch（ES）部署：</h2><h3 id="1-1：环境初始化："><a href="#1-1：环境初始化：" class="headerlink" title="1.1：环境初始化："></a>1.1：环境初始化：</h3><ul><li>最小化安装 Centos 7.2 x86_64操作系统的虚拟机，vcpu 2，内存4G或更多，操作系统盘50G，主机名设置规则为linux-hostX.exmaple.com，其中host1和host2为elasticsearch服务器，为保证效果特额外添加一块单独的数据磁盘大小为50G并格式化挂载。</li></ul><h3 id="1-1-1：host1和host2添加磁盘格式化挂载："><a href="#1-1-1：host1和host2添加磁盘格式化挂载：" class="headerlink" title="1.1.1：host1和host2添加磁盘格式化挂载："></a>1.1.1：host1和host2添加磁盘格式化挂载：</h3><p><img src="/2019/02/16/ELK介绍及集群安装/5.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">查看原有磁盘数量</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># lsblk</span></span><br><span class="line">    NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">    sda      8:0    0  200G  0 disk </span><br><span class="line"></span><br><span class="line">新添加的磁盘在不重启主机的情况下扫描发现新的磁盘</span><br><span class="line">    ~]<span class="comment"># echo "- - -" &gt; /sys/class/scsi_host/host0(TAB)/scan</span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># lsblk</span></span><br><span class="line">    NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">    sda      8:0    0  200G  0 disk </span><br><span class="line">    sdb      8:16   0   50G  0 disk</span><br><span class="line"></span><br><span class="line">格式化新的磁盘（用于存放收集的日志）</span><br><span class="line">    </span><br><span class="line">    ~]<span class="comment"># mkfs.xfs /dev/sdb </span></span><br><span class="line"></span><br><span class="line">挂载新的磁盘，/data/esdata目录用来存放elasticsearch存储数据</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># mkdir -p /data/&#123;esdata,eslogs&#125;</span></span><br><span class="line">    ~]<span class="comment"># mount /dev/sdb /data/</span></span><br><span class="line">    ~]<span class="comment"># lsblk</span></span><br><span class="line">    sdb      8:16   0   50G  0 disk /data/</span><br><span class="line"></span><br><span class="line">设置开机自动挂载</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># vim /etc/fstab </span></span><br><span class="line">    <span class="comment">#最好使用uuid进行挂载。使用blkid /dev/sdb查看磁盘的uuid</span></span><br><span class="line">    /dev/sdb /data xfs defaults 0 0</span><br></pre></td></tr></table></figure><h3 id="1-1-2：host1和host2防火墙和selinux："><a href="#1-1-2：host1和host2防火墙和selinux：" class="headerlink" title="1.1.2：host1和host2防火墙和selinux："></a>1.1.2：host1和host2防火墙和selinux：</h3><ul><li>关闭防所有服务器的火墙和selinux，包括web服务器、redis和logstash服务器的防火墙和selinux全部关闭，此步骤是为了避免出现因为防火墙策略或selinux安全权限引起的各种未知问题，以下只显示了host1和host2的命令，但是其他服务器都要执行。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl  disable  firewalld</span></span><br><span class="line">~]<span class="comment"># systemctl  disable NetworkManager</span></span><br><span class="line">~]<span class="comment"># sed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config</span></span><br><span class="line">~]<span class="comment"># echo "* soft nofile 65536" &gt;&gt; /etc/security/limits.conf</span></span><br><span class="line">~]<span class="comment"># echo "* hard nofile 65536" &gt;&gt; /etc/security/limits.conf</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1-3：host1和host2设置epel源、安装基本操作命令并同步时间以及各服务器配置本地域名解析："><a href="#1-1-3：host1和host2设置epel源、安装基本操作命令并同步时间以及各服务器配置本地域名解析：" class="headerlink" title="1.1.3：host1和host2设置epel源、安装基本操作命令并同步时间以及各服务器配置本地域名解析："></a>1.1.3：host1和host2设置epel源、安装基本操作命令并同步时间以及各服务器配置本地域名解析：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">各服务器配置本地域名解析</span><br><span class="line"></span><br><span class="line">主机名立即生效</span><br><span class="line">~]<span class="comment">#vim /etc/hostname</span></span><br><span class="line">~]<span class="comment">#hostname es1.com #退出重新登陆则生效</span></span><br><span class="line"></span><br><span class="line">host1和host2 ~]<span class="comment"># vim /etc/hosts</span></span><br><span class="line">192.168.15.11 linux-host1.exmaple.com</span><br><span class="line">192.168.15.12 linux-host2.exmaple.com</span><br><span class="line">192.168.15.13 linux-host3.exmaple.com</span><br><span class="line">192.168.15.14 linux-host4.exmaple.com</span><br><span class="line">192.168.15.15 linux-host5.exmaple.com</span><br><span class="line">192.168.15.16 linux-host6.exmaple.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">获取epel源</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span></span><br><span class="line"></span><br><span class="line">安装依赖包</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># yum install -y net-tools vim lrzsz tree screen lsof tcpdump wget ntpdate</span></span><br><span class="line"></span><br><span class="line">设置时间同步并设置计划任务定时同步时间</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># cp /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime </span></span><br><span class="line">    ~]<span class="comment"># echo "*/5 * * * *  ntpdate time1.aliyun.com &amp;&gt; /dev/null &amp;&amp; hwclock -w" &gt;&gt; /var/spool/cron/root</span></span><br><span class="line">    ~]<span class="comment"># systemctl  restart crond</span></span><br><span class="line">    ~]<span class="comment"># reboot  #重启检查各项配置是否生效，没有问题的话给虚拟机做快照以方便后期还原</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-2：在host1和host2分别安装elasticsearch："><a href="#1-2：在host1和host2分别安装elasticsearch：" class="headerlink" title="1.2：在host1和host2分别安装elasticsearch："></a>1.2：在host1和host2分别安装elasticsearch：</h3><h3 id="1-2-1：在两台服务器准备java环境："><a href="#1-2-1：在两台服务器准备java环境：" class="headerlink" title="1.2.1：在两台服务器准备java环境："></a>1.2.1：在两台服务器准备java环境：</h3><ul><li>因为elasticsearch服务运行需要java环境，因此两台elasticsearch服务器需要安装java环境，可以使用以下方式安装：</li></ul><p>方式一：直接使用yum安装openjdk<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># yum install  java-1.8.0*</span></span><br></pre></td></tr></table></figure></p><p>方式二：本地安装在oracle官网下载rpm安装包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># yum  localinstall jdk-8u92-linux-x64.rpm</span></span><br></pre></td></tr></table></figure></p><p>方式三：下载二进制包自定义profile环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">下载地址：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># tar xvf jdk-8u121-linux-x64.tar.gz  -C /usr/local/</span></span><br><span class="line">    ~]<span class="comment"># ln -sv /usr/local/jdk1.8.0_121 /usr/local/jdk</span></span><br><span class="line">    ~]<span class="comment"># vim /etc/profile</span></span><br><span class="line">    <span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">"%F %T `whoami` "</span></span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk</span><br><span class="line">    <span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">    <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">    ~]<span class="comment"># source  /etc/profile</span></span><br><span class="line">    ~]<span class="comment"># java -version</span></span><br><span class="line">    java version <span class="string">"1.8.0_121"</span> <span class="comment">#确认可以出现当前的java版本号</span></span><br><span class="line">    Java(TM) SE Runtime Environment (build 1.8.0_121-b13)</span><br><span class="line">    Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</span><br></pre></td></tr></table></figure></p><p>这里采用rpm包方式安装JDK<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># ls</span></span><br><span class="line">jdk-8u192-linux-x64.rpm </span><br><span class="line">~]<span class="comment"># rpm -ivh jdk-8u192-linux-x64.rpm</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="1-3：官网下载elasticsearch-RPM包并安装："><a href="#1-3：官网下载elasticsearch-RPM包并安装：" class="headerlink" title="1.3：官网下载elasticsearch RPM包并安装："></a>1.3：官网下载elasticsearch RPM包并安装：</h3><p>下载地址：<a href="https://www.elastic.co/downloads/elasticsearch，当前最新版本5.3.0" target="_blank" rel="noopener">https://www.elastic.co/downloads/elasticsearch，当前最新版本5.3.0</a></p><h3 id="1-3-1：host1和host2两台服务器分别安装elasticsearch"><a href="#1-3-1：host1和host2两台服务器分别安装elasticsearch" class="headerlink" title="1.3.1：host1和host2两台服务器分别安装elasticsearch:"></a>1.3.1：host1和host2两台服务器分别安装elasticsearch:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># rpm -ivh elasticsearch-5.6.13.rpm </span></span><br><span class="line">~]<span class="comment"># rpm -ql elasticsearch </span></span><br><span class="line"><span class="comment">#主配置文件</span></span><br><span class="line">/etc/elasticsearch/elasticsearch.yml    </span><br><span class="line"><span class="comment">#调优的配置文件</span></span><br><span class="line">/etc/elasticsearch/jvm.options</span><br><span class="line"><span class="comment">#启动程序文件（默认定义的启动程序的身份为elasticsearch用户）</span></span><br><span class="line">/usr/lib/systemd/system/elasticsearch.service   </span><br><span class="line"></span><br><span class="line"><span class="comment">#主要使用.jar文件实现模块化的扩展</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2：目录权限更改："><a href="#1-3-2：目录权限更改：" class="headerlink" title="1.3.2：目录权限更改："></a>1.3.2：目录权限更改：</h3><p>host1和host2各服务器创建数据和日志目录并修改目录权限为elasticsearch：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># mkdir /data/&#123;esdata,eslogs&#125;</span></span><br><span class="line">~]<span class="comment"># chown -R elasticsearch.elasticsearch /data</span></span><br></pre></td></tr></table></figure></p><h3 id="1-3-3：编辑host1和host2各elasticsearch服务器的服务配置文件解析："><a href="#1-3-3：编辑host1和host2各elasticsearch服务器的服务配置文件解析：" class="headerlink" title="1.3.3：编辑host1和host2各elasticsearch服务器的服务配置文件解析："></a>1.3.3：编辑host1和host2各elasticsearch服务器的服务配置文件解析：</h3><p>配置的官方帮助文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/index.html</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#未特殊标注的host1和host2主机的配置相同</span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># vim /etc/elasticsearch/elasticsearch.yml </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#ELK的集群名称，名称相同即属于是同一个集群（集群名称是各个ES服务端一致的）</span></span><br><span class="line">    17 cluster.name: ELK-Cluster    <span class="comment">#将host1节点和host2节点集群名称保持一致</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#本机在集群内的节点名称（各ES节点的node.name不可重复）</span></span><br><span class="line">    23 node.name: elk-node1    <span class="comment">#host1名称elk-node1 #host2名称elk-node2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#数据保存目录</span></span><br><span class="line">    33 path.data: /data/esdata </span><br><span class="line"></span><br><span class="line">    <span class="comment">#日志保存目录 </span></span><br><span class="line">    37 path.logs: /data/eslogs</span><br><span class="line"></span><br><span class="line">    <span class="comment">#服务启动的时候锁定足够的内存，防止数据写入swap   </span></span><br><span class="line">    <span class="comment">#43 bootstrap.memory_lock: true </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#监听IP，默认监听本机的所有地址</span></span><br><span class="line">    55 network.host: 0.0.0.0 </span><br><span class="line"></span><br><span class="line">    <span class="comment">#客户端端口，提供Logstash向elasticsearch写上缴日志数据时使用(还有一个9300,elasticsearch集群中同步数据以及集群间状态选举通讯使用)</span></span><br><span class="line">    59 http.port: 9200 </span><br><span class="line"></span><br><span class="line">    <span class="comment">#集群几点状态发现使用，默认在整个网段中做广播，改为组播的方式，指定哪些机器发送数据包（设置尽在host1主机和host2主机间发送组播）</span></span><br><span class="line">    68 discovery.zen.ping.unicast.hosts: [<span class="string">"host1地址"</span>, <span class="string">"host2地址"</span>]</span><br><span class="line"></span><br><span class="line">    生产参考配置项</span><br><span class="line"></span><br><span class="line">    <span class="comment">#discovery.zen.minimum_master_nodes: 3    </span></span><br><span class="line">    <span class="comment">#设置这个参数来保证集群中的节点可以知道其它N个有</span></span><br><span class="line">    <span class="comment">#master资格的节点，默认为1，当集群多余三个节点时，可以设置大一点的值(2-4)</span></span><br><span class="line"></span><br><span class="line">    生产配置项：了解即可</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gateway.recover_after_nodes: 3    </span></span><br><span class="line">    <span class="comment">#在完全重新启动集群后阻塞初始恢复，直到启动N个节点:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#node.max_local_storage_nodes: 1</span></span><br><span class="line">    <span class="comment">#默认情况下，多个节点可以在同一个安装路径启动，如果你想让你的Elasticsearch只启动一个节点，在这合理设置。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置是否可以通过正则或者_all删除或者关闭索引。</span></span><br><span class="line">    <span class="comment">#action.destructive_requires_name: true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host1配置主文件</span><br><span class="line">    ~]<span class="comment"># grep "^[a-Z]" /etc/elasticsearch/elasticsearch.yml</span></span><br><span class="line">    cluster.name: ELK-Cluster</span><br><span class="line">    node.name: elk-node1</span><br><span class="line">    path.data: /data/esdata</span><br><span class="line">    path.logs: /data/eslogs</span><br><span class="line">    network.host: 0.0.0.0</span><br><span class="line">    http.port: 9200</span><br><span class="line">    discovery.zen.ping.unicast.hosts: [<span class="string">"host1地址"</span>, <span class="string">"host2地址"</span>]</span><br><span class="line"></span><br><span class="line">host2配置文件</span><br><span class="line">    ~]<span class="comment"># grep "^[a-Z]" /etc/elasticsearch/elasticsearch.yml</span></span><br><span class="line">    cluster.name: ELK-Cluster</span><br><span class="line">    node.name: elk-node2</span><br><span class="line">    path.data: /data/esdata</span><br><span class="line">    path.logs: /data/eslogs</span><br><span class="line">    bootstrap.memory_lock: <span class="literal">true</span></span><br><span class="line">    network.host: 0.0.0.0</span><br><span class="line">    http.port: 9200</span><br><span class="line">    discovery.zen.ping.unicast.hosts: [<span class="string">"host1地址"</span>, <span class="string">"host2地址"</span>]</span><br></pre></td></tr></table></figure></p><h3 id="1-3-4：host1和host2启动elasticsearch服务并验证，端口监听是否成功："><a href="#1-3-4：host1和host2启动elasticsearch服务并验证，端口监听是否成功：" class="headerlink" title="1.3.4：host1和host2启动elasticsearch服务并验证，端口监听是否成功："></a>1.3.4：host1和host2启动elasticsearch服务并验证，端口监听是否成功：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl  restart elasticsearch</span></span><br><span class="line">~]<span class="comment"># systemctl  enable elasticsearch</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># tail -f /data/eslogs/ELK-Cluster.log </span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># ss -tnl</span></span><br><span class="line">:::9200       <span class="comment">#用户访问的接口                                               </span></span><br><span class="line">:::9300       <span class="comment">#集群内部通讯的端口</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># ps -ef | grep elasticsearch</span></span><br><span class="line"><span class="comment">#默认的可使用的最大内存和最小内存未2G</span></span><br><span class="line">elastic+  15756      1 10 14:04 ?        00:00:31 /bin/java -Xms2g -Xmx2g</span><br></pre></td></tr></table></figure><h3 id="1-3-5：通过浏览器访问elasticsearch服务端口："><a href="#1-3-5：通过浏览器访问elasticsearch服务端口：" class="headerlink" title="1.3.5：通过浏览器访问elasticsearch服务端口："></a>1.3.5：通过浏览器访问elasticsearch服务端口：</h3><p>1.3.5.1访问host1主机</p><p><img src="/2019/02/16/ELK介绍及集群安装/6.png" alt=""></p><p>1.3.5.2访问host2主机</p><p><img src="/2019/02/16/ELK介绍及集群安装/7.png" alt=""></p><hr><h3 id="1-3-6：host1和host2修改启动脚本，修改内存限制，并同步配置文件："><a href="#1-3-6：host1和host2修改启动脚本，修改内存限制，并同步配置文件：" class="headerlink" title="1.3.6：host1和host2修改启动脚本，修改内存限制，并同步配置文件："></a>1.3.6：host1和host2修改启动脚本，修改内存限制，并同步配置文件：</h3><h3 id="这里为测试场景不需要修改"><a href="#这里为测试场景不需要修改" class="headerlink" title="这里为测试场景不需要修改"></a>这里为测试场景不需要修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">编辑elasticsearch启动脚本声明启动时都内存不做限制</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># vim /usr/lib/systemd/system/elasticsearch.service #修改内存限制</span></span><br><span class="line">    40 LimitMEMLOCK=infinity  <span class="comment">#最大化使用内存</span></span><br><span class="line"></span><br><span class="line">编辑修改elasticsearch节点中的内存限制配置文件</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># vim /etc/elasticsearch/jvm.options </span></span><br><span class="line">    22 -Xms2g</span><br><span class="line">    23 -Xmx2g <span class="comment">#最小和最大内存限制，为什么最小和最大设置一样大？(不可设置为浮点数，只可以设置为整数)</span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">    ~]<span class="comment"># systemctl  start elasticsearch</span></span><br></pre></td></tr></table></figure><p>官方配置文档最大建议30G以内：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html</a></p><h4 id="后面安装elasticsearch插件之head-由于宿主机内存不足，系统内核会将占用内存最大的进程强制kill掉，以保证系统的正常运行以及其他服务的正常运行。"><a href="#后面安装elasticsearch插件之head-由于宿主机内存不足，系统内核会将占用内存最大的进程强制kill掉，以保证系统的正常运行以及其他服务的正常运行。" class="headerlink" title="后面安装elasticsearch插件之head,由于宿主机内存不足，系统内核会将占用内存最大的进程强制kill掉，以保证系统的正常运行以及其他服务的正常运行。"></a>后面安装elasticsearch插件之head,由于宿主机内存不足，系统内核会将占用内存最大的进程强制kill掉，以保证系统的正常运行以及其他服务的正常运行。</h4><p><img src="/2019/02/16/ELK介绍及集群安装/8.png" alt=""><br><img src="/2019/02/16/ELK介绍及集群安装/9.png" alt=""></p><hr><h3 id="1-4：安装elasticsearch插件之head："><a href="#1-4：安装elasticsearch插件之head：" class="headerlink" title="1.4：安装elasticsearch插件之head："></a>1.4：安装elasticsearch插件之head：</h3><ul><li>插件是为了完成不同的功能，官方提供了一些插件但大部分是收费的，另外也有一些开发爱好者提供的插件，可以实现对elasticsearch集群的状态监控与管理配置等功能。<br>1.4.1：安装5.x版本的head插件： </li><li>在elasticsearch 5.x版本以后不再支持直接安装head插件，而是需要通过启动一个服务方式，</li><li>github托管地址：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a></li></ul><h3 id="1-4-1-1：host1和host2服务放置安装elasticsearch插件之head"><a href="#1-4-1-1：host1和host2服务放置安装elasticsearch插件之head" class="headerlink" title="1.4.1.1：host1和host2服务放置安装elasticsearch插件之head"></a>1.4.1.1：host1和host2服务放置安装elasticsearch插件之head</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># yum install -y npm</span></span><br><span class="line"><span class="comment"># NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。</span></span><br><span class="line">~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">src]<span class="comment">#git clone git://github.com/mobz/elasticsearch-head.git </span></span><br><span class="line">src]<span class="comment"># cd elasticsearch-head/</span></span><br><span class="line">elasticsearch-head]<span class="comment"># yum install npm -y</span></span><br><span class="line">elasticsearch-head]<span class="comment"># npm install grunt -save</span></span><br><span class="line">elasticsearch-head]<span class="comment"># ll node_modules/grunt  #确认生成文件</span></span><br><span class="line">elasticsearch-head]<span class="comment"># npm install #执行安装</span></span><br><span class="line"> </span><br><span class="line">elasticsearch-head]<span class="comment"># npm run start  &amp;  #后台启动服务</span></span><br></pre></td></tr></table></figure><h3 id="1-4-1-2：host1和host2修改elasticsearch服务配置文件："><a href="#1-4-1-2：host1和host2修改elasticsearch服务配置文件：" class="headerlink" title="1.4.1.2：host1和host2修改elasticsearch服务配置文件："></a>1.4.1.2：host1和host2修改elasticsearch服务配置文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开启跨域访问支持，然后重启elasticsearch服务：</span><br><span class="line">    ~]<span class="comment"># vim /etc/elasticsearch/elasticsearch.yml </span></span><br><span class="line">    http.cors.enabled: <span class="literal">true</span> </span><br><span class="line">    http.cors.allow-origin: <span class="string">"*"</span></span><br><span class="line">    ~]<span class="comment"># /etc/init.d/elasticsearch  restart</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-4-1-3：host1和host2docker安装elasticsearch插件之head"><a href="#1-4-1-3：host1和host2docker安装elasticsearch插件之head" class="headerlink" title="1.4.1.3：host1和host2docker安装elasticsearch插件之head"></a>1.4.1.3：host1和host2docker安装elasticsearch插件之head</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">安装docker</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">    yum.repos.d]<span class="comment"># wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"></span><br><span class="line">安装时如果报这种错误并解决</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># yum install docker-ce -y</span></span><br><span class="line">    You could try using --skip-broken to work around the problem</span><br><span class="line">    You could try running: rpm -Va --nofiles --nodigest</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># yum install http://vault.centos.org/centos/7.3.1611/extras/x86_64/Packages/container-selinux-2.9-4.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># yum install docker-ce -y</span></span><br><span class="line"></span><br><span class="line">启动docker并加入开机启动项</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl  start docker &amp;&amp; systemctl  enable docker</span></span><br><span class="line"></span><br><span class="line">使用dicker 下载head镜像</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># docker pull mobz/elasticsearch-head:5</span></span><br><span class="line"></span><br><span class="line">以容器的方式运行elasticsearch插件head，并映射端口到宿主机</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># docker run -d  -p 9100:9100 mobz/elasticsearch-head:5</span></span><br><span class="line"></span><br><span class="line">查看容器的状态</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># docker ps -a</span></span><br><span class="line">    CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">    ca48d7d13e87        mobz/elasticsearch-head:5   <span class="string">"/bin/sh -c 'grunt s…"</span>   34 seconds ago      Up 31 seconds       0.0.0.0:9100-&gt;9100/tcp   compassionate_williamson</span><br></pre></td></tr></table></figure><h3 id="1-4-1-4：host1和host2修改elasticsearch服务配置文件："><a href="#1-4-1-4：host1和host2修改elasticsearch服务配置文件：" class="headerlink" title="1.4.1.4：host1和host2修改elasticsearch服务配置文件："></a>1.4.1.4：host1和host2修改elasticsearch服务配置文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">开启跨域访问支持，然后重启elasticsearch服务：</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># vim /etc/elasticsearch/elasticsearch.yml </span></span><br><span class="line">    <span class="comment">#可以添加至配置文件的最后一行中</span></span><br><span class="line">    http.cors.enabled: <span class="literal">true</span> </span><br><span class="line">    http.cors.allow-origin: <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line">重启启动elasticsearch</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart elasticsearch.service</span></span><br></pre></td></tr></table></figure><h3 id="1-4-1-5：通过浏览器访问host1和host2主机elasticsearch组件head-映射宿主机的端口为9100"><a href="#1-4-1-5：通过浏览器访问host1和host2主机elasticsearch组件head-映射宿主机的端口为9100" class="headerlink" title="1.4.1.5：通过浏览器访问host1和host2主机elasticsearch组件head,映射宿主机的端口为9100"></a>1.4.1.5：通过浏览器访问host1和host2主机elasticsearch组件head,映射宿主机的端口为9100</h3><p><img src="/2019/02/16/ELK介绍及集群安装/10.png" alt=""></p><h3 id="1-4-1-6：Master与Slave的区别："><a href="#1-4-1-6：Master与Slave的区别：" class="headerlink" title="1.4.1.6：Master与Slave的区别："></a>1.4.1.6：Master与Slave的区别：</h3><ul><li>Master的职责：<ul><li>统计各node节点状态信息、集群状态信息统计、索引的创建和删除、索引分配的管理、关闭node节点等</li></ul></li><li>Slave的职责：<ul><li>从master同步数据、等待机会成为Master</li></ul></li></ul><hr><h3 id="1-4-1-7：导入本地的docker镜像："><a href="#1-4-1-7：导入本地的docker镜像：" class="headerlink" title="1.4.1.7：导入本地的docker镜像："></a>1.4.1.7：导入本地的docker镜像：</h3><h3 id="本章外"><a href="#本章外" class="headerlink" title="本章外"></a>本章外</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># docker save docker.io/mobz/elasticsearch-head &gt; /opt/elasticsearch-head-docker.tar.gz #导出镜像</span></span><br><span class="line">src]<span class="comment"># docker load &lt; /opt/elasticsearch-head-docker.tar.gz #导入</span></span><br><span class="line">src]<span class="comment"># docker images#验证</span></span><br><span class="line">REPOSITORY                          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/mobz/elasticsearch-head   5                   b19a5c98e43b        4 months ago        823.9 MB</span><br><span class="line">src]<span class="comment"># docker run -d  -p 9100:9100 --name elastic docker.io/mobz/elasticsearch-head:5  #从本地docker images 启动容器</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-4-2：elasticsearch插件之kopf："><a href="#1-4-2：elasticsearch插件之kopf：" class="headerlink" title="1.4.2：elasticsearch插件之kopf："></a>1.4.2：elasticsearch插件之kopf：</h3><h3 id="1-4-2-1：kopf-已经无人维护-："><a href="#1-4-2-1：kopf-已经无人维护-：" class="headerlink" title="1.4.2.1：kopf(已经无人维护)："></a>1.4.2.1：kopf(已经无人维护)：</h3><ul><li>Git地址:<a href="https://github.com/lmenezes/elasticsearch-kopf" target="_blank" rel="noopener">https://github.com/lmenezes/elasticsearch-kopf</a></li><li>但是目前还不支持5.x版本的elasticsearch，但是可以安装在elasticsearc 1.x或2.x的版本安装。</li></ul><hr><h3 id="1-5：监控elasticsearch集群状态："><a href="#1-5：监控elasticsearch集群状态：" class="headerlink" title="1.5：监控elasticsearch集群状态："></a>1.5：监控elasticsearch集群状态：</h3><h3 id="1-5-1：通过shell命令获取集群状态："><a href="#1-5-1：通过shell命令获取集群状态：" class="headerlink" title="1.5.1：通过shell命令获取集群状态："></a>1.5.1：通过shell命令获取集群状态：</h3><ul><li>获取到的是一个json格式的返回值，那就可以通过python对其中的信息进行分析，例如对status进行分析，如果等于green(绿色)就是运行在正常，等于yellow(黄色)表示副本分片丢失，red(红色)表示主分片丢失</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sXGET  http://192.168.15.211:9200/_cluster/health?pretty=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="/2019/02/16/ELK介绍及集群安装/12.png" alt=""></p><p>列出集群中所有节点：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># curl -X  GET "http://172.18.135.1:9200/_cat/nodes "</span></span><br><span class="line">172.18.135.1  9 70 1 0.00 0.05 0.16 mdi * es1.com</span><br><span class="line">172.18.135.2 15 52 0 0.04 0.31 0.59 mdi - es2.com   <span class="comment"># mdi m es2.com此处的m表示可以成为备用master节点</span></span><br></pre></td></tr></table></figure></p><p>查看集群索引状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment">#  curl -X  GET "http://172.18.135.1:9200/_cat/nodes?v"</span></span><br><span class="line">ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">172.18.135.1           10          81   0    0.03    0.07     0.13 mdi       *      es1.com</span><br><span class="line">172.18.135.2           15          52   1    0.33    0.22     0.40 mdi       -      es2.com</span><br></pre></td></tr></table></figure></p><p>查看现在集群中哪个是主节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># curl -X  GET "http://172.18.135.1:9200/_cat/master"</span></span><br><span class="line">u5qBvduFQ3GOa5CjROsWOQ 172.18.135.1 172.18.135.1 es1.com</span><br></pre></td></tr></table></figure></p><p>_cat API来查看集群状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">集群状态：</span><br><span class="line">    green  正常</span><br><span class="line">    red    不可用</span><br><span class="line">    yellow  修复状态</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># curl -X  GET http://172.18.135.1:9200/_cat/health</span></span><br><span class="line">1550496241 21:24:01 ES green 2 2 0 0 0 0 0 0 - 100.0%</span><br></pre></td></tr></table></figure></p><p>_cat API帮助：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># curl -X  GET http://172.18.135.1:9200/_cat/nodes?help</span></span><br><span class="line"><span class="built_in">help</span>下面你发现了好多可选，比如说我想看<span class="built_in">help</span>下的 uptime，我应该用h= uptime的语法来看 </span><br><span class="line">~]<span class="comment"># curl -X  GET http://172.18.135.1:9200/_cat/nodes?h=uptime</span></span><br><span class="line">27.2m</span><br><span class="line">23.8m</span><br></pre></td></tr></table></figure></p><h3 id="1-5-2-cluster-API-分类总结"><a href="#1-5-2-cluster-API-分类总结" class="headerlink" title="1.5.2:cluster API 分类总结"></a>1.5.2:cluster API 分类总结</h3><p>1）_cluster/health 来显示集群状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># curl -X  GET "172.18.135.1:9200/_cluster/health?pretty"</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"ES"</span>,</span><br><span class="line">  <span class="string">"status"</span> : <span class="string">"green"</span>,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"number_of_nodes"</span> : 2,</span><br><span class="line">  <span class="string">"number_of_data_nodes"</span> : 2,</span><br><span class="line">  <span class="string">"active_primary_shards"</span> : 0,</span><br><span class="line">  <span class="string">"active_shards"</span> : 0,</span><br><span class="line">  <span class="string">"relocating_shards"</span> : 0,</span><br><span class="line">  <span class="string">"initializing_shards"</span> : 0,</span><br><span class="line">  <span class="string">"unassigned_shards"</span> : 0,</span><br><span class="line">  <span class="string">"delayed_unassigned_shards"</span> : 0,</span><br><span class="line">  <span class="string">"number_of_pending_tasks"</span> : 0,</span><br><span class="line">  <span class="string">"number_of_in_flight_fetch"</span> : 0,</span><br><span class="line">  <span class="string">"task_max_waiting_in_queue_millis"</span> : 0,</span><br><span class="line">  <span class="string">"active_shards_percent_as_number"</span> : 100.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2)  _cluster/state API  查看状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment">#  curl -XGET "http://172.18.135.1:9200/_cluster/state/nodes?pretty"</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"ES"</span>,</span><br><span class="line">  <span class="string">"nodes"</span> : &#123;</span><br><span class="line">    <span class="string">"u5qBvduFQ3GOa5CjROsWOQ"</span> : &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"es1.com"</span>,</span><br><span class="line">      <span class="string">"ephemeral_id"</span> : <span class="string">"t7qVHOZSTuyjMa1d7Zhm7w"</span>,</span><br><span class="line">      <span class="string">"transport_address"</span> : <span class="string">"172.18.135.1:9300"</span>,</span><br><span class="line">      <span class="string">"attributes"</span> : &#123; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"2jAXgTrdQfmZrsaLnDQATA"</span> : &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"es2.com"</span>,</span><br><span class="line">      <span class="string">"ephemeral_id"</span> : <span class="string">"BjSFicySSQGsF_X9Aqk0ng"</span>,</span><br><span class="line">      <span class="string">"transport_address"</span> : <span class="string">"172.18.135.2:9300"</span>,</span><br><span class="line">      <span class="string">"attributes"</span> : &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3) _cluster/stats  API（统计）  统计数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">主要来查看索引、分片等</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># curl -XGET "http://172.18.135.1:9200/_cluster/stats?pretty" </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_nodes"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 2,</span><br><span class="line">    <span class="string">"successful"</span> : 2,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"ES"</span>,</span><br><span class="line">  <span class="string">"timestamp"</span> : 1550496718730,</span><br><span class="line">  <span class="string">"status"</span> : <span class="string">"green"</span>,</span><br><span class="line">  <span class="string">"indices"</span> : &#123;</span><br><span class="line">    <span class="string">"count"</span> : 0,</span><br><span class="line">    <span class="string">"shards"</span> : &#123; &#125;,</span><br><span class="line">    <span class="string">"docs"</span> : &#123;</span><br><span class="line">      <span class="string">"count"</span> : 0,</span><br><span class="line">      <span class="string">"deleted"</span> : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"store"</span> : &#123;</span><br><span class="line">      <span class="string">"size_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"throttle_time_in_millis"</span> : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"fielddata"</span> : &#123;</span><br><span class="line">      <span class="string">"memory_size_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"evictions"</span> : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"query_cache"</span> : &#123;</span><br><span class="line">      <span class="string">"memory_size_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"total_count"</span> : 0,</span><br><span class="line">      <span class="string">"hit_count"</span> : 0,</span><br><span class="line">      <span class="string">"miss_count"</span> : 0,</span><br><span class="line">      <span class="string">"cache_size"</span> : 0,</span><br><span class="line">      <span class="string">"cache_count"</span> : 0,</span><br><span class="line">      <span class="string">"evictions"</span> : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"completion"</span> : &#123;</span><br><span class="line">      <span class="string">"size_in_bytes"</span> : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"segments"</span> : &#123;</span><br><span class="line">      <span class="string">"count"</span> : 0,</span><br><span class="line">      <span class="string">"memory_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"terms_memory_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"stored_fields_memory_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"term_vectors_memory_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"norms_memory_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"points_memory_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"doc_values_memory_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"index_writer_memory_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"version_map_memory_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"fixed_bit_set_memory_in_bytes"</span> : 0,</span><br><span class="line">      <span class="string">"max_unsafe_auto_id_timestamp"</span> : -9223372036854775808,</span><br><span class="line">      <span class="string">"file_sizes"</span> : &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"nodes"</span> : &#123;</span><br><span class="line">    <span class="string">"count"</span> : &#123;</span><br><span class="line">      <span class="string">"total"</span> : 2,</span><br><span class="line">      <span class="string">"data"</span> : 2,</span><br><span class="line">      <span class="string">"coordinating_only"</span> : 0,</span><br><span class="line">      <span class="string">"master"</span> : 2,</span><br><span class="line">      <span class="string">"ingest"</span> : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"versions"</span> : [</span><br><span class="line">      <span class="string">"5.6.13"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"os"</span> : &#123;</span><br><span class="line">      <span class="string">"available_processors"</span> : 4,</span><br><span class="line">      <span class="string">"allocated_processors"</span> : 4,</span><br><span class="line">      <span class="string">"names"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"name"</span> : <span class="string">"Linux"</span>,</span><br><span class="line">          <span class="string">"count"</span> : 2</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"mem"</span> : &#123;</span><br><span class="line">        <span class="string">"total_in_bytes"</span> : 6144528384,</span><br><span class="line">        <span class="string">"free_in_bytes"</span> : 2384535552,</span><br><span class="line">        <span class="string">"used_in_bytes"</span> : 3759992832,</span><br><span class="line">        <span class="string">"free_percent"</span> : 39,</span><br><span class="line">        <span class="string">"used_percent"</span> : 61</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"process"</span> : &#123;</span><br><span class="line">      <span class="string">"cpu"</span> : &#123;</span><br><span class="line">        <span class="string">"percent"</span> : 1</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"open_file_descriptors"</span> : &#123;</span><br><span class="line">        <span class="string">"min"</span> : 160,</span><br><span class="line">        <span class="string">"max"</span> : 161,</span><br><span class="line">        <span class="string">"avg"</span> : 160</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"jvm"</span> : &#123;</span><br><span class="line">      <span class="string">"max_uptime_in_millis"</span> : 1998393,</span><br><span class="line">      <span class="string">"versions"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"version"</span> : <span class="string">"1.8.0_131"</span>,</span><br><span class="line">          <span class="string">"vm_name"</span> : <span class="string">"OpenJDK 64-Bit Server VM"</span>,</span><br><span class="line">          <span class="string">"vm_version"</span> : <span class="string">"25.131-b12"</span>,</span><br><span class="line">          <span class="string">"vm_vendor"</span> : <span class="string">"Oracle Corporation"</span>,</span><br><span class="line">          <span class="string">"count"</span> : 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"version"</span> : <span class="string">"1.8.0_161"</span>,</span><br><span class="line">          <span class="string">"vm_name"</span> : <span class="string">"OpenJDK 64-Bit Server VM"</span>,</span><br><span class="line">          <span class="string">"vm_version"</span> : <span class="string">"25.161-b14"</span>,</span><br><span class="line">          <span class="string">"vm_vendor"</span> : <span class="string">"Oracle Corporation"</span>,</span><br><span class="line">          <span class="string">"count"</span> : 1</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"mem"</span> : &#123;</span><br><span class="line">        <span class="string">"heap_used_in_bytes"</span> : 301069112,</span><br><span class="line">        <span class="string">"heap_max_in_bytes"</span> : 2112618496</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"threads"</span> : 58</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"fs"</span> : &#123;</span><br><span class="line">      <span class="string">"total_in_bytes"</span> : 75125227520,</span><br><span class="line">      <span class="string">"free_in_bytes"</span> : 75057504256,</span><br><span class="line">      <span class="string">"available_in_bytes"</span> : 75057504256,</span><br><span class="line">      <span class="string">"spins"</span> : <span class="string">"true"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"plugins"</span> : [ ],</span><br><span class="line">    <span class="string">"network_types"</span> : &#123;</span><br><span class="line">      <span class="string">"transport_types"</span> : &#123;</span><br><span class="line">        <span class="string">"netty4"</span> : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"http_types"</span> : &#123;</span><br><span class="line">        <span class="string">"netty4"</span> : 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="补充了解"><a href="#补充了解" class="headerlink" title="补充了解"></a>补充了解</h3><p>_cluster系列<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1、查询设置集群状态 </span><br><span class="line">curl -XGET localhost:9200/_cluster/health?pretty=<span class="literal">true</span> </span><br><span class="line">pretty=<span class="literal">true</span>表示格式化输出 </span><br><span class="line">level=indices 表示显示索引状态 </span><br><span class="line">level=shards 表示显示分片信息 </span><br><span class="line">2、curl -XGET localhost:9200/_cluster/stats?pretty=<span class="literal">true</span> </span><br><span class="line">显示集群系统信息，包括CPU JVM等等 </span><br><span class="line">3、curl -XGET localhost:9200/_cluster/state?pretty=<span class="literal">true</span> </span><br><span class="line">集群的详细信息。包括节点、分片等。 </span><br><span class="line">3、curl -XGET localhost:9200/_cluster/pending_tasks?pretty=<span class="literal">true</span> </span><br><span class="line">获取集群堆积的任务 </span><br><span class="line">3、修改集群配置 </span><br><span class="line">举例：</span><br><span class="line"></span><br><span class="line">curl -XPUT localhost:9200/_cluster/settings -d ‘&#123; </span><br><span class="line">“persistent” : &#123; </span><br><span class="line">“discovery.zen.minimum_master_nodes” : 2 </span><br><span class="line">&#125; </span><br><span class="line">&#125;’ </span><br><span class="line">transient 表示临时的，persistent表示永久的 </span><br><span class="line">4、curl -XPOST ‘localhost:9200/_cluster/reroute’ -d ‘xxxxxx’ </span><br><span class="line">对shard的手动控制，参考http://zhaoyanblog.com/archives/687.html </span><br><span class="line">5、关闭节点 </span><br><span class="line">关闭指定192.168.1.1节点 </span><br><span class="line">curl -XPOST ‘http://192.168.1.1:9200/_cluster/nodes/_local/_shutdown’ </span><br><span class="line">curl -XPOST ‘http://localhost:9200/_cluster/nodes/192.168.1.1/_shutdown’ </span><br><span class="line">关闭主节点 </span><br><span class="line">curl -XPOST ‘http://localhost:9200/_cluster/nodes/_master/_shutdown’ </span><br><span class="line">关闭整个集群 </span><br><span class="line">$ curl -XPOST ‘http://localhost:9200/_shutdown?delay=10s’ </span><br><span class="line">$ curl -XPOST ‘http://localhost:9200/_cluster/nodes/_shutdown’ </span><br><span class="line">$ curl -XPOST ‘http://localhost:9200/_cluster/nodes/_all/_shutdown’ </span><br><span class="line">delay=10s表示延迟10秒关闭</span><br></pre></td></tr></table></figure></p><p>_nodes系列<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、查询节点的状态 </span><br><span class="line">curl -XGET ‘http://localhost:9200/_nodes/stats?pretty=<span class="literal">true</span>’ </span><br><span class="line">curl -XGET ‘http://localhost:9200/_nodes/192.168.1.2/stats?pretty=<span class="literal">true</span>’ </span><br><span class="line">curl -XGET ‘http://localhost:9200/_nodes/process’ </span><br><span class="line">curl -XGET ‘http://localhost:9200/_nodes/_all/process’ </span><br><span class="line">curl -XGET ‘http://localhost:9200/_nodes/192.168.1.2,192.168.1.3/jvm,process’ </span><br><span class="line">curl -XGET ‘http://localhost:9200/_nodes/192.168.1.2,192.168.1.3/info/jvm,process’ </span><br><span class="line">curl -XGET ‘http://localhost:9200/_nodes/192.168.1.2,192.168.1.3/_all </span><br><span class="line">curl -XGET ‘http://localhost:9200/_nodes/hot_threads</span><br></pre></td></tr></table></figure></p><p>索引操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1、获取索引 </span><br><span class="line">curl -XGET ‘http://localhost:9200/&#123;index&#125;/&#123;<span class="built_in">type</span>&#125;/&#123;id&#125;’ </span><br><span class="line">2、索引数据 </span><br><span class="line">curl -XPOST ‘http://localhost:9200/&#123;index&#125;/&#123;<span class="built_in">type</span>&#125;/&#123;id&#125;’ -d’&#123;“a”:”avalue”,”b”:”bvalue”&#125;’ </span><br><span class="line">3、删除索引 </span><br><span class="line">curl -XDELETE ‘http://localhost:9200/&#123;index&#125;/&#123;<span class="built_in">type</span>&#125;/&#123;id&#125;’ </span><br><span class="line">4、设置mapping</span><br><span class="line"></span><br><span class="line">curl -XPUT http://localhost:9200/&#123;index&#125;/&#123;<span class="built_in">type</span>&#125;/_mapping -d ‘&#123; </span><br><span class="line">“&#123;<span class="built_in">type</span>&#125;” : &#123; </span><br><span class="line">“properties” : &#123; </span><br><span class="line">“date” : &#123; </span><br><span class="line">“<span class="built_in">type</span>” : “long” </span><br><span class="line">&#125;, </span><br><span class="line">“name” : &#123; </span><br><span class="line">“<span class="built_in">type</span>” : “string”, </span><br><span class="line">“index” : “not_analyzed” </span><br><span class="line">&#125;, </span><br><span class="line">“status” : &#123; </span><br><span class="line">“<span class="built_in">type</span>” : “<span class="built_in">integer</span>” </span><br><span class="line">&#125;, </span><br><span class="line">“<span class="built_in">type</span>” : &#123; </span><br><span class="line">“<span class="built_in">type</span>” : “<span class="built_in">integer</span>” </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;’ </span><br><span class="line">5、获取mapping </span><br><span class="line">curl -XGET http://localhost:9200/&#123;index&#125;/&#123;<span class="built_in">type</span>&#125;/_mapping </span><br><span class="line">6、搜索</span><br><span class="line"></span><br><span class="line">curl -XGET ‘http://localhost:9200/&#123;index&#125;/&#123;<span class="built_in">type</span>&#125;/_search’ -d ‘&#123; </span><br><span class="line">“query” : &#123; </span><br><span class="line">“term” : &#123; “user” : “kimchy” &#125; //查所有 “match_all”: &#123;&#125; </span><br><span class="line">&#125;, </span><br><span class="line">“sort” : [&#123; “age” : &#123;“order” : “asc”&#125;&#125;,&#123; “name” : “desc” &#125; ], </span><br><span class="line">“from”:0, </span><br><span class="line">“size”:100 </span><br><span class="line">&#125; </span><br><span class="line">curl -XGET ‘http://localhost:9200/&#123;index&#125;/&#123;<span class="built_in">type</span>&#125;/_search’ -d ‘&#123; </span><br><span class="line">“filter”: &#123;“and”:&#123;“filters”:[&#123;“term”:&#123;“age”:”123”&#125;&#125;,&#123;“term”:&#123;“name”:”张三”&#125;&#125;]&#125;, </span><br><span class="line">“sort” : [&#123; “age” : &#123;“order” : “asc”&#125;&#125;,&#123; “name” : “desc” &#125; ], </span><br><span class="line">“from”:0, </span><br><span class="line">“size”:100 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ELK介绍及集群安装&quot;&gt;&lt;a href=&quot;#ELK介绍及集群安装&quot; class=&quot;headerlink&quot; title=&quot;ELK介绍及集群安装&quot;&gt;&lt;/a&gt;ELK介绍及集群安装&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/16/ELK介绍及集群安装/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab介绍及配置</title>
    <link href="https://daizhe.net.cn/2019/02/16/Gitlab%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>https://daizhe.net.cn/2019/02/16/Gitlab介绍及配置/</id>
    <published>2019-02-16T07:26:06.874Z</published>
    <updated>2019-02-16T11:14:02.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gitlab介绍及配置"><a href="#Gitlab介绍及配置" class="headerlink" title="Gitlab介绍及配置"></a>Gitlab介绍及配置</h1><p><img src="/2019/02/16/Gitlab介绍及配置/标题.gif" alt=""><br><a id="more"></a></p><h2 id="一：DevOps简介："><a href="#一：DevOps简介：" class="headerlink" title="一：DevOps简介："></a>一：DevOps简介：</h2><ul><li>DevOps 是Development和Operations的组合，也就是开发和运维的简写。</li><li>DevOps 是针对企业中的研发人员、运维人员和测试人员的工作理念，是他们在应用开发、代码部署和质量测试等整条生命周期中协作和沟通的最佳实践，DevOps 强调整个组织的合作以及交付和基础设施变更的自动化、从而实现持续集成、持续部署和持续交付。</li><li>DevOps 四大平台：代码托管(gitlab/svn)、项目管理(jira)、运维平台(腾讯蓝鲸/开源平台)、持续交付(Jenkins/gitlab)</li></ul><h3 id="1-1：什么是DevOps："><a href="#1-1：什么是DevOps：" class="headerlink" title="1.1：什么是DevOps："></a>1.1：什么是DevOps：</h3><p><img src="/2019/02/16/Gitlab介绍及配置/1.png" alt=""></p><h3 id="1-2：为什么要推广DevOps？"><a href="#1-2：为什么要推广DevOps？" class="headerlink" title="1.2：为什么要推广DevOps？"></a>1.2：为什么要推广DevOps？</h3><ul><li>DevOps 强调团队协作、相互协助、持续发展，然而传统的模式是开发人员只顾开发程序，运维只负责基础环境管理和代码部署及监控等，其并不是为了一个共同的目标而共同实现最终的目的，而DevOps 则实现团队作战，即无论是开发、运维还是测试，都为了最终的代码发布、持续部署和业务稳定而付出各自的努力，从而实现产品设计、开发、测试和部署的良性循环，实现产品的最终持续交付。</li></ul><p><img src="/2019/02/16/Gitlab介绍及配置/2.png" alt=""></p><h3 id="1-3：传统技术团队："><a href="#1-3：传统技术团队：" class="headerlink" title="1.3：传统技术团队："></a>1.3：传统技术团队：</h3><p><img src="/2019/02/16/Gitlab介绍及配置/3.png" alt=""></p><h3 id="1-4：DevOps技术团队："><a href="#1-4：DevOps技术团队：" class="headerlink" title="1.4：DevOps技术团队："></a>1.4：DevOps技术团队：</h3><p><img src="/2019/02/16/Gitlab介绍及配置/4.png" alt=""></p><h3 id="1-5：什么是持续集成-CI-Continuous-integration"><a href="#1-5：什么是持续集成-CI-Continuous-integration" class="headerlink" title="1.5：什么是持续集成(CI-Continuous integration)"></a>1.5：什么是持续集成(CI-Continuous integration)</h3><ul><li>持续集成是指多名开发者在开发不同功能代码的过程当中，可以频繁的将代码行合并到一起并切相互不影响工作。</li></ul><h3 id="1-6：什么是持续部署-CD-continuous-deployment"><a href="#1-6：什么是持续部署-CD-continuous-deployment" class="headerlink" title="1.6：什么是持续部署(CD-continuous deployment)"></a>1.6：什么是持续部署(CD-continuous deployment)</h3><ul><li>是基于某种工具或平台实现代码自动化的构建、测试和部署到线上环境以实现交付高质量的产品,持续部署在某种程度上代表了一个开发团队的更新迭代速率。</li></ul><h3 id="1-7：什么是持续交付-Continuous-Delivery"><a href="#1-7：什么是持续交付-Continuous-Delivery" class="headerlink" title="1.7：什么是持续交付(Continuous Delivery)"></a>1.7：什么是持续交付(Continuous Delivery)</h3><ul><li>持续交付是在持续部署的基础之上，将产品交付到线上环境，因此持续交付是产品价值的一种交付，是产品价值的一种盈利的实现。</li></ul><p><img src="/2019/02/16/Gitlab介绍及配置/5.png" alt=""></p><h3 id="1-8：常见的部署方式："><a href="#1-8：常见的部署方式：" class="headerlink" title="1.8：常见的部署方式："></a>1.8：常见的部署方式：</h3><ul><li>开发自己上传–最原始的方案</li><li>开发给运维手动上传–运维自己手动部署</li><li>运维使用脚本复制–半自动化</li><li>结合web界面一键部署–自动化</li></ul><h3 id="1-9：常见的持续集成开源工具："><a href="#1-9：常见的持续集成开源工具：" class="headerlink" title="1.9：常见的持续集成开源工具："></a>1.9：常见的持续集成开源工具：</h3><ul><li>在公司的服务器安装某种程序，该程序用于按照特定格式和方式记录和保存公司多名开发人员不定期提交的源代码，且后期可以按照某种标记及方式对用户提交的数据进行还原。</li></ul><h4 id="1-9-1：CVS-Concurrent-Version-System-："><a href="#1-9-1：CVS-Concurrent-Version-System-：" class="headerlink" title="1.9.1：CVS(Concurrent Version System)："></a>1.9.1：CVS(Concurrent Version System)：</h4><ul><li>早期的集中式版本控制系统，现已基本淘汰<br>会出现数据提交后不完整的情况</li></ul><h4 id="1-9-2：SVN-Subversion-–集中式版本控制系统"><a href="#1-9-2：SVN-Subversion-–集中式版本控制系统" class="headerlink" title="1.9.2：SVN(Subversion)–集中式版本控制系统"></a>1.9.2：SVN(Subversion)–集中式版本控制系统</h4><ul><li>2000年开始开发，目标就是替代CVS集中式管理，依赖于网络，一台服务器集中管理目前依然有部分公司在使用</li></ul><h4 id="1-9-3：Gitlib—分布式版本控制系统"><a href="#1-9-3：Gitlib—分布式版本控制系统" class="headerlink" title="1.9.3：Gitlib—分布式版本控制系统"></a>1.9.3：Gitlib—分布式版本控制系统</h4><ul><li>Linus在1991年创建了开源的Linux内核，从此Linux便不断快速发展，不过 Linux的壮大是离不开全世界的开发者的参与，这么多人在世界各地为Linux编写代码，那Linux内核的代码是如何管理的呢？事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，且必须联网才能使用，但是也有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符,不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统,但是安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气，开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权,这时候其实Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，但这是不可能的，而且实际情况是Linus自己花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux内核的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下,然后Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</li></ul><h3 id="1-10：版本控制系统分类："><a href="#1-10：版本控制系统分类：" class="headerlink" title="1.10：版本控制系统分类："></a>1.10：版本控制系统分类：</h3><h4 id="1-10-1：集中式版本控制系统："><a href="#1-10-1：集中式版本控制系统：" class="headerlink" title="1.10.1：集中式版本控制系统："></a>1.10.1：集中式版本控制系统：</h4><ul><li>任何的提交和回滚都依赖于连接服务器SVN服务器是单点</li></ul><p><img src="/2019/02/16/Gitlab介绍及配置/6.png" alt=""></p><h4 id="1-10-2：分布式版本控制系统："><a href="#1-10-2：分布式版本控制系统：" class="headerlink" title="1.10.2：分布式版本控制系统："></a>1.10.2：分布式版本控制系统：</h4><ul><li>Git在每个用户都有一个完整的服务器，然后在有一个中央服务器，用户可以先将代码提交到本    地，没有网络也可以先提交到本地，然后在有网络的时候再提交到中央服务器，这样就大大方便了开发者，而相比CVS和SVN都是集中式的版本控制系统，工作的时候需要先从中央服务器获 取最新的代码，改完之后需要提交，如果是一个比较大的文件则需要足够快的网络才能快速提交完成，而使用分布式的版本控制系统，每个用户都是一个完整的版本库，即使没有中央服务器也可以提交代码或者回滚，最终再把改好的代码提交至中央服务器进行合并即可。</li></ul><p><img src="/2019/02/16/Gitlab介绍及配置/7.png" alt=""></p><hr><p>避免混淆的名称</p><ul><li>gitlab–&gt;应用软件</li><li>git–&gt;命令行的客户端</li><li>github–&gt;代码托管网站</li></ul><hr><h2 id="二：Gitlab部署与使用："><a href="#二：Gitlab部署与使用：" class="headerlink" title="二：Gitlab部署与使用："></a>二：Gitlab部署与使用：</h2><h3 id="2-1：下载并部署gitlab："><a href="#2-1：下载并部署gitlab：" class="headerlink" title="2.1：下载并部署gitlab："></a>2.1：下载并部署gitlab：</h3><p>官方站点：<a href="https://about.gitlab.com/" target="_blank" rel="noopener">https://about.gitlab.com/</a></p><h4 id="2-1-1：Centos-系统环境在准备："><a href="#2-1-1：Centos-系统环境在准备：" class="headerlink" title="2.1.1：Centos 系统环境在准备："></a>2.1.1：Centos 系统环境在准备：</h4><h4 id="2-1-2：gitlab安装及使用"><a href="#2-1-2：gitlab安装及使用" class="headerlink" title="2.1.2：gitlab安装及使用"></a>2.1.2：gitlab安装及使用</h4><ul><li>安装包下载地址：<a href="https://packages.gitlab.com/gitlab/gitlab-ce" target="_blank" rel="noopener">https://packages.gitlab.com/gitlab/gitlab-ce</a>   </li><li>rpm包国内下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gitlab介绍及配置&quot;&gt;&lt;a href=&quot;#Gitlab介绍及配置&quot; class=&quot;headerlink&quot; title=&quot;Gitlab介绍及配置&quot;&gt;&lt;/a&gt;Gitlab介绍及配置&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/16/Gitlab介绍及配置/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>zabbix分布式监控与性能优化</title>
    <link href="https://daizhe.net.cn/2019/02/15/zabbix%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://daizhe.net.cn/2019/02/15/zabbix分布式监控与性能优化/</id>
    <published>2019-02-15T08:04:21.104Z</published>
    <updated>2019-02-16T06:35:10.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第五章：-zabbix分布式监控与性能优化"><a href="#第五章：-zabbix分布式监控与性能优化" class="headerlink" title="第五章： zabbix分布式监控与性能优化"></a>第五章： zabbix分布式监控与性能优化</h1><p><img src="/2019/02/15/zabbix分布式监控与性能优化/标题.gif" alt=""><br><a id="more"></a></p><h2 id="zabbix-proxy分布式概述"><a href="#zabbix-proxy分布式概述" class="headerlink" title="zabbix-proxy分布式概述"></a>zabbix-proxy分布式概述</h2><p><img src="/2019/02/15/zabbix分布式监控与性能优化/1.png" alt=""></p><p>zabbix-proxy官方文档 <a href="https://www.zabbix.com/documentation/3.4/manual/distributed_monitoring/proxies" target="_blank" rel="noopener">https://www.zabbix.com/documentation/3.4/manual/distributed_monitoring/proxies</a></p><ul><li><p>概观</p><ul><li>Zabbix代理可以代表Zabbix服务器收集性能和可用性数据。这样，代理可以承担一些收集数据和卸载Zabbix服务器的负担。</li><li>此外，当所有代理和代理向一个Zabbix服务器报告并且集中收集所有数据时，使用代理是实现集中式和分布式监视的最简单方法。</li></ul></li><li><p>Zabbix-proxy使用场景：</p><ul><li>监控远程位置，解决跨机房</li><li>监控主机多，性能跟不上，延迟大</li><li>解决网络不稳定</li></ul></li></ul><hr><h3 id="zabbix-proxy特征"><a href="#zabbix-proxy特征" class="headerlink" title="zabbix-proxy特征"></a>zabbix-proxy特征</h3><p><img src="/2019/02/15/zabbix分布式监控与性能优化/2.png" alt=""></p><ul><li>proxy不支持图形</li><li>proxy不支持报警</li><li>proxy需要数据库</li><li>proxy不能和server装在一起</li></ul><hr><h2 id="zabbix-proxy分布式图解"><a href="#zabbix-proxy分布式图解" class="headerlink" title="zabbix-proxy分布式图解"></a>zabbix-proxy分布式图解</h2><p>环境：<br><img src="/2019/02/15/zabbix分布式监控与性能优化/3.png" alt=""></p><p>部署：</p><p>1.安装zabbix-server<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">1.安装</span><br><span class="line">  ~]<span class="comment"># rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">2.安装Zabbix服务器，前端，代理（zabbix要连接数据库）解决的依赖关系，安装了php、httpd</span><br><span class="line">zabbix-agent ： zabbix客户端</span><br><span class="line">  ~]<span class="comment"># yum install zabbix-server-mysql zabbix-web-mysql zabbix-agent -y</span></span><br><span class="line"></span><br><span class="line">3.安装数据库</span><br><span class="line">  ~]<span class="comment"># yum install mariadb-server -y</span></span><br><span class="line"></span><br><span class="line">4.创建zabbix数据库以及用户</span><br><span class="line">  <span class="comment">#启动数据库，加入开机启动项</span></span><br><span class="line">  ~]<span class="comment"># systemctl start mariadb</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable mariadb</span></span><br><span class="line">  <span class="comment">#创建数据库并授权</span></span><br><span class="line">  ~]<span class="comment"># mysql -uroot</span></span><br><span class="line">  mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">  mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">'centos'</span>;</span><br><span class="line">  mysql&gt; quit;</span><br><span class="line"></span><br><span class="line">5.导入初始架构和数据。系统将提示您输入新创建的密码（）</span><br><span class="line">  ~]<span class="comment"># cd /usr/share/doc/zabbix-server-mysql-4.0.4/</span></span><br><span class="line">  <span class="comment">#查看压缩包的内容不解压zcat</span></span><br><span class="line">  <span class="comment">#导入到zabbix库中</span></span><br><span class="line">  zabbix-server-mysql-4.0.4]<span class="comment">#  zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uroot zabbix(zabbix为前面创建的数据库名称)</span></span><br><span class="line"></span><br><span class="line">6.启动zabbix server进程</span><br><span class="line">  <span class="comment">#在zabbix_server.conf中编辑配置数据库配置</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/zabbix/zabbix_server.conf </span></span><br><span class="line">  91行</span><br><span class="line">  <span class="comment"># DBHost=localhost    </span></span><br><span class="line">  <span class="comment">#数据库的地址，这里演示的为单机模式，默认也是localhost</span></span><br><span class="line">  100行</span><br><span class="line">  DBName=zabbix   </span><br><span class="line">  <span class="comment">#数据库的名称，这里演示创建的数据库的名称也为zabbix</span></span><br><span class="line">  116行</span><br><span class="line">  DBUser=zabbix</span><br><span class="line">  <span class="comment">#授权的数据库的用户</span></span><br><span class="line">  124行</span><br><span class="line">  DBPassword=centos</span><br><span class="line">  <span class="comment">#数据库的密码</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#启动前关闭selinux</span></span><br><span class="line">  ~]<span class="comment"># systemctl start zabbix-server</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable zabbix-server</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#保证80端口为安装zabbix时安装的依赖的httpd使用</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    *:10051 </span><br><span class="line">    *:3306</span><br><span class="line">    *:80</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">7.编辑zabbix前端的PHP配置</span><br><span class="line">  <span class="comment">#zabbix前端的apache配置文件位于/etc/httpd/conf.d/zabbix.conf 一些php设置已经完成了配置</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#依据所在的时区，设置时间，更改配置文件后，重启Apache服务器</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/httpd/conf.d/zabbix.conf </span></span><br><span class="line">  Alias /zabbix /usr/share/zabbix   <span class="comment">#如果访问uri路径为/zabbix 则调度到/usr/share/zabbix 路径下，别名意思</span></span><br><span class="line">  &lt;Directory <span class="string">"/usr/share/zabbix"</span>&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line"></span><br><span class="line">    &lt;IfModule mod_php5.c&gt;</span><br><span class="line">    ...</span><br><span class="line">  20行修改为(仅一处修改即可)</span><br><span class="line">        php_value date.timezone Asia/Shanghai</span><br><span class="line">    &lt;/IfModule&gt;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart httpd</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable httpd</span></span><br></pre></td></tr></table></figure></p><p>2.安装、配置 zabbix-proxy（proxy端的版本和proxy端以及zabbix-agent端的版本要一致）<br>阿里云仓库：<a href="https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/" target="_blank" rel="noopener">https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">配置好epel源</span><br><span class="line"></span><br><span class="line">安装zabbix-proxy</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum localinstall https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/zabbix-proxy-mysql-3.4.12-1.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line">安装数据库</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install mariadb-server -y</span></span><br><span class="line"></span><br><span class="line">创建zabbix数据库以及用户</span><br><span class="line"></span><br><span class="line">  <span class="comment">#启动数据库，加入开机启动项</span></span><br><span class="line">  ~]<span class="comment"># systemctl start mariadb</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable mariadb</span></span><br><span class="line"></span><br><span class="line">创建数据库并授权</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># mysql -uroot</span></span><br><span class="line">  mysql&gt; create database zabbix_proxy character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">  mysql&gt; grant all privileges on zabbix_proxy.* to zabbix_proxy@localhost identified by <span class="string">'centos'</span>;</span><br><span class="line">  mysql&gt; quit;</span><br><span class="line"></span><br><span class="line">配置zabbix-proxy</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/zabbix/zabbix_proxy.conf </span></span><br><span class="line">  <span class="comment">#定义的使用zabbix-proxy主动模式还是被动模式（默认使用的是主动模式）</span></span><br><span class="line">  6 <span class="comment">### Option: ProxyMode</span></span><br><span class="line">  7 <span class="comment">#       Proxy operating mode.</span></span><br><span class="line">  8 <span class="comment">#       0 - proxy in the active mode</span></span><br><span class="line">  9 <span class="comment">#       1 - proxy in the passive mode</span></span><br><span class="line">  10 <span class="comment">#</span></span><br><span class="line">  11 <span class="comment"># Mandatory: no</span></span><br><span class="line">  12 <span class="comment"># Default:</span></span><br><span class="line">  13 <span class="comment"># ProxyMode=0</span></span><br><span class="line"></span><br><span class="line">  24 Server=zabbix-server地址</span><br><span class="line"></span><br><span class="line">  43 Hostname=Zabbix proxy  <span class="comment">#此主机名很重要是zabbix-server定义代理的名称</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#zabbix-proxy在内网中人为自己就是老大（所以zabbix-server和zabbix-proxy不能安装在同一台主机上）</span></span><br><span class="line">  59 <span class="comment"># ListenPort=10051  </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#定义zabbix-proxy数据保存的数据库的位置，这里zabbix-proxy的数据库和安装在同一台主机上</span></span><br><span class="line">  151 <span class="comment"># DBHost=localhost</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#填写zabbix-proxy主机上安装数据库的名称</span></span><br><span class="line">  167 DBName=zabbix_proxy</span><br><span class="line"></span><br><span class="line">  <span class="comment">#授权的zabbix-proxy上数据库中数据库的用户</span></span><br><span class="line">  182 DBUser=zabbix_proxy</span><br><span class="line"></span><br><span class="line">  <span class="comment">#定义zabbix-proxy上数据库中数据库的用户的密码</span></span><br><span class="line">  190 DBPassword=centos</span><br></pre></td></tr></table></figure></p><p><img src="/2019/02/15/zabbix分布式监控与性能优化/4.png" alt=""></p><p>2.将zabbix-proxy导入mysql初始架构和数据。系统将提示您输入新创建的数据库以及新建的用户的密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查看安装zabbix-proxy安装包的文件</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># rpm -q zabbix-proxy-mysql </span></span><br><span class="line">  zabbix-proxy-mysql-3.4.12-1.el7.x86_64</span><br><span class="line">  ~]<span class="comment"># rpm -q zabbix-proxy-mysql </span></span><br><span class="line">  /usr/share/doc/zabbix-proxy-mysql-3.4.12/schema.sql.gz</span><br><span class="line"></span><br><span class="line">将zabbix-proxy导入mysql初始架构和数据。系统将提示您输入新创建的密码（）</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /usr/share/doc/zabbix-proxy-mysql-3.4.12/</span></span><br><span class="line">  zabbix-proxy-mysql-3.4.12]<span class="comment"># zcat schema.sql.gz | mysql -uzabbix_proxy -pcentos zabbix_proxy</span></span><br></pre></td></tr></table></figure></p><p>3.登陆zabbix-proxy上安装的数据库查看是否将zabbix-proxy中的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use zabbix_proxy;</span><br><span class="line">MariaDB [zabbix_proxy]&gt; show tables;</span><br><span class="line">MariaDB [zabbix_proxy]&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><p>4.启动zabbix-proxy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># systemctl start zabbix-proxy</span></span><br><span class="line">~]<span class="comment"># systemctl enable zabbix-proxy</span></span><br><span class="line">~]<span class="comment"># ss -tnl</span></span><br><span class="line">*:10051  </span><br><span class="line">*:3306</span><br></pre></td></tr></table></figure></p><p>5.配置内网中的zabbix-agent客户端指向内网中zabbix-proxy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">安装zabbix-agent客户端</span><br><span class="line"></span><br><span class="line">  ~] <span class="comment"># rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/zabbix-agent-3.4.3-1.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line">配置zabbix-agent客户端的配置文件指定允许服务端监控的地址</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">  97  Server=zabbix-proxy地址</span><br><span class="line">  138 ServerActive=zabbix-proxy地址 （允许zabbix-proxy自动发现zabbix-agent）</span><br><span class="line">  149 Hostname=agent-01-172.18.139.71</span><br><span class="line"></span><br><span class="line">重启zabbix-agent并加入开启启动项</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable zabbix-agent</span></span><br></pre></td></tr></table></figure></p><p>6.使用zabbix-server中的zabbix-web界面链接zabbix-proxy</p><p>6.1创建代理<br><img src="/2019/02/15/zabbix分布式监控与性能优化/5.png" alt=""><br><img src="/2019/02/15/zabbix分布式监控与性能优化/6.png" alt=""></p><p>6.2zabbix-server的wab界面中链接内网中的zabbix-agent主机，链接时并配置代理<br><img src="/2019/02/15/zabbix分布式监控与性能优化/7.png" alt=""></p><ul><li>代理只需要一个到Zabbix服务器的TCP连接。这样就可以更容易地绕过防火墙，因为您只需要配置一个防火墙规则。</li><li>代理收集的所有数据在将其传输到服务器之前存储在本地。这样，由于服务器的任何临时通信问题，都不会丢失数据。代理配置文件中的ProxyLocalBuffer和ProxyOfflineBuffer参数控制数据在本地保存多长时间。</li></ul><h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><ul><li>1.针对于mysql，zabbix-server和mysql拆分架构，写多读少</li><li>2.去掉无用监控项，增加监控项的取值间隔，减少历史数据保存周期（housekeeper）</li><li>3.把被动模式修改为主动模式，增加zabbix-porxy</li><li>4.针对于zabbix-server进行进行调优，就加大它的进行数</li><li>5.针对于zabbix-server缓存调优，谁的剩余内存少，就加大它的缓存值</li><li>定义监控项时，设置历史数据保留时长，（30天~60天）<ul><li>如果监控的数据的之大于30天，则会被zabbix-server中的程序清理<ul><li>手动执行数据清理<ul><li>zabbix-server -R housekeeper_execute</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第五章：-zabbix分布式监控与性能优化&quot;&gt;&lt;a href=&quot;#第五章：-zabbix分布式监控与性能优化&quot; class=&quot;headerlink&quot; title=&quot;第五章： zabbix分布式监控与性能优化&quot;&gt;&lt;/a&gt;第五章： zabbix分布式监控与性能优化&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/15/zabbix分布式监控与性能优化/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>zabbix自动化监控深入实践</title>
    <link href="https://daizhe.net.cn/2019/02/14/zabbix%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9B%91%E6%8E%A7%E6%B7%B1%E5%85%A5%E5%AE%9E%E8%B7%B5/"/>
    <id>https://daizhe.net.cn/2019/02/14/zabbix自动化监控深入实践/</id>
    <published>2019-02-14T11:26:27.519Z</published>
    <updated>2019-02-15T08:52:34.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四章：-zabbix自动化监控（自动发现-主动注册-主动模式被动模式）"><a href="#第四章：-zabbix自动化监控（自动发现-主动注册-主动模式被动模式）" class="headerlink" title="第四章： zabbix自动化监控（自动发现|主动注册|主动模式被动模式）"></a>第四章： zabbix自动化监控（自动发现|主动注册|主动模式被动模式）</h1><p><img src="/2019/02/14/zabbix自动化监控深入实践/标题.gif" alt=""><br><a id="more"></a></p><p><img src="/2019/02/14/zabbix自动化监控深入实践/1.png" alt=""></p><ul><li>web网站可用性监控<ul><li>1.使用命令行实现网站的登陆（curl登陆discuz,需要关闭discuz的验证码）</li><li>2.使用curl模型登陆zabix_web</li></ul></li></ul><ul><li>扩展知识<ul><li>静态页面：纯静态网站就是服务器的源代码和客户端的源代码一致。（HTML标记语言）</li><li>动态页面：&lt;?php phpinfo()?&gt;</li><li>每次用户访问的时候，html都是在内存中动态生成的，支持登陆，支持用户交互</li><li>动态网站需要有东西存下来<ul><li>服务端：session</li><li>客户端：cookie</li></ul></li></ul></li></ul><hr><ul><li>当用户第一次访问网站，肯定不会携带cookie信息，服务端返回网页的时候，给该客户分配一个sessionID</li><li>当用户第二次访问网站的时候，会携带cookie访问，服务端就会通过session验证用户的sookie进行验证<ul><li>模拟登陆：curl -L -c cook -b cook -d ‘原始数据’ 请求url</li><li>登陆成功后，使用curl -c cook -b cook url 访问想要访问 的内容，然后追加至一个html文件中，验证是否成功</li></ul></li></ul><hr><h2 id="自动发现（server端轮询网段扫描发现agent）：被动模式"><a href="#自动发现（server端轮询网段扫描发现agent）：被动模式" class="headerlink" title="自动发现（server端轮询网段扫描发现agent）：被动模式"></a>自动发现（server端轮询网段扫描发现agent）：被动模式</h2><ul><li><p>zabbbix-server段主动去发现此网段中主机上安装zabbix-agent客户端并且agent配置文件中server地址指向的是zabbix-server的主机的地址的主机，则可以被zabbix-server主机扫描到添加到监控的主机中</p></li><li><p>zabbix自动发现和主机注册(重要)</p></li></ul><p>操作步骤：</p><ul><li>1.自动发现，自动添加监控给主机<ul><li>配置–&gt;自动发现–&gt;选择扫描的主机端</li><li>配置–&gt;动作–&gt;事件源–&gt;自动发现–&gt;定制消息</li></ul></li><li>自动发现问题：server每60s扫描一次小弟，资源开销厉害</li></ul><p>演示：</p><p>1.zabbix-web开启配置中的自动发现默认规则<br><img src="/2019/02/14/zabbix自动化监控深入实践/2.png" alt=""></p><p>2.zabbix-web端默认的发现规则的检测规则<br><img src="/2019/02/14/zabbix自动化监控深入实践/4.png" alt=""><br><img src="/2019/02/14/zabbix自动化监控深入实践/5.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># zabbix_get -s 172.18.139.70 -k "system.uname"</span></span><br><span class="line">Linux centos7.com 3.10.0-693.el7.x86_64 <span class="comment">#1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64</span></span><br></pre></td></tr></table></figure><p>3.验证自动发现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">重新创建一个zabbix-agent端</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/zabbix-agent-3.4.3-1.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line">定义agent端的配置文件中的server（允许那台server监控此agent端）</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">    Server=172.18.139.69    <span class="comment">#填写zabbix-server端的地址</span></span><br><span class="line">    ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br></pre></td></tr></table></figure></p><p>4.zabbix-web开启自动发现的动作<br><img src="/2019/02/14/zabbix自动化监控深入实践/6.png" alt=""></p><p>5.zabbix-web配置自动发现zabbix-agent-动作<br><img src="/2019/02/14/zabbix自动化监控深入实践/7.png" alt=""></p><p>6.zabbix-web配置自动发现zabbix-agent-操作<br><img src="/2019/02/14/zabbix自动化监控深入实践/8.png" alt=""></p><p>7.刷新zabbix-web界面查看自动检测的主机是否被zabbix-server监控<br><img src="/2019/02/14/zabbix自动化监控深入实践/9.png" alt=""></p><hr><ul><li>自动发现：ip、ftp、ssh、web、pop3、imap、tcp</li><li><p>ip范文自动发现（两个阶段：发现–&gt;动作）</p></li><li><p>自动发现所执行的动作</p><ul><li>发送消息</li><li>添加/删除主机</li><li>启用/禁用主机</li><li>添加主机到组</li><li>从组中删除主机</li><li>将主机链接到模板/从模板中取消链接</li><li>执行远程脚本命令</li></ul></li></ul><h4 id="定义操作-即发送邮件的信息"><a href="#定义操作-即发送邮件的信息" class="headerlink" title="定义操作-即发送邮件的信息"></a>定义操作-即发送邮件的信息</h4><ul><li><p>可以使用系统自带的宏变量设置</p><ul><li>官方站点：<a href="https://www.zabbix.com/documentation/3.4/manual/appendix/macros/supported_by_location" target="_blank" rel="noopener">https://www.zabbix.com/documentation/3.4/manual/appendix/macros/supported_by_location</a></li></ul></li><li><p>{} DISCOVERY.DEVICE.IPADDRESS    </p><ul><li>→发现通知    <ul><li>已发现设备的IP地址。始终可用，不依赖于添加的主机。</li></ul></li></ul></li><li>{DISCOVERY.DEVICE。DNS }    <ul><li>→发现通知    <ul><li>已发现设备的DNS名称。始终可用，不依赖于添加的主机。</li></ul></li></ul></li><li>{} DISCOVERY.DEVICE.STATUS    <ul><li>→发现通知    <ul><li>已发现设备的状态：可以是UP或DOWN。</li></ul></li></ul></li><li>{} DISCOVERY.DEVICE.UPTIME    <ul><li>→发现通知    <ul><li>自上次更改特定设备的发现状态以来的时间。对于状态为DOWN的设备，这是其停机时间。</li></ul></li></ul></li><li>{} DISCOVERY.RULE.NAME    <ul><li>→发现通知    <ul><li>发现设备或服务存在与否的发现规则的名称。</li></ul></li></ul></li><li>{} DISCOVERY.SERVICE.NAME    <ul><li>→发现通知    <ul><li>发现的服务的名称。例如：HTTP。</li></ul></li></ul></li><li>{} DISCOVERY.SERVICE.PORT    <ul><li>→发现通知    <ul><li>发现的服务的端口。例如：80。</li></ul></li></ul></li><li>{} DISCOVERY.SERVICE.STATUS    <ul><li>→发现通知    <ul><li>已发现服务的状态：可以是UP或DOWN。</li></ul></li></ul></li><li>{} DISCOVERY.SERVICE.UPTIME    <ul><li>→发现通知    <ul><li>自上次更改特定服务的发现状态以来的时间。例如：1小时29分钟。对于状态为DOWN的服务，这是他们停机的时间段。</li></ul></li></ul></li></ul><p><img src="/2019/02/14/zabbix自动化监控深入实践/10.png" alt=""></p><hr><h2 id="主机注册（agent端主动告诉server端请求加入）：主动模式"><a href="#主机注册（agent端主动告诉server端请求加入）：主动模式" class="headerlink" title="主机注册（agent端主动告诉server端请求加入）：主动模式"></a>主机注册（agent端主动告诉server端请求加入）：主动模式</h2><p>操作步骤：</p><ul><li><p>主机注册</p><ul><li>#修改配置文件</li><li>vim /etc/zabbix/zabbix_agent.conf<ul><li>ServerActive=</li><li>Hostname=</li></ul></li><li>systemctl restart zabbix-agent</li></ul></li><li><p>#Web界面</p><ul><li>1.配置–&gt;动作–&gt;事件源–&gt;自动注册–&gt;创建</li><li>2.动作–&gt;名称–&gt;触发条件</li><li>3.操作–&gt;操作细节–&gt;关联模板–&gt;发送消息</li></ul></li></ul><p>演示：</p><p>1.zabbix-agent端修改配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">97行</span><br><span class="line">Server=172.18.139.69        <span class="comment">#zabbix-server 端的地址（允许哪台server主机监控）</span></span><br><span class="line">138行</span><br><span class="line">ServerActive=172.18.139.69      <span class="comment">#zabbix-server 端的地址  （向哪台server主机提请注册）  </span></span><br><span class="line">149行</span><br><span class="line">Hostname=agent-01-172.18.139.71 <span class="comment">#定义主机可以选择和系统主机名称保持一致</span></span><br><span class="line"></span><br><span class="line">重启</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># systemctl restart zabbix-agent.service</span></span><br></pre></td></tr></table></figure></p><p>2.zabbix-web界面配置创建自动注册机制<br><img src="/2019/02/14/zabbix自动化监控深入实践/11.png" alt=""></p><p>3.zabbix-web界面配置创建自动注册触发动作（主机名称包含agent则触发动作）<br><img src="/2019/02/14/zabbix自动化监控深入实践/12.png" alt=""></p><p>4.zabbix-web界面配置创建自动注册操作细节（关联模板+发送邮件）<br><img src="/2019/02/14/zabbix自动化监控深入实践/13.png" alt=""></p><p>5.zabbix-web关闭自动发现功能<br><img src="/2019/02/14/zabbix自动化监控深入实践/14.png" alt=""></p><p>6.刷新界面查看agent是否被server端发现<br><img src="/2019/02/14/zabbix自动化监控深入实践/15.png" alt=""></p><hr><h2 id="主动模式被动模式"><a href="#主动模式被动模式" class="headerlink" title="主动模式被动模式"></a>主动模式被动模式</h2><p><code>主动模式与被动模式主要是站在zabbix-agent身份来说</code></p><ul><li>1.被动模式（zabbix-server轮询检测zabbix-agent）</li><li>2.主动模式（zabbix-agent主动上报给zabbix-server）优</li></ul><p><code>zabbix主动模式与被动模式选择</code></p><ul><li>1.当（Queue）队列中有大量的延迟监控项</li><li>2.当监控主机超过300+ ,建议使用主动模式</li></ul><p>zabbix默认是被动模式</p><ul><li>被动模式100个监控，需要100个回合</li><li>主动模式100个监控，需要1个回合</li></ul><p><img src="/2019/02/14/zabbix自动化监控深入实践/16.png" alt=""></p><hr><h3 id="zabbix被动模式（默认）"><a href="#zabbix被动模式（默认）" class="headerlink" title="zabbix被动模式（默认）"></a>zabbix被动模式（默认）</h3><p><img src="/2019/02/14/zabbix自动化监控深入实践/17.png" alt=""><br><img src="/2019/02/14/zabbix自动化监控深入实践/19.png" alt=""></p><hr><h3 id="zabbix主动模式（优）"><a href="#zabbix主动模式（优）" class="headerlink" title="zabbix主动模式（优）"></a>zabbix主动模式（优）</h3><p><img src="/2019/02/14/zabbix自动化监控深入实践/18.png" alt=""><br><img src="/2019/02/14/zabbix自动化监控深入实践/20.png" alt=""></p><hr><h2 id="主动模式演示"><a href="#主动模式演示" class="headerlink" title="主动模式演示"></a>主动模式演示</h2><ul><li>1.zabbix-agent修改配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">    Server=zabbix-server端地址  </span><br><span class="line">    ServerActive=zabbix-server端地址</span><br><span class="line">    Hostname=定义主机</span><br></pre></td></tr></table></figure><ul><li><p>2.添加主机（自动注册）</p></li><li><p>3.zabbix—web需要将模板修改为主动模式</p><ul><li>1.全克隆默认被动模式的模板–&gt;改名–&gt;主动模式的模板</li><li>2.修改克隆好的模板，进行监控项的修改，修改为主动模式</li><li>3.主机引用，先取消被动模式使用的模板（取消链接并清理），然后链接新的模板</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第四章：-zabbix自动化监控（自动发现-主动注册-主动模式被动模式）&quot;&gt;&lt;a href=&quot;#第四章：-zabbix自动化监控（自动发现-主动注册-主动模式被动模式）&quot; class=&quot;headerlink&quot; title=&quot;第四章： zabbix自动化监控（自动发现|主动注册|主动模式被动模式）&quot;&gt;&lt;/a&gt;第四章： zabbix自动化监控（自动发现|主动注册|主动模式被动模式）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/14/zabbix自动化监控深入实践/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>zabbix应用服务器监控之php-fpm服务状态</title>
    <link href="https://daizhe.net.cn/2019/02/13/zabbix%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E4%B9%8Bphp-fpm%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81/"/>
    <id>https://daizhe.net.cn/2019/02/13/zabbix应用服务监控之php-fpm服务状态/</id>
    <published>2019-02-13T07:51:47.205Z</published>
    <updated>2019-02-14T11:04:19.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章：zabbix应用服务器监控之php-fpm服务状态"><a href="#第三章：zabbix应用服务器监控之php-fpm服务状态" class="headerlink" title="第三章：zabbix应用服务器监控之php-fpm服务状态"></a>第三章：zabbix应用服务器监控之php-fpm服务状态</h1><p><img src="/2019/02/13/zabbix应用服务监控之php-fpm服务状态/zabbix应用服务器监控之php-fpm服务状态/标题.gif" alt=""><br><a id="more"></a></p><h2 id="PHP-FPM服务状态监控"><a href="#PHP-FPM服务状态监控" class="headerlink" title="PHP-FPM服务状态监控"></a>PHP-FPM服务状态监控</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul><li>1.在nginx配置文件开启php-fpm状态显示</li><li>2.编写脚本对php-fpm状态数据进行采集</li><li>3.在zabbix agent设置用户的自定义参数</li><li>4.重启zabbix-agent服务使配置生效</li><li>5.在zabbix服务端添加item</li><li>6.创建监控图形</li><li>7.创建事件触发器</li><li>8.创建模板以方便后期配置其他主机</li></ul><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>1.zabbix-server端已经安装好</p><p>2.zabbix-agent端安装zabbix-agent和php-fpm并开启状态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">agent端安装php-fpm以及zabbix-agent</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/zabbix-agent-3.4.3-1.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install php-fpm php -y</span></span><br><span class="line"></span><br><span class="line">配置zabbix-agent配置文件定义zabbix-server的地址</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">  Server=172.18.139.69  <span class="comment">#zabbix-server端的地址</span></span><br><span class="line">  ~]<span class="comment"># systemctl start zabbix-agent.service </span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  10050 </span><br><span class="line"></span><br><span class="line">php-fpm 开启状态模块</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/php-fpm.d/www.conf </span></span><br><span class="line">  121行</span><br><span class="line">  pm.status_path = /phpfpm_status</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start php-fpm</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  127.0.0.1:9000 </span><br><span class="line"></span><br><span class="line">此时用户不可直接访问php-fpm的状态页面查看，去要借助nginx去做请求</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install nginx</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  server &#123;</span><br><span class="line">      listen 80;</span><br><span class="line"></span><br><span class="line">        location ~ /(phpfpm_status)$ &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">访问指定路径查看php-fpm状态信息</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># curl -s 172.18.139.71:80/phpfpm_status</span></span><br><span class="line">  pool:                 www</span><br><span class="line">  process manager:      dynamic</span><br><span class="line">  start time:           13/Feb/2019:16:29:34 +0800</span><br><span class="line">  start since:          703</span><br><span class="line">  accepted conn:        1</span><br><span class="line">  listen queue:         0</span><br><span class="line">  max listen queue:     0</span><br><span class="line">  listen queue len:     128</span><br><span class="line">  idle processes:       4</span><br><span class="line">  active processes:     1</span><br><span class="line">  total processes:      5</span><br><span class="line">  max active processes: 1</span><br><span class="line">  max children reached: 0</span><br><span class="line">  slow requests:        0</span><br></pre></td></tr></table></figure><hr><p>补充回顾：</p><ul><li>pool – fpm池子名称，大多数为www</li><li>process manager – 进程管理方式,值：static(静态), dynamic or ondemand. dynamic（动态）</li><li>start time – 启动日期,如果reload了php-fpm，时间会更新</li><li>start since – 运行时长</li><li>accepted conn – 当前池子接受的请求数</li><li>listen queue – 请求等待队列，如果这个值不为0，那么要增加FPM的进程数量</li><li>max listen queue – 请求等待队列最高的数量</li><li>listen queue len – socket等待队列长度</li><li>idle processes – 空闲进程数量</li><li>active processes – 活跃进程数量</li><li>total processes – 总进程数量</li><li>max active processes – 最大的活跃进程数量（FPM启动开始算）</li><li>max children reached - 大道进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量太小了，请改大一点。</li><li>slow requests – 启用了php-fpm slow-log，缓慢请求的数量</li></ul><hr><p>3.zabbix-agent端(php-fpm)文件中定义监控项，调用脚本或者命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">创建一个目录作为以后存放zabbix-agent的调用脚本的目录</span><br><span class="line"></span><br><span class="line">创建目录</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># mkdir /etc/zabbix/scripts</span></span><br><span class="line"></span><br><span class="line">在此目录下创建取nginx状态键值的脚本</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /etc/zabbix/scripts/</span></span><br><span class="line">  scripts]<span class="comment"># cat php_fpm_status.sh </span></span><br><span class="line">  <span class="comment">#!/bin/bash</span></span><br><span class="line">  <span class="comment">############################################</span></span><br><span class="line">  <span class="comment">#$name:nginx_status.sh</span></span><br><span class="line">  <span class="comment">#author:daizhe</span></span><br><span class="line">  <span class="comment">#Create Date:2019-02-13</span></span><br><span class="line">  <span class="comment">############################################</span></span><br><span class="line"></span><br><span class="line">  PHPFPM_COMMAND=<span class="variable">$1</span></span><br><span class="line">  PHPFPM_PORT=80 <span class="comment">#根据监听不同端口进行调整</span></span><br><span class="line">  <span class="function"><span class="title">start_since</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^start since:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">accepted_conn</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^accepted conn:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">listen_queue</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^listen queue:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">max_listen_queue</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^max listen queue:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">listen_queue_len</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^listen queue len:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">idle_processes</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^idle processes:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">active_processes</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^active processes:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">total_processes</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^total processes:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">max_active_processes</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^max active processes:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">max_children_reached</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^max children reached:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">slow_requests</span></span>()&#123;</span><br><span class="line">  /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^slow requests:/ &#123;print $NF&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$PHPFPM_COMMAND</span> <span class="keyword">in</span></span><br><span class="line">  start_since)</span><br><span class="line">  start_since;</span><br><span class="line">  ;;</span><br><span class="line">  accepted_conn)</span><br><span class="line">  accepted_conn;</span><br><span class="line">  ;;</span><br><span class="line">  listen_queue)</span><br><span class="line">  listen_queue;</span><br><span class="line">  ;;</span><br><span class="line">  max_listen_queue)</span><br><span class="line">  max_listen_queue;</span><br><span class="line">  ;;</span><br><span class="line">  listen_queue_len)</span><br><span class="line">  listen_queue_len;</span><br><span class="line">  ;;</span><br><span class="line">  idle_processes)</span><br><span class="line">  idle_processes;</span><br><span class="line">  ;;</span><br><span class="line">  active_processes)</span><br><span class="line">  active_processes;</span><br><span class="line">  ;;</span><br><span class="line">  total_processes)</span><br><span class="line">  total_processes;</span><br><span class="line">  ;;</span><br><span class="line">  max_active_processes)</span><br><span class="line">  max_active_processes;</span><br><span class="line">  ;;</span><br><span class="line">  max_children_reached)</span><br><span class="line">  max_children_reached;</span><br><span class="line">  ;;</span><br><span class="line">  slow_requests)</span><br><span class="line">  slow_requests;</span><br><span class="line">  ;;</span><br><span class="line">  *)</span><br><span class="line">  <span class="built_in">echo</span> $<span class="string">"USAGE:<span class="variable">$0</span> &#123;start_since|accepted_conn|listen_queue|max_listen_queue|listen_queue_len|idle_processes|active_processes|total_processes|max_active_processes|max_children_reached&#125;"</span></span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">将脚本添加执行权</span><br><span class="line"></span><br><span class="line">  scripts]<span class="comment"># chmod +x php_fpm_status.sh </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">执行脚本测试验证是否可以取值</span><br><span class="line"></span><br><span class="line">  scripts]<span class="comment"># sh php_fpm_status.sh max_listen_queue</span></span><br><span class="line">  0</span><br></pre></td></tr></table></figure><p>4.zabbix-agent端文件中定义键值，调用脚本或者命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">进入zabbix-agent定义键值的路径下</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /etc/zabbix/zabbix_agentd.d/</span></span><br><span class="line"></span><br><span class="line">在此处添加取键值的文件</span><br><span class="line"></span><br><span class="line">  zabbix_agentd.d]<span class="comment"># vim php_fpm_status.conf </span></span><br><span class="line">  UserParameter=php_fpm_status[*],/bin/bash /etc/zabbix/scripts/php_fpm_status.sh <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"></span><br><span class="line">重启zabbix-agent</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br><span class="line"></span><br><span class="line">zabbix-agent端过滤是否有php_fpm_status监控项</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># zabbix_agentd -p | grep php_fpm_status</span></span><br><span class="line">  php_fpm_status                                [t|USAGE:/etc/zabbix/scripts/php_fpm_status.sh &#123;start_since|accepted_conn|listen_queue|max_listen_queue|listen_queue_len|idle_processes|active_processes|total_processes|max_active_processes|max_children_reached&#125;]</span><br></pre></td></tr></table></figure></p><p>5.zabbix-server端验证zabbix-agent取值是否可以正常取值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">验证zabbix-server端是否可以正常采取zabbix-agent端的键值</span><br><span class="line"></span><br><span class="line">执行不添加参数提示怎么使用及参数选项</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># zabbix_get -s 172.18.139.71 -k php_fpm_status</span></span><br><span class="line">  USAGE:/etc/zabbix/scripts/php_fpm_status.sh &#123;start_since|accepted_conn|listen_queue|max_listen_queue|listen_queue_len|idle_processes|active_processes|total_processes|max_active_processes|max_children_reached&#125;</span><br><span class="line"></span><br><span class="line">指定验证是否可以正常采取</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># zabbix_get -s 172.18.139.71 -k php_fpm_status[listen_queue]</span></span><br><span class="line">  0</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第三章：zabbix应用服务器监控之php-fpm服务状态&quot;&gt;&lt;a href=&quot;#第三章：zabbix应用服务器监控之php-fpm服务状态&quot; class=&quot;headerlink&quot; title=&quot;第三章：zabbix应用服务器监控之php-fpm服务状态&quot;&gt;&lt;/a&gt;第三章：zabbix应用服务器监控之php-fpm服务状态&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/13/zabbix应用服务监控之php-fpm服务状态/zabbix应用服务器监控之php-fpm服务状态/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>zabbix应用服务器监控之nginx服务状态</title>
    <link href="https://daizhe.net.cn/2019/02/13/zabbix%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E4%B9%8Bnginx%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81/"/>
    <id>https://daizhe.net.cn/2019/02/13/zabbix应用服务监控之nginx服务状态/</id>
    <published>2019-02-13T02:54:22.816Z</published>
    <updated>2019-02-14T11:03:53.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章：zabbix应用服务器监控之nginx服务状态"><a href="#第三章：zabbix应用服务器监控之nginx服务状态" class="headerlink" title="第三章：zabbix应用服务器监控之nginx服务状态"></a>第三章：zabbix应用服务器监控之nginx服务状态</h1><p><img src="/2019/02/13/zabbix应用服务监控之nginx服务状态/标题.gif" alt=""><br><a id="more"></a></p><h2 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h2><ul><li>自定义监控项</li><li>自定义触发器</li><li>自定义报警（邮件|微信）</li><li>自定义图形、聚合图形、幻灯片</li><li>自定义模板（给主机添加）</li></ul><h2 id="服务监控"><a href="#服务监控" class="headerlink" title="服务监控"></a>服务监控</h2><ul><li><p>1.对应的服务本身都具备打开状态页面（服务要有对应的信息展示功能），针对状态页面取值，定义监控项，传递给zabbix-agent</p></li><li><p>2.在zabbixweb添加对应的key和主机，zabbix-server抓取zabbix-agent上的数据</p></li><li><p>nginx</p></li><li>PHP-fpm</li><li>mysql</li><li>tomcat</li><li>redis</li></ul><h2 id="nginx服务状态监控"><a href="#nginx服务状态监控" class="headerlink" title="nginx服务状态监控"></a>nginx服务状态监控</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul><li>1.在nginx配置文件开启Nginx状态显示</li><li>2.编写脚本对nginx状态数据进行采集</li><li>3.在zabbix agent设置用户的自定义参数</li><li>4.重启zabbix-agent服务使配置生效</li><li>5.在zabbix服务端添加item</li><li>6.创建监控图形</li><li>7.创建事件触发器</li><li>8.创建模板以方便后期配置其他主机</li></ul><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>1.zabbix-server端已经安装好</p><p>2.zabbix-agent端安装zabbix-agent和nginx并开启状态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">agent端安装nginx以及zabbix-agent</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/zabbix-agent-3.4.3-1.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># yum install nginx -y</span></span><br><span class="line"></span><br><span class="line">配置zabbix-agent配置文件定义zabbix-server的地址</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">  Server=172.18.139.69  <span class="comment">#zabbix-server端的地址</span></span><br><span class="line">  ~]<span class="comment"># systemctl start zabbix-agent.service </span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  10050 </span><br><span class="line"></span><br><span class="line">nginx开启状态页面</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">  server &#123;</span><br><span class="line">      listen 80;</span><br><span class="line">      ....</span><br><span class="line">     location /status &#123;                </span><br><span class="line">        stub_status;</span><br><span class="line">        access_log off;</span><br><span class="line">        <span class="comment">#allow 允许的主机的地址;   #仅允许此台机器访问此uri</span></span><br><span class="line">        <span class="comment">#deny all;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># nginx -t</span></span><br><span class="line">  ~]<span class="comment"># nginx -s reload</span></span><br><span class="line"></span><br><span class="line">访问指定路径查看nginx状态信息</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># curl 172.18.139.71:80/status</span></span><br><span class="line">  Active connections: 1 </span><br><span class="line">  server accepts handled requests</span><br><span class="line">  12 12 12 </span><br><span class="line">  Reading: 0 Writing: 1 Waiting: 0 </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">补充回顾：</span><br><span class="line">- Active connections: 291 </span><br><span class="line">- server accepts handled requests</span><br><span class="line">- 16630948 16630948 31070465 </span><br><span class="line">- Reading: 6 Writing: 179 Waiting: 106 </span><br><span class="line"></span><br><span class="line">- Active connections: 活动状态的连接数；</span><br><span class="line">- accepts：已经接受的客户端请求的总数；</span><br><span class="line">- handled：已经处理完成的客户端请求的总数；</span><br><span class="line">- requests：客户端发来的总的请求数；</span><br><span class="line">- Reading：处于读取客户端请求报文首部的连接的连接数；</span><br><span class="line">- Writing：处于向客户端发送响应报文过程中的连接数；</span><br><span class="line">- Waiting：处于等待客户端发出请求的空闲连接数；</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">3.zabbix-agent端（nginx）文件中定义监控项，调用脚本或者命令</span><br><span class="line">```bash</span><br><span class="line">创建一个目录作为以后存放zabbix-agent的调用脚本的目录</span><br><span class="line"></span><br><span class="line">创建目录</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># mkdir /etc/zabbix/scripts</span></span><br><span class="line"></span><br><span class="line">在此目录下创建取nginx状态键值的脚本</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /etc/zabbix/scripts/</span></span><br><span class="line">  scripts]<span class="comment"># ls</span></span><br><span class="line">  nginx_status.sh</span><br><span class="line">  scripts]<span class="comment"># cat nginx_status.sh </span></span><br><span class="line">  <span class="comment">############################################</span></span><br><span class="line">  <span class="comment">#$name:nginx_status.sh</span></span><br><span class="line">  <span class="comment">#author:daizhe</span></span><br><span class="line">  <span class="comment">#Create Date:2019-02-13</span></span><br><span class="line">  <span class="comment">############################################</span></span><br><span class="line">  NGINX_PORT=80   <span class="comment">#端口根据nginx的端口进行修改</span></span><br><span class="line">  NGINX_COMMAND=<span class="variable">$1</span></span><br><span class="line">  <span class="function"><span class="title">nginx_active</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status/"</span> |awk <span class="string">'/Active/ &#123;print $NF&#125;'</span>   <span class="comment">#/status/路径根据 nginx配置文件定义状态页面的路径进行修改</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">nginx_reading</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status/"</span> |awk <span class="string">'/Reading/ &#123;print $2&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">nginx_writing</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status/"</span> |awk <span class="string">'/Writing/ &#123;print $4&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line">  <span class="function"><span class="title">nginx_waiting</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status/"</span> |awk <span class="string">'/Waiting/ &#123;print $6&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line">  <span class="function"><span class="title">nginx_accepts</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status/"</span> |awk <span class="string">'NR==3 &#123;print $1&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line">  <span class="function"><span class="title">nginx_handled</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status/"</span> |awk <span class="string">'NR==3 &#123;print $2&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line">  <span class="function"><span class="title">nginx_requests</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/status/"</span> |awk <span class="string">'NR==3 &#123;print $3&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$NGINX_COMMAND</span> <span class="keyword">in</span></span><br><span class="line">  active)</span><br><span class="line">    nginx_active;</span><br><span class="line">    ;;</span><br><span class="line">  reading)</span><br><span class="line">    nginx_reading;</span><br><span class="line">    ;;</span><br><span class="line">  writing)</span><br><span class="line">    nginx_writing;</span><br><span class="line">    ;;</span><br><span class="line">  waiting)</span><br><span class="line">    nginx_waiting;</span><br><span class="line">    ;;</span><br><span class="line">  accepts)</span><br><span class="line">    nginx_accepts;</span><br><span class="line">    ;;</span><br><span class="line">  handled)</span><br><span class="line">    nginx_handled;</span><br><span class="line">    ;;</span><br><span class="line">  requests)</span><br><span class="line">    nginx_requests;</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> $<span class="string">"USAGE:<span class="variable">$0</span> &#123;active|reading|writing|waiting|accepts|handled|requests&#125;"</span></span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">将脚本添加执行权</span><br><span class="line"></span><br><span class="line">  scripts]<span class="comment"># chmod +x nginx_status.sh </span></span><br><span class="line"></span><br><span class="line">执行脚本测试验证是否可以取值（范例为：活动状态连接数）</span><br><span class="line"></span><br><span class="line">  scripts]<span class="comment"># sh nginx_status.sh active</span></span><br><span class="line">  1</span><br></pre></td></tr></table></figure><p>4.zabbix-agent端文件中定义键值，调用脚本或者命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">进入zabbix-agent定义键值的路径下</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># cd /etc/zabbix/zabbix_agentd.d/</span></span><br><span class="line"></span><br><span class="line">在此处添加取键值的文件</span><br><span class="line"></span><br><span class="line">  zabbix_agentd.d]<span class="comment"># vim nginx_status.conf</span></span><br><span class="line">  UserParameter=nginx_status[*],/bin/bash /etc/zabbix/scripts/nginx_status.sh <span class="string">"<span class="variable">$1</span>"</span>    <span class="comment">#此路径根据定义的取值脚本路径填写</span></span><br><span class="line"></span><br><span class="line">重启zabbix-agent</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br><span class="line"></span><br><span class="line">zabbix-agent端过滤是否有nginx_status监控项</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># zabbix_agentd -p | grep nginx_status</span></span><br><span class="line">  nginx_status     [t|USAGE:/etc/zabbix/scripts/nginx_status.sh &#123;active|reading|writing|waiting|accepts|handled|requests&#125;]</span><br></pre></td></tr></table></figure></p><p>5.zabbix-server端验证zabbix-agent取值是否可以正常取值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">验证zabbix-server端是否可以正常采取zabbix-agent端的键值</span><br><span class="line"></span><br><span class="line">执行不添加参数提示怎么使用及参数选项</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># zabbix_get -s 172.18.139.71 -k nginx_status</span></span><br><span class="line">  USAGE:/etc/zabbix/scripts/nginx_status.sh &#123;active|reading|writing|waiting|accepts|handled|requests&#125;</span><br><span class="line"></span><br><span class="line">指定验证是否可以正常采取</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># zabbix_get -s 172.18.139.71 -k nginx_status[active]</span></span><br><span class="line">  1</span><br><span class="line">  ~]<span class="comment"># zabbix_get -s 172.18.139.71 -k nginx_status[handled]</span></span><br><span class="line">  39</span><br></pre></td></tr></table></figure></p><p>6.zabbix-web界面添加监控的zabbix-agent客户端主机<br><img src="/2019/02/13/zabbix应用服务监控之nginx服务状态/1.png" alt=""></p><p>7.创建新的应用集，将监控项关联至应用集（将所有的监控项添加到应用集中）<br><img src="/2019/02/13/zabbix应用服务监控之nginx服务状态/2.png" alt=""><br><img src="/2019/02/13/zabbix应用服务监控之nginx服务状态/3.png" alt=""></p><p>8.应用监控项<br><img src="/2019/02/13/zabbix应用服务监控之nginx服务状态/4.png" alt=""><br><img src="/2019/02/13/zabbix应用服务监控之nginx服务状态/5.png" alt=""></p><hr><p>1.添加监听nginx服务器是否存活（zabbix-agent）<br><img src="/2019/02/13/zabbix应用服务监控之nginx服务状态/6.png" alt=""></p><p>2.查看监控状态<br><img src="/2019/02/13/zabbix应用服务监控之nginx服务状态/7.png" alt=""></p><p>3.可以定义触发器进行监控</p><h2 id="实战经验总结："><a href="#实战经验总结：" class="headerlink" title="实战经验总结："></a>实战经验总结：</h2><ul><li>1.先查看文档中有没有对应的脚本和xml模板</li><li>2.在服务端导入模板，查看对应的监控项名称</li><li>3.测试脚本是否能取值，并存放置于/etc/zabbix/scripts目录下，一定要增加执行权限</li><li>4.编写xx.conf文件，里面主要存放的是如何定义监控项</li><li>5.最后重启zabbix-agent</li><li>6.使用服务端zabbix-get 获取 zabbix-agent对应的监控项的数据</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第三章：zabbix应用服务器监控之nginx服务状态&quot;&gt;&lt;a href=&quot;#第三章：zabbix应用服务器监控之nginx服务状态&quot; class=&quot;headerlink&quot; title=&quot;第三章：zabbix应用服务器监控之nginx服务状态&quot;&gt;&lt;/a&gt;第三章：zabbix应用服务器监控之nginx服务状态&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/13/zabbix应用服务监控之nginx服务状态/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>zabbix自定义内容报警图形及模板</title>
    <link href="https://daizhe.net.cn/2019/02/12/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E5%86%85%E5%AE%B9%E6%8A%A5%E8%AD%A6%E5%9B%BE%E5%BD%A2%E5%8F%8A%E6%A8%A1%E6%9D%BF/"/>
    <id>https://daizhe.net.cn/2019/02/12/zabbix自定义内容报警图形及模板/</id>
    <published>2019-02-12T04:49:18.535Z</published>
    <updated>2019-02-15T08:33:44.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：zabbix自定义内容报警图形及模板"><a href="#第二章：zabbix自定义内容报警图形及模板" class="headerlink" title="第二章：zabbix自定义内容报警图形及模板"></a>第二章：zabbix自定义内容报警图形及模板</h1><p><img src="/2019/02/12/zabbix自定义内容报警图形及模板/标题.gif" alt=""><br><a id="more"></a></p><h2 id="报警内容实战"><a href="#报警内容实战" class="headerlink" title="报警内容实战"></a>报警内容实战</h2><ul><li>告警消息内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">报警主机 ：&#123;HOST.NAME1&#125;</span><br><span class="line">报警服务 ：&#123;ITEM.NAME1&#125;</span><br><span class="line">报警KEY1  : &#123;ITEM.KEY1&#125;: &#123;ITEM.VALUE1&#125;    <span class="comment">#依据自己报警项数量进行定义</span></span><br><span class="line">报警KEY2  : &#123;ITEM.KEY2&#125;: &#123;ITEM.VALUE2&#125;</span><br><span class="line">严重级别 ： &#123;TRIGGER.SEVERITY&#125;</span><br></pre></td></tr></table></figure><ul><li>恢复消息内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">恢复主机 ：&#123;HOST.NAME1&#125;</span><br><span class="line">恢复服务 ：&#123;ITEM.NAME1&#125;</span><br><span class="line">恢复KEY1 : &#123;ITEM.KEY1&#125;: &#123;ITEM.VALUE1&#125;   <span class="comment">#依据自己报警项数量进行定义</span></span><br><span class="line">恢复KEY2 : &#123;ITEM.KEY2&#125;: &#123;ITEM.VALUE2&#125;</span><br></pre></td></tr></table></figure><p>故障报警<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/1.png" alt=""></p><p>恢复报警操作<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/2.png" alt=""></p><hr><h2 id="自定义图形实战"><a href="#自定义图形实战" class="headerlink" title="自定义图形实战"></a>自定义图形实战</h2><p>1.自定义图形监控项（应用集–&gt;监控项–&gt;基于监控项创建触发器–&gt;基于监控项创建图形）<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/3.png" alt=""></p><p>2.设置图形名称及大小<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/4.png" alt=""></p><p>3.预览查看<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/5.png" alt=""></p><p>4.保存设置的图形监控查看<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/6.png" alt=""></p><hr><h2 id="自定义聚合图形"><a href="#自定义聚合图形" class="headerlink" title="自定义聚合图形"></a>自定义聚合图形</h2><ul><li>聚合图形–&gt;将多张图整合起来，合并为一张图</li></ul><p>1.常见聚合图形<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/7.png" alt=""><br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/8.png" alt=""></p><p>2.在聚合图形中构造函数<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/9.png" alt=""><br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/10.png" alt=""></p><p>3.成品<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/11.png" alt=""></p><hr><h2 id="自定义聚合图形幻灯片"><a href="#自定义聚合图形幻灯片" class="headerlink" title="自定义聚合图形幻灯片"></a>自定义聚合图形幻灯片</h2><p>1.创建幻灯片<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/12.png" alt=""></p><p>2.将监控的聚合图形添加到幻灯片<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/13.png" alt=""></p><p>3.查看幻灯片/聚合图形<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/14.png" alt=""></p><hr><h2 id="自定义图形Graphtree"><a href="#自定义图形Graphtree" class="headerlink" title="自定义图形Graphtree"></a>自定义图形Graphtree</h2><ul><li>功能<ul><li>1、集中展示所有分组设备</li><li>2、集中展示一个分组图像</li><li>3、集中展示一个设备图像</li><li>4、展示设备下的Application</li><li>5、展示每个Application下的图像</li><li>6、展示每个Application下的日志</li><li>7、对原生无图的监控项进行绘图</li></ul></li><li>注意问题:<ul><li>在组和主机级别，默认只显示系统配置的graph<br>点击application后，会显示3种数据：</li><li>1.系统默认有graph的；</li><li>2.系统默认无graph的；</li><li>3.日志类的</li></ul></li><li>githun解释文档及手册：<a href="https://github.com/OneOaaS/graphtrees" target="_blank" rel="noopener">https://github.com/OneOaaS/graphtrees</a></li></ul><p>安装:如果您已经安装了zabbix web RPM repo  ＃从未使用过3.0.1的补丁<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">zabbix-server端</span><br><span class="line"></span><br><span class="line">    安装Graphtree</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># cd /usr/share/zabbix</span></span><br><span class="line">    zabbix]<span class="comment"># wget https://raw.githubusercontent.com/OneOaaS/graphtrees/master/graphtree3.0.4.patch</span></span><br><span class="line">    ~]<span class="comment"># yum install -y patch</span></span><br><span class="line"></span><br><span class="line">    导入补丁包</span><br><span class="line"></span><br><span class="line">    zabbix]<span class="comment"># patch  -Np0 &lt;graphtree3.0.4.patch </span></span><br><span class="line">    zabbix]<span class="comment"># chown -R apache.apache oneoaas</span></span><br><span class="line"></span><br><span class="line">    修改apache配置文件</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># vim /etc/httpd/conf.d/zabbix.conf</span></span><br><span class="line">    最后一行添加</span><br><span class="line">    Alias /oneoaas /usr/share/zabbix/oneoaas</span><br><span class="line">    Alias /zabbix /user/share/zabbix</span><br><span class="line"></span><br><span class="line">    重启apache</span><br><span class="line">    ~]<span class="comment"># systemctl restart httpd</span></span><br></pre></td></tr></table></figure></p><p>刷新zabbix-web查看</p><p><img src="/2019/02/12/zabbix自定义内容报警图形及模板/15.png" alt=""><br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/16.png" alt=""></p><hr><h2 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h2><ul><li>1.模板是支持导入与导出（模板里面的监控项是由脚本支撑，所有脚本需一起打包）</li><li>2.zabbix-agent端.conf的文件中定义监控项及对应的键值，调用脚本或者命令</li><li><p>2.如果希望将之前定义的监控项做成模板，找到监控项–&gt;全选–&gt;复制</p></li><li><p>自定义模板的好处：可以将监控项重复的使用</p></li></ul><p>1.创建模板<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/17.png" alt=""><br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/18.png" alt=""></p><p>2.将原模板的监控项（键值）复制到新的模板中<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/19.png" alt=""><br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/20.png" alt=""></p><p>3.查看自定义的模板中是否存在复制的监控项<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/21.png" alt=""></p><h3 id="将定义的模板关联到其他主机上（这里将此模板关联到zabbix-server主机上，此时server端扮演zabbix-sgent身份）"><a href="#将定义的模板关联到其他主机上（这里将此模板关联到zabbix-server主机上，此时server端扮演zabbix-sgent身份）" class="headerlink" title="将定义的模板关联到其他主机上（这里将此模板关联到zabbix-server主机上，此时server端扮演zabbix-sgent身份）"></a>将定义的模板关联到其他主机上（这里将此模板关联到zabbix-server主机上，此时server端扮演zabbix-sgent身份）</h3><p>1.被关联模板的主机必须要定义监控项和对应的取值脚本<br>1.1<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">被监控的主机，安装zabbix客户端：zabbix-agent</span><br><span class="line">    ~]<span class="comment"># rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/zabbix-agent-3.4.3-1.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line">配置客户端（设置允许zabbix_server端的地址，声明此客户端允许那台服务端进行监控）</span><br><span class="line">    ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">    97行（填写server端的ip/主机名）</span><br><span class="line">    Server=192.168.52.202</span><br><span class="line"></span><br><span class="line">启动zabbix-agent客户端</span><br><span class="line">    ~]<span class="comment"># systemctl start zabbix-agent</span></span><br><span class="line">    ~]<span class="comment"># systemctl enable zabbix-agent</span></span><br><span class="line"></span><br><span class="line">server端平滑重新加载</span><br><span class="line">    ~]<span class="comment"># zabbix_server -R config_cache_reload</span></span><br></pre></td></tr></table></figure></p><p>1.2查看想要被模板连接的主机（agent端）是否被server端监控<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/22.png" alt=""></p><p>2.将原模板添加到应用集中<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/25.png" alt=""><br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/26.png" alt=""></p><p>2.被关联的主机上导入模板<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/23.png" alt=""><br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/24.png" alt=""></p><p>3.zabbix-server端验证是否添加应用集，应用集中是有监控项键值（但是此时出现红色感叹号！说明server端获取不到agent的键值）<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/27.png" alt=""></p><p>4.在agent端设置对应的应用集（将原agent端定义应用集文件scp到新的agent端）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># cat /etc/zabbix/zabbix_agentd.d/iostart.conf </span></span><br><span class="line">UserParameter=IO,iostat | awk <span class="string">'/^sda/&#123;print $2&#125;'</span></span><br><span class="line">UserParameter=TCP_STATUS_[*],netstat -an | grep -c <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">UserParameter=Mem_pre,free -m | awk <span class="string">'/Mem/&#123;print $NF*100/$2&#125;'</span></span><br><span class="line">UserParameter=SWAP_pre,free -m | awk <span class="string">'/Swap/&#123;print $3*100/$2&#125;'</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># systemctl restart zabbix-agent.service</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新不支持的key默认刷新时间间隔为10m</span></span><br><span class="line"><span class="comment">#如何修改</span></span><br><span class="line"><span class="comment">#管理--&gt;一般--&gt;其他--&gt;修改刷新不支持的项目时间</span></span><br></pre></td></tr></table></figure><p>5.查看模板是否导入成功<br><img src="/2019/02/12/zabbix自定义内容报警图形及模板/28.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章：zabbix自定义内容报警图形及模板&quot;&gt;&lt;a href=&quot;#第二章：zabbix自定义内容报警图形及模板&quot; class=&quot;headerlink&quot; title=&quot;第二章：zabbix自定义内容报警图形及模板&quot;&gt;&lt;/a&gt;第二章：zabbix自定义内容报警图形及模板&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/12/zabbix自定义内容报警图形及模板/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>zabbix自定义监控深入之tcp连接状态监控</title>
    <link href="https://daizhe.net.cn/2019/02/11/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E6%B7%B1%E5%85%A5%E4%B9%8Btcp%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E5%AE%9E%E6%88%98/"/>
    <id>https://daizhe.net.cn/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/</id>
    <published>2019-02-11T09:15:56.788Z</published>
    <updated>2019-02-13T12:58:05.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：zabbix自定义监控深入之tcp连接状态监控"><a href="#第二章：zabbix自定义监控深入之tcp连接状态监控" class="headerlink" title="第二章：zabbix自定义监控深入之tcp连接状态监控"></a>第二章：zabbix自定义监控深入之tcp连接状态监控</h1><p><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/标题.gif" alt=""><br><a id="more"></a></p><h2 id="列表详解实战"><a href="#列表详解实战" class="headerlink" title="列表详解实战"></a>列表详解实战</h2><h3 id="一下实现自定义一个监控项"><a href="#一下实现自定义一个监控项" class="headerlink" title="一下实现自定义一个监控项"></a><code>一下实现自定义一个监控项</code></h3><p>自定义监控项-监控tcp连接ESTABLISHED状态<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/1.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/2.png" alt=""></p><p>server端自定义的监控agent端的监控项的键值默认是不存在的所以要在agent以脚本的形式定义在响应的位置中，这样server端才可以取出agent端对应的键值<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/3.png" alt=""></p><p>查看定义的应用集<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/4.png" alt=""></p><p>查看自定义的监控项<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/5.png" alt=""></p><hr><h2 id="tcp11种状态实战"><a href="#tcp11种状态实战" class="headerlink" title="tcp11种状态实战"></a>tcp11种状态实战</h2><h3 id="实现定义多个监控项即tcp的多种连接状态"><a href="#实现定义多个监控项即tcp的多种连接状态" class="headerlink" title="实现定义多个监控项即tcp的多种连接状态"></a><code>实现定义多个监控项即tcp的多种连接状态</code></h3><p>1.可以在agent定义的脚本的文件中使用传递参数的方式实现</p><p><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/6.png" alt=""></p><p>2.server端验证键值取值方式</p><p><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/7.png" alt=""></p><p>3.zabbix-web界面也修改为监控多中tcp的连接的状态</p><p><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/8.png" alt=""></p><p>4.修改完成后显示不支持的key<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/9.png" alt=""></p><p>5.快速发现新的键值-缩短发现时长<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/10.png" alt=""></p><p>6.已经实现监控多个键值监控项<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/11.png" alt=""></p><p>7.可以点击克隆添加其他tcp连接状态<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/zzabbix自定义监控深入之tcp连接状态实战/12.png" alt=""></p><p>8.在server-web界面将创建好的应用集中的监控项添加到监控的agent端<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/13.png" alt=""></p><hr><h3 id="tcp的十一种状态详解"><a href="#tcp的十一种状态详解" class="headerlink" title="tcp的十一种状态详解"></a>tcp的十一种状态详解</h3><ul><li>LISTEN - 侦听来自远方TCP端口的连接请求；</li><li>SYN-SENT -在发送连接请求后等待匹配的连接请求；</li><li>SYN-RECEIVED - 在收到和发送一个连接请求后等待对连接请求的确认；</li><li>ESTABLISHED- 代表一个打开的连接，数据可以传送给用户；</li><li>FIN-WAIT-1 - 等待远程TCP的连接中断请求，或先前的连接中断请求的确认；</li><li>FIN-WAIT-2 - 从远程TCP等待连接中断请求；</li><li>CLOSE-WAIT - 等待从本地用户发来的连接中断请求；</li><li>CLOSING -等待远程TCP对连接中断的确认；</li><li>LAST-ACK - 等待原来发向远程TCP的连接中断请求的确认；</li><li>TIME-WAIT -等待足够的时间以确保远程TCP接收到连接中断请求的确认；</li><li><p>CLOSED - 没有任何连接状态；</p></li><li><p>客户端独有的：（1）SYN_SENT （2）FIN_WAIT1 （3）FIN_WAIT2 （4）CLOSING （5）TIME_WAIT 。</p></li><li>服务端独有的：（1）LISTEN （2）SYN_RCVD （3）CLOSE_WAIT （4）LAST_ACK 。<br>  共有的：（1）CLOSED （2）ESTABLISHED 。</li></ul><h2 id="值映射实战"><a href="#值映射实战" class="headerlink" title="值映射实战"></a>值映射实战</h2><p>1.定义一个检测agent端ssh22 号端口是否开启的监控项（演示监听tcp的22端口是否处于监听状态，使用类型是字符类型–&gt;使用的Server state值映射）<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/14.png" alt=""></p><p>2.已经添加在此tcp_status应用集<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/15.png" alt=""></p><p>3.添加触发器<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/16.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/17.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/18.png" alt=""></p><p>4.添加报警媒介（如果忘记见第一章节zabbix入门/邮件报警）<br><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/19.png" alt=""></p><h4 id="值映射解释"><a href="#值映射解释" class="headerlink" title="值映射解释"></a>值映射解释</h4><p><img src="/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/20.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章：zabbix自定义监控深入之tcp连接状态监控&quot;&gt;&lt;a href=&quot;#第二章：zabbix自定义监控深入之tcp连接状态监控&quot; class=&quot;headerlink&quot; title=&quot;第二章：zabbix自定义监控深入之tcp连接状态监控&quot;&gt;&lt;/a&gt;第二章：zabbix自定义监控深入之tcp连接状态监控&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/11/zabbix自定义监控深入之tcp连接状态实战/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>zabbix自定义监控深入之内存百分比实战</title>
    <link href="https://daizhe.net.cn/2019/02/11/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%86%85%E5%AD%98%E7%99%BE%E5%88%86%E6%AF%94%E5%AE%9E%E6%88%98/"/>
    <id>https://daizhe.net.cn/2019/02/11/zabbix自定义监控深入之内存百分比实战/</id>
    <published>2019-02-11T09:15:32.734Z</published>
    <updated>2019-02-13T12:58:14.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：zabbix自定义监控深入之内存百分比实战"><a href="#第二章：zabbix自定义监控深入之内存百分比实战" class="headerlink" title="第二章：zabbix自定义监控深入之内存百分比实战"></a>第二章：zabbix自定义监控深入之内存百分比实战</h1><p><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/标题.gif" alt=""><br><a id="more"></a></p><h2 id="取内存的百分比"><a href="#取内存的百分比" class="headerlink" title="取内存的百分比"></a>取内存的百分比</h2><ul><li>取出内存的可用的MB大小 / 总内存的大小 = 实际可用的百分比</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> ~]<span class="comment"># free -m  （总内存大小）                                              （可用内存的大小）</span></span><br><span class="line">                total        used        free      shared  buff/cache     available</span><br><span class="line">Mem:             1821         548         303           8         970        1029</span><br><span class="line">Swap:            2047           3        2044</span><br><span class="line"></span><br><span class="line">命令行计算实际可用内存的百分比  </span><br><span class="line">  ~]<span class="comment"># echo 1029*100/1821 | bc</span></span><br><span class="line">  56    <span class="comment">#百分之56</span></span><br><span class="line"></span><br><span class="line">~]<span class="comment"># free -m | awk '/Mem/&#123;print $NF*100/$2&#125;'</span></span><br><span class="line">56.5074</span><br></pre></td></tr></table></figure><p>1.客户端编写监控键值脚本（zabbix-agent）<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/1.png" alt=""></p><p>2.服务端测试查看是否可以通过定义的键值取值<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/2.png" alt=""></p><p>3.zabbix-web端创建监控项<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/3.png" alt=""></p><p>4.查看监控的实际的可用的内存百分比<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/4.png" alt=""></p><p>5.压测zabbix-agent端查看图形是否有变化<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/5.png" alt=""></p><h2 id="图形展示乱码处理"><a href="#图形展示乱码处理" class="headerlink" title="图形展示乱码处理"></a>图形展示乱码处理</h2><p>6.在zabbix-server服务端解决图像化乱码<br>默认的字体文件实际上是软连接<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/6.png" alt=""></p><p>7.zabbix-server将原字体文件备份<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/7.png" alt=""></p><p>8.将windows的字体复制导入到zabbix-server对应的字体目录中<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/8.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/9.png" alt=""></p><p>9.刷新zabbix-web查看是否更改成功<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/10.png" alt=""></p><h3 id="第二种解决字体乱码的方式"><a href="#第二种解决字体乱码的方式" class="headerlink" title="第二种解决字体乱码的方式"></a>第二种解决字体乱码的方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~] <span class="comment"># yum install wqy-microhei-fonts</span></span><br><span class="line">~] <span class="comment"># cp /usr/share/fonts/wqy-microhei.ttc /usr/share/fonts/dejavu/DejaVuSans.ttf</span></span><br></pre></td></tr></table></figure><h2 id="触发器深入实战"><a href="#触发器深入实战" class="headerlink" title="触发器深入实战"></a>触发器深入实战</h2><ul><li>自定义单条件触发器，设置内存低于30%进行报警</li></ul><p>10.定义触发器当可用内存低于阈值则报警  </p><p><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/11.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/12.png" alt=""></p><p>11.查看是否添加成功触发器<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/13.png" alt=""></p><p>12.压低zabbix-agent内存，检测报警邮件<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/14.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/15.png" alt=""></p><p>13.调试报警邮箱的动作使用系统内置的变量使得发送的邮箱内容更加详细<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/16.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/17.png" alt=""></p><p><code>自定义报警信息和恢复信息</code><br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/25.png" alt=""></p><p>14.重新压测查看发送的邮箱信息内容<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/18.png" alt=""></p><hr><h2 id="实现既监控内存的使用的情况又监控swap的剩余的使用的内存-多条触发器规则"><a href="#实现既监控内存的使用的情况又监控swap的剩余的使用的内存-多条触发器规则" class="headerlink" title="实现既监控内存的使用的情况又监控swap的剩余的使用的内存(多条触发器规则)"></a>实现既监控内存的使用的情况又监控swap的剩余的使用的内存(多条触发器规则)</h2><ul><li><code>内存低于百分之10加上，swap使用超过百分之5，在此进行监控报警（更精准）</code></li></ul><p>1.zabbix-agent客户端编写监控键值脚本<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/19.png" alt=""></p><p>2.zabbix-server服务端测试查看是否可以通过定义的键值取值<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/20.png" alt=""></p><p>3.在zabbix-web端创建监控项<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/21.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/22.png" alt=""></p><p>4.在zabbix-web端创建多条件的触发器<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/23.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/24.png" alt=""></p><p>5.已经定义多条件的触发器（满足内存低于30%规则，并且同时满足swap使用率超过5%则报警）<br><img src="/2019/02/11/zabbix自定义监控深入之内存百分比实战/26.png" alt=""></p><h2 id="常用的触发器表达式，常用的函数"><a href="#常用的触发器表达式，常用的函数" class="headerlink" title="常用的触发器表达式，常用的函数"></a>常用的触发器表达式，常用的函数</h2><ul><li>and 并且</li><li>or  或者</li><li>last() 最新的值</li><li>avg()  解决波动报警，流量在多少分钟平均达到多少报警</li><li>nodata() 收不到数据进行报警</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章：zabbix自定义监控深入之内存百分比实战&quot;&gt;&lt;a href=&quot;#第二章：zabbix自定义监控深入之内存百分比实战&quot; class=&quot;headerlink&quot; title=&quot;第二章：zabbix自定义监控深入之内存百分比实战&quot;&gt;&lt;/a&gt;第二章：zabbix自定义监控深入之内存百分比实战&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/11/zabbix自定义监控深入之内存百分比实战/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>zabbix自定义监控深入之系统内置监控项</title>
    <link href="https://daizhe.net.cn/2019/02/11/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E6%B7%B1%E5%85%A5%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%86%85%E7%BD%AE%E7%9B%91%E6%8E%A7%E9%A1%B9/"/>
    <id>https://daizhe.net.cn/2019/02/11/zabbix自定义监控深入之系统内置监控项/</id>
    <published>2019-02-11T03:06:37.560Z</published>
    <updated>2019-02-13T12:58:24.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：zabbix自定义监控深入之系统内置监控项"><a href="#第二章：zabbix自定义监控深入之系统内置监控项" class="headerlink" title="第二章：zabbix自定义监控深入之系统内置监控项"></a>第二章：zabbix自定义监控深入之系统内置监控项</h1><p><img src="/2019/02/11/zabbix自定义监控深入之系统内置监控项/标题.gif" alt=""><br><a id="more"></a></p><ul><li>1.所有的主机必须统一监控项<ul><li>nginx.conf,tomcat.conf</li></ul></li><li>2.将监控项进行分类，然后配置不同模板<ul><li>手动一个个的当以监控项–&gt;加入nginx模板</li></ul></li><li>3.不同的主机引用不同模板<ul><li>nginx这台主机–&gt;关联–&gt;nginx模板</li></ul></li></ul><hr><p>系统自带的监控项的意义（zabbix客户端 被动模式）<br><img src="/2019/02/11/zabbix自定义监控深入之系统内置监控项/1.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之系统内置监控项/2.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之系统内置监控项/3.png" alt=""><br><img src="/2019/02/11/zabbix自定义监控深入之系统内置监控项/4.png" alt=""></p><hr><p>如果查看此监控项对用的agent值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">可以在zabbix-server端查看agent键值</span><br><span class="line"></span><br><span class="line">1.重启agent客户端，验证是否已经添加到监控项</span><br><span class="line">    ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br><span class="line">    ~]<span class="comment"># zabbix_agentd -p | grep IO</span></span><br><span class="line">        IO       [t|2.53]       <span class="comment">#如果此处出现IO       [t| IO commond not found] 表示这个iostat命令未安装</span></span><br><span class="line"></span><br><span class="line">2.zabbix-server验证zabbix-agent是否有对应的监控项</span><br><span class="line">    ~]<span class="comment"># yum install zabbix-get -y</span></span><br><span class="line">    zabbix-get</span><br><span class="line">        -s 指定agent ip地址</span><br><span class="line">        -k 指定定义在agent监控项的名称</span><br><span class="line">        -p 指定agent 端口 ，默认为10050</span><br><span class="line">    ~]<span class="comment"># zabbix_get -s 172.20.139.70 -k IO</span></span><br><span class="line">        2.25</span><br></pre></td></tr></table></figure></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">系统自带监控项是有些是支持传递参数的</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># zabbix_get -s 172.20.139.70 -k 'net.tcp.port[&lt;ip&gt;,port]</span></span><br><span class="line">~]<span class="comment"># zabbix_get -s 172.20.139.70 -k 'net.tcp.port[&lt;172.20.139.70&gt;,22]'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章：zabbix自定义监控深入之系统内置监控项&quot;&gt;&lt;a href=&quot;#第二章：zabbix自定义监控深入之系统内置监控项&quot; class=&quot;headerlink&quot; title=&quot;第二章：zabbix自定义监控深入之系统内置监控项&quot;&gt;&lt;/a&gt;第二章：zabbix自定义监控深入之系统内置监控项&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/11/zabbix自定义监控深入之系统内置监控项/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>zabbix自定义监控项之自定义微信报警</title>
    <link href="https://daizhe.net.cn/2019/02/10/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BE%AE%E4%BF%A1%E6%8A%A5%E8%AD%A6/"/>
    <id>https://daizhe.net.cn/2019/02/10/zabbix自定义监控之自定义微信报警/</id>
    <published>2019-02-10T12:30:33.873Z</published>
    <updated>2019-02-13T12:58:33.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：zabbix自定义监控之自定义微信报警"><a href="#第二章：zabbix自定义监控之自定义微信报警" class="headerlink" title="第二章：zabbix自定义监控之自定义微信报警"></a>第二章：zabbix自定义监控之自定义微信报警</h1><p><img src="/2019/02/10/zabbix自定义监控之自定义微信报警/标题.gif" alt=""><br><a id="more"></a></p><ul><li>企业微信注册</li><li>官方站点：<a href="https://work.weixin.qq.com" target="_blank" rel="noopener">https://work.weixin.qq.com</a></li></ul><ul><li><p>实现企业微信报警</p></li><li><p>1.创建媒体介质类型–&gt;脚本–&gt;写什么内容–&gt;脚本放在哪儿</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">脚本的放置位置在zabbixx-server的配置文件中有定义</span><br><span class="line">    ~]<span class="comment"># vim /etc/zabbix/zabbix_server.conf </span></span><br><span class="line">    516行</span><br><span class="line">    <span class="comment">#定义将脚本放置在此文件中</span></span><br><span class="line">    AlertScriptsPath=/usr/lib/zabbix/alertscripts</span><br></pre></td></tr></table></figure><ul><li><p>weixin.py程序内容 </p><ul><li>1.将此文件配置完成后放置在/usr/lib/zabbix/alertscripts 路径下并添加+x 执行权</li><li>2.执行python脚本需要安装 <ul><li>yum install python-pip</li><li>pip install requests      #python 扩展模块</li></ul></li><li>3.执行脚本./weixin.py weixinID 发送的信息，如果企业微信收到发送的信息，则代表测试成功，成功后会生成一个日志信息/tmp/weixin.log ，需要将此日志文件的所有者和所属组修改为zabbix用户</li></ul></li></ul><p><img src="/2019/02/10/zabbix自定义监控之自定义微信报警/6.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="comment"># Create time 2016-10-08</span></span><br><span class="line"><span class="comment">#Auth chenpeng</span></span><br><span class="line">import urllib2</span><br><span class="line">import json</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">class WebChat(object):</span><br><span class="line">def __init__(self,CropID,Secret):</span><br><span class="line">self.CropID = CropID</span><br><span class="line">self.Secret = Secret</span><br><span class="line">def Get_Token(self,info):</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">:param info: 存储执行结果和执行程序状态码code （0代表执行成功，非零表示不成功）</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">self.info = info</span><br><span class="line">gurl = <span class="string">"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=%s&amp;corpsecret=%s"</span> % (self.CropID,self.Secret)</span><br><span class="line">try:</span><br><span class="line"><span class="comment">#通过Get方式获取token</span></span><br><span class="line">req = urllib2.Request(gurl)</span><br><span class="line">response = urllib2.urlopen(req)</span><br><span class="line">g_result = json.loads(response.read(),<span class="string">"UTF-8"</span>)</span><br><span class="line"><span class="keyword">if</span> g_result .has_key(<span class="string">'access_token'</span>):</span><br><span class="line">self.info[<span class="string">'result'</span>]= g_result [<span class="string">'access_token'</span>]</span><br><span class="line">self.info[<span class="string">'code'</span>] = 0</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.info[<span class="string">'result'</span>] = g_result</span><br><span class="line">self.info[<span class="string">'code'</span>] = 1</span><br><span class="line">except Exception,e:</span><br><span class="line">self.info[<span class="string">'code'</span>] = 1</span><br><span class="line">self.info[<span class="string">'result'</span>] = e</span><br><span class="line">def Send_Msg(self,touser,toparty,agentid,access_token,content,info,*args,**kwargs):</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">发送信息到微信</span></span><br><span class="line"><span class="string">:param touser: 部门成员id，zabbix中定义的微信接收者,</span></span><br><span class="line"><span class="string">成员ID列表（消息接收者，多个接收者用‘|'</span>分隔，最多支持1000个）。</span><br><span class="line">特殊情况：指定为@all，则向关注该企业应用的全部成员发送</span><br><span class="line">:param toparty: 部门id，定义了范围，组内成员都可接收到消息,</span><br><span class="line">部门ID列表，多个接收者用‘|<span class="string">'分隔，最多支持100个。当touser为@all时忽略本参数</span></span><br><span class="line"><span class="string">:param agentid: 企业应用的id，整型。可在应用的设置页面查看</span></span><br><span class="line"><span class="string">:param access_token: 根据CropID,Secret获取的访问token值</span></span><br><span class="line"><span class="string">:param content: 滤出zabbix传递的第三个参数,</span></span><br><span class="line"><span class="string">表示发送微信消息的内容消息内容，最长不超过2048个字节，</span></span><br><span class="line"><span class="string">注意：主页型应用推送的文本消息在微信端最多只显示20个字（包含中英文）</span></span><br><span class="line"><span class="string">:param info: 返回执行结果信息&#123;'</span>result<span class="string">':None,'</span>code<span class="string">':None&#125;;'</span>code<span class="string">':0或者非零 ;0表示成功 非零表示失败</span></span><br><span class="line"><span class="string">:param args:</span></span><br><span class="line"><span class="string">:param kwargs:</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">self.touser = touser</span><br><span class="line">self.toparty = toparty</span><br><span class="line">self.agentid = agentid</span><br><span class="line">self.conntent = content</span><br><span class="line">self.access_token = access_token</span><br><span class="line">self.info = info</span><br><span class="line">purl = <span class="string">"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s"</span> % (access_token)</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">"touser"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"toparty"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"totag"</span>: <span class="string">""</span>, <span class="comment">#标签ID列表，多个接收者用‘|'分隔，最多支持100个。当touser为@all时忽略本参数,非必须</span></span><br><span class="line"><span class="string">"msgtype"</span>: <span class="string">"text"</span>, <span class="comment">#必须</span></span><br><span class="line"><span class="string">"agentid"</span>: <span class="string">""</span>, <span class="comment">#必须</span></span><br><span class="line"><span class="string">"text"</span>: &#123;</span><br><span class="line"><span class="string">"content"</span>: <span class="string">""</span> <span class="comment">#必须</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"safe"</span>: <span class="string">"0"</span> <span class="comment"># 表示是否是保密消息，0表示否，1表示是，默认0</span></span><br><span class="line">&#125;</span><br><span class="line">data[<span class="string">'touser'</span>] = self.touser</span><br><span class="line">data[<span class="string">'agentid'</span>] = self.agentid</span><br><span class="line">data[<span class="string">'toparty'</span>] = self.toparty</span><br><span class="line">data[<span class="string">'text'</span>][<span class="string">'content'</span>]=self.conntent</span><br><span class="line">data = json.dumps(data,ensure_ascii=False)</span><br><span class="line">try:</span><br><span class="line"><span class="comment">#通过PUT方式获取发送数据</span></span><br><span class="line">req = urllib2.Request(purl, data)</span><br><span class="line">response = urllib2.urlopen(req)</span><br><span class="line">res = json.loads(response.read())</span><br><span class="line">self.info[<span class="string">'code'</span>] = res[<span class="string">'errcode'</span>]</span><br><span class="line">self.info[<span class="string">'result'</span>] = res[<span class="string">'errmsg'</span>]</span><br><span class="line">except Exception,e:</span><br><span class="line">self.info[<span class="string">'result'</span>] = e</span><br><span class="line">self.info[<span class="string">'code'</span>] = 1</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br><span class="line">def <span class="built_in">log</span>(date, touser, content,info):</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">发送的日志打印日志</span></span><br><span class="line"><span class="string">:param date: 时间</span></span><br><span class="line"><span class="string">:param touser: 发送给谁</span></span><br><span class="line"><span class="string">:param content: 发送的信息内容</span></span><br><span class="line"><span class="string">:param info: 发送执行的结果</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">msg = <span class="string">'%s %s %s 发送结果 - %s\n'</span> % (date, touser, content, info)</span><br><span class="line">with open(<span class="string">'msg.log'</span>, <span class="string">'a'</span>) as f:</span><br><span class="line">f.write(msg)</span><br><span class="line">agentid = sys.argv[1]</span><br><span class="line"><span class="comment">#agentid = 1</span></span><br><span class="line">touser = <span class="string">'xxxxxxx@qq.com'</span></span><br><span class="line">toparty = <span class="string">''</span></span><br><span class="line">content = sys.argv[2:]</span><br><span class="line">content = <span class="string">'\n'</span>.join(content)</span><br><span class="line"><span class="comment">#content = '测试'</span></span><br><span class="line">CropID = <span class="string">'xxxxxxxxxxxxxxxxxxx'</span></span><br><span class="line">Secret = <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span></span><br><span class="line">info=&#123;<span class="string">'result'</span>:None,<span class="string">'code'</span>:None&#125;</span><br><span class="line">date = time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">res=WebChat(CropID,Secret)</span><br><span class="line">res.Get_Token(info)</span><br><span class="line"><span class="keyword">if</span> info[<span class="string">'code'</span>] == 0:</span><br><span class="line">access_token = info[<span class="string">'result'</span>]</span><br><span class="line">res.Send_Msg(touser=touser, toparty=toparty, agentid=agentid, access_token=access_token,</span><br><span class="line">content=content,info=info)</span><br><span class="line"><span class="keyword">if</span> info[<span class="string">'code'</span>] == 0:</span><br><span class="line">content = <span class="built_in">eval</span>(content)</span><br><span class="line"><span class="built_in">log</span>(date, touser, content,info)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">log</span>(date, touser, content, info)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">log</span>(date,touser,content,info)</span><br></pre></td></tr></table></figure><ul><li>上面的微信报警已经实现单点发送</li></ul><hr><p>1.创建报警媒介</p><p><img src="/2019/02/10/zabbix自定义监控之自定义微信报警/1.png" alt=""><br><img src="/2019/02/10/zabbix自定义监控之自定义微信报警/2.png" alt=""><br><img src="/2019/02/10/zabbix自定义监控之自定义微信报警/3.png" alt=""></p><p>2.创建报警企业微信接收人</p><p><img src="/2019/02/10/zabbix自定义监控之自定义微信报警/4.png" alt=""><br><img src="/2019/02/10/zabbix自定义监控之自定义微信报警/5.png" alt=""></p><p>3.测试即可</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章：zabbix自定义监控之自定义微信报警&quot;&gt;&lt;a href=&quot;#第二章：zabbix自定义监控之自定义微信报警&quot; class=&quot;headerlink&quot; title=&quot;第二章：zabbix自定义监控之自定义微信报警&quot;&gt;&lt;/a&gt;第二章：zabbix自定义监控之自定义微信报警&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/10/zabbix自定义监控之自定义微信报警/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>zabbix自定义监控项之自定义邮件报警</title>
    <link href="https://daizhe.net.cn/2019/02/10/zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6/"/>
    <id>https://daizhe.net.cn/2019/02/10/zabbix自定义监控之自定义邮件报警/</id>
    <published>2019-02-10T12:26:05.446Z</published>
    <updated>2019-02-13T12:58:41.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：zabbix自定义监控之自定义邮件报警"><a href="#第二章：zabbix自定义监控之自定义邮件报警" class="headerlink" title="第二章：zabbix自定义监控之自定义邮件报警"></a>第二章：zabbix自定义监控之自定义邮件报警</h1><p><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/标题.gif" alt=""><br><a id="more"></a></p><h2 id="自定义邮件报警信息"><a href="#自定义邮件报警信息" class="headerlink" title="自定义邮件报警信息"></a>自定义邮件报警信息</h2><ul><li>当监控项超过触发器设定的阈值–&gt;触发动作–&gt;发送消息|执行动作</li><li>需要考虑到的问题<ul><li>1.怎么报警</li><li>2.报警怎么发</li><li>3.发什么内容</li><li>4.报警发给谁</li></ul></li></ul><p>1.打开动作选项（入门：定义的监控项的数值达到阈值时仅发生 wen界面的报警但并未有处理动作）<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/1.png" alt=""></p><p>2.设定消息发送的介质（邮件/微信）<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/2.png" alt=""><br>3.配置发件人的账号和授权码(注意：不是收件人)<br>使用qq邮箱接收信息开启邮箱一下功能<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/3.png" alt=""><br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/4.png" alt=""><br>4.配置收件人接收的邮箱地址<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/5.png" alt=""><br>5.添加收件人的邮箱，以及接受报警的等级<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/6.png" alt=""><br>6.一定要点击更新按钮<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/7.png" alt=""><br>7.测试触发邮箱报警<br>  继续使用入门级的监控agent客户端系统连接数<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/8.png" alt=""><br>  agent端开启三个窗口连接<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/9.png" alt=""><br>  已经触发报警<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/10.png" alt=""><br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/12.png" alt=""><br>  邮箱收到报警邮箱<br><img src="/2019/02/10/zabbix自定义监控之自定义邮件报警/11.png" alt="">  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章：zabbix自定义监控之自定义邮件报警&quot;&gt;&lt;a href=&quot;#第二章：zabbix自定义监控之自定义邮件报警&quot; class=&quot;headerlink&quot; title=&quot;第二章：zabbix自定义监控之自定义邮件报警&quot;&gt;&lt;/a&gt;第二章：zabbix自定义监控之自定义邮件报警&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/10/zabbix自定义监控之自定义邮件报警/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>zabbix入门</title>
    <link href="https://daizhe.net.cn/2019/02/10/zabbix%E5%85%A5%E9%97%A8/"/>
    <id>https://daizhe.net.cn/2019/02/10/zabbix入门/</id>
    <published>2019-02-10T08:42:36.036Z</published>
    <updated>2019-02-15T11:20:27.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章：zabbix入门"><a href="#第一章：zabbix入门" class="headerlink" title="第一章：zabbix入门"></a>第一章：zabbix入门</h1><p><img src="/2019/02/10/zabbix入门/标题.gif" alt=""><br><a id="more"></a></p><h2 id="监控机基础知识概况"><a href="#监控机基础知识概况" class="headerlink" title="监控机基础知识概况"></a>监控机基础知识概况</h2><ul><li>zabbix并非监控，而是实现监控的工具</li><li>Zabbix-server是一个c/s和b/s结构</li><li>安装zabbbix的服务器安装时和php7.1有冲突：若此机器上已经安装php7.1就安装不上zabbix</li></ul><hr><h2 id="监控知识体系"><a href="#监控知识体系" class="headerlink" title="监控知识体系"></a>监控知识体系</h2><ul><li><p>为什么要使用监控</p><ul><li>1.对系统不间断实时监控</li><li>2.实时反馈系统当前状态</li><li>3.保证服务可靠性安全性</li><li>4.保证业务持续稳定运行</li></ul></li><li><p>监控怎么用，比如我们需要监控磁盘的使用率</p><ul><li>1.如何查看磁盘使用率 （df -h）</li><li>2.监控磁盘的哪些指标 （block、inode）</li><li>3.如何获取具体的信息 （df -h | awk ‘/\/$/{print $(NF-1)}’）</li><li>4.获取的数值到达多少报警 小于等于80%</li></ul></li><li><p>有哪些监控软件</p><ul><li>cacti、nagios、zabbix</li><li>lepus(天兔)数据库监控系统</li><li>open-falcon 小米</li><li>prometheus (普罗米修斯，dcker，k8s)</li></ul></li><li><p>如果去到一家新的公司，如何入手？</p><ul><li>1.硬件监控——路由器、交换机、防火墙</li><li>2.系统监控——cpu、内存、磁盘、网络、进程、tcp</li><li>3.服务监控——nginx、php、tomcat、redis、memcache、mysql</li><li>4.web监控——响应时间、加载时间、渲染时间</li><li>5.日志监控——ELK、（收集、存储、分析、展示）日志</li><li>6.安全监控——firewalld、WAF(nginx+lua)、安全宝、牛盾云、安全狗</li></ul></li></ul><hr><hr><h2 id="zabbix大纲"><a href="#zabbix大纲" class="headerlink" title="zabbix大纲"></a>zabbix大纲</h2><ul><li>0.单机监控</li><li>1.安装zabbix</li><li>2.zabbix基础架构</li><li>3.监控一台主机</li><li>4.自定义监控项  （自己编写脚本-&gt;zabbix）</li><li>5.自定义阈值    （达到预设的瓶颈）</li><li>6.自定义动作  （发邮件|执行命令）</li><li>7.自定义报警</li></ul><hr><hr><h2 id="单机监控"><a href="#单机监控" class="headerlink" title="单机监控"></a>单机监控</h2><ul><li>单机进程cpu查看负载和使用率<ul><li>uptime</li><li>top</li><li>htop</li><li>主要重要的查看项(调度用户&lt;——&gt;系统 ：上下文切换)<ul><li>us:用户空间的使用（小于等于35%）</li><li>sy：内核空间的使用（小于等于35%）<ul><li>查看此进程的用户/内核的使用 <ul><li>time ls</li></ul></li></ul></li><li>id cpu：空闲的cpu使用率（最低不得小于5%）</li></ul></li></ul></li><li>单机内存查看<ul><li>free -m</li></ul></li><li>单机磁盘查看<ul><li>df</li><li>iotop</li><li>iostat</li></ul></li><li><p>单机查看网络</p><ul><li>ifconfig</li><li>iftop -n<ul><li>界面显示的是类似刻度的范围，为显示流量图的长条作标尺用的</li><li>中间的&lt;= =&gt;这两个左右的箭头表示的是流量的方向<ul><li>TX：发送流量</li><li>RX：接收的流量</li><li>TOTAL: 总流量</li><li>Cumm: 运行iftop到目前时间的总流量</li><li>peak: 流量峰值</li><li>rates： 分别表示过去2s 10s 40s 的平均流量</li></ul></li></ul></li><li>nethogs</li><li>netstat <ul><li>-tnlp</li><li>-na</li><li>-rn</li></ul></li></ul></li><li><p><code>glances(可以查看全局的命令)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@example.com ~]<span class="comment"># yum install -y epel-release</span></span><br><span class="line">[root@example.com ~]<span class="comment"># yum install -y glances</span></span><br></pre></td></tr></table></figure></li><li><p>Mbps:  1000Mbps       Mbps / 8 = MB</p></li><li>MB:    12MB</li></ul><hr><h2 id="引入zabbix分布式监控系统"><a href="#引入zabbix分布式监控系统" class="headerlink" title="引入zabbix分布式监控系统"></a>引入zabbix分布式监控系统</h2><p>1.使用shell脚本来监控服务器</p><ul><li>内存：每隔1分钟，当你的可用内存低于100m,发送邮件报警，要求显示剩余内存<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">模拟可用内存低于100m</span><br><span class="line">        临时管理swap（swap硬盘模拟内存）</span><br><span class="line">            swapoff -a （关闭）</span><br><span class="line">            swapon -a (开启)</span><br><span class="line">        消耗内存</span><br><span class="line">            dd <span class="keyword">if</span>=/dev/ser0 of=/dev/null bs=800M</span><br><span class="line">            此时内存全部使用，但是系统不会崩溃，因为linux系当检测到内存全部用完的时候，为了保障系统不会崩溃，从而将使用内存最多的进程杀死（oom）。</span><br><span class="line"></span><br><span class="line">实现步骤：</span><br><span class="line">    1.怎么获取内存的可用值</span><br><span class="line">        ~]<span class="comment"># free -m | awk '/^Mem/&#123;print $NF&#125;'</span></span><br><span class="line">    2.获取到内存可用的值如何设定阈值进行比较</span><br><span class="line">    3.比较如果大于100m则不处理，如果小于100m则报警</span><br><span class="line"></span><br><span class="line">    编写脚本实现取出内存当前的阈值进行比较</span><br><span class="line">    ~]<span class="comment"># !vim</span></span><br><span class="line">    HostName=$(hostname)_$(hostname -i)</span><br><span class="line">    Date=$(date +%F)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">    Free=$(free -m|awk <span class="string">'/^Mem/&#123;print $NF&#125;'</span>)</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$Free</span> -le 100 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$Date</span> <span class="variable">$HostName</span> Mem Is &lt; <span class="variable">$&#123;Free&#125;</span>MB"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    sleep 1</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    4.如何每隔1分钟执行一次</span><br></pre></td></tr></table></figure></li></ul><hr><p>范例：</p><ul><li>公司未启用swap（swap也是公司中服务器不建议启用的，因为swap是将磁盘模拟内存使用，消耗cpu的性能，建议关闭swap。加大内存），随着客户的流量日益增大，导致将zabbix服务进程强制OOM，<br>Zabbix服务进程被kill，有两种解决的方法，如果公司为了性能着想加大内存，如果公司资有限添加swap,如果是为了服务的效率建议使用添加内存的方式，</li></ul><hr><ul><li>Zabbix-server是一个c/s和b/s结构</li></ul><h2 id="安装zabbix（单机）"><a href="#安装zabbix（单机）" class="headerlink" title="安装zabbix（单机）"></a>安装zabbix（单机）</h2><ul><li><p>官方安装使用手册：<a href="https://www.zabbix.com/documentation/4.0/zh/manual/installation" target="_blank" rel="noopener">https://www.zabbix.com/documentation/4.0/zh/manual/installation</a></p></li><li><p>服务端安装：端口10051 </p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">1.安装</span><br><span class="line">  ~]<span class="comment"># rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">2.安装Zabbix服务器，前端，代理（zabbix要连接数据库）解决的依赖关系，安装了php、httpd</span><br><span class="line">zabbix-agent ： zabbix客户端</span><br><span class="line">  ~]<span class="comment"># yum install zabbix-server-mysql zabbix-web-mysql zabbix-agent -y</span></span><br><span class="line"></span><br><span class="line">3.安装数据库</span><br><span class="line">  ~]<span class="comment"># yum install mariadb-server -y</span></span><br><span class="line"></span><br><span class="line">4.创建zabbix数据库以及用户</span><br><span class="line">  <span class="comment">#启动数据库，加入开机启动项</span></span><br><span class="line">  ~]<span class="comment"># systemctl start mariadb</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable mariadb</span></span><br><span class="line">  <span class="comment">#创建数据库并授权</span></span><br><span class="line">  ~]<span class="comment"># mysql -uroot</span></span><br><span class="line">  mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">  mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">'centos'</span>;</span><br><span class="line">  mysql&gt; quit;</span><br><span class="line"></span><br><span class="line">5.导入初始架构和数据。系统将提示您输入新创建的密码（）</span><br><span class="line">  ~]<span class="comment"># cd /usr/share/doc/zabbix-server-mysql-4.0.4/</span></span><br><span class="line">  <span class="comment">#查看压缩包的内容不解压zcat</span></span><br><span class="line">  <span class="comment">#导入到zabbix库中</span></span><br><span class="line">  zabbix-server-mysql-4.0.4]<span class="comment">#  zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uroot zabbix(zabbix为前面创建的数据库名称)</span></span><br><span class="line"></span><br><span class="line">6.启动zabbix server进程</span><br><span class="line">  <span class="comment">#在zabbix_server.conf中编辑配置数据库配置</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/zabbix/zabbix_server.conf </span></span><br><span class="line">  91行</span><br><span class="line">  <span class="comment"># DBHost=localhost    </span></span><br><span class="line">  <span class="comment">#数据库的地址，这里演示的为单机模式，默认也是localhost</span></span><br><span class="line">  100行</span><br><span class="line">  DBName=zabbix   </span><br><span class="line">  <span class="comment">#数据库的名称，这里演示创建的数据库的名称也为zabbix</span></span><br><span class="line">  116行</span><br><span class="line">  DBUser=zabbix</span><br><span class="line">  <span class="comment">#授权的数据库的用户</span></span><br><span class="line">  124行</span><br><span class="line">  DBPassword=centos</span><br><span class="line">  <span class="comment">#数据库的密码</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#启动前关闭selinux</span></span><br><span class="line">  ~]<span class="comment"># systemctl start zabbix-server</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable zabbix-server</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#保证80端口为安装zabbix时安装的依赖的httpd使用</span></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">    *:10051 </span><br><span class="line">    *:3306</span><br><span class="line">    *:80</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">7.编辑zabbix前端的PHP配置</span><br><span class="line">  <span class="comment">#zabbix前端的apache配置文件位于/etc/httpd/conf.d/zabbix.conf 一些php设置已经完成了配置</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#依据所在的时区，设置时间，更改配置文件后，重启Apache服务器</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/httpd/conf.d/zabbix.conf </span></span><br><span class="line">  Alias /zabbix /usr/share/zabbix   <span class="comment">#如果访问uri路径为/zabbix 则调度到/usr/share/zabbix 路径下，别名意思</span></span><br><span class="line">  &lt;Directory <span class="string">"/usr/share/zabbix"</span>&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line"></span><br><span class="line">    &lt;IfModule mod_php5.c&gt;</span><br><span class="line">    ...</span><br><span class="line">  20行修改为(仅一处修改即可)</span><br><span class="line">        php_value date.timezone Asia/Shanghai</span><br><span class="line">    &lt;/IfModule&gt;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart httpd</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable httpd</span></span><br></pre></td></tr></table></figure><p>8.访问zabbix页面<br><img src="/2019/02/10/zabbix入门/1.png" alt=""><br>健康检测<br><img src="/2019/02/10/zabbix入门/1.png" alt=""><br>zabbix_web连接数据库<br><img src="/2019/02/10/zabbix入门/3.png" alt=""><br>zabbix_web连接zabbix_server<br><img src="/2019/02/10/zabbix入门/4.png" alt=""><br>确认配置<br><img src="/2019/02/10/zabbix入门/5.png" alt=""><br>生成的安装配置<br><img src="/2019/02/10/zabbix入门/6.png" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以在生成的此文件中，以后更改配置</span></span><br><span class="line"> ~]<span class="comment"># cat /etc/zabbix/web/zabbix.conf.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">// Zabbix GUI configuration file.</span><br><span class="line">global <span class="variable">$DB</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'TYPE'</span>]     = <span class="string">'MYSQL'</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'SERVER'</span>]   = <span class="string">'localhost'</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'PORT'</span>]     = <span class="string">'0'</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'DATABASE'</span>] = <span class="string">'zabbix'</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'USER'</span>]     = <span class="string">'zabbix'</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'PASSWORD'</span>] = <span class="string">'centos'</span>;</span><br><span class="line"></span><br><span class="line">// Schema name. Used <span class="keyword">for</span> IBM DB2 and PostgreSQL.</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">'SCHEMA'</span>] = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ZBX_SERVER</span>      = <span class="string">'localhost'</span>;</span><br><span class="line"><span class="variable">$ZBX_SERVER_PORT</span> = <span class="string">'10051'</span>;</span><br><span class="line"><span class="variable">$ZBX_SERVER_NAME</span> = <span class="string">'代哲的zabbix'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$IMAGE_FORMAT_DEFAULT</span> = IMAGE_FORMAT_PNG;</span><br></pre></td></tr></table></figure></p><p>登陆</p><p><img src="/2019/02/10/zabbix入门/7.png" alt=""></p><p>初始登陆界面<br><img src="/2019/02/10/zabbix入门/8.png" alt=""><br>修改语言<br><img src="/2019/02/10/zabbix入门/9.png" alt=""></p><hr><h2 id="zabbix快速监控一台服务器"><a href="#zabbix快速监控一台服务器" class="headerlink" title="zabbix快速监控一台服务器"></a>zabbix快速监控一台服务器</h2><ul><li><p>监控一台服务器</p><ul><li>此被监控的主机必须安装客户端</li></ul></li><li><p>客户端安装：端口10050</p></li><li><p>zabbix客户端aliyun下载站点：<a href="https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/" target="_blank" rel="noopener">https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.被监控的主机安装客户端（zabbix-agent）</span><br><span class="line">  <span class="comment">#被监控的主机，安装zabbix客户端：zabbix-agent</span></span><br><span class="line">  ~]<span class="comment"># rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/3.4/rhel/7/x86_64/zabbix-agent-3.4.3-1.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line">2.配置客户端（设置允许zabbix_server端的地址，声明此客户端允许那台服务端进行监控）</span><br><span class="line">  ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">  97行（填写server端的ip/主机名）</span><br><span class="line">  Server=192.168.52.202</span><br><span class="line"></span><br><span class="line">3.启动zabbix-agent客户端</span><br><span class="line">  ~]<span class="comment"># systemctl start zabbix-agent</span></span><br><span class="line">  ~]<span class="comment"># systemctl enable zabbix-agent</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># ss -tnl</span></span><br><span class="line">  :::10050</span><br></pre></td></tr></table></figure><hr><h3 id="服务端添加监控项，来监控已经安装zabbix-agent的客户端"><a href="#服务端添加监控项，来监控已经安装zabbix-agent的客户端" class="headerlink" title="服务端添加监控项，来监控已经安装zabbix-agent的客户端"></a>服务端添加监控项，来监控已经安装zabbix-agent的客户端</h3><ul><li>1.添加监控的主机</li></ul><p><img src="/2019/02/10/zabbix入门/10.png" alt=""></p><p><img src="/2019/02/10/zabbix入门/11.png" alt=""></p><ul><li>2.查看监控的</li></ul><p><img src="/2019/02/10/zabbix入门/12.png" alt=""></p><hr><h2 id="zabbix基础架构与分离数据库实战"><a href="#zabbix基础架构与分离数据库实战" class="headerlink" title="zabbix基础架构与分离数据库实战"></a>zabbix基础架构与分离数据库实战</h2><h4 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h4><ul><li><p>zbbix监控工具的基本架构<br>zabbix-agent—-&gt;zabbix-server—-&gt;数据库&lt;—– zabbix-web<br>数据采集 &ensp;&ensp;&ensp;  &ensp;             数据分析|报警  &ensp;  &ensp;   &ensp;  &ensp;     数据存储   &ensp;  &ensp;  &ensp;      数据展示</p></li><li><p>server端去主动向agent端收取数据</p></li></ul><p><img src="/2019/02/10/zabbix入门/13.png" alt=""></p><h4 id="分离数据实战"><a href="#分离数据实战" class="headerlink" title="分离数据实战"></a>分离数据实战</h4><ul><li>单台：<ul><li>LAMP</li></ul></li><li><p>拆分-架构</p><ul><li>LAP + Mysql</li></ul></li><li><p>单台主机监控性能是有瓶颈的，可以检测的主机也是有限的。</p></li></ul><p>单台–&gt;架构拆分的修改项</p><ul><li>zabbix-server<ul><li>修改zabbix-server连接数据库的连接信息<ul><li>/etc/zabbix/zabbix_server.conf</li></ul></li></ul></li><li>zabbix-web<ul><li>修改zabbix-web连接数据库的连接信息(web界面创建数据库连接界面点击生成)  <ul><li>/etc/zabbix/web/zabbix.conf.php</li></ul></li></ul></li></ul><p>范例：单机–&gt;架构拆分 LAP + MYSQL<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">将原有建立在zabbix-servers上的mariadb的数据库进行打包导入分离开来的新的数据库中</span><br><span class="line"></span><br><span class="line">1.在新的数据库上创建zabbix数据库</span><br><span class="line">    mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">    mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">'%'</span> identified by <span class="string">'centos'</span>;</span><br><span class="line"></span><br><span class="line">2.在旧的zabbix服务器上备份数据库文件，然后导入至新的数据库中</span><br><span class="line">    ~]<span class="comment"># mysqldump -uroot --databases zabbix --single-transaction &gt; `date +%F%H`-zabbix.sql</span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># cat 2019-02-1013-zabbix.sql | mysql -h 新的数据库的地址 -uzabbix -pcentos zabbix</span></span><br><span class="line"></span><br><span class="line">3.验证新的数据库是否已经备份旧的数据库的数据</span><br><span class="line">    ~]<span class="comment"># mysql -e "show databases;"</span></span><br><span class="line">    +--------------------+</span><br><span class="line">     Database           |</span><br><span class="line">    +--------------------+</span><br><span class="line">    | information_schema |</span><br><span class="line">    | mysql              |</span><br><span class="line">    | performance_schema |</span><br><span class="line">    | <span class="built_in">test</span>               |</span><br><span class="line">    | zabbix             |</span><br><span class="line">    +--------------------+</span><br><span class="line"></span><br><span class="line">4.修改zabbix-server的数据库连接的配置文件</span><br><span class="line">    ~]<span class="comment"># grep '^[a-Z]' /etc/zabbix/zabbix_server.conf</span></span><br><span class="line">    LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_server.log</span><br><span class="line">    LogFileSize=0</span><br><span class="line">    PidFile=/var/run/zabbix/zabbix_server.pid</span><br><span class="line">    SocketDir=/var/run/zabbix</span><br><span class="line">    DBHost=新的数据库的ip地址</span><br><span class="line">    DBName=zabbix   <span class="comment">#新的数据库的数据库名称</span></span><br><span class="line">    DBUser=zabbix   <span class="comment">#新的数据库上授权的账号的信息</span></span><br><span class="line">    SNMPTrapperFile=/var/<span class="built_in">log</span>/snmptrap/snmptrap.log</span><br><span class="line">    Timeout=4</span><br><span class="line">    AlertScriptsPath=/usr/lib/zabbix/alertscripts</span><br><span class="line">    ExternalScripts=/usr/lib/zabbix/externalscripts</span><br><span class="line">    LogSlowQueries=3000</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart zabbix-server</span></span><br><span class="line"></span><br><span class="line">5.修改zabbix-web连接数据库信息的配置文件</span><br><span class="line">    ~]<span class="comment"># vim /etc/zabbix/web/zabbix.conf.php</span></span><br><span class="line">    ~]<span class="comment"># systemctl restart httpd</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="zabbix自定义监控实战"><a href="#zabbix自定义监控实战" class="headerlink" title="zabbix自定义监控实战"></a>zabbix自定义监控实战</h2><ul><li><p>iostat</p><ul><li>命令可以对系统的磁盘IO和CPU使用情况进行监控。iostat属于sysstat软件包</li><li><p>常见的选项</p><ul><li>-c 显示CPU使用情况</li><li>-d 显示磁盘使用情况</li><li>-k 以 KB 为单位显示</li><li>-m 以 M 为单位显示</li><li>-N 显示磁盘阵列(LVM) 信息</li><li>-n 显示NFS 使用情况</li><li>-p[磁盘] 显示磁盘和分区的情况</li><li>-t 显示终端和CPU的信息</li><li>-x 显示详细信息</li><li>-V 显示版本信息</li></ul></li><li><p>执行命令可查看的字段信息解释</p><ul><li>%user：用户进程消耗cpu的比例</li><li>%nice：用户进程优先级调整消耗的cpu比例</li><li>%sys：系统内核消耗的cpu比例</li><li>%iowait：等待磁盘io所消耗的cpu比例</li><li>%idle：闲置cpu的比例（不包括等待磁盘io的s）</li><li>tps：该设备每秒的传输次数。“一次传输”意思是“一次I/O请求”。多个逻辑请求被合并为“一次I/O请求”。“一次传输”请求的大小是未知的。</li><li>kB_read/s：每秒从设备（drive expressed）读取的数据量</li><li>kB_wrtn/s：每秒向设备（drive expressed）写入的数据量</li><li>kB_read：读取的总数据量</li><li>kB_wrtn：写入的总数量数据量<ul><li>这些单位都为Kilobytes。</li></ul></li></ul></li><li>常用组合：<ul><li>iostat -k 1 10 或 iostat -m 1 10</li><li>iostat -d -x -k 1 10</li><li>iostart -c 1 10</li></ul></li></ul></li><li><p>定义监控项的要点</p><ul><li><p>1.监控的系统中的对象</p><ul><li>iostat | awk ‘/^sda/{print $2}’</li></ul></li><li><p>2.如何增加监控项</p><ul><li><code>Userparameter=&lt;监控项名称&gt;,&lt;监控项所指定的命令&gt;</code>(固定格式)</li></ul></li><li><p>3.agetnt如何验证自己是否有对应的监控项并取值</p><ul><li>~]# zabbix_agentd -p | grep</li></ul></li><li><p>4.zabbix-server如何验证zabbix-agent是否有对应的监控项</p><ul><li>zabbix-get</li></ul></li><li>5.zabbixweb界面进行关联zabbix-agent监控项</li></ul></li></ul><h5 id="范例：自定义监控的磁盘IO的，每秒传输次数"><a href="#范例：自定义监控的磁盘IO的，每秒传输次数" class="headerlink" title="范例：自定义监控的磁盘IO的，每秒传输次数"></a>范例：自定义监控的磁盘IO的，每秒传输次数</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">要想使得zabbix-server端主动去收集zabbix-agent端的指定的数据信息，需要在zabbix-agent定义监控的系统对象</span><br><span class="line"></span><br><span class="line">zabbix-agnet端的配置文件中包含了一些定义的配置文件的位置可以将监控的系统对象写在此包含的文件中</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">Include=/etc/zabbix/zabbix_agentd.d/*.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.zabbix-agent监控的系统中的对象</span><br><span class="line">        - iostat | awk <span class="string">'/^sda/&#123;print $2&#125;'</span></span><br><span class="line"></span><br><span class="line">2.在zabbix-agent端定义监控磁盘IO每秒传输的速率</span><br><span class="line">    ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.d/iostart.conf</span></span><br><span class="line">    UserParameter=IO,iostat | awk <span class="string">'/^sda/&#123;print $2&#125;'</span></span><br><span class="line"></span><br><span class="line">3.重启agent客户端，验证是否已经添加到监控项</span><br><span class="line">    ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br><span class="line">    ~]<span class="comment"># zabbix_agentd -p | grep IO</span></span><br><span class="line">        IO       [t|2.53]       <span class="comment">#如果此处出现IO       [t| IO commond not found] 表示这个iostat命令未安装</span></span><br><span class="line"></span><br><span class="line">4.zabbix-server验证zabbix-agent是否有对应的监控项</span><br><span class="line">    ~]<span class="comment"># yum install zabbix-get -y</span></span><br><span class="line">    zabbix-get</span><br><span class="line">        -s 指定agent ip地址</span><br><span class="line">        -k 指定定义在agent监控项的名称</span><br><span class="line">        -p 指定agent 端口 ，默认为10050</span><br><span class="line">    ~]<span class="comment"># zabbix_get -s 172.20.139.70 -k IO</span></span><br><span class="line">        2.25</span><br></pre></td></tr></table></figure><p>5.zabbixweb界面进行关联zabbix-agent监控项<br>图1<br><img src="/2019/02/10/zabbix入门/14.png" alt=""><br>图2<br><img src="/2019/02/10/zabbix入门/15.png" alt=""><br>图3<br><img src="/2019/02/10/zabbix入门/16.png" alt=""></p><h2 id="zabbix自定义监控阈值实战"><a href="#zabbix自定义监控阈值实战" class="headerlink" title="zabbix自定义监控阈值实战"></a>zabbix自定义监控阈值实战</h2><ul><li>监控项检测到监控的数据达到一个阈值则触发报警信息</li></ul><hr><h3 id="系统默认监控agent中-etc-passwd文件发生变化报警"><a href="#系统默认监控agent中-etc-passwd文件发生变化报警" class="headerlink" title="系统默认监控agent中/etc/passwd文件发生变化报警"></a><code>系统默认监控agent中/etc/passwd文件发生变化报警</code></h3><p>1.缩短检测/etc/passwd文件的时长方便检测<br><img src="/2019/02/10/zabbix入门/17.png" alt=""><br>2.开启报警<br><img src="/2019/02/10/zabbix入门/18.png" alt=""><br>3.在客户端修改/etc/passwd文件触发报警（web页面报警）<br><img src="/2019/02/10/zabbix入门/19.png" alt=""><br><img src="/2019/02/10/zabbix入门/20.png" alt=""></p><hr><h3 id="针对系统默认监控的系统主机登陆的终端个数来定义报警"><a href="#针对系统默认监控的系统主机登陆的终端个数来定义报警" class="headerlink" title="针对系统默认监控的系统主机登陆的终端个数来定义报警"></a><code>针对系统默认监控的系统主机登陆的终端个数来定义报警</code></h3><p><img src="/2019/02/10/zabbix入门/21.png" alt=""></p><p>1.定义触发器，如果系统登陆的终端如果大于2则触发报警信息<br><img src="/2019/02/10/zabbix入门/22.png" alt=""><br><img src="/2019/02/10/zabbix入门/23.png" alt=""></p><p>2.查看定义的监控项<br><img src="/2019/02/10/zabbix入门/24.png" alt=""><br>3.触发监控的报警<br><img src="/2019/02/10/zabbix入门/25.png" alt=""><br>4.已经收到报警<br><img src="/2019/02/10/zabbix入门/26.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章：zabbix入门&quot;&gt;&lt;a href=&quot;#第一章：zabbix入门&quot; class=&quot;headerlink&quot; title=&quot;第一章：zabbix入门&quot;&gt;&lt;/a&gt;第一章：zabbix入门&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/10/zabbix入门/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/categories/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
    
      <category term="zabbix_老男孩" scheme="https://daizhe.net.cn/tags/zabbix-%E8%80%81%E7%94%B7%E5%AD%A9/"/>
    
  </entry>
  
  <entry>
    <title>keepalived使用基础</title>
    <link href="https://daizhe.net.cn/2019/02/04/keepalived%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/"/>
    <id>https://daizhe.net.cn/2019/02/04/keepalived使用基础/</id>
    <published>2019-02-04T08:37:37.710Z</published>
    <updated>2019-02-04T09:02:13.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keepalived使用基础"><a href="#keepalived使用基础" class="headerlink" title="keepalived使用基础"></a>keepalived使用基础</h1><p><img src="/2019/02/04/keepalived使用基础/标题.gif" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;keepalived使用基础&quot;&gt;&lt;a href=&quot;#keepalived使用基础&quot; class=&quot;headerlink&quot; title=&quot;keepalived使用基础&quot;&gt;&lt;/a&gt;keepalived使用基础&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/04/keepalived使用基础/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="keepalived" scheme="https://daizhe.net.cn/categories/keepalived/"/>
    
    
      <category term="keepalived" scheme="https://daizhe.net.cn/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>keepalived简介</title>
    <link href="https://daizhe.net.cn/2019/01/28/keepalived%E7%AE%80%E4%BB%8B/"/>
    <id>https://daizhe.net.cn/2019/01/28/keepalived简介/</id>
    <published>2019-01-28T08:36:32.931Z</published>
    <updated>2019-02-04T09:26:18.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keepalived简介"><a href="#keepalived简介" class="headerlink" title="keepalived简介"></a>keepalived简介</h1><p><img src="/2019/01/28/keepalived简介/标题.gif" alt=""><br><a id="more"></a></p><ul><li>HA 即（high available）高可用，又被叫做双机热备，用于关键性业务（冗余）。</li></ul><h2 id="高可用集群概念"><a href="#高可用集群概念" class="headerlink" title="高可用集群概念"></a>高可用集群概念</h2><ul><li>集群类型：<ul><li>LB     lvs/nginx（http/upstream, stream/upstream）</li><li>HA     高可用性（多适用于接入层的高可用）<ul><li>SPoF: Single Point of Failure，单点故障</li></ul></li><li>HPC    高性能集群(High Performance Computing)</li></ul></li><li><code>系统可用性：SLA(Service-Level Agreement)</code><ul><li>95%=(60<em>24</em>30)*(1-0.9995)</li><li>（指标）=99%, …, 99.999%，99.9999%</li></ul></li><li><p>系统故障：</p><ul><li>硬件故障：设计缺陷、wear out（损耗）、自然灾害……</li><li>软件故障：设计缺陷</li></ul></li><li><p>提升系统高用性的解决方案之降低MTTR(平均故障时间)</p><ul><li>解决方案：建立冗余机制<ul><li>active/passive    主/备</li><li>active/active    双主 </li><li>active –&gt; HEARTBEAT（心跳检测机制判断对方是否存活） –&gt; passive </li><li>active <--> HEARTBEAT <--> active</--></--></li></ul></li></ul></li><li><p>高可用的是“服务”</p><ul><li>HA nginx service：<ul><li>vip/nginx process[/shared storage]</li></ul></li><li>资源：组成一个高可用服务的“组件”<ul><li>(1) passive node的数量（从节点的数量）</li><li>(2) 资源切换（ip地址的切换或者说是服务的切换）</li></ul></li></ul></li><li><p>shared storage：共享存储</p><ul><li>NAS(Network Attached Storage)：网络附加存储，基于网络的共享文件系统。<ul><li>SAN(Storage Area Network)：存储区域网络，基于网络的块级别的共享    </li></ul></li></ul></li><li><p>Network partition：网络分区</p><ul><li>quorum：法定人数<ul><li>with quorum： &gt; total/2（剩余存活的节点一定是大于总节点的一半的）<ul><li>without quorum: &lt;= total/2（故障节点的数量，一定要小于总节点的一半）    </li></ul></li></ul></li><li>隔离设备： fence <ul><li>node：STONITH = Shooting The Other Node In The Head<ul><li>断电重启</li></ul></li><li>资源：断开存储的连接    </li></ul></li></ul></li><li><p>双节点集群(TWO nodes Cluster)</p><ul><li>辅助设备：ping node, quorum disk(仲裁设备)</li><li>Failover：故障切换，即某资源的主节点故障时，将资源转移至其它节点的操作</li><li>Failback：故障移回，即某资源的主节点故障后重新修改上线后，将之前已转移至其它节点的资源重新切回的过程</li></ul></li><li><p>HA Cluster实现方案:</p><ul><li>AIS(Applicaiton Interface Specification)应用程序接口规范        <ul><li>RHCS：Red Hat Cluster Suite红帽集群套件<ul><li>heartbeat：基于心跳监测实现服务高可用</li><li>pacemaker+corosync：资源管理与故障转移</li></ul></li><li><code>vrrp(Virtual Router Redundancy Protocol)：虚拟路由冗余协议,解决静态网关单点风险</code><ul><li>软件层—keepalived</li><li>物理层—路由器、三层交换机、防火墙</li></ul></li></ul></li></ul></li></ul><hr><h2 id="高可用集群-gt-后端存储"><a href="#高可用集群-gt-后端存储" class="headerlink" title="高可用集群-&gt;后端存储"></a>高可用集群-&gt;后端存储</h2><p><img src="/2019/01/28/keepalived简介/存储.png" alt=""></p><hr><h2 id="高可用集群-gt-后端存储-1"><a href="#高可用集群-gt-后端存储-1" class="headerlink" title="高可用集群-&gt;后端存储"></a>高可用集群-&gt;后端存储</h2><ul><li>JBOD （ Just a Bunch Of Disks ）不是标准的 RAID 等级，它通常用来表示一个没有控制软件提供协调控制的磁盘集合， JBOD 将多个物理磁盘串联起来，提供一个巨大的逻辑磁盘， JBOD 的数据存放机制是由第一块磁盘开始按顺序往后存储，当前磁盘存储空间用完后，再依次往后面的磁盘存储数据， JBOD 存储性能完全等同于单块磁盘，而且也不提供数据安全保护，它只是简单提供一种扩展存储空间的机制， JBOD 可用存储容量等于所有成员磁盘的存储空间之和。</li></ul><p><img src="/2019/01/28/keepalived简介/1.png" alt=""></p><h2 id="高可用集群-gt-网络层实现高可用（VRRP）"><a href="#高可用集群-gt-网络层实现高可用（VRRP）" class="headerlink" title="高可用集群-&gt;网络层实现高可用（VRRP）"></a>高可用集群-&gt;网络层实现高可用（VRRP）</h2><p><img src="/2019/01/28/keepalived简介/4.png" alt=""></p><h2 id="Keepalived简介"><a href="#Keepalived简介" class="headerlink" title="Keepalived简介"></a>Keepalived简介</h2><ul><li><code>Keepalived软件主要是通过VRRP协议实现高可用功能的。VRRP是Virtual Router RedundancyProtocol(虚拟路由器冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。</code></li><li>重要作用<ul><li>管理LVS负载均衡软件</li><li>实现LVS集群节点的健康检查中</li><li>作为系统网络服务的高可用性（failover）</li></ul></li></ul><hr><ul><li>keepalived:<ul><li>vrrp协议的软件实现，原生设计目的为了高可用ipvs服务</li></ul></li><li>功能：<ul><li>基于vrrp协议完成地址流动</li><li>为vip地址所在的节点生成ipvs规则(在配置文件中预先定义)</li><li>为ipvs集群的各RS做健康状态检测</li><li>基于脚本调用接口通过执行脚本完成脚本中定义的功能，进而影响集群事务，以此支持nginx、haproxy等服务</li></ul></li><li>组件：<ul><li>用户空间核心组件：<ul><li>vrrp stack-VIP消息通告</li><li>checkers-监测real server</li><li>system call-标记real server权重</li><li>SMTP-邮件组件</li><li>ipvs wrapper-生成IPVS规则</li><li>Netlink Reflector-网络接口<ul><li>WatchDog-监控进程</li></ul></li></ul></li><li>控制组件：配置文件分析器</li><li>IO复用器</li><li>内存管理组件</li></ul></li></ul><p><img src="/2019/01/28/keepalived简介/3.png" alt=""></p><ul><li>官方站点：<a href="http://keepalived.org/index.html" target="_blank" rel="noopener">http://keepalived.org/index.html</a></li><li>官方参考手册：<a href="http://keepalived.org/documentation.html" target="_blank" rel="noopener">http://keepalived.org/documentation.html</a></li><li>DOWNLOAD:<a href="http://keepalived.org/download.html" target="_blank" rel="noopener">http://keepalived.org/download.html</a></li></ul><hr><h2 id="keepalived："><a href="#keepalived：" class="headerlink" title="keepalived："></a>keepalived：</h2><ul><li>vrrp协议：Virtual Router Redundancy Protocol（keepalived基于此协议实现ip地址的高可用）</li></ul><ul><li>术语：<ul><li>虚拟路由器：Virtual Router </li><li>虚拟路由器标识：VRID(0-255)优先级，唯一标识虚拟路由器</li><li>物理路由器：<ul><li>master：主设备</li><li>backup：备用设备</li><li>priority：优先级（优先级数值越大，优先级越高）</li></ul></li><li>VIP：Virtual IP </li><li>VMAC：Virutal MAC (00-00-5e-00-01-VRID)：虚拟mac地址</li></ul></li></ul><hr><ul><li>通告：心跳，优先级等，周期性</li><li>工作方式：抢占式，非抢占式</li><li><p>安全工作：</p><ul><li>认证：<ul><li>无认证</li><li>简单字符认证：预共享密钥</li></ul></li></ul></li><li><p>工作模式：</p><ul><li>主/备：单虚拟路由器</li><li>主/主：主/备（虚拟路由器1），备/主（虚拟路由器2）</li></ul></li></ul><hr><h2 id="vrrp协议的工作流程"><a href="#vrrp协议的工作流程" class="headerlink" title="vrrp协议的工作流程"></a>vrrp协议的工作流程</h2><ul><li><p>vrrp（虚拟路由冗余协议）是一种容错协议，他保证当主机的吓一跳路由器出现故障时，由另一台路由器来代替出现故障的路由器进行工作，从而保持网络通讯的连续性和可靠性。</p></li><li><p>vrrp具有如下优点：</p><ul><li>简化网络管理。在具有多播或广播能力的局域网（如以太网）中，借助vrrp能在某台设备出现故障时仍然提供高可靠的缺省链路，有效避免单一链路发生的故障后网络终端的问题，而无需修改动态路由协议，路由发现协议等配置信息，也无需修改主机的默认的网关配置。</li><li>适应性强。vrrp报文封装在ip报文中，支持各种上层协议。</li><li>网络开销小，vrrp只定义了一种报文—vrrp通告报文，并且只有处于master状态的路由器可以发送vrrp报文</li></ul></li></ul><h2 id="vrrp协议中的相关的术语"><a href="#vrrp协议中的相关的术语" class="headerlink" title="vrrp协议中的相关的术语"></a>vrrp协议中的相关的术语</h2><ul><li>虚拟路由器：由一个master路由器和多个backup路由器组成，主机将虚拟路由器当作默认网关。</li><li>vrid：虚拟路由器的标识，有相同vrid的一组路由器构成一个虚拟路由器。</li><li>master路由器：虚拟路由器中承担报文转发任务的路由器。</li><li>backup路由器：master路由器出现故障时，能够代替master路由器工作的路由器。</li><li>虚拟ip地址：虚拟路由器的ip地址，一个虚拟路由器可以拥有一个或者多个ip地址。</li><li>ip地址拥有者：接口ip地址与虚拟ip地址相同的路由器被称之为ip地址拥有者。</li><li>虚拟mac地址：一个虚拟路由器拥有一个虚拟mac地址。虚拟mac地址的合适为00-00-5E-00-01-{VRID}。通常情况下，虚拟路由器回应ARP请求使用的时虚拟MAC地址，只有虚拟路由器做特殊配置的时候，才会赢接口的真实的MAC地址。</li><li>优先级：VRRP根据优先级来确定虚拟路由器中每台路由器的地位。</li><li>非抢占方式：如果backup路由器工作在非抢占方式下，则只要master路由器没有出现故障，backup路由器即使随后被配置了更高的优先级也不会为master路由器。</li><li>抢占方式：如果backup路由器工作在抢占方式下，当它收到vrrp报文后，会将自己的优先级与通告报文中的优先级进行比较。如果自己的优先级比当前master路由器的优先级高，就会主动抢占成为master路由器；否则，将保持backup状态。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;keepalived简介&quot;&gt;&lt;a href=&quot;#keepalived简介&quot; class=&quot;headerlink&quot; title=&quot;keepalived简介&quot;&gt;&lt;/a&gt;keepalived简介&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/28/keepalived简介/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="keepalived" scheme="https://daizhe.net.cn/categories/keepalived/"/>
    
    
      <category term="keepalived" scheme="https://daizhe.net.cn/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>HAproxyACL</title>
    <link href="https://daizhe.net.cn/2019/01/24/HAproxyACL/"/>
    <id>https://daizhe.net.cn/2019/01/24/HAproxyACL/</id>
    <published>2019-01-24T04:12:51.101Z</published>
    <updated>2019-02-02T08:18:37.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy的ACL过滤器及自定义错误页"><a href="#HAproxy的ACL过滤器及自定义错误页" class="headerlink" title="HAproxy的ACL过滤器及自定义错误页"></a>HAproxy的ACL过滤器及自定义错误页</h1><p><img src="/2019/01/24/HAproxyACL/标题.gif" alt=""><br><a id="more"></a></p><h2 id="一、ACL过滤器（七层http模式下）"><a href="#一、ACL过滤器（七层http模式下）" class="headerlink" title="一、ACL过滤器（七层http模式下）"></a>一、ACL过滤器（七层http模式下）</h2><ul><li><p>acl：对接收到的报文进行匹配和过滤，基于请求报文头部中的源地址、源端口、目标地址、目标端口、请求方法、URL、文件后缀等信息内容进行匹配并执行进一步操作（基于类型的调度决策）。</p><ul><li><code>acl &lt;aclname&gt;  &lt;criterion&gt;   [flags]           [operator]        [&lt;value&gt;]</code></li><li>acl   &ensp;&ensp;   名称    &ensp;&ensp;&ensp;&ensp;          过滤条件   &ensp;&ensp; &ensp;&ensp;     条件标记位   &ensp;&ensp;   具体操作符   &ensp;&ensp;   操作对象类型</li></ul></li><li><p>acl   image_service hdr_dom(host)   -i   img.daizhe.net.cn</p><ul><li>hdr_dom(host)：客户端请求的头部的域名<ul><li>用hots做匹配条件的好处，可以将ip地址复用，对一个ip进行监听，当用户请求进行请求时，可以将一个地址对应多个A记录解析的域名（一个ip地址监听多个公网的域名）。</li></ul></li><li>hdr_dom(User-Agent) ：客户端请求使用的浏览器的类型<ul><li>可以根据客户使用的类型，将客户发来的请求做处理转发。调度器转发后其他后端的提供服务的服务器上。</li></ul></li></ul></li><li>ACL名称，可以使用大字母A-Z、小写字母a-z、数字0-9、冒号：、点.、中横线和下划线，并且严格区分大小写，必须Image_site和image_site完全是两个acl(严格区分大小写)。</li></ul><h4 id="Criterion-ACL-定义ACL标准"><a href="#Criterion-ACL-定义ACL标准" class="headerlink" title="Criterion_ACL(定义ACL标准)"></a>Criterion_ACL(定义ACL标准)</h4><ul><li><p><code>&lt;criterion&gt; ：匹配条件</code></p><ul><li><code>dst         目标IP</code></li><li><code>dst_port       目标PORT</code></li><li><code>src            源IP</code></li><li><code>src_port      源PORT</code></li></ul></li><li><p><code>hdr &lt;string&gt;用于测试请求头部首部指定内容</code></p><ul><li><code>hdr_dom(host)  请求的host名称，如 www.daizhe.net.cn</code></li><li><code>hdr_beg(host)  请求的host开头，如 www. img. video. download. ftp.</code></li><li><code>hdr_end(host)  请求的host结尾，如 .com .net .cn</code></li><li><code>path_beg   请求的URL开头，如/static、/images、/img、/css</code></li><li><code>path_end   请求的URL中资源的结尾，如 .gif  .png  .css  .js .jpg .jpeg</code></li></ul></li></ul><h4 id="flags（条件标记位）"><a href="#flags（条件标记位）" class="headerlink" title="flags（条件标记位）"></a>flags（条件标记位）</h4><ul><li><code>&lt;flags&gt;-条件标记</code><ul><li>-i 不区分大小写(域名经过haproxy调度时不区分域名的字符大小写)</li><li>-m 使用指定的pattern匹配方法</li><li>-n 不做DNS解析<ul><li>-u 禁止acl重名，否则多个同名ACL匹配或关系(调度器上定义acl的名称尽量不要重名，如果有重名，默认隐含的是或的关系)</li><li>–  强制flag结束. 当字符串和某个flag相似时使用</li></ul></li></ul></li></ul><h4 id="operator（具体操作符）"><a href="#operator（具体操作符）" class="headerlink" title="operator（具体操作符）"></a>operator（具体操作符）</h4><ul><li>[operator]-操作符：<ul><li>整数比较：eq、ge、gt、le、lt<br>字符比较：</li><li>exact match     (-m str) :字符串必须完全匹配模式</li><li>substring match (-m sub) :在提取的字符串中查找模式，如果其中任何一个被发现，ACL将匹配</li><li>prefix match    (-m beg) :在提取的字符串首部中查找模式，如果其中任何一个被发现，ACL将匹配</li><li>suffix match    (-m end) :将模式与提取字符串的尾部进行比较，如果其中任何一个匹配，则ACL进行匹配</li><li>subdir match    (-m dir) :查看提取出来的用斜线分隔（“/”）的字符串，如果其中任何一个匹配，则ACL进行匹配</li><li>domain match    (-m dom) :查找提取的用点（“.”）分隔字符串，如果其中任何一个匹配，则ACL进行匹配    </li></ul></li></ul><h4 id="value（操作对象类型）"><a href="#value（操作对象类型）" class="headerlink" title="value（操作对象类型）"></a>value（操作对象类型）</h4><ul><li><code>&lt;value&gt;的类型：</code><ul><li>Boolean #布尔值</li><li>integer or integer range #整数或整数范围，比如用于匹配端口范围</li><li>IP address / network #IP地址或IP范围</li><li>string    （字符串的方式制定域名）</li><li>exact –精确比较</li><li>substring—子串    </li><li>prefix-前缀比较</li><li>subdir-路径， /wp-includes/js/jquery/jquery.js    #匹配子路径</li><li>domain-域名，daizhe.net.cn</li><li>regular expression  #正则表达式</li><li>hex block   #16进制</li></ul></li></ul><h2 id="Acl定义与调用"><a href="#Acl定义与调用" class="headerlink" title="Acl定义与调用"></a>Acl定义与调用</h2><ul><li><p>acl作为条件时的逻辑关系：</p><ul><li>与：隐式（默认）使用</li><li>或：使用“or” 或 “||”表示</li><li>否定：使用“!“ 表示    </li></ul></li><li><p>示例：</p><ul><li>if   invalid_src invalid_port      与关系</li><li>if invalid_src || invalid_port      或<ul><li>if ! invalid_src             非</li></ul></li></ul></li></ul><p><code>范例：调度器拒绝192.16.52.175的主机访问即调度器检测到此地址段的主机则不今次那个调度到后端的主机上</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">haproxy_server</span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        acl huaidan src 192.168.52.175  <span class="comment">####</span></span><br><span class="line">        block <span class="keyword">if</span> huaidan            <span class="comment">####</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        option forwardfor        server web1 192.168.52.162:80 cookie web1 check inter 2000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">     ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line"></span><br><span class="line">使用192.16.52.175的主机充当客户端访问调度器验证是否可进行后端服务器的调度</span><br><span class="line">    ~]<span class="comment"># curl 192.168.52.175:8888</span></span><br><span class="line">    &lt;html&gt;&lt;body&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;</span><br><span class="line">    Request forbidden by administrative rules.</span><br><span class="line">    &lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><hr><p>范例：acl中与关系的体现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#acl bad_curl hdr_sub(User-Agent) -i curl</span></span><br><span class="line"><span class="comment">#block if bad_curl</span></span><br><span class="line">定义客户端的请求报文中如果首部User-Agent的值有一个子字串，中是否存在curl命令，</span><br><span class="line"></span><br><span class="line">这里是两个条件一起判断则两个acl是与的关系，表示为来自192.16.52.175地址的主机并且是用curl命令请求数据，通过调度器转后端服务器时才被拒绝</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        acl huaidan src 192.168.52.175  <span class="comment">####</span></span><br><span class="line">        acl bad_curl hdr_sub(User-Agent) -i curl    <span class="comment">####</span></span><br><span class="line">        block <span class="keyword">if</span> huaidan bad_curl   <span class="comment">####</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line"></span><br><span class="line">使用192.16.52.175的主机充当客户端访问调度器验证是否可进行后端服务器的调度</span><br><span class="line">    <span class="comment"># 使用wget命令测试</span></span><br><span class="line">    ~]<span class="comment"># wget -O - -q http://192.168.52.175:8888</span></span><br><span class="line">    web1</span><br><span class="line">    <span class="comment"># 使用curl命令测试</span></span><br><span class="line">    ~]<span class="comment"># curl 192.168.52.175:8888</span></span><br><span class="line">    &lt;html&gt;&lt;body&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;</span><br><span class="line">    Request forbidden by administrative rules.</span><br><span class="line">    &lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>范例：acl中或关系的体现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">frontend web-port-80</span><br><span class="line">    mode http</span><br><span class="line">    rspadd X-Via:\ HAPorxy</span><br><span class="line">    <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">    default_backend websrvs</span><br><span class="line">    acl huaidan src 192.168.52.175</span><br><span class="line">    acl bad_curl hdr_sub(User-Agent) -i curl</span><br><span class="line">    block <span class="keyword">if</span> huaidan || bad_curl    <span class="comment">####</span></span><br><span class="line">backend websrvs</span><br><span class="line">    cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">    server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">    server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure></p><hr><h2 id="二、自定义错误页"><a href="#二、自定义错误页" class="headerlink" title="二、自定义错误页"></a>二、自定义错误页</h2><ul><li><p><code>errorfile &lt;code&gt; &lt;file&gt;</code></p><ul><li><p>返回文件内容，而不是HAProxy生成的错误</p></li><li><p><code>&lt;code&gt;:HTTP状态代码。目前，HAProxy能够生成代码200、400、403、408、500、502、503和504。</code></p></li><li><code>&lt;file&gt;:指定一个文件包含完整的HTTP响应。</code></li></ul></li></ul><p>范例：自定义错误页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">haproxy设置acl过滤器</span><br><span class="line"></span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        acl huaidan src 192.168.0.106</span><br><span class="line">        acl huandan1 hdr(User-Agent) -m sub -i chrome       <span class="comment">#定义客户段请求是通过chrome浏览器进行访问则拒绝</span></span><br><span class="line">        block <span class="keyword">if</span> huaidan || huaidan1        <span class="comment">#或的关系</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure></p><p>192.168.0.106客户端的windows主机进行访问测试<br>显示的为内建默认的错误页<br><img src="/2019/01/24/HAproxyACL/1.png" alt=""></p><p>自己定义错误页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">创建存放错误页面的路径</span><br><span class="line">    ~]<span class="comment"># mkdir /etc/haproxy/err_pages</span></span><br><span class="line"></span><br><span class="line">创建一个错误响应403调用的页面</span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/err_pages/403.forbiddeng.html</span></span><br><span class="line">    &lt;h1&gt;403&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">haproxy_server</span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        acl huaidan src 192.168.0.106</span><br><span class="line">        acl huandan1 hdr(User-Agent) -m sub -i chrome</span><br><span class="line">        block <span class="keyword">if</span> huaidan || huaidan1</span><br><span class="line">        errorfile 403 /etc/haproxy/err_pages/403.forbiddeng.html    <span class="comment">####</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure></p><hr><p>定义将错误的页面进行其他网站或者其他的url的跳转<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">   frontend web-port-80</span><br><span class="line">       mode http</span><br><span class="line">       rspadd X-Via:\ HAPorxy</span><br><span class="line">       <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">       default_backend websrvs</span><br><span class="line">       acl huaidan src 192.168.0.106</span><br><span class="line">       acl huandan1 hdr(User-Agent) -m sub -i chrome</span><br><span class="line">       block <span class="keyword">if</span> huaidan || huaidan1</span><br><span class="line">       errorloc302 403 https://www.daizhe.net.cn/    <span class="comment">####</span></span><br><span class="line">   backend websrvs</span><br><span class="line">       cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">       server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">       server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure></p><h2 id="三、acl-根据客户端请求的资源path进行acl过滤-user-backend"><a href="#三、acl-根据客户端请求的资源path进行acl过滤-user-backend" class="headerlink" title="三、acl (根据客户端请求的资源path进行acl过滤  user_backend)"></a>三、acl (根据客户端请求的资源path进行acl过滤  user_backend)</h2><ul><li>path     : exact string match</li><li>path_beg : prefix match</li><li>path_dir : subdir match</li><li>path_dom : domain match</li><li>path_end : suffix match</li><li>path_len : length match</li><li>path_reg : regex match</li><li>path_sub : substring match</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">定义客户的请求path中路径的内容，来进行调度</span><br><span class="line"></span><br><span class="line">frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs     <span class="comment">#默认的后端主机组</span></span><br><span class="line">        acl images path -m end -i .jpg .jpeg .png .gif      </span><br><span class="line">        <span class="comment">#如果客户请求的url资源是以这些文件类型结尾的</span></span><br><span class="line">        acl images path -m beg /images  </span><br><span class="line">        <span class="comment">#且请求的文件的路径是来自后端服务器中/images文件夹中</span></span><br><span class="line">        user_backend imagsrvs <span class="keyword">if</span> images   </span><br><span class="line">        <span class="comment">#如果满足上所述两个条则则全部归类到images，如果客户端请求的是images这类的文件则使用后端的imagsrvs 中的后端服务器组响应，反之则使用默认的服务器响应</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">    backend imagsrvs</span><br><span class="line">        server web3 192.168.62.88:80 check</span><br></pre></td></tr></table></figure><h2 id="四、http-request-七层负载acl"><a href="#四、http-request-七层负载acl" class="headerlink" title="四、http-request 七层负载acl"></a>四、http-request 七层负载acl</h2><ul><li><code>http-request { allow | deny } [ { if | unless } &lt;condition&gt; ]</code><ul><li>7层请求的访问控制<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">haproxy_server</span><br><span class="line"></span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        acl haoren src 192.168.52.100   <span class="comment">####</span></span><br><span class="line">        http-request allow <span class="keyword">if</span> haoren  <span class="comment">####  </span></span><br><span class="line">        <span class="comment">#定义了一个白名单仅允许192.168.52.100主机通过调度器访问后端的主机，来自其他源地址的主机则拒绝访问后端的主机</span></span><br><span class="line">        http-request deny   <span class="comment">####</span></span><br><span class="line">    backend websrvs</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="五、tcp-request-四层负载acl"><a href="#五、tcp-request-四层负载acl" class="headerlink" title="五、tcp-request 四层负载acl"></a>五、tcp-request 四层负载acl</h2><ul><li><code>tcp-request connection {accept|reject}  [{if | unless} &lt;condition&gt;]</code><ul><li>根据第4层条件对传入连接执行操作</li></ul></li></ul><h2 id="六、url-（根据客户端请求的资源url进行acl过滤）"><a href="#六、url-（根据客户端请求的资源url进行acl过滤）" class="headerlink" title="六、url （根据客户端请求的资源url进行acl过滤）"></a>六、url （根据客户端请求的资源url进行acl过滤）</h2><ul><li>url     : exact string match</li><li>url_beg : prefix match</li><li>url_dir : subdir match</li><li>url_dom : domain match</li><li>url_end : suffix match</li><li>url_len : length match</li><li>url_reg : regex match</li><li><p>url_sub : substring match</p></li><li><p>url包括：</p><ul><li>协议</li><li>服务器</li><li>地址</li><li>端口</li><li>path</li></ul></li><li><p>url的范围要比path限制acl更广泛</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">定义合法的引用，如果为合法的引用则调度器则将客户端的请求调度到后端的服务器上，如果不为合法的引用则不进行调度</span><br><span class="line"></span><br><span class="line"><span class="comment">#仅允许来自daizhe字段的域名的外链的地址用户可以访问后端的服务器</span></span><br><span class="line"><span class="comment">#如果不符合此条件直接拒绝</span></span><br><span class="line"></span><br><span class="line">hproxy_server</span><br><span class="line">    </span><br><span class="line">    frontend web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:8888</span><br><span class="line">        default_backend websrvs</span><br><span class="line">        acl hefadeyinyong（定义的acl名称） hdr(Referer) -m dom -i daizhe</span><br><span class="line">        block <span class="keyword">if</span> ! hefayinyong</span><br><span class="line"></span><br><span class="line">    backend websrvs</span><br><span class="line">        server web1 192.168.52.162:80 check inter 2000 fall 3 rise 5</span><br><span class="line">        server web2 192.168.0.105:80 check inter 3000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">访问测试</span><br><span class="line">    直接访问调度器</span><br><span class="line">    ~]<span class="comment"># curl http: http://haproxy ip</span></span><br><span class="line">    403</span><br><span class="line">    模拟外链跳转来的访问</span><br><span class="line">    ~]<span class="comment"># curl -e "http://www.daizhe.net.cn http://haproxy ip"</span></span><br><span class="line">    200</span><br></pre></td></tr></table></figure><h2 id="七、内建的acl"><a href="#七、内建的acl" class="headerlink" title="七、内建的acl"></a>七、内建的acl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Pre-defined ACLs</span><br><span class="line">ACL nameEquivalent toUsage</span><br><span class="line">FALSEalways_falsenever match</span><br><span class="line">HTTPreq_proto_httpmatch <span class="keyword">if</span> protocol is valid HTTP</span><br><span class="line">HTTP_1.0req_ver 1.0match HTTP version 1.0</span><br><span class="line">HTTP_1.1req_ver 1.1match HTTP version 1.1</span><br><span class="line">HTTP_CONTENThdr_val(content-length) gt 0match an existing content-length</span><br><span class="line">HTTP_URL_ABSurl_reg ^[^/:]*://match absolute URL with scheme</span><br><span class="line">HTTP_URL_SLASHurl_beg /match URL beginning with <span class="string">"/"</span></span><br><span class="line">HTTP_URL_STARurl *match URL equal to <span class="string">"*"</span></span><br><span class="line">LOCALHOSTsrc 127.0.0.1/8match connection from <span class="built_in">local</span> host</span><br><span class="line">METH_CONNECTmethod CONNECTmatch HTTP CONNECT method</span><br><span class="line">METH_GETmethod GET HEADmatch HTTP GET or HEAD method</span><br><span class="line">METH_HEADmethod HEADmatch HTTP HEAD method</span><br><span class="line">METH_OPTIONSmethod OPTIONSmatch HTTP OPTIONS method</span><br><span class="line">METH_POSTmethod POSTmatch HTTP POST method</span><br><span class="line">METH_TRACEmethod TRACEmatch HTTP TRACE method</span><br><span class="line">RDP_COOKIEreq_rdp_cookie_cnt gt 0match presence of an RDP cookie</span><br><span class="line">REQ_CONTENTreq_len gt 0match data <span class="keyword">in</span> the request buffer</span><br><span class="line">TRUEalways_truealways match</span><br><span class="line">WAIT_ENDwait_end<span class="built_in">wait</span> <span class="keyword">for</span> end of content analysis</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy的ACL过滤器及自定义错误页&quot;&gt;&lt;a href=&quot;#HAproxy的ACL过滤器及自定义错误页&quot; class=&quot;headerlink&quot; title=&quot;HAproxy的ACL过滤器及自定义错误页&quot;&gt;&lt;/a&gt;HAproxy的ACL过滤器及自定义错误页&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/24/HAproxyACL/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>HAproxy日志配置及报文操作</title>
    <link href="https://daizhe.net.cn/2019/01/23/HAproxy%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%8A%A5%E6%96%87%E6%93%8D%E4%BD%9C/"/>
    <id>https://daizhe.net.cn/2019/01/23/HAproxy日志配置及报文操作/</id>
    <published>2019-01-23T12:49:55.592Z</published>
    <updated>2019-02-01T05:34:48.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy日志配置及报文操作"><a href="#HAproxy日志配置及报文操作" class="headerlink" title="HAproxy日志配置及报文操作"></a>HAproxy日志配置及报文操作</h1><p><img src="/2019/01/23/HAproxy日志配置及报文操作/标题.gif" alt=""><br><a id="more"></a></p><h2 id="一、配置HAProxy状态页"><a href="#一、配置HAProxy状态页" class="headerlink" title="一、配置HAProxy状态页"></a>一、配置HAProxy状态页</h2><h3 id="1-haproxy状态页面开启"><a href="#1-haproxy状态页面开启" class="headerlink" title="1.haproxy状态页面开启"></a>1.haproxy状态页面开启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">paproxy_server</span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">    listen stats</span><br><span class="line">    mode http</span><br><span class="line">    <span class="built_in">bind</span> 172.18.135.2:9999     <span class="comment">#默认监听的地址为0.0.0.0,最好不要监听本机的所有地址。监听的端口不要和现有的业务冲突</span></span><br><span class="line">    stats <span class="built_in">enable</span></span><br><span class="line">    <span class="built_in">log</span> global</span><br><span class="line">    stats uri     /haproxy-status       <span class="comment">#默认访问状态页面的uri（可以自己定义）</span></span><br><span class="line">    stats auth    haadmin:q1w2e3r4ys    <span class="comment">#默认访问uri的用户名和密码</span></span><br><span class="line">    stats auth    daizhe:123456        <span class="comment">#指定用户访问此uri提供的用户名和密码</span></span><br><span class="line">    stats realm HAPorxy\ Stats\ Page      <span class="comment">#设置用户访问uri时提示输入密码的提示信息</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    ~]<span class="comment"># systemctl restart haproxy</span></span><br></pre></td></tr></table></figure><p>web界面访问查看此状态页面</p><p><img src="/2019/01/23/HAproxy日志配置及报文操作/1.png" alt=""></p><p><img src="/2019/01/23/HAproxy日志配置及报文操作/2.png" alt=""></p><hr><h3 id="2-开启管理状态页面"><a href="#2-开启管理状态页面" class="headerlink" title="2.开启管理状态页面"></a>2.开启管理状态页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">    listen stats</span><br><span class="line">    mode http</span><br><span class="line">    <span class="built_in">bind</span> 172.18.135.2:9999</span><br><span class="line">    stats <span class="built_in">enable</span></span><br><span class="line">    <span class="built_in">log</span> global</span><br><span class="line">    stats uri     /haproxy-status</span><br><span class="line">    stats auth    haadmin:q1w2e3r4ys</span><br><span class="line">    stats auth    admin:123456</span><br><span class="line">    stats realm HAPorxy\ Stats\ Page</span><br><span class="line">    stats admin <span class="keyword">if</span> TRUE       <span class="comment">#如果登陆的是daizhe这个用户则打开状态管理页面（或者也可写为 stats admin if LOCAHOST 表示为如果访问的为本机的主机则允许验证账号授权登陆）</span></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart haproxy</span></span><br></pre></td></tr></table></figure><p>web界面访问查看此状态页面</p><p><img src="/2019/01/23/HAproxy日志配置及报文操作/3.png" alt=""></p><hr><h3 id="3-隐藏管理状态页面的haproxy的版本号"><a href="#3-隐藏管理状态页面的haproxy的版本号" class="headerlink" title="3.隐藏管理状态页面的haproxy的版本号"></a>3.隐藏管理状态页面的haproxy的版本号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">    listen stats</span><br><span class="line">    mode http</span><br><span class="line">    <span class="built_in">bind</span> 172.18.135.2:9999</span><br><span class="line">    stats <span class="built_in">enable</span></span><br><span class="line">    <span class="built_in">log</span> global</span><br><span class="line">    stats uri     /haproxy-status</span><br><span class="line">    stats auth    haadmin:q1w2e3r4ys</span><br><span class="line">    stats auth    admin:123456</span><br><span class="line">    stats realm HAPorxy\ Stats\ Page</span><br><span class="line">    stats admin <span class="keyword">if</span> TRUE      </span><br><span class="line">    stats hide-version  <span class="comment">#隐藏版本号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ~]<span class="comment"># systemctl restart haproxy</span></span><br></pre></td></tr></table></figure><p>web界面访问查看此状态页面</p><p><img src="/2019/01/23/HAproxy日志配置及报文操作/4.png" alt=""></p><hr><h2 id="二、HAproxy修改报文首部-http模式"><a href="#二、HAproxy修改报文首部-http模式" class="headerlink" title="二、HAproxy修改报文首部(http模式)"></a>二、HAproxy修改报文首部(http模式)</h2><ul><li><h4 id="在请求报文尾部添加指定首部"><a href="#在请求报文尾部添加指定首部" class="headerlink" title="在请求报文尾部添加指定首部"></a>在请求报文尾部添加指定首部</h4><ul><li><code>reqadd  &lt;string&gt; [{if | unless} &lt;cond&gt;]</code></li></ul></li><li><h4 id="在响应报文尾部添加指定首部"><a href="#在响应报文尾部添加指定首部" class="headerlink" title="在响应报文尾部添加指定首部"></a>在响应报文尾部添加指定首部</h4><ul><li><code>rspadd &lt;string&gt; [{if | unless} &lt;cond&gt;]</code><ul><li>示例：rspadd X-Via:\ HAPorxy    </li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">客户端中可以查看到响应是通过haproxy调度器调度响应的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listen web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy      <span class="comment">####</span></span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        option forwardfor</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 172.18.135.5:8080 cookie web1 check inter 2000 fall 3 rise 5</span><br><span class="line">        server 172.18.135.5 172.18.135.1:8080 cookie web2 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure><p><img src="/2019/01/23/HAproxy日志配置及报文操作/5.png" alt=""></p><ul><li><h4 id="从请求报文中删除匹配正则表达式的首部"><a href="#从请求报文中删除匹配正则表达式的首部" class="headerlink" title="从请求报文中删除匹配正则表达式的首部"></a>从请求报文中删除匹配正则表达式的首部</h4><ul><li><code>reqdel  &lt;search&gt; [{if | unless} &lt;cond&gt;]</code></li><li><code>reqidel &lt;search&gt; [{if | unless} &lt;cond&gt;] 不分大小写</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">删除响应报文中的server字段的信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listen web-port-80</span><br><span class="line">        mode http</span><br><span class="line">        rspadd X-Via:\ HAPorxy</span><br><span class="line">        rspdel Server:*</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        option forwardfor</span><br><span class="line">        cookie SERVER-COOKIE insert indirect nocache</span><br><span class="line">        server web1 172.18.135.5:8080 cookie web1 check inter 2000 fall 3 rise 5</span><br></pre></td></tr></table></figure><p><img src="/2019/01/23/HAproxy日志配置及报文操作/6.png" alt=""></p><ul><li><h4 id="从响应报文中删除匹配正则表达式的首部"><a href="#从响应报文中删除匹配正则表达式的首部" class="headerlink" title="从响应报文中删除匹配正则表达式的首部"></a>从响应报文中删除匹配正则表达式的首部</h4><ul><li><code>rspdel  &lt;search&gt; [{if | unless} &lt;cond&gt;]</code></li><li><code>rspidel &lt;search&gt; [{if | unless} &lt;cond&gt;]</code><ul><li>示例： rspidel  server.* #从相应报文删除server信息<ul><li>rspidel X-Powered-By:.*  #从响应报文删除X-Powered-By信息</li></ul></li></ul></li></ul></li></ul><h2 id="三、HAProxy-日志配置"><a href="#三、HAProxy-日志配置" class="headerlink" title="三、HAProxy 日志配置"></a>三、HAProxy 日志配置</h2><ul><li>在default配置项定义：<ul><li>log 127.0.0.1  local{1-7} info #基于syslog记录日志到指定设备，级别有(err、warning、info、debug)</li></ul></li></ul><p>范例：基于rsyslog配置收集haproxy日志信息(udp)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">开启haproxy服务器上的rsyslog功能</span><br><span class="line">     ~]<span class="comment"># vim /etc/rsyslog.conf </span></span><br><span class="line">    15~16行</span><br><span class="line">    <span class="variable">$ModLoad</span> imudp</span><br><span class="line">    <span class="variable">$UDPServerRun</span> 514</span><br><span class="line"></span><br><span class="line">    74行</span><br><span class="line">    local3.*    /var/<span class="built_in">log</span>/haproxy.log</span><br><span class="line"></span><br><span class="line">配置haproxy配置文件</span><br><span class="line">    ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">    global</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">log</span> 127.0.0.1 local3 info</span><br><span class="line"></span><br><span class="line">重启服务</span><br><span class="line">    ~]<span class="comment"># systemctl restart rsyslog haproxy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">客户访问后端web_server 查看haproxy日志</span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/23/HAproxy日志配置及报文操作/7.png" alt=""></p><p>范例：可以将haproxy日志格式使用tcp/http记录在rsyslog日志中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">配置HAProxy：</span><br><span class="line">listen  web_port</span><br><span class="line"> <span class="built_in">bind</span> 127.0.0.1:80</span><br><span class="line"> mode http</span><br><span class="line"> <span class="built_in">log</span> global</span><br><span class="line">option tcplog</span><br><span class="line"> server web1  127.0.0.1:8080  check inter 3000 fall 2 rise 5</span><br></pre></td></tr></table></figure></p><p>详细日志参考手册：<a href="http://cbonte.github.io/haproxy-dconv/1.8/configuration.html#8.1" target="_blank" rel="noopener">http://cbonte.github.io/haproxy-dconv/1.8/configuration.html#8.1</a></p><h2 id="四、自定义paproxy记录日志"><a href="#四、自定义paproxy记录日志" class="headerlink" title="四、自定义paproxy记录日志"></a>四、自定义paproxy记录日志</h2><ul><li><p>将特定信息记录在日志中</p><ul><li><code>capture cookie &lt;name&gt; len &lt;length&gt; #捕获请求和响应报文中的 cookie并记录日志</code></li><li><code>capture request header &lt;name&gt; len &lt;length&gt; #捕获请求报文中指定的首部内容和长度并记录日志</code></li><li><code>capture response header &lt;name&gt; len &lt;length&gt; #捕获响应报文中指定的内容和长度首部并记录日志</code></li></ul></li><li><p>示例：配置haproxy配置文件，注意配置字段和生效的位置（最好设置单独的listen中，仅对一组server生效）</p><ul><li>capture request  header Host len  256 </li><li>capture request header User-Agent len 512     <h2 id="五、压缩功能"><a href="#五、压缩功能" class="headerlink" title="五、压缩功能"></a>五、压缩功能</h2></li></ul></li><li>compression algo   #启用http协议中的压缩机制，常用算法有gzip deflate</li><li><p>compression type  #要压缩的类型</p></li><li><p>示例：</p><ul><li>compression algo gzip</li><li>compression type compression type text/plain text/html text/css text/xml text/javascript application/javascript</li></ul></li></ul><p><img src="/2019/01/23/HAproxy日志配置及报文操作/8.png" alt=""></p><h2 id="Web服务器状态监测"><a href="#Web服务器状态监测" class="headerlink" title="Web服务器状态监测"></a>Web服务器状态监测</h2><ul><li>option httpchk</li><li><code>option httpchk &lt;uri&gt;</code></li><li><code>option httpchk &lt;method&gt; &lt;uri&gt;</code></li><li><code>option httpchk &lt;method&gt; &lt;uri&gt; &lt;version&gt;</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">listen  web_prot_http_nodes</span><br><span class="line">    <span class="built_in">bind</span>  192.168.7.102:80</span><br><span class="line">    mode  http</span><br><span class="line">    <span class="built_in">log</span> global</span><br><span class="line">    option httpchk GET /wp-includes/js/jquery/jquery.js?ver=1.12.4 HTTP/1.0  <span class="comment">#基于指定URL</span></span><br><span class="line">    <span class="comment">#option httpchk HEAD /wp-includes/js/jquery/jquery.js?ver=1.12.4 HTTP/1.0\r\nHost:\ 192.168.7.102 #通过request获取的头部信息进行匹配进行健康检测</span></span><br><span class="line">     server 192.168.7.102  blogs.studylinux.net:80   check inter 3000 fall 3 rise 5</span><br><span class="line">     server 192.168.7.101 192.168.7.101:8080  cookie web1 check inter 3000 fall 3 rise 5</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy日志配置及报文操作&quot;&gt;&lt;a href=&quot;#HAproxy日志配置及报文操作&quot; class=&quot;headerlink&quot; title=&quot;HAproxy日志配置及报文操作&quot;&gt;&lt;/a&gt;HAproxy日志配置及报文操作&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/23/HAproxy日志配置及报文操作/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>HAproxy基于cookie会话保持</title>
    <link href="https://daizhe.net.cn/2019/01/23/HAproxy%E5%9F%BA%E4%BA%8Ecookie%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/"/>
    <id>https://daizhe.net.cn/2019/01/23/HAproxy基于cookie会话保持/</id>
    <published>2019-01-23T12:18:29.061Z</published>
    <updated>2019-01-23T12:54:56.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy基于cookie会话保持"><a href="#HAproxy基于cookie会话保持" class="headerlink" title="HAproxy基于cookie会话保持"></a>HAproxy基于cookie会话保持</h1><p><img src="/2019/01/23/HAproxy基于cookie会话保持/标题.gif" alt=""><br><a id="more"></a></p><h2 id="Cookie-配置"><a href="#Cookie-配置" class="headerlink" title="Cookie 配置"></a>Cookie 配置</h2><ul><li><p><code>cookie &lt;value&gt;：为当前server指定cookie值，实现基于cookie的会话黏性</code></p><ul><li><code>cookie &lt;name&gt; [ rewrite | insert | prefix ] [ indirect ] [ nocache ]  [ postonly ] [ preserve ] [ httponly ] [ secure ]  [ domain &lt;domain&gt; ]* [ maxidle &lt;idle&gt; ] [ maxlife &lt;life&gt; ]</code></li></ul></li><li><p><code>&lt;name&gt;：cookie名称，用于实现持久连接</code></p><ul><li>rewrite：重写</li><li>insert：插入</li><li>prefix：前缀</li><li>nocache：当client和hapoxy之间有缓存时，不缓存cookie</li></ul></li></ul><h2 id="范例：使用haproxy实现基于cookie会话保持（haproxy必须在http协议的模式下实现）"><a href="#范例：使用haproxy实现基于cookie会话保持（haproxy必须在http协议的模式下实现）" class="headerlink" title="范例：使用haproxy实现基于cookie会话保持（haproxy必须在http协议的模式下实现）"></a>范例：使用haproxy实现基于cookie会话保持（haproxy必须在http协议的模式下实现）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟httpd_server不直接对外服务，通过haproxy负载对外进程调度服务</span></span><br><span class="line"><span class="comment">#范例：使用haproxy实现基于cookie会话保持（haproxy必须在http协议的模式下实现）也彻底解决会话调度不均衡</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实验准备</span><br><span class="line">  四台主机：</span><br><span class="line">    haproxy_server :  yum install haproxy -y</span><br><span class="line">    httpd_serverA : yum install httpd -y</span><br><span class="line">    httpd_serverB : yum install httpd -y</span><br><span class="line">    windows_firefox</span><br><span class="line"></span><br><span class="line">配置httpd_server测试页面</span><br><span class="line">  httpd_serverA</span><br><span class="line">  ~]<span class="comment"># echo "172.18.135.1" &gt; /var/www/html/index.html</span></span><br><span class="line">  ~]<span class="comment"># systemctl start httpd</span></span><br><span class="line">  修改端口8080</span><br><span class="line"></span><br><span class="line">  httpd_serverB</span><br><span class="line">  ~]<span class="comment"># echo "172.18.135.5" &gt; /var/www/html/index.html</span></span><br><span class="line">  ~]<span class="comment"># systemctl start httpd</span></span><br><span class="line">  修改端口8080</span><br><span class="line"></span><br><span class="line">配置haproxy负载</span><br><span class="line">  ~]<span class="comment"># yum install haproxy -y</span></span><br><span class="line">  ~]<span class="comment"># cat  /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  global</span><br><span class="line">  maxconn 100000</span><br><span class="line">  chroot /usr/<span class="built_in">local</span>/haproxy</span><br><span class="line">  <span class="comment">#stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin</span></span><br><span class="line">  uid 1111</span><br><span class="line">  gid 1111</span><br><span class="line">  daemon</span><br><span class="line">  nbproc 4</span><br><span class="line">  cpu-map 1 0</span><br><span class="line">  cpu-map 2 1</span><br><span class="line">  pidfile /usr/<span class="built_in">local</span>/haproxy/run/haproxy.pid</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 info</span><br><span class="line"></span><br><span class="line">  defaults</span><br><span class="line">  option http-keep-alive</span><br><span class="line">  option  forwardfor</span><br><span class="line">  maxconn 100000</span><br><span class="line">  mode http</span><br><span class="line">  timeout connect 300000ms</span><br><span class="line">  timeout client  300000ms</span><br><span class="line">  timeout server  300000ms</span><br><span class="line"></span><br><span class="line">  listen stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:9999</span><br><span class="line">  stats <span class="built_in">enable</span></span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats auth    haadmin:q1w2e3r4ys</span><br><span class="line"></span><br><span class="line">  <span class="comment">#httpd_server基于cookie实现调度</span></span><br><span class="line">  listen web-port-80                  <span class="comment">#web-port-80指定的此分组的名称</span></span><br><span class="line">        mode http                     <span class="comment">#必须为http</span></span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        option forwardfor</span><br><span class="line">        cookie SERVER-COOKIE  insert indirect nocache   <span class="comment">#不缓存</span></span><br><span class="line">        server web1 172.18.135.5:8080 cookie web1 check inter 2000 fall 3 rise 5    <span class="comment"># 172.18.135.5为定义的主机的名称，172.18.135.5:8080 定义的后端的主机的地址及服务的端口</span></span><br><span class="line">        server 172.18.135.5 172.18.135.1:8080 cookie web2 check inter 3000 fall 3 rise 5        <span class="comment">#cookie    指定cookie的值，实现区分不同的web_server,也可在请求的头部看到此信息</span></span><br><span class="line"></span><br><span class="line">  启动查看端口 </span><br><span class="line">    ~]<span class="comment"># systemctl start haproxy</span></span><br><span class="line">    ~]<span class="comment"># ss -tnl</span></span><br><span class="line">   9999   </span><br><span class="line">    172.18.135.2:80</span><br></pre></td></tr></table></figure><ul><li>windows_firefox测试</li></ul><p>客户端访问查看请求的头部（请求不跳转，实现基于cookie的会话保持和负载不均衡的情况）<br><img src="/2019/01/23/HAproxy基于cookie会话保持/1.png" alt=""></p><ul><li>也可以使用curl命令验证</li></ul><p><img src="/2019/01/23/HAproxy基于cookie会话保持/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy基于cookie会话保持&quot;&gt;&lt;a href=&quot;#HAproxy基于cookie会话保持&quot; class=&quot;headerlink&quot; title=&quot;HAproxy基于cookie会话保持&quot;&gt;&lt;/a&gt;HAproxy基于cookie会话保持&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/23/HAproxy基于cookie会话保持/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
  <entry>
    <title>HAproxy IP地址透传</title>
    <link href="https://daizhe.net.cn/2019/01/22/HAproxyIP%E5%9C%B0%E5%9D%80%E9%80%8F%E4%BC%A0/"/>
    <id>https://daizhe.net.cn/2019/01/22/HAproxyIP地址透传/</id>
    <published>2019-01-22T10:00:18.113Z</published>
    <updated>2019-01-23T12:18:58.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAproxy-IP地址透传（七层-四层）"><a href="#HAproxy-IP地址透传（七层-四层）" class="headerlink" title="HAproxy IP地址透传（七层/四层）"></a>HAproxy IP地址透传（七层/四层）</h1><p><img src="/2019/01/22/HAproxyIP地址透传/标题.gif" alt=""><br><a id="more"></a></p><ul><li>四层负载<ul><li>mode http</li></ul></li><li>七层负载<ul><li>mode tcp</li></ul></li></ul><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">```bash</span><br><span class="line"><span class="comment">#如果客户端访问的地址为公网地址上的一个网站，如果客户端用的是NAT方式出去上网的，则后端的nginx查看的日志信息源ip地址应该是客户端通过NAT方式出去的地址</span></span><br><span class="line"></span><br><span class="line">实验准备：</span><br><span class="line">  haproxy_server   172.18.135.2模拟私网地址</span><br><span class="line">  nginx_server     172.18.135.5模拟公网地址</span><br><span class="line">  windows_firefox  172.18.88.88模拟客户端浏览器</span><br><span class="line"></span><br><span class="line">模拟：</span><br><span class="line">  haproxy_server和windows_firefox  为私网地址</span><br><span class="line">  nginx_server 为公网地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#windows_firefox通过haporxy_server的地址透传（NAT）,实现windows_firefox通过访问haporxy_server的地址从跳转至私网地址nginx_server服务器上进行访问</span></span><br></pre></td></tr></table></figure><h3 id="七层地址透传-http"><a href="#七层地址透传-http" class="headerlink" title="七层地址透传(http)"></a>七层地址透传(http)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">haproxy_server</span><br><span class="line">配置haproxy实现透传</span><br><span class="line">  ~]<span class="comment"># yum install haproxy -y</span></span><br><span class="line">  ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line">  <span class="comment">#七层地址透传</span></span><br><span class="line">  listen web-port-80</span><br><span class="line">        mode http         <span class="comment">#此透传仅支持http协议，在tcp协议上不影响haproxy启动，但是nginx日志中会写出记录不到真实访问的地址</span></span><br><span class="line">        option forwardfor   <span class="comment">#如果后端服务器需要获得客户端的真实IP需要配置此参数，将可以从HttpHeader中获得客户端IP</span></span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80    <span class="comment">#此地址为调度器的地址</span></span><br><span class="line">        server web1 172.18.135.5:80 weight 2 check inter 2000 fall 3 rise 5   <span class="comment">#web1为定义后端主机的名称</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line">  ~]<span class="comment"># curl -I 172.18.135.2:80</span></span><br><span class="line"></span><br><span class="line">windown_firefox客户端浏览器访问haproxy_server地址</span><br><span class="line">  http://172.18.135.2/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nginx_server</span><br><span class="line">查看web服务器的访问日志</span><br><span class="line">  ~]<span class="comment"># yum install nginx -y</span></span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf     #定义nginx的日志文件为json格式输出，并可以查看到真实的客户端的地址（这里值得是windows_firefox）</span></span><br><span class="line">  http &#123;</span><br><span class="line">  log_format json <span class="string">'&#123;"@timestamp":"$time_iso8601",'</span></span><br><span class="line">                 <span class="string">'"host":"$server_addr",'</span></span><br><span class="line">                 <span class="string">'"clientip":"$remote_addr",'</span></span><br><span class="line">                 <span class="string">'"size":$body_bytes_sent,'</span></span><br><span class="line">                 <span class="string">'"responsetime":$request_time,'</span></span><br><span class="line">                 <span class="string">'"upstreamtime":"$upstream_response_time",'</span></span><br><span class="line">                 <span class="string">'"upstreamhost":"$upstream_addr",'</span></span><br><span class="line">                 <span class="string">'"http_host":"$host",'</span></span><br><span class="line">                 <span class="string">'"url":"$uri",'</span></span><br><span class="line">                 <span class="string">'"referer":"$http_referer",'</span></span><br><span class="line">                 <span class="string">'"agent":"$http_user_agent",'</span></span><br><span class="line">                 <span class="string">'"xff":"$http_x_forwarded_for",'</span></span><br><span class="line">                 <span class="string">'"status":"$status"&#125;'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access_json  json;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl start nginx  </span></span><br><span class="line">   ~]<span class="comment"># cat /var/log/nginx/access_json </span></span><br><span class="line">   &#123;<span class="string">"@timestamp"</span>:<span class="string">"2019-01-22T22:00:54+08:00"</span>,<span class="string">"host"</span>:<span class="string">"172.18.135.5"</span>,<span class="string">"clientip"</span>:<span class="string">"172.18.135.2"</span>,<span class="string">"size"</span>:0,<span class="string">"responsetime"</span>:0.000,<span class="string">"upstreamtime"</span>:<span class="string">"-"</span>,<span class="string">"upstreamhost"</span>:<span class="string">"-"</span>,<span class="string">"http_host"</span>:<span class="string">"172.18.135.2"</span>,<span class="string">"url"</span>:<span class="string">"/poweredby.png"</span>,<span class="string">"referer"</span>:<span class="string">"http://172.18.135.2/"</span>,<span class="string">"agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0"</span>,<span class="string">"xff"</span>:<span class="string">"172.18.88.88"</span>,<span class="string">"status"</span>:<span class="string">"304"</span>&#125;   <span class="comment">#可以查看到真实访问的windiws_firefox的真实地址</span></span><br></pre></td></tr></table></figure><p><img src="/2019/01/22/HAproxyIP地址透传/七层.png" alt=""></p><h3 id="四层地址透传-tcp"><a href="#四层地址透传-tcp" class="headerlink" title="四层地址透传(tcp)"></a>四层地址透传(tcp)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">haproxy_server</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">  <span class="comment">#httpd_server调度</span></span><br><span class="line">  listen web-port-80</span><br><span class="line">        mode tcp</span><br><span class="line">        <span class="built_in">bind</span> 172.18.135.2:80</span><br><span class="line">        option forwardfor</span><br><span class="line">        server web1 172.18.135.5:80 send-proxy weight 2 check inter 2000 fall 3 rise 5</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart haproxy</span></span><br><span class="line"></span><br><span class="line">nginx_server</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">      server &#123;</span><br><span class="line">        listen       80 proxy_protocol;   <span class="comment">#TCP获取客户端真实IP日志格式</span></span><br><span class="line">  <span class="comment">#        listen       [::]:80 default_server;</span></span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ~]<span class="comment"># systemctl restart nginx </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">客户端访查看nginx日志</span><br></pre></td></tr></table></figure><p><img src="/2019/01/22/HAproxyIP地址透传/四层.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HAproxy-IP地址透传（七层-四层）&quot;&gt;&lt;a href=&quot;#HAproxy-IP地址透传（七层-四层）&quot; class=&quot;headerlink&quot; title=&quot;HAproxy IP地址透传（七层/四层）&quot;&gt;&lt;/a&gt;HAproxy IP地址透传（七层/四层）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/22/HAproxyIP地址透传/标题.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/categories/HAproxy/"/>
    
    
      <category term="HAproxy" scheme="https://daizhe.net.cn/tags/HAproxy/"/>
    
  </entry>
  
</feed>
