<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[kvm虚拟机基础应用]]></title>
    <url>%2F2018%2F12%2F25%2Fkvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[kvm虚拟机基础应用 kvm: Kernel-based Virtual Machine Qumranet公司 –&gt; RedHat (1) X86_64 (2) HVM: Intel VT AMD AMD-v KVM的组件： 两类组件： (kvm.ko)/dev/kvm：工作为hypervisor，在用户空间可通过系统调用ioctl()与内核中的kvm模块交互，从而完成虚拟机的创建、启动、停止、删除等各种管理功能； qemu-kvm进程：工作于用户空间，用于实现IO设备模拟；用于实现一个虚拟机实例； KVM模块load进内存之后，系统的运行模式： 内核模式：GuestOS执行IO类的操作时，或其它的特殊指令操作时的模式；它也被称为“Guest-Kernel”模式；用户模式：Host OS的用户空间，用于代为GuestOS发出IO请求； 来宾模式：GuestOS的用户模式；所有的非IO类请求； 运行中的一个kvm虚拟机就是一个qemu-kvm进程，运行qemu-kvm程序并传递给它合适的选项及参数即能完成虚拟机启动，终止此进程即能关闭虚拟机； 安装使用KVM123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131安装kvm的主机上：判断CPU是否支持硬件虚拟化： [root@centos7 ~]# grep -i -E '(vmx|svm|lm)' /proc/cpuinfo cpu型号： vmx：Intel VT-x svm：AMD AMD-v lm:64位cpu加载kvm模块使得内核支持kvm,并判断是否成功加载此模块 [root@centos7 ~]# modprobe kvm [root@centos7 ~]# lsmod | grep kvm kvm_intel 174841 0 kvm 578518 1 kvm_intel irqbypass 13503 1 kvm [root@centos7 ~]# file /dev/kvm （字符设备） /dev/kvm: character special安装qemu-kvm,使用户空间具有控制工具 [root@centos7 ~]# yum install qemu-kvm -y [root@centos7 ~]# rpm -ql qemu-kvm /usr/libexec/qemu-kvm 命令行工具被放在了非PATH变量中，红帽防止用户手动创建虚拟主机。此工具很底层使用virt-manager管理kvm(libvirt-daemon-kvm守护进程工具 qemu-kvm virt-manager图形化工具 libvirt库) [root@centos7 ~]# yum install libvirt-daemon-kvm qemu-kvm virt-manager libvirt -y （因为已经安装图形化界面的管理工具，确保宿主机上已经安装图像化相关的库 yum groupinstall GNOME Desktop）如果宿主机上已经安装有图像化相关的库则启动libvirt守护进程 [root@centos7 ~]# systemctl start libvirtdlibvirtd安装好默认仅提供了一个net网络创建桥接网络 将物理网卡当交换及使用 将软交换机当物理网卡使用创建物理桥（交换机） [root@centos7 ~]# cd /etc/sysconfig/network-scripts/ [root@centos7 network-scripts]# cp ifcfg-ens37 ifcfg-br0配置网卡的配置文件，使br0当网卡使用，将ens37当交换机使用 [root@centos7 network-scripts]# vim ifcfg-ens37 HWADDR=00:0C:29:14:4D:6C TYPE=Ethernet BROWSER_ONLY=no BOOTPROTO=none DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=no NAME=ens37 DEVICE=ens37 BRIDGE=br0 ONBOOT=yes [root@centos7 network-scripts]# vim ifcfg-br0 NAME=br0 DEVICE=br0 TYPE=Bridge PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=none IPADDR=172.18.135.1 PREFIX=24 GATEWAY=172.18.0.1 DNS1=8.8.8.8 DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6_FAILURE_FATAL=no IPV6_PRIVACY=no ONBOOT=yes [root@centos7 network-scripts]# systemctl restart network 此时br0已经是网卡了，ens37变成了交换机 [root@centos7 network-scripts]# ifconfig br0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.18.135.1 netmask 255.255.255.0 broadcast 172.18.135.255 inet6 fe80::20c:29ff:fe14:4d6c prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:0c:29:14:4d:6c txqueuelen 1000 (Ethernet) RX packets 590 bytes 75531 (73.7 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 53 bytes 8801 (8.5 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ens37: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 ether 00:0c:29:14:4d:6c txqueuelen 1000 (Ethernet) RX packets 7333 bytes 809500 (790.5 KiB) RX errors 0 dropped 2 overruns 0 frame 0 TX packets 1275 bytes 194949 (190.3 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0------------------------------------------------------------------------------------------------------------------------远程连接安装kvm的主机一下操作在远程连接的主机上操作 查看网卡已经多了一个virbr0b设备，次接口是libvirtd自动生成的net模式类型的接口 [root@centos7 ~]# ssh -X 安装kvm的主机地址 [root@centos7 ~]# systemctl start libvirtd [root@centos7 ~]# ifconfig br0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.18.135.1 netmask 255.255.255.0 broadcast 172.18.135.255 inet6 fe80::20c:29ff:fe14:4d6c prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:0c:29:14:4d:6c txqueuelen 1000 (Ethernet) RX packets 3006 bytes 1312927 (1.2 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 412 bytes 58640 (57.2 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ens37: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 ether 00:0c:29:14:4d:6c txqueuelen 1000 (Ethernet) RX packets 18644 bytes 3281398 (3.1 MiB) RX errors 0 dropped 28 overruns 0 frame 0 TX packets 1827 bytes 281257 (274.6 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 1000 (Local Loopback) RX packets 312 bytes 32472 (31.7 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 312 bytes 32472 (31.7 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt; mtu 1500 inet 192.168.122.1 netmask 255.255.255.0 broadcast 192.168.122.255 ether 52:54:00:ff:0b:1f txqueuelen 1000 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0检查libvirtd程序是否启动，级运行virt-manager图形化 [root@centos7 ~]# systemctl status libvirtd [root@centos7 ~]# virt-manager 以下操作在远程远程连接的主机上使用pxe安装环境 使用本地的镜像（导入现有磁盘映像）123456789[root@centos7 ~]# lscirros-0.3.0-x86_64-disk.img[root@centos7 ~]# mkdir /vms[root@centos7 ~]# mv cirros-0.3.0-x86_64-disk.img /vms/[root@centos7 ~]# cd /vms/[root@centos7 vms]# lscirros-0.3.0-x86_64-disk.img[root@centos7 vms]# cp cirros-0.3.0-x86_64-disk.img pc1.img[root@centos7 vms]# cp cirros-0.3.0-x86_64-disk.img pc2.img 点击Browse Local本地浏览]]></content>
      <categories>
        <category>linux服务</category>
      </categories>
      <tags>
        <tag>kvm虚拟机基础应用</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F12%2F22%2F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[企业网络架构介绍 网络: 多个终端设备 网络传输介质设备实现通讯 局域网：最小的网络、本地、公司 广域网：不通的局域网连接 城域网：比广域网小，例如：一个城市 无线网（AP） CCNA CCNP 企业网络远程互联 企业网络组网不受地域限制，可以通过各种远程互联技术把分布在不同的地域的网络的网络连接在一起 ipsu mpls vpn 专线 广域网：逻辑的层次划分 小型企业组网：扁平 大型网络组网：层次 思想： 业务 冗余 层次-安全 传输介质介绍 通讯网络除了包含通讯设备的本身之外，还包含连接这些设备的传输介质，如同线缆、双绞线、和光纤等，不同的传输介质具有不用的特征，这些特性直接影响到通讯诸多方面，如线路编码方式、传输速度和传输距离等。 路由 交换机 传输介质：连接设备的线缆 网线 光线 两个终端，用一条能承载数据传输的物理介质（也成为传输介质），连接起来，组成了一个最简单的网络。 介质 光猫：光纤设置转换为网络设备进入网络 白色：单模光纤 黄色：多模光纤 共享式网络中可能会出现信号冲突现象 CSMA/CD: 载波侦听多路访问/冲突检测技术 工作原理：先听先发，边听边发，冲突避让，等待重发。 以太网的最大包长和最小包长 最大包长1518byte,其中三层数据1500byte（称为MTU）只是一个规定而言 最小包长64byte 原因：如果A主机发送的帧很小，很快完成帧的发送，而两台冲突主机相差很远，在主机A发送的帧传输到B的前一刻，B开始发送帧，这样，当A的帧到达B时，B检测到冲突，于是发送冲突信号。假如在B冲突信号传输到A之前，A的帧已经发送完毕，那么A将检测不到冲突而误认为已经发送成功，因此必须有最小包长的限制。 两种双工模式都支持双向数据传输 冲突与：半双工模式 分层模型及以太网帧结构 不同的协议栈用于定义和管理不同的网络的数据转发规则 什么是协议 为了使数据可以在网络上从源传递到目标地址，网络上所有设备需要“讲”相同的语言 数据通讯协议的定义 决定数据的格式和传输的一组规则和一组惯例 网络通讯的过程很复杂 数据以电子信号的形式穿越介质到达正确的计算机，然后转换为最初的形式，以便接收者可以阅读 为了降低网络设计的复杂性，将协议进行了分层设计 分层设计的意义 通讯服务层的模块设计可相对独立于具有的通讯路线和通讯接口的差别 而通信服务层的模块设计又可相对独立具体用户应用的要求不同 简化了相关的网络操作，提供了不不同的厂商之间的兼容性；促进了标准化工作，结构上进行了分层；易于学习和操作 各个层次独立，一层的变化不会影响到邻层 OSI参考模型 国际标准化组织ISO于1984年提出了OSI RM 。OSI参考模型很快成了计算机网络的基础模型 OSI参考模型具有的优点：简化了相关的网络操作，提供了不同的厂商之间的兼容性；促进了标准化工作；结构上进行了分层；易于学习和操作 OSI参考模型各个层次的功能如下： 网络层：在设备之间传输比特流，规定了电平、速度和断缆针脚 数据链路层：将比特流组合成了字节，再将字节组合成帧，使用链路层地址（以太网使用MAC地址）来访问介质，并进行排差错检测 网络层：提供逻辑地址，供路由确定路径 传输层：提供面向连接或者非面向连接的数据传递以及进行排差错检测 会话层：负责建、管理和终止表示层实体之间的通讯会话。该层的通信由不同的设备中的应用程序之间的服务请求和响应组成（通信设备可能存在多个会话） 表示层：提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能够被另一个系统的应用层识别（数据表、加密、图片、文档、文字） 应用层：OSI参考模型中最靠近用户的一层，为应用程序提供网络服务 OSI层次设计的理念 建立七层模型的主要目的使为解决异种网络互连时所遇到的兼容性问题 它的优点：将服务、接口和协议这三个概念明确地区分开来 服务：某一层为上一层提供什么功能 接口：上层如何使用下层的服务 协议：如何实现本层的服务 这样各层之间具有很强的独立性，互联网络中各尸体采用什么样的协议时没有限制的，只要向上提供形同的服务并且不改变相邻层的接口就可以了]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F12%2F19%2Fnfs%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[title: ftptags: linux服务categories: NFS服务器date: top: NFS服务 NFS：Network File System 网络文件系统，基于内核的文件系统。Sun公司 开发，通过使用NFS，用户和程序可以像访问本地文件一样访问远端系统上的 文件，基于RPC（Remote Procedure Call Protocol远程过程调用）实现 RPC采用C/S模式。客户机请求程序调用进程发送一个有进程参数的调用信息 到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用 信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发 送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信 息，获得进程结果，然后调用执行继续进行 NFS优势：节省本地存储空间，将常用的数据,如home目录,存放在NFS服务 器上且可以通过网络访问，本地终端将可减少自身存储空间的使用 12345678910111213常用系统的驱动查看模块[root@centos7 ~]# locate xfs.ko/usr/lib/modules/3.10.0-862.el7.x86_64/kernel/fs/xfs/xfs.ko.xz[root@centos7 ~]# ls /usr/lib/modules/3.10.0-862.el7.x86_64/kernel/fs/binfmt_misc.ko.xz cifs ext4 gfs2 mbcache.ko.xz nls udfbtrfs cramfs fat isofs nfs overlayfs xfscachefiles dlm fscache jbd2 nfs_common pstoreceph exofs fuse lockd nfsd squashfslinux内核默认已经安装nfs文件系统，已经加载驱动模块[root@centos7 ~]# locate nfs.ko/usr/lib/modules/3.10.0-862.el7.x86_64/kernel/drivers/xen/xenfs/xenfs.ko.xz/usr/lib/modules/3.10.0-862.el7.x86_64/kernel/fs/nfs/nfs.ko.xz NFS文件系统 NFS工作原理 NFS各个版本的对比s NFS服务介绍软件包：nfs-utils（并非服务器包时文件系统即工具）Kernel支持:nfs.ko端口：2049(nfsd), 其它端口由portmap(111)分配配置文件：/etc/exports,/etc/exports.d/*.exportsCentOS7不支持同一目录同时用nfs和samba共享，因为使用锁机制不同相关软件包:rpcbind（必须rpcbind， 服务如果不可用则nfs服务也不可用），tcp_wrappersCentOS6开始portmap进程由rpcbind代替NFS服务主要进程：&ensp;&ensp;rpc.nfsd 最主要的NFS进程，管理客户端是否可登录&ensp;&ensp;rpc.mountd 挂载和卸载NFS文件系统，包括权限管理&ensp;&ensp;rpc.lockd 非必要，管理文件锁，避免同时写出错&ensp;&ensp;rpc.statd 非必要，检查文件一致性，可修复文件日志：/var/lib/nfs/ 范例：查看nfs对应的端口123456[root@centos7 ~]# rpcinfo -p program vers proto port service 100000 4 tcp 111 portmapper 100000 3 tcp 111 portmapper此服务使用的随机端口比较多，所以此服务一般不会跨网络使用，最好在局域网内使用 范例：配置防火墙，将随机端口绑死，实现跨网络12345678910配置防火墙，开放NFS服务 配置NFS使用固定端口 vim /etc/sysconfig/nfs RQUOTAD_PORT=875 LOCKD_TCPPORT=32803 LOCKD_UDPPORT=32769 MOUNTD_PORT=892 STATD_PORT=662 STATD_OUTGOING_PORT=2020 防火墙除开放上述端口，还需开放TCP和UDP的111和2049共4个端 范例：实现共享文件夹1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677服务端：创建共享的目录 [root@centos7 ~]# mkdir /data/a [root@centos7 ~]# mkdir /data/b编辑服务器的配置文件（此配置配置文件是系统的基本文件，此文件可以定义共享的目录的策略） [root@centos7 ~]# rpm -qf /etc/exports setup-2.8.71-9.el7.noarch [root@centos7 ~]# vim /etc/exports （*代表所有人可以访问） /data/a * 生效配置文件（提示我们没有配置策略使用默认的配置策略，sync直接写磁盘，不放buffer） [root@centos7 ~]# exportfs -r exportfs: No options for /data/a *: suggest *(sync) to avoid warning客户端： 创建挂载点，使用服务端共享的目录进行挂载 [root@centos7 ~]# mkdir /data/nfs1 /data/nfs2 [root@centos7 ~]# showmount -e 192.168.52.179 Export list for 192.168.52.179: /data/a * 挂载指向服务端的地址 [root@centos7 ~]# mount 192.168.52.179:/data/a /data/nfs1 [root@centos7 ~]# df 192.168.52.179:/data/a 20961280 33024 20928256 1% /data/nfs1服务端在共享的目录中创建文件，客户端查看是否同步 [root@centos7 ~]# touch /data/a/a.txt [root@centos7 ~]# ls /data/nfs1/ a.txt 查看共享默认的权限：只读属性 [root@centos7 ~]# touch /data/nfs1/b.txt touch: cannot touch ‘/data/nfs1/b.txt’: Read-only file system 客户端查看挂载属性：默认使用的挂载版本为vers=4 [root@centos7 ~]# mount 192.168.52.179:/data/a on /data/nfs1 type nfs4 (rw,relatime,vers=4.1,rsize=262144,wsize=262144,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.52.179,local_lock=none,addr=192.168.52.179) 客户端挂载指定版本挂载 [root@centos7 ~]# mount -o vers=3 192.168.52.179:/data/a /data/nfs1 [root@centos7 ~]# mount | tail -n1 192.168.52.179:/data/a on /data/nfs1 type nfs (rw,relatime,vers=3,rsize=262144,wsize=262144,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=192.168.52.179,mountvers=3,mountport=20048,mountproto=udp,local_lock=none,addr=192.168.52.179)服务端修改挂载的目录权限 [root@centos7 ~]# vim /etc/exports /data/a *(sync,ro) 同步，只读 /data/b *(rw) 可读可写 生效并查看权限 [root@centos7 ~]# exportfs -r [root@centos7 ~]# exportfs -v （root_squash压榨root权限 no_all_squash普通用户不压榨） /data/a &lt;world&gt;(ro,sync,wdelay,hide,no_subtree_check,sec=sys,secure,root_squash,no_all_squash) /data/b &lt;world&gt;(rw,sync,wdelay,hide,no_subtree_check,sec=sys,secure,root_squash,no_all_squash)客户端挂载:挂载也是有读写权限的但是还是不可以创建文件 [root@centos7 ~]# mkdir /data/nfs2/ [root@centos7 ~]# mount 192.168.52.179:/data/b /data/nfs2/ [root@centos7 ~]# touch /data/nfs2/a.txt touch: cannot touch ‘/data/nfs2/a.txt’: Permission denied 因为客户端访问服务端的共享目录的身份默认的是以nfsnoboby身份服务端授权设置acl [root@centos7 ~]# setfacl -m u:nfsnobody:rwx /data/b/客户端测试 [root@centos7 ~]# touch /data/nfs2/a.txt [root@centos7 ~]# ll !$ ll /data/nfs2/a.txt -rw-r--r--. 1 nfsnobody nfsnobody 0 Dec 19 20:17 /data/nfs2/a.tx客户端使用客户端的普通用户，在服务端共享的目录中创建文件显示权限不足（因为客户端创建的用户为普通用户，如果有同名用户则显示相同的用户，如果没有则显示客户端的用户的id）(映射成id相同的人，普通用户不压榨) 导出的文件系统的格式：&ensp;&ensp;/dir 主机1(opt1,opt2) 主机2(opt1,opt2)… #开始为注释 主机格式：&ensp;&ensp;/单个主机：ipv4，ipv6，FQDN&ensp;&ensp;/IP networks：两种掩码格式均支持&ensp;&ensp;/&ensp;&ensp;/172.18.0.0/255.255.0.0&ensp;&ensp;/&ensp;&ensp;/172.18.0.0/16&ensp;&ensp;/wildcards：主机名通配，例如.magedu.com，IP不可以&ensp;&ensp;/netgroups：NIS域的主机组，@group_name&ensp;&ensp;/anonymous：表示使用通配所有客户端 nfs配置文件每个条目指定目录导出到的哪些主机，及相关的权限和选项&ensp;&ensp;默认选项：(ro,sync,root_squash,no_all_squash)&ensp;&ensp;ro,rw 只读和读写 • async 异步，数据变化后不立即写磁盘，性能高&ensp;&ensp;sync（1.0.0后为默认）同步，数据在请求时立即写入共享&ensp;&ensp;no_all_squash （默认）保留共享文件的UID和GID&ensp;&ensp;all_squash 所有远程用户(包括root)都变成nfsnobody&ensp;&ensp;root_squash （默认）远程root映射为nfsnobody,UID为65534，早期版本 是4294967294 (nfsnobody)&ensp;&ensp;no_root_squash 远程root映射成root用户&ensp;&ensp;anonuid和anongid 指明匿名用户映射为特定用户UID和组GID，而非 nfsnobody,可配合all_squash使用 1234567不压榨远程root用户的权限 [root@centos7 ~]# vim /etc/exports /data/a *(sync,ro) /data/b *(rw,no_root_squash) [root@centos7 ~]# exportfs -v /data/a &lt;world&gt;(ro,sync,wdelay,hide,no_subtree_check,sec=sys,secure,root_squash,no_all_squash) /data/b &lt;world&gt;(rw,sync,wdelay,hide,no_subtree_check,sec=sys,secure,root_squash,no_all_squash) NFS工具rpcinfo&ensp;&ensp;rpcinfo -p hostname&ensp;&ensp;rpcinfo –s hostname 查看RPC注册程序 exportfs&ensp;&ensp;–v 查看本机所有NFS共享&ensp;&ensp;–r 重读配置文件，并共享目录&ensp;&ensp;–a 输出本机所有共享&ensp;&ensp;–au 停止本机所有共享 showmount -e hostnamemount.nfs 挂载工具NFSv4支持通过挂载NFS服务器的共享“根”，从而浏览NFS服务器上的共享 目录列表&ensp;&ensp;mount nfsserver:/ /mnt/nfs 客户端NFS挂载基于安全考虑，建议使用nosuid,nodev,noexec挂载选项NFS相关的挂载选项：&ensp;&ensp;fg（默认）前台挂载，bg后台挂载&ensp;&ensp;hard（默认）持续请求，soft 非持续请求&ensp;&ensp;intr 和hard配合，请求可中断&ensp;&ensp;rsize和wsize 一次读和写数据最大字节数，rsize=32768&ensp;&ensp;_netdev 无网络不挂载示例：&ensp;&ensp;mount -o rw,nosuid,fg,hard,intr 172.16.0.1:/testdir /mnt/nfs/开机挂载:/etc/fstab&ensp;&ensp;172.16.0.1:/public /mnt/nfs nfs defaults 0 0 自动挂载可使用autofs按需要挂载NFS共享，在空闲时自动卸载由autofs包提供系统管理器指定由/etc/auto.master自动挂载器守护进程控制的挂载点自动挂载监视器访问这些目录并按要求挂载文件系统文件系统在失活的指定间隔5分钟后会自动卸载为所有导出到网络中的NFS启用特殊匹配 -host 至“browse”参看帮助：man 5 autofs支持含通配符的目录名&ensp;&ensp;* server:/export/&amp; 直接匹配直接匹配包括绝对路径名称不会影响本地目录结构示例：&ensp;&ensp;/etc/auto.master:&ensp;&ensp;/- /etc/auto.direct &ensp;&ensp;/etc/auto.direct:&ensp;&ensp;/foo server1:/export/foo&ensp;&ensp;/user/local/ server1:/usr/local]]></content>
  </entry>
  <entry>
    <title><![CDATA[linux防火墙]]></title>
    <url>%2F2018%2F03%2F06%2Flinux%E9%98%B2%E7%81%AB%E5%A2%99%2F</url>
    <content type="text"><![CDATA[linux防火墙 本章内容安全技术 入侵检测与管理系统（Intrusion Detection Systems）：特点是不阻断任何网络 访问，量化、定位来自内外网络的威胁情况，主要以提供报告和事后监督为主， 提供有针对性的指导措施和安全决策依据。一般采用旁路部署方式 入侵防御系统（Intrusion Prevention System）：以透明模式工作，分析数据包 的内容如：溢出攻击、拒绝服务攻击、木马、蠕虫、系统漏洞等进行准确的分析 判断，在判定为攻击行为后立即予以阻断，主动而有效的保护网络的安全，一般 采用在线部署方式 防火墙（ FireWall ）：隔离功能，工作在网络或主机边缘，对进出网络或主机的 数据包基于一定的规则检查，并在匹配某规则时由规则定义的行为进行处理的一 组功能的组件，基本上的实现都是默认情况下关闭所有的通过型访问，只开放允 许访问的策略(防范非授权网络) linux操作系统的空间：内核空间和用户空间端口：进程地址 防火墙的分类防火墙的分类 主机防火墙：服务范围为当前主机 网络防火墙：服务范围为防火墙一侧的局域网 硬件防火墙：在专用硬件级别实现部分功能的防火墙；另一个部分功能基于软件 实现，Checkpoint,NetScreen 软件防火墙：运行于通用硬件平台之上的防火墙的应用软件 网络层防火墙：OSI模型下四层 应用层防火墙/代理服务器：代理网关，OSI模型七层 网络型防火墙网络层防火墙 包过滤防火墙 网络层对数据包进行选择，选择的依据是系统内设置的过滤逻辑，被称为访问控制 列表（ACL），通过检查数据流中每个数据的源地址，目的地址，所用端口号和协议 状态等因素，或他们的组合来确定是否允许该数据包通过 优点：对用户来说透明，处理速度快且易于维护 缺点：无法检查应用层数据，如病毒等 应用层防火墙应用层防火墙/代理服务型防火墙（Proxy Service） 将所有跨越防火墙的网络通信链路分为两段 内外网用户的访问都是通过代理服务器上的“链接”来实现 优点：在应用层对数据进行检查，比较安全 缺点：增加防火墙的负载 现实生产环境中所使用的防火墙一般都是二者结合体&ensp;&ensp;即先检查网络数据，通过之后再送到应用层去检查 iptables的基本认识Netfilter组件&ensp;&ensp;内核空间，集成在linux内核中&ensp;&ensp;扩展各种网络服务的结构化底层框架&ensp;&ensp;内核中选取五个位置放了五个hook(勾子) function(INPUT、OUTPUT、 FORWARD、PREROUTING、POSTROUTING)，而这五个hook function 向用户开放，用户可以通过一个命令工具（iptables）向其写入规则&ensp;&ensp;由信息过滤表（table）组成，包含控制IP包处理的规则集（rules），规则 被分组放在链（chain）上 三种报文流向：netfilter内核级别的框架，，人是不可和内核打交道，使用用户空间的工具iptables，规则编辑器，内核级的系统级别netfilter的调用接口，将写的规则送到内核中的钩子hook上直接生效，直接送到内存中，说明主机关机则规则就没有了，所以想永久生效，可以放在内核启动时初始化时读取到的文件中，或者在或者启动完后，自动执行某个命令或者启动某个服务来调用（即刻生效，但是不会永久有效）路由前：PREROUTING流入：INPUT流出：OUTPUT转发：FORWARD路由后：POSTROUTING &ensp;&ensp;流入本机：PREROUTING --&gt; INPUT--&gt;用户空间进程&ensp;&ensp;流出本机：用户空间进程 --&gt;OUTPUT--&gt; POSTROUTING&ensp;&ensp;转发：PREROUTING --&gt; FORWARD --&gt; POSTROUTING linux早期没有防火墙的，仿照unix的发行版的OpenBSD，著名的以安全为目标的发行版OpenBSD：纯软件，内核级只负责传输层一下级检测实现，进行工作和防护 定制防火墙规则：黑名单、白名单&ensp;&ensp;黑名单适用于知道改拒绝谁&ensp;&ensp;百名单高效的仅授权可以连接的 iptables的基本认识防火墙工具iptables&ensp;&ensp;命令行工具，工作在用户空间&ensp;&ensp;用来编写规则，写好的规则被送往netfilter，告诉内核如何去处理信息包 firewalld&ensp;&ensp;CentOS 7 引入了新的前端管理工具&ensp;&ensp;管理工具：&ensp;&ensp;&ensp;&ensp;firewall-cmd 命令行&ensp;&ensp;&ensp;&ensp;firewall-config 图形 历史ipfw -&gt; ipchains -&gt; iptables -&gt; nftables(rhel8) 主机级别防火墙：INPUT---OUTPUTS网络级别防火墙：FROWARD NAT：网络地址转换 iptables： 四个功能：table filter:过滤 nat:地址转换 mangle:报文修改，fwmark raw:关闭连接追踪 Centos：使用iptables的方式 netfilter:内核框架（framework） syscall:系统调用接口，iptables命令行工具，管理规则（服务化的管理工具） firewalld:守护进程，firewall-cmd(默认安装，但是尽量不使用) 禁用firewalld123456[root@centos7 ~]# systemctl stop firewalld[root@centos7 ~]# systemctl disable firewalldRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.[root@centos7 ~]# systemctl is-enabled firewallddisabled 报文流向： 到本机内部：prerouting–&gt;input 由本机发现：output–&gt;postrouting 转发：prerouting –&gt;forward–&gt;postrouting tables&lt;--&gt;CHANS链: filter: INPUT,PORWARD,OUTPUT nat: PREROUTING,INPUT,OUTPUT,POSTROUTING mangle: PREROUTING,INPUT,FOREARD,OUTPUT,POSTROUIING raw: PREROUTING,OUTPUT 查看各表中的链的规则：123456789[root@centos7 ~]# iptables -t filter -nLChain INPUT (policy ACCEPT)target prot opt source destination Chain FORWARD (policy ACCEPT)target prot opt source destination Chain OUTPUT (policy ACCEPT)target prot opt source destination Netfilter表和链对应的关系 数据包过滤匹配流程 命令的使用格式123456789101112131415161718192021222324252627282930SYNOPSIS iptables [-t table] &#123;-A|-C|-D&#125; chain rule-specification ip6tables [-t table] &#123;-A|-C|-D&#125; chain rule-specification iptables [-t table] -I chain [rulenum] rule-specifica‐ tion iptables [-t table] -R chain rulenum rule-specification iptables [-t table] -D chain rulenum iptables [-t table] -S [chain [rulenum]] iptables [-t table] &#123;-F|-L|-Z&#125; [chain [rulenum]] [options...] iptables [-t table] -N chain iptables [-t table] -X [chain] iptables [-t table] -P chain target iptables [-t table] -E old-chain-name new-chain-name rule-specification = [matches...] [target] match = -m matchname [per-match-options] target = -j targetname [per-target-options] iptables [-t tables,如果不指定则代表使用默认的filter] SUBCMMAND子命令 chain [rulenum规则号码] [rule-spce] rule-specification=[matches匹配条件][-j target处理动作] CRUD:增删改查（指定多个规则隐含的是与关系，符合所有的条件才是满足定义的条件的） 子命令： 管理规则： -A ：append,尾部追加 -I ：inset,插入 -D ：删除 -R ：替换 管理链 -N ：new,新增加一条链 -X : 删除一条自定义、空的，不可有规则、引用计数为0的链 -E : rename 改自定义引用技术为0的链 -P ： policy,设置链的默认策略 -F ： flush,清空 -Z ： zero,置零，计数器归零 iptables的每条规则和每个链都有专用的两个计数器：pkts规则匹配到的报个数计数器，bytes报文体积计数器kbytes 查看 -L -n : 以数字显示主机的地址和端口 -v : -vv : 显示详细的信息 -x : exact，避免单位的换算显示精准的信息 –line-numbers : 显示行号 链 内置链 自定义链 匹配条件 检查报文 TCP或UDP首部：源端口，目标端口 FSM:有限状态机 IP首部：sip,dip（源ip和目标ip） MAC首部:MAC地址 匹配条件 通用匹配 [!] -s,–sip,–spurce-ip:报文的源地址,其值可以是ip或者是网络地址，不可使离散的网络（!为取反） [!] -d,–dip,–destination:报文的目标地址 -i,–in-interface : 表示从哪个网卡进入（PREROUTING，INPUT,FORWARD） -o,–out-interface : 表示从哪个网卡出去(,OUTPUT,POSTRUTING,FORWARD) -p protocol:四层协议，tcp,udp,icmp 扩展匹配 隐式扩展 -p tcp :隐含 -m tcp [!] –source-port ,–sport port [:port] : 匹配报文中的传输层的源端口,连续的端口范围，22，21：22 [!] –destination-port ,–dport poet [:port] :匹配报文中传输层的目标端口 [!] –tcp-flags mask comp SYN,ACK,RST,，FIN,URG,PSH mask:需要检查的标志位列表，以逗号分隔； comp:必须为1的标志列表，余下的出现在mask列表中的标志位则必须为0 范例:-tcp-flags SYN,ACK,FIN,RST SYN 表示检查报文tcp首部，syn为1，其余的为0，代表只检查源报文来的第一次握手 [!] –syn : tcp发送报文三次握手的第一次（相当于：–tcp-flags SYN,SCK,FINRST SYN） -p udp : 隐含了-m udp: [!] –source-port ,–sport port[:port] :匹配报文中传输层的源端口 [!] –destination-port,–dport port[:port] :匹配报文中传输层的目标端口 -p icmp(互联网控制协议) ： 隐含了-m udp: [!] –lcmp-type {type[/code]|typename} 8 : echo-request回显请求 0 : echo-reply 回显应答 显示扩展 ； 必须使用-m选项指出matchname(模块),有的match可能存在专用的选项 1.matchname扩展 以离散的或连续的方式定义多端口匹配条件 [!] –source-ports,–sports port[,port|,port:port]…:指定多个源端口,逗号隔开最多制定15个 [!] –destnation-ports,–dports port[,port|,port:port]…:制定多个目标端口 [!] –ports port[,port|,port:port]…:指定多个端口 2.iprange扩展 以连续的ip地址范围指明连续的多地址匹配条件 3.set扩展 依赖于ipset命令行工具 set存在的类型： hash:net : 网络地址的集合 hash:ip ：目标ip地址 使用方式： 先创建集合 ：ipset create NAMETYPE 向集合中添加元素 ：ipset add NAMETYPE 4.string扩展 对报文的应用层数据做字符串匹配检测 [!] –string pattern : 要检测的字符串模式 [!] –hex-string pattern : 要检测的字符串模式，16进制编码 –algo {bm|kmp} 5.time扩展 根据报文到达的时间与指定的时间范围进行匹配度检测 –datestart YYYY[-MM[-DD]Thh[:mm]:ss]]]]] : 起始日期时间 –datestop YYYY[-MM[-DD]Thh[:mm]:ss]]]]] : 结束日期时间 –timestart hh:mm[:ss] –timestop hh:mm[:ss] [!] –monthdays day[,day…] ： 每月几号的时间 [!] –weekdays day[,day…] ： 每周几的时间 –kerneltz : 使用内核中的配置的时区 6、connlimit扩展 根据每客户端IP做并发连接数匹配； –connlimit-upto n：连接数数量小于等于n，此时应该允许； –connlimit-above n：连接数数量大于n，此时应该拒绝； ~]# iptables -A INPUT -d 172.16.100.67 -p tcp –dport 23 -m connlimit –connlimit-upto 2 -j ACCEPT 7、limit扩展 基于收发报文的速率进行匹配； –limit rate[/second|/minute|/hour|/day]：平均速率 –limit-burst number：峰值速率 8、state扩展 状态检测；连接追踪机制（conntrack）； INVALID：无法识别的状态； ESTABLISHED：已建立的连接； NEW：新连接； RELATED：相关联的连接； UNTRACKED：未追踪的连接； nf_conntrack内核模块； 追踪到的连接：/proc/net/nf_conntrack文件中； 能追踪的最大连接数量定义在：/proc/sys/net/nf_conntrack_max 此值可自行定义，建议必要时调整到足够大； 不同的协议的连接追踪的时长： /proc/sys/net/netfilter/ [!] –state STATE 如何开放被模式的ftp服务： (1) 装载追踪ftp协议的模块； # modprobe nf_conntrack_ftp - (2) 放行命令连接 - ~] # iptables -A INPUT -d 172.16.100.67 -p tcp -m state --state ESTABLISHED -j ACCEPT - ~] # iptables -A INPUT -d 172.16.100.67 -p tcp --dport 21 -m state --state NEW -j ACCEPT - (3) 放行数据连接 - ~] iptables -A INPUT -d 172.16.100.67 -p tcp -m state --state RELATED -j ACCEPT 处理动作target DROP : 丢弃 REJECT : 拒绝 ACCEPT : 接受 RETURN : 无匹配的链的时候自动调回 REDIRECT : 重定向 SANT : 源地址转换 DNAT: 目标地址转换 MASQUERADE : 地址伪装 LOG : 日志 自定义链 管理机制 ： 两不兼容，最好不要并行 firewalld : firewalld-cmd iptables ： iptables-save,iptables-restore yum install iptables-services1234567891011每一个内核就是一个扩展 xt开头[root@centos7 ~]# cd /lib/modules/3.10.0-862.el7.x86_64/kernel/net/netfilter/[root@centos7 netfilter]# lsipset xt_connlimit.ko.xzipvs xt_connmark.ko.xznf_conntrack_amanda.ko.xz xt_CONNSECMARK.ko.xznf_conntrack_broadcast.ko.xz xt_conntrack.ko.xznf_conntrack_ftp.ko.xz xt_cpu.ko.xznf_conntrack_h323.ko.xz xt_CT.ko.xznf_conntrack_irc.ko.xz xt_dccp.ko.xznf_conntrack.ko.xz xt_devgroup.ko.xz 1234567891011121314151617181920212223242526272829查看某表中的规则[root@centos7 ~]# iptables -t filter -vnL将某表中的INPUT链计数器置零[root@centos7 ~]# iptables -t filter -Z INPUT规则显示详情[root@centos7 ~]# iptables -t filter -vnL pkts(报文数) bytes(字节数) target（目标） prot（协议） opt（选项） in（报文流入的接口） out（报文流出的接口） source（源地址） destination（目标地址） 显示iptables表的本文和自己的精确的显示以及行号的显示[root@centos7 ~]# iptables -t filter -vxnL --line-numbers-N 自定义规则链（见名知意）[root@centos7 ~]# iptables -N web_rules[root@centos7 ~]# iptables -vnLChain web_rules (0 references) 0个引用 pkts bytes target prot opt in out source destination -E 修改自定义的规则链名称（改名通常适用于修改自定义规则连0引用的规则链）[root@centos7 ~]# iptables -E web_rules cifs_rules-X 删除自定义的规则链：计数为0，若不为0 可以将主链中的调用删除再进行清空删除[root@centos7 ~]# iptables -F cifs_rules[root@centos7 ~]# iptables -X cifs_rules内部规则： Chain OUTPUT (policy ACCEPT 1 packets, 356 bytes)具有规则链和接收器 范例：使得iptables定义的规则永久有效12345678命令：内核中定义的规则标准输出至屏幕 [root@centos7 ~]# iptables-save 将标准的输入重定向到文件中 [root@centos7 ~]# iptables-save &gt; /data/iptables.txt 模拟清空防火墙规则 [root@centos7 ~]# iptables -F 还原防火墙的规则 [root@centos7 ~]# iptables-restore /data/iptables.txt 范例：如何将定义的防火墙规则开机自动生效123456yum install iptables-services -y服务方式管理的iptables[root@centos7 ~]# /usr/libexec/iptables/iptables.init restrtUsage: iptables &#123;start|stop|reload|restart|condrestart|status|panic|save&#125; 显示扩展1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461：multiport显示扩展：匹配多个源、目标端口 定义入栈规则 [root@centos7 ~]# iptables -I INPUT -p tcp -m multiport --dports 21:22,80,139,445 定义出栈规则 [root@centos7 ~]# iptables -I OUTPUT -p tcp -m multiport --sports 21:22,80,139,445 删除入栈规则的第#条 [root@centos7 ~]# iptables -D INPUT #2：iprange扩展：匹配ip地址的连续范围（仅开放给有限的地址去怕ping） 入栈 [root@centos7 ~]# iptables -I INPUT 4 -p icmp --icmp-type 8 -m iprange --src-range 192.168.10.10-192.168.10.20 -j ACCEPT 出栈 [root@centos7 ~]# iptables -I OUTPUT 4 -p icmp --icmp-type 0 -m iprange --dst-range 192.168.10.10-192.168.10.20 -j ACCEPT3：set扩展:非连续的ip地址，人为定义ip地址集后续调用 安装 [root@centos7 ~]# yum install ipset -y 查看帮助用法 ipset -h 创建集合ip哈希表 [root@centos7 ~]# ipset create pinghosts hash:ip (如果为多个网段hash:net) [root@centos7 ~]# ipset list Name: pinghosts Type: hash:ip Revision: 1 Header: family inet hashsize 1024 maxelem 65536 Size in memory: 16528 References: 0 Members: 向集合中添加允许的主机地址 [root@centos7 ~]# ipset add pinghosts 192.168.10.10 [root@centos7 ~]# ipset add pinghosts 192.168.10.20 [root@centos7 ~]# ipset list Name: pinghosts Type: hash:ip Revision: 1 Header: family inet hashsize 1024 maxelem 65536 Size in memory: 16560 References: 0 Members: 192.168.10.20 192.168.10.10 设置规则允许集合表中的主机对本机进行ping 入栈 [root@centos7 ~]# iptables -I INPUT 4 -p icmp --icmp-type 8 -m set --match-set pinghosts src -j ACCEPT 出栈 [root@centos7 ~]# iptables -I OUTPUT 4 -p icmp --icmp-type 0 -m set --match-set pinghosts dst -j ACCEPT [root@centos7 ~]# iptables -vnL4：string扩展：对报文的应用层数据做字符串匹配检测 假设web网页中的敏感字体进行字符串匹配检测 入栈 [root@centos7 ~]# iptables -I INPUT -m string --string "敏感字" --algo bm -j REJECT 出栈 [root@centos7 ~]# iptables -I OUTPUT -m srting --string "敏感字" --algo bm -j REJECT多个扩展可一起使用，与的关系，满足所有的条件time扩展 ： 根据报文到达的时间与指定的时间范围进行匹配度检测 [root@centos7 ~]# iptables -I INPUT 5 -p icmp --icmp-type 8 -m set --match-set pinghosts src -m time --timestart 08:00:00 --timestop 14:00:00 --weekdays Tue,Thu,Sat --kerneltz -j ACCEPT5：connlimit扩展：并发连接数限制 根据每个客户端ip做并发连接数数量匹配，可防止CC攻击。 --connlimit-upto # :连接的数量小于等于#时匹配 --connlimit-above # : 连接的数量大于#时匹配 通常分别与默认的拒绝或允许策略配合使用（默认的意思并非默认规则，而是定义的规则已经有允许，在此基础上做连接数量限制，定义在已经有的允许的规则之前） 限制ssh连接本机的连接数限制 [root@centos7 ~]# iptables -I INPUT 2 -p tcp --dport 22 -m connlimit --connlimit-above 2 -j REJECT6：limit扩展 基于收发报文的速度做匹配(报文传输速率限制) 令牌桶过滤器 --limit # [/second|/minute|/hour|/day] --limit-burst number 允许别人ping自己仅能按照特定的速率进行ping 出去的速率无需控制，仅控制本机进来的速率 限制ping速率为每3秒钟一个，限制突发速率为5个 [root@centos7 ~]# iptables -I INPUT -p icmp --icmmp-type 8 -s 192.168.52.177 -d 192.168.52.182 -m limit --limit 20/minute --limit-burst 5 -j ACCEPT7：state状态扩展 根据“连续追踪机制”去检查连接的状态，较消耗资源 - conntrack机制：追踪本机上的请求和响应之间的关系 状态有如下几种： - NEW：新发出的请求，连接追踪信息库中不存在此链接的相关信息条目，因此，将其识别为第一次触发的请求（新人） - ESTABLISHED:NEW状态之后，连接追踪信息库中为其建立的条目失效之前期间内所进行的通讯状态（熟人） - RELATED:新发起的但与已有连接相关的连接，如：ftp协议中的数据连接与命令连接之间的关系（熟人的熟人） - INVALID:无效的连接，如flag标记不正确（识别不出的连接） - UNTRACKED:未进行的追踪的连接，如raw表中关闭追踪（未追踪的） - SNAT:源地址转换 - DNAT:目标地址转换 示例： iptables -A INPUT -d 172.16.1.10 -p tcp -m multiport --dports 22,80 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A OUTPUT -s 172.16.1.10 -p tcp -m multiport --sports 22,80 -m state --state ESTABLISHED -j ACCEPT 已经追踪到的并记录下来的连接信息库 /proc/net/nf_conntrack 调整连接追踪功能所能够容纳的最大连接数量 /proc/sys/net/nf_conntrack_max 永久生效修改的所能够容纳的最大的连接数量 [root@centos7 ~]# vim /etc/sysctl.d/nf_conntrack_max.conf net.nf_conntrack_max = 10000000 [root@centos7 ~]# sysctl -p /etc/sysctl.d/nf_conntrack_max.conf net.nf_conntrack_max = 100000 [root@centos7 ~]# cat /proc/sys/net/nf_conntrack_max 100000 不同的协议的连接追踪时长 /proc/sys/net/netfilter/ 注意：CentOS7 需要加载模块： modprobe nf_conntrack范例： 允许所有已经连结果的请求入栈出栈 [root@centos7 ~]# iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT [root@centos7 ~]# iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT [root@centos7 ~]# iptables -A INPUT -p tcp -m multiport --dports 21:22,80 -m state --state NEW -j ACCEPT [root@centos7 ~]# iptables -A OUTPUT ! -i lo -j REJECT [root@centos7 ~]# iptables -A OUTPUT ! -o lo -j REJECT 服务端开放客户端ftp服务，客户端主动访问服务端，服务端数据端口为随机端口，在客户端添加规则 [root@centos7 ~]# iptables -I INPUT 2 -p tcp -m state --state RELATED -j ACCEPT 实现ftp RELATED 需要手动载入一个模块 [root@centos7 ~]# modprobe nf_conntrack [root@centos7 ~]# modinfo nf_conntrack [root@centos7 ~]# lsmod | grep nf_conntrack 手动载入的模块，重启后失效，大量的ftp服务就会被肆意的放行，如何让ftp连接状态iptabless开机继续生效（自动装入模块） 方法1： [root@centos7 ~]# vim /etc/sysconfig/iptables-config 第六行 IPTABLES_MODULES="nf-conntrack_ftp" 方法2： [root@centos7 ~]# vim /etc/sysconfig/modules/nf_conntrack.mudules #!/bin/bash /sbin/modprobe nf_conntrack_ftp [root@centos7 ~]# chmod +x /etc/sysconfig/modules/nf_conntrack.mudules 前提是已经安装启动iptables.services [root@centos7 ~]# systemctl restart iptables [root@centos7 ~]# systemctl enable iptables]]></content>
      <categories>
        <category>iptables防火墙</category>
      </categories>
      <tags>
        <tag>iptables防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[旧事-大好河山]]></title>
    <url>%2F2017%2F10%2F01%2F%E6%97%A7%E4%BA%8B-%E5%A4%A7%E5%A5%BD%E6%B2%B3%E5%B1%B1%2F</url>
    <content type="text"><![CDATA[输入密码,PC:Enter查看,Phone:输入法换行查看. U2FsdGVkX18wkQaZTCzw9ORcUObxGRJMs2hR53LRtljpKVfipyzUL2pyZ/lzd+tA9hCqQKhtUlnuPRGWar7ZF/EXr8HP77Whu3FEayxgBxQFCFhwGxrJwXNIkZ0w91KF0SKCkC1oq41o191S2eeVY/Glg14BWdokJwyw1fzm3yJzVsobyuNnd21msezQ1VQmXXOEDN/ilolwcvpRU6On9Xte0lBJJ00tYK5FYHF8zeKO6FilJgTXc2LV+DQKLyxhUjd4MWxxHVvHF9j0YtbB2eIZZALafM97fx4ykNKwuRyQSCJaa6pzpHJVVeyj+Lvhs6IJ+BDXPpwq7LQ4N9inahbYLb8cC90jftksCKPRWLkIE+KAsFYuK2WWD5xiVtpr]]></content>
      <categories>
        <category>旧事，杂记</category>
      </categories>
      <tags>
        <tag>旧事，杂记</tag>
      </tags>
  </entry>
</search>
